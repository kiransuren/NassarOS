
X-CUBE-SPN2_F401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f4c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a54  080040e0  080040e0  000140e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004b34  08004b34  00014b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004b38  08004b38  00014b38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000368  20000000  08004b3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000270  20000368  08004ea4  00020368  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200005d8  08004ea4  000205d8  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020368  2**0
                  CONTENTS, READONLY
  9 .debug_info   00014c19  00000000  00000000  00020398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002c7c  00000000  00000000  00034fb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00008dd6  00000000  00000000  00037c2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000b98  00000000  00000000  00040a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000b38  00000000  00000000  000415a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00010d8c  00000000  00000000  000420d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00012e5f  00000000  00000000  00052e64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00060910  00000000  00000000  00065cc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  000c65d3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002070  00000000  00000000  000c6624  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000368 	.word	0x20000368
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080040c8 	.word	0x080040c8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000036c 	.word	0x2000036c
 80001d0:	080040c8 	.word	0x080040c8

080001d4 <L6470_ResetAppCmdPkg>:
{
  uint8_t id;
  
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
  {
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 80001d4:	2300      	movs	r3, #0
 80001d6:	7003      	strb	r3, [r0, #0]
    (pL6470_AppCmdPkg+id)->p1=0;
 80001d8:	6043      	str	r3, [r0, #4]
    (pL6470_AppCmdPkg+id)->p2=0;
 80001da:	6083      	str	r3, [r0, #8]
    (pL6470_AppCmdPkg+id)->p3=0;
 80001dc:	60c3      	str	r3, [r0, #12]
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 80001de:	7403      	strb	r3, [r0, #16]
    (pL6470_AppCmdPkg+id)->p1=0;
 80001e0:	6143      	str	r3, [r0, #20]
    (pL6470_AppCmdPkg+id)->p2=0;
 80001e2:	6183      	str	r3, [r0, #24]
    (pL6470_AppCmdPkg+id)->p3=0;
 80001e4:	61c3      	str	r3, [r0, #28]
  }
}
 80001e6:	4770      	bx	lr

080001e8 <L6470_PrepareAppCmdPkg>:
  * @param  p1                The 1st parameter (if it is not needed it will be not considered).
  * @param  p2                The 2nd parameter (if it is not needed it will be not considered).
  * @param  p3                The 3rd parameter (if it is not needed it will be not considered).
  */
void L6470_PrepareAppCmdPkg(uint8_t L6470_Id, sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
{
 80001e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80001ea:	4604      	mov	r4, r0
 80001ec:	460d      	mov	r5, r1
 80001ee:	4617      	mov	r7, r2
 80001f0:	461e      	mov	r6, r3
  if(!L6470_DaisyChain_HalfPrepared)
 80001f2:	4b0a      	ldr	r3, [pc, #40]	; (800021c <L6470_PrepareAppCmdPkg+0x34>)
 80001f4:	781b      	ldrb	r3, [r3, #0]
 80001f6:	b14b      	cbz	r3, 800020c <L6470_PrepareAppCmdPkg+0x24>
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 80001f8:	0123      	lsls	r3, r4, #4
 80001fa:	eb05 1004 	add.w	r0, r5, r4, lsl #4
 80001fe:	54ef      	strb	r7, [r5, r3]
  (pL6470_AppCmdPkg+L6470_Id)->p1 = p1;
 8000200:	6046      	str	r6, [r0, #4]
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 8000202:	9b06      	ldr	r3, [sp, #24]
 8000204:	6083      	str	r3, [r0, #8]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 8000206:	9b07      	ldr	r3, [sp, #28]
 8000208:	60c3      	str	r3, [r0, #12]
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
    L6470_ResetAppCmdPkg(pL6470_AppCmdPkg);
  }
  
  L6470_FillAppCmdPkg(L6470_Id, pL6470_AppCmdPkg, L6470_AppCmdId, p1, p2, p3);
}
 800020a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 800020c:	4b03      	ldr	r3, [pc, #12]	; (800021c <L6470_PrepareAppCmdPkg+0x34>)
 800020e:	2201      	movs	r2, #1
 8000210:	701a      	strb	r2, [r3, #0]
    L6470_ResetAppCmdPkg(pL6470_AppCmdPkg);
 8000212:	4608      	mov	r0, r1
 8000214:	f7ff ffde 	bl	80001d4 <L6470_ResetAppCmdPkg>
 8000218:	e7ee      	b.n	80001f8 <L6470_PrepareAppCmdPkg+0x10>
 800021a:	bf00      	nop
 800021c:	20000384 	.word	0x20000384

08000220 <L6470_PrepareSetParam>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareSetParam(uint8_t L6470_Id, eL6470_RegId_t L6470_RegId, uint32_t Value)
{
 8000220:	b500      	push	{lr}
 8000222:	b083      	sub	sp, #12
 8000224:	460b      	mov	r3, r1
    L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 8000226:	2100      	movs	r1, #0
 8000228:	9101      	str	r1, [sp, #4]
 800022a:	9200      	str	r2, [sp, #0]
 800022c:	2201      	movs	r2, #1
 800022e:	4903      	ldr	r1, [pc, #12]	; (800023c <L6470_PrepareSetParam+0x1c>)
 8000230:	f7ff ffda 	bl	80001e8 <L6470_PrepareAppCmdPkg>
}
 8000234:	b003      	add	sp, #12
 8000236:	f85d fb04 	ldr.w	pc, [sp], #4
 800023a:	bf00      	nop
 800023c:	20000388 	.word	0x20000388

08000240 <L6470_PrepareGetParam>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareGetParam(uint8_t L6470_Id, eL6470_RegId_t L6470_RegId)
{
 8000240:	b500      	push	{lr}
 8000242:	b083      	sub	sp, #12
 8000244:	460b      	mov	r3, r1
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 8000246:	2200      	movs	r2, #0
 8000248:	9201      	str	r2, [sp, #4]
 800024a:	9200      	str	r2, [sp, #0]
 800024c:	2202      	movs	r2, #2
 800024e:	4903      	ldr	r1, [pc, #12]	; (800025c <L6470_PrepareGetParam+0x1c>)
 8000250:	f7ff ffca 	bl	80001e8 <L6470_PrepareAppCmdPkg>
}
 8000254:	b003      	add	sp, #12
 8000256:	f85d fb04 	ldr.w	pc, [sp], #4
 800025a:	bf00      	nop
 800025c:	20000388 	.word	0x20000388

08000260 <L6470_PrepareRun>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareRun(uint8_t L6470_Id, eL6470_DirId_t L6470_DirId, uint32_t Speed)
{
 8000260:	b500      	push	{lr}
 8000262:	b083      	sub	sp, #12
 8000264:	460b      	mov	r3, r1
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 8000266:	2100      	movs	r1, #0
 8000268:	9101      	str	r1, [sp, #4]
 800026a:	9200      	str	r2, [sp, #0]
 800026c:	2203      	movs	r2, #3
 800026e:	4903      	ldr	r1, [pc, #12]	; (800027c <L6470_PrepareRun+0x1c>)
 8000270:	f7ff ffba 	bl	80001e8 <L6470_PrepareAppCmdPkg>
}
 8000274:	b003      	add	sp, #12
 8000276:	f85d fb04 	ldr.w	pc, [sp], #4
 800027a:	bf00      	nop
 800027c:	20000388 	.word	0x20000388

08000280 <L6470_PrepareStepClock>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareStepClock(uint8_t L6470_Id, eL6470_DirId_t L6470_DirId)
{
 8000280:	b500      	push	{lr}
 8000282:	b083      	sub	sp, #12
 8000284:	460b      	mov	r3, r1
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 8000286:	2200      	movs	r2, #0
 8000288:	9201      	str	r2, [sp, #4]
 800028a:	9200      	str	r2, [sp, #0]
 800028c:	2204      	movs	r2, #4
 800028e:	4903      	ldr	r1, [pc, #12]	; (800029c <L6470_PrepareStepClock+0x1c>)
 8000290:	f7ff ffaa 	bl	80001e8 <L6470_PrepareAppCmdPkg>
}
 8000294:	b003      	add	sp, #12
 8000296:	f85d fb04 	ldr.w	pc, [sp], #4
 800029a:	bf00      	nop
 800029c:	20000388 	.word	0x20000388

080002a0 <L6470_PrepareMove>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareMove(uint8_t L6470_Id, eL6470_DirId_t L6470_DirId, uint32_t N_Step)
{
 80002a0:	b500      	push	{lr}
 80002a2:	b083      	sub	sp, #12
 80002a4:	460b      	mov	r3, r1
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 80002a6:	2100      	movs	r1, #0
 80002a8:	9101      	str	r1, [sp, #4]
 80002aa:	9200      	str	r2, [sp, #0]
 80002ac:	2205      	movs	r2, #5
 80002ae:	4903      	ldr	r1, [pc, #12]	; (80002bc <L6470_PrepareMove+0x1c>)
 80002b0:	f7ff ff9a 	bl	80001e8 <L6470_PrepareAppCmdPkg>
}
 80002b4:	b003      	add	sp, #12
 80002b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80002ba:	bf00      	nop
 80002bc:	20000388 	.word	0x20000388

080002c0 <L6470_PrepareGoTo>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareGoTo(uint8_t L6470_Id, uint32_t AbsPos)
{
 80002c0:	b500      	push	{lr}
 80002c2:	b083      	sub	sp, #12
 80002c4:	460b      	mov	r3, r1
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 80002c6:	2200      	movs	r2, #0
 80002c8:	9201      	str	r2, [sp, #4]
 80002ca:	9200      	str	r2, [sp, #0]
 80002cc:	2206      	movs	r2, #6
 80002ce:	4903      	ldr	r1, [pc, #12]	; (80002dc <L6470_PrepareGoTo+0x1c>)
 80002d0:	f7ff ff8a 	bl	80001e8 <L6470_PrepareAppCmdPkg>
}
 80002d4:	b003      	add	sp, #12
 80002d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80002da:	bf00      	nop
 80002dc:	20000388 	.word	0x20000388

080002e0 <L6470_PrepareGoToDir>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareGoToDir(uint8_t L6470_Id, eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
{
 80002e0:	b500      	push	{lr}
 80002e2:	b083      	sub	sp, #12
 80002e4:	460b      	mov	r3, r1
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 80002e6:	2100      	movs	r1, #0
 80002e8:	9101      	str	r1, [sp, #4]
 80002ea:	9200      	str	r2, [sp, #0]
 80002ec:	2207      	movs	r2, #7
 80002ee:	4903      	ldr	r1, [pc, #12]	; (80002fc <L6470_PrepareGoToDir+0x1c>)
 80002f0:	f7ff ff7a 	bl	80001e8 <L6470_PrepareAppCmdPkg>
}
 80002f4:	b003      	add	sp, #12
 80002f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80002fa:	bf00      	nop
 80002fc:	20000388 	.word	0x20000388

08000300 <L6470_PrepareGoUntil>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareGoUntil(uint8_t L6470_Id, eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
{
 8000300:	b500      	push	{lr}
 8000302:	b083      	sub	sp, #12
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 8000304:	9301      	str	r3, [sp, #4]
 8000306:	9200      	str	r2, [sp, #0]
 8000308:	460b      	mov	r3, r1
 800030a:	2208      	movs	r2, #8
 800030c:	4902      	ldr	r1, [pc, #8]	; (8000318 <L6470_PrepareGoUntil+0x18>)
 800030e:	f7ff ff6b 	bl	80001e8 <L6470_PrepareAppCmdPkg>
}
 8000312:	b003      	add	sp, #12
 8000314:	f85d fb04 	ldr.w	pc, [sp], #4
 8000318:	20000388 	.word	0x20000388

0800031c <L6470_PrepareReleaseSW>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareReleaseSW(uint8_t L6470_Id, eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
{
 800031c:	b500      	push	{lr}
 800031e:	b083      	sub	sp, #12
 8000320:	460b      	mov	r3, r1
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 8000322:	2100      	movs	r1, #0
 8000324:	9101      	str	r1, [sp, #4]
 8000326:	9200      	str	r2, [sp, #0]
 8000328:	2209      	movs	r2, #9
 800032a:	4903      	ldr	r1, [pc, #12]	; (8000338 <L6470_PrepareReleaseSW+0x1c>)
 800032c:	f7ff ff5c 	bl	80001e8 <L6470_PrepareAppCmdPkg>
}
 8000330:	b003      	add	sp, #12
 8000332:	f85d fb04 	ldr.w	pc, [sp], #4
 8000336:	bf00      	nop
 8000338:	20000388 	.word	0x20000388

0800033c <L6470_PrepareGoHome>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareGoHome(uint8_t L6470_Id)
{
 800033c:	b500      	push	{lr}
 800033e:	b083      	sub	sp, #12
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 8000340:	2300      	movs	r3, #0
 8000342:	9301      	str	r3, [sp, #4]
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	220a      	movs	r2, #10
 8000348:	4902      	ldr	r1, [pc, #8]	; (8000354 <L6470_PrepareGoHome+0x18>)
 800034a:	f7ff ff4d 	bl	80001e8 <L6470_PrepareAppCmdPkg>
}
 800034e:	b003      	add	sp, #12
 8000350:	f85d fb04 	ldr.w	pc, [sp], #4
 8000354:	20000388 	.word	0x20000388

08000358 <L6470_PrepareGoMark>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareGoMark(uint8_t L6470_Id)
{
 8000358:	b500      	push	{lr}
 800035a:	b083      	sub	sp, #12
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 800035c:	2300      	movs	r3, #0
 800035e:	9301      	str	r3, [sp, #4]
 8000360:	9300      	str	r3, [sp, #0]
 8000362:	220b      	movs	r2, #11
 8000364:	4902      	ldr	r1, [pc, #8]	; (8000370 <L6470_PrepareGoMark+0x18>)
 8000366:	f7ff ff3f 	bl	80001e8 <L6470_PrepareAppCmdPkg>
}
 800036a:	b003      	add	sp, #12
 800036c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000370:	20000388 	.word	0x20000388

08000374 <L6470_PrepareResetPos>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareResetPos(uint8_t L6470_Id)
{
 8000374:	b500      	push	{lr}
 8000376:	b083      	sub	sp, #12
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 8000378:	2300      	movs	r3, #0
 800037a:	9301      	str	r3, [sp, #4]
 800037c:	9300      	str	r3, [sp, #0]
 800037e:	220c      	movs	r2, #12
 8000380:	4902      	ldr	r1, [pc, #8]	; (800038c <L6470_PrepareResetPos+0x18>)
 8000382:	f7ff ff31 	bl	80001e8 <L6470_PrepareAppCmdPkg>
}
 8000386:	b003      	add	sp, #12
 8000388:	f85d fb04 	ldr.w	pc, [sp], #4
 800038c:	20000388 	.word	0x20000388

08000390 <L6470_PrepareResetDevice>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareResetDevice(uint8_t L6470_Id)
{
 8000390:	b500      	push	{lr}
 8000392:	b083      	sub	sp, #12
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 8000394:	2300      	movs	r3, #0
 8000396:	9301      	str	r3, [sp, #4]
 8000398:	9300      	str	r3, [sp, #0]
 800039a:	220d      	movs	r2, #13
 800039c:	4902      	ldr	r1, [pc, #8]	; (80003a8 <L6470_PrepareResetDevice+0x18>)
 800039e:	f7ff ff23 	bl	80001e8 <L6470_PrepareAppCmdPkg>
}
 80003a2:	b003      	add	sp, #12
 80003a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80003a8:	20000388 	.word	0x20000388

080003ac <L6470_PrepareSoftStop>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareSoftStop(uint8_t L6470_Id)
{
 80003ac:	b500      	push	{lr}
 80003ae:	b083      	sub	sp, #12
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 80003b0:	2300      	movs	r3, #0
 80003b2:	9301      	str	r3, [sp, #4]
 80003b4:	9300      	str	r3, [sp, #0]
 80003b6:	220e      	movs	r2, #14
 80003b8:	4902      	ldr	r1, [pc, #8]	; (80003c4 <L6470_PrepareSoftStop+0x18>)
 80003ba:	f7ff ff15 	bl	80001e8 <L6470_PrepareAppCmdPkg>
}
 80003be:	b003      	add	sp, #12
 80003c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80003c4:	20000388 	.word	0x20000388

080003c8 <L6470_PrepareHardStop>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareHardStop(uint8_t L6470_Id)
{
 80003c8:	b500      	push	{lr}
 80003ca:	b083      	sub	sp, #12
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 80003cc:	2300      	movs	r3, #0
 80003ce:	9301      	str	r3, [sp, #4]
 80003d0:	9300      	str	r3, [sp, #0]
 80003d2:	220f      	movs	r2, #15
 80003d4:	4902      	ldr	r1, [pc, #8]	; (80003e0 <L6470_PrepareHardStop+0x18>)
 80003d6:	f7ff ff07 	bl	80001e8 <L6470_PrepareAppCmdPkg>
}
 80003da:	b003      	add	sp, #12
 80003dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80003e0:	20000388 	.word	0x20000388

080003e4 <L6470_PrepareSoftHiZ>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareSoftHiZ(uint8_t L6470_Id)
{
 80003e4:	b500      	push	{lr}
 80003e6:	b083      	sub	sp, #12
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 80003e8:	2300      	movs	r3, #0
 80003ea:	9301      	str	r3, [sp, #4]
 80003ec:	9300      	str	r3, [sp, #0]
 80003ee:	2210      	movs	r2, #16
 80003f0:	4902      	ldr	r1, [pc, #8]	; (80003fc <L6470_PrepareSoftHiZ+0x18>)
 80003f2:	f7ff fef9 	bl	80001e8 <L6470_PrepareAppCmdPkg>
}
 80003f6:	b003      	add	sp, #12
 80003f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80003fc:	20000388 	.word	0x20000388

08000400 <L6470_PrepareHardHiZ>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareHardHiZ(uint8_t L6470_Id)
{
 8000400:	b500      	push	{lr}
 8000402:	b083      	sub	sp, #12
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 8000404:	2300      	movs	r3, #0
 8000406:	9301      	str	r3, [sp, #4]
 8000408:	9300      	str	r3, [sp, #0]
 800040a:	2211      	movs	r2, #17
 800040c:	4902      	ldr	r1, [pc, #8]	; (8000418 <L6470_PrepareHardHiZ+0x18>)
 800040e:	f7ff feeb 	bl	80001e8 <L6470_PrepareAppCmdPkg>
}
 8000412:	b003      	add	sp, #12
 8000414:	f85d fb04 	ldr.w	pc, [sp], #4
 8000418:	20000388 	.word	0x20000388

0800041c <L6470_PrepareGetStatus>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareGetStatus(uint8_t L6470_Id)
{
 800041c:	b500      	push	{lr}
 800041e:	b083      	sub	sp, #12
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 8000420:	2300      	movs	r3, #0
 8000422:	9301      	str	r3, [sp, #4]
 8000424:	9300      	str	r3, [sp, #0]
 8000426:	2212      	movs	r2, #18
 8000428:	4902      	ldr	r1, [pc, #8]	; (8000434 <L6470_PrepareGetStatus+0x18>)
 800042a:	f7ff fedd 	bl	80001e8 <L6470_PrepareAppCmdPkg>
}
 800042e:	b003      	add	sp, #12
 8000430:	f85d fb04 	ldr.w	pc, [sp], #4
 8000434:	20000388 	.word	0x20000388

08000438 <L6470_PrepareDaisyChainCommand>:
{
 8000438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      *(pL6470_DaisyChainSpiTxStruct+(i++)) = 0x00;
 800043c:	2300      	movs	r3, #0
 800043e:	700b      	strb	r3, [r1, #0]
 8000440:	704b      	strb	r3, [r1, #1]
 8000442:	708b      	strb	r3, [r1, #2]
 8000444:	70cb      	strb	r3, [r1, #3]
 8000446:	710b      	strb	r3, [r1, #4]
 8000448:	714b      	strb	r3, [r1, #5]
 800044a:	718b      	strb	r3, [r1, #6]
 800044c:	71cb      	strb	r3, [r1, #7]
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 800044e:	f101 3cff 	add.w	ip, r1, #4294967295
      *(pL6470_DaisyChainSpiTxStruct+(i++)) = 0x00;
 8000452:	461a      	mov	r2, r3
    *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) = (L6470_ApplicationCommand[(pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId].BinaryCode);
 8000454:	4c73      	ldr	r4, [pc, #460]	; (8000624 <L6470_PrepareDaisyChainCommand+0x1ec>)
 8000456:	e032      	b.n	80004be <L6470_PrepareDaisyChainCommand+0x86>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 8000458:	6846      	ldr	r6, [r0, #4]
 800045a:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 800045e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8000462:	f896 610c 	ldrb.w	r6, [r6, #268]	; 0x10c
 8000466:	ea4e 0e06 	orr.w	lr, lr, r6
 800046a:	f88c e000 	strb.w	lr, [ip]
      PARAMLengthBytes = L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].LengthByte;
 800046e:	6846      	ldr	r6, [r0, #4]
 8000470:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8000474:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8000478:	f896 611a 	ldrb.w	r6, [r6, #282]	; 0x11a
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 800047c:	b1d6      	cbz	r6, 80004b4 <L6470_PrepareDaisyChainCommand+0x7c>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(PARAMLengthBytes-spibyte)));
 800047e:	eb01 0843 	add.w	r8, r1, r3, lsl #1
 8000482:	eba6 0e03 	sub.w	lr, r6, r3
 8000486:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 800048a:	68af      	ldr	r7, [r5, #8]
 800048c:	fa27 fe0e 	lsr.w	lr, r7, lr
 8000490:	f808 e002 	strb.w	lr, [r8, r2]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 8000494:	3301      	adds	r3, #1
 8000496:	b2db      	uxtb	r3, r3
 8000498:	429e      	cmp	r6, r3
 800049a:	d2f0      	bcs.n	800047e <L6470_PrepareDaisyChainCommand+0x46>
 800049c:	e00a      	b.n	80004b4 <L6470_PrepareDaisyChainCommand+0x7c>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 800049e:	6843      	ldr	r3, [r0, #4]
 80004a0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80004a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80004a8:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80004ac:	ea4e 0e03 	orr.w	lr, lr, r3
 80004b0:	f88c e000 	strb.w	lr, [ip]
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 80004b4:	3201      	adds	r2, #1
 80004b6:	3010      	adds	r0, #16
 80004b8:	2a02      	cmp	r2, #2
 80004ba:	f000 80b0 	beq.w	800061e <L6470_PrepareDaisyChainCommand+0x1e6>
    *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) = (L6470_ApplicationCommand[(pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId].BinaryCode);
 80004be:	4605      	mov	r5, r0
 80004c0:	7803      	ldrb	r3, [r0, #0]
 80004c2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80004c6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80004ca:	f893 e00c 	ldrb.w	lr, [r3, #12]
 80004ce:	f80c ef01 	strb.w	lr, [ip, #1]!
    switch((pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId)
 80004d2:	7803      	ldrb	r3, [r0, #0]
 80004d4:	1e5e      	subs	r6, r3, #1
 80004d6:	2e08      	cmp	r6, #8
 80004d8:	d8ec      	bhi.n	80004b4 <L6470_PrepareDaisyChainCommand+0x7c>
 80004da:	a701      	add	r7, pc, #4	; (adr r7, 80004e0 <L6470_PrepareDaisyChainCommand+0xa8>)
 80004dc:	f857 f026 	ldr.w	pc, [r7, r6, lsl #2]
 80004e0:	08000459 	.word	0x08000459
 80004e4:	0800049f 	.word	0x0800049f
 80004e8:	08000505 	.word	0x08000505
 80004ec:	0800052f 	.word	0x0800052f
 80004f0:	08000545 	.word	0x08000545
 80004f4:	0800056f 	.word	0x0800056f
 80004f8:	08000585 	.word	0x08000585
 80004fc:	080005af 	.word	0x080005af
 8000500:	080005f1 	.word	0x080005f1
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8000504:	6843      	ldr	r3, [r0, #4]
 8000506:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800050a:	4423      	add	r3, r4
 800050c:	f893 3308 	ldrb.w	r3, [r3, #776]	; 0x308
 8000510:	ea4e 0e03 	orr.w	lr, lr, r3
 8000514:	f88c e000 	strb.w	lr, [ip]
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8000518:	8943      	ldrh	r3, [r0, #10]
 800051a:	f88c 3002 	strb.w	r3, [ip, #2]
 800051e:	6883      	ldr	r3, [r0, #8]
 8000520:	0a1b      	lsrs	r3, r3, #8
 8000522:	f88c 3004 	strb.w	r3, [ip, #4]
 8000526:	6883      	ldr	r3, [r0, #8]
 8000528:	f88c 3006 	strb.w	r3, [ip, #6]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800052c:	e7c2      	b.n	80004b4 <L6470_PrepareDaisyChainCommand+0x7c>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 800052e:	6843      	ldr	r3, [r0, #4]
 8000530:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8000534:	4423      	add	r3, r4
 8000536:	f893 3308 	ldrb.w	r3, [r3, #776]	; 0x308
 800053a:	ea4e 0e03 	orr.w	lr, lr, r3
 800053e:	f88c e000 	strb.w	lr, [ip]
      break;
 8000542:	e7b7      	b.n	80004b4 <L6470_PrepareDaisyChainCommand+0x7c>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8000544:	6843      	ldr	r3, [r0, #4]
 8000546:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800054a:	4423      	add	r3, r4
 800054c:	f893 3308 	ldrb.w	r3, [r3, #776]	; 0x308
 8000550:	ea4e 0e03 	orr.w	lr, lr, r3
 8000554:	f88c e000 	strb.w	lr, [ip]
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8000558:	8943      	ldrh	r3, [r0, #10]
 800055a:	f88c 3002 	strb.w	r3, [ip, #2]
 800055e:	6883      	ldr	r3, [r0, #8]
 8000560:	0a1b      	lsrs	r3, r3, #8
 8000562:	f88c 3004 	strb.w	r3, [ip, #4]
 8000566:	6883      	ldr	r3, [r0, #8]
 8000568:	f88c 3006 	strb.w	r3, [ip, #6]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800056c:	e7a2      	b.n	80004b4 <L6470_PrepareDaisyChainCommand+0x7c>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p1) >> (8*(3-spibyte)));
 800056e:	88c3      	ldrh	r3, [r0, #6]
 8000570:	f88c 3002 	strb.w	r3, [ip, #2]
 8000574:	6843      	ldr	r3, [r0, #4]
 8000576:	0a1b      	lsrs	r3, r3, #8
 8000578:	f88c 3004 	strb.w	r3, [ip, #4]
 800057c:	6843      	ldr	r3, [r0, #4]
 800057e:	f88c 3006 	strb.w	r3, [ip, #6]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8000582:	e797      	b.n	80004b4 <L6470_PrepareDaisyChainCommand+0x7c>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8000584:	6843      	ldr	r3, [r0, #4]
 8000586:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800058a:	4423      	add	r3, r4
 800058c:	f893 3308 	ldrb.w	r3, [r3, #776]	; 0x308
 8000590:	ea4e 0e03 	orr.w	lr, lr, r3
 8000594:	f88c e000 	strb.w	lr, [ip]
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8000598:	8943      	ldrh	r3, [r0, #10]
 800059a:	f88c 3002 	strb.w	r3, [ip, #2]
 800059e:	6883      	ldr	r3, [r0, #8]
 80005a0:	0a1b      	lsrs	r3, r3, #8
 80005a2:	f88c 3004 	strb.w	r3, [ip, #4]
 80005a6:	6883      	ldr	r3, [r0, #8]
 80005a8:	f88c 3006 	strb.w	r3, [ip, #6]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 80005ac:	e782      	b.n	80004b4 <L6470_PrepareDaisyChainCommand+0x7c>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 80005ae:	6843      	ldr	r3, [r0, #4]
 80005b0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80005b4:	4423      	add	r3, r4
 80005b6:	f893 3318 	ldrb.w	r3, [r3, #792]	; 0x318
 80005ba:	ea4e 0ec3 	orr.w	lr, lr, r3, lsl #3
 80005be:	fa5f fe8e 	uxtb.w	lr, lr
 80005c2:	f88c e000 	strb.w	lr, [ip]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 80005c6:	6883      	ldr	r3, [r0, #8]
 80005c8:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 80005cc:	4423      	add	r3, r4
 80005ce:	f893 3308 	ldrb.w	r3, [r3, #776]	; 0x308
 80005d2:	ea4e 0e03 	orr.w	lr, lr, r3
 80005d6:	f88c e000 	strb.w	lr, [ip]
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p3) >> (8*(3-spibyte)));
 80005da:	89c3      	ldrh	r3, [r0, #14]
 80005dc:	f88c 3002 	strb.w	r3, [ip, #2]
 80005e0:	68c3      	ldr	r3, [r0, #12]
 80005e2:	0a1b      	lsrs	r3, r3, #8
 80005e4:	f88c 3004 	strb.w	r3, [ip, #4]
 80005e8:	68c3      	ldr	r3, [r0, #12]
 80005ea:	f88c 3006 	strb.w	r3, [ip, #6]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 80005ee:	e761      	b.n	80004b4 <L6470_PrepareDaisyChainCommand+0x7c>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 80005f0:	6843      	ldr	r3, [r0, #4]
 80005f2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80005f6:	4423      	add	r3, r4
 80005f8:	f893 3318 	ldrb.w	r3, [r3, #792]	; 0x318
 80005fc:	ea4e 0ec3 	orr.w	lr, lr, r3, lsl #3
 8000600:	fa5f fe8e 	uxtb.w	lr, lr
 8000604:	f88c e000 	strb.w	lr, [ip]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 8000608:	6883      	ldr	r3, [r0, #8]
 800060a:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800060e:	4423      	add	r3, r4
 8000610:	f893 3308 	ldrb.w	r3, [r3, #776]	; 0x308
 8000614:	ea4e 0e03 	orr.w	lr, lr, r3
 8000618:	f88c e000 	strb.w	lr, [ip]
      break;
 800061c:	e74a      	b.n	80004b4 <L6470_PrepareDaisyChainCommand+0x7c>
}
 800061e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000622:	bf00      	nop
 8000624:	080040e0 	.word	0x080040e0

08000628 <Step_s2_2_Acc>:
  if (Step_s2 <= (L6470_MAX_ACC * ((float)1.4552e1)))
 8000628:	eddf 7a09 	vldr	s15, [pc, #36]	; 8000650 <Step_s2_2_Acc+0x28>
 800062c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000634:	d809      	bhi.n	800064a <Step_s2_2_Acc+0x22>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 8000636:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000654 <Step_s2_2_Acc+0x2c>
 800063a:	eec0 7a07 	vdiv.f32	s15, s0, s14
 800063e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000642:	ee17 3a90 	vmov	r3, s15
 8000646:	b298      	uxth	r0, r3
 8000648:	4770      	bx	lr
    return 0;   // Warning
 800064a:	2000      	movs	r0, #0
}
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	4768c671 	.word	0x4768c671
 8000654:	4168d4fe 	.word	0x4168d4fe

08000658 <Step_s2_2_Dec>:
  if (Step_s2 <= (L6470_MAX_DEC * ((float)1.4552e1)))
 8000658:	eddf 7a09 	vldr	s15, [pc, #36]	; 8000680 <Step_s2_2_Dec+0x28>
 800065c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000664:	d809      	bhi.n	800067a <Step_s2_2_Dec+0x22>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 8000666:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000684 <Step_s2_2_Dec+0x2c>
 800066a:	eec0 7a07 	vdiv.f32	s15, s0, s14
 800066e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000672:	ee17 3a90 	vmov	r3, s15
 8000676:	b298      	uxth	r0, r3
 8000678:	4770      	bx	lr
    return 0;   // Warning
 800067a:	2000      	movs	r0, #0
}
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	4768c671 	.word	0x4768c671
 8000684:	4168d4fe 	.word	0x4168d4fe

08000688 <Step_s_2_MaxSpeed>:
  if (Step_s <= (L6470_MAX_MAX_SPEED * ((float)15.2588)))
 8000688:	eddf 7a09 	vldr	s15, [pc, #36]	; 80006b0 <Step_s_2_MaxSpeed+0x28>
 800068c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000694:	d809      	bhi.n	80006aa <Step_s_2_MaxSpeed+0x22>
    return (uint16_t)(Step_s / ((float)15.2588));
 8000696:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80006b4 <Step_s_2_MaxSpeed+0x2c>
 800069a:	eec0 7a07 	vdiv.f32	s15, s0, s14
 800069e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006a2:	ee17 3a90 	vmov	r3, s15
 80006a6:	b298      	uxth	r0, r3
 80006a8:	4770      	bx	lr
    return 0;   // Warning
 80006aa:	2000      	movs	r0, #0
}
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	4673e702 	.word	0x4673e702
 80006b4:	4174240b 	.word	0x4174240b

080006b8 <Step_s_2_MinSpeed>:
  if (Step_s <= (L6470_MAX_MIN_SPEED * ((float)238.4186e-3)))
 80006b8:	eddf 7a09 	vldr	s15, [pc, #36]	; 80006e0 <Step_s_2_MinSpeed+0x28>
 80006bc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80006c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006c4:	d809      	bhi.n	80006da <Step_s_2_MinSpeed+0x22>
    return (uint16_t)(Step_s / ((float)238.4186e-3));
 80006c6:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80006e4 <Step_s_2_MinSpeed+0x2c>
 80006ca:	eec0 7a07 	vdiv.f32	s15, s0, s14
 80006ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006d2:	ee17 3a90 	vmov	r3, s15
 80006d6:	b298      	uxth	r0, r3
 80006d8:	4770      	bx	lr
    return 0;   // Warning
 80006da:	2000      	movs	r0, #0
}
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	447414bf 	.word	0x447414bf
 80006e4:	3e742401 	.word	0x3e742401

080006e8 <Step_s_2_FsSpd>:
  if (Step_s <= ((L6470_MAX_FS_SPD+0.5) * ((float)15.25)))
 80006e8:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8000718 <Step_s_2_FsSpd+0x30>
 80006ec:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80006f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006f4:	d80d      	bhi.n	8000712 <Step_s_2_FsSpd+0x2a>
    return (uint16_t)((float)(Step_s / ((float)15.25)) - (float)0.5);
 80006f6:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800071c <Step_s_2_FsSpd+0x34>
 80006fa:	eec0 7a07 	vdiv.f32	s15, s0, s14
 80006fe:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000702:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000706:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800070a:	ee17 3a90 	vmov	r3, s15
 800070e:	b298      	uxth	r0, r3
 8000710:	4770      	bx	lr
    return 0;   // Warning
 8000712:	2000      	movs	r0, #0
}
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	4673e180 	.word	0x4673e180
 800071c:	41740000 	.word	0x41740000

08000720 <Step_s_2_IntSpeed>:
  if (Step_s <= (L6470_MAX_INT_SPEED * ((float)59.6046e-3)))
 8000720:	eddf 7a09 	vldr	s15, [pc, #36]	; 8000748 <Step_s_2_IntSpeed+0x28>
 8000724:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800072c:	d809      	bhi.n	8000742 <Step_s_2_IntSpeed+0x22>
    return (uint16_t)(Step_s / ((float)59.6046e-3));
 800072e:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800074c <Step_s_2_IntSpeed+0x2c>
 8000732:	eec0 7a07 	vdiv.f32	s15, s0, s14
 8000736:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800073a:	ee17 3a90 	vmov	r3, s15
 800073e:	b298      	uxth	r0, r3
 8000740:	4770      	bx	lr
    return 0;   // Warning
 8000742:	2000      	movs	r0, #0
}
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	44742023 	.word	0x44742023
 800074c:	3d7423f4 	.word	0x3d7423f4

08000750 <s_Step_2_StSlp>:
  if (s_Step <= (L6470_MAX_ST_SLP * ((float)1.5686e-5)))
 8000750:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800077c <s_Step_2_StSlp+0x2c>
 8000754:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800075c:	d80c      	bhi.n	8000778 <s_Step_2_StSlp+0x28>
{
 800075e:	b082      	sub	sp, #8
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 8000760:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000780 <s_Step_2_StSlp+0x30>
 8000764:	eec0 7a07 	vdiv.f32	s15, s0, s14
 8000768:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800076c:	edcd 7a01 	vstr	s15, [sp, #4]
 8000770:	f89d 0004 	ldrb.w	r0, [sp, #4]
}
 8000774:	b002      	add	sp, #8
 8000776:	4770      	bx	lr
    return 0;   // Warning
 8000778:	2000      	movs	r0, #0
}
 800077a:	4770      	bx	lr
 800077c:	3b8311d9 	.word	0x3b8311d9
 8000780:	3783956e 	.word	0x3783956e

08000784 <s_Step_2_FnSlpAcc>:
  if (s_Step <= (L6470_MAX_FN_SLP_ACC * ((float)1.5686e-5)))
 8000784:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80007b0 <s_Step_2_FnSlpAcc+0x2c>
 8000788:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800078c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000790:	d80c      	bhi.n	80007ac <s_Step_2_FnSlpAcc+0x28>
{
 8000792:	b082      	sub	sp, #8
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 8000794:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80007b4 <s_Step_2_FnSlpAcc+0x30>
 8000798:	eec0 7a07 	vdiv.f32	s15, s0, s14
 800079c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007a0:	edcd 7a01 	vstr	s15, [sp, #4]
 80007a4:	f89d 0004 	ldrb.w	r0, [sp, #4]
}
 80007a8:	b002      	add	sp, #8
 80007aa:	4770      	bx	lr
    return 0;   // Warning
 80007ac:	2000      	movs	r0, #0
}
 80007ae:	4770      	bx	lr
 80007b0:	3b8311d9 	.word	0x3b8311d9
 80007b4:	3783956e 	.word	0x3783956e

080007b8 <s_Step_2_FnSlpDec>:
  if (s_Step <= (L6470_MAX_FN_SLP_DEC * ((float)1.5686e-5)))
 80007b8:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80007e4 <s_Step_2_FnSlpDec+0x2c>
 80007bc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80007c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007c4:	d80c      	bhi.n	80007e0 <s_Step_2_FnSlpDec+0x28>
{
 80007c6:	b082      	sub	sp, #8
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 80007c8:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80007e8 <s_Step_2_FnSlpDec+0x30>
 80007cc:	eec0 7a07 	vdiv.f32	s15, s0, s14
 80007d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007d4:	edcd 7a01 	vstr	s15, [sp, #4]
 80007d8:	f89d 0004 	ldrb.w	r0, [sp, #4]
}
 80007dc:	b002      	add	sp, #8
 80007de:	4770      	bx	lr
    return 0;   // Warning
 80007e0:	2000      	movs	r0, #0
}
 80007e2:	4770      	bx	lr
 80007e4:	3b8311d9 	.word	0x3b8311d9
 80007e8:	3783956e 	.word	0x3783956e

080007ec <mA_2_OcdTh>:
  if (mA <= ((L6470_MAX_OCD_TH+1) * ((float)375)))
 80007ec:	eddf 7a12 	vldr	s15, [pc, #72]	; 8000838 <mA_2_OcdTh+0x4c>
 80007f0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80007f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007f8:	d81b      	bhi.n	8000832 <mA_2_OcdTh+0x46>
{
 80007fa:	b082      	sub	sp, #8
    result = (mA / ((float)375));
 80007fc:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800083c <mA_2_OcdTh+0x50>
 8000800:	eec0 7a07 	vdiv.f32	s15, s0, s14
    decimal = result - (uint8_t)result;
 8000804:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8000808:	ed8d 7a01 	vstr	s14, [sp, #4]
 800080c:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8000810:	ee07 0a10 	vmov	s14, r0
 8000814:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000818:	ee77 7ac7 	vsub.f32	s15, s15, s14
    if (decimal < (float)0.5)
 800081c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000820:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000828:	d501      	bpl.n	800082e <mA_2_OcdTh+0x42>
      return ((uint8_t)result - 1);
 800082a:	3801      	subs	r0, #1
 800082c:	b2c0      	uxtb	r0, r0
}
 800082e:	b002      	add	sp, #8
 8000830:	4770      	bx	lr
    return 0;   // Warning
 8000832:	2000      	movs	r0, #0
}
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	45bb8000 	.word	0x45bb8000
 800083c:	43bb8000 	.word	0x43bb8000

08000840 <mA_2_StallTh>:
  if (mA <= ((L6470_MAX_STALL_TH+1) * ((float)31.25)))
 8000840:	eddf 7a12 	vldr	s15, [pc, #72]	; 800088c <mA_2_StallTh+0x4c>
 8000844:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800084c:	d81b      	bhi.n	8000886 <mA_2_StallTh+0x46>
{
 800084e:	b082      	sub	sp, #8
    result = (mA / ((float)31.25));
 8000850:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000890 <mA_2_StallTh+0x50>
 8000854:	eec0 7a07 	vdiv.f32	s15, s0, s14
    decimal = result - (uint8_t)result;
 8000858:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800085c:	ed8d 7a01 	vstr	s14, [sp, #4]
 8000860:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8000864:	ee07 0a10 	vmov	s14, r0
 8000868:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800086c:	ee77 7ac7 	vsub.f32	s15, s15, s14
    if (decimal < (float)0.5)
 8000870:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000874:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800087c:	d501      	bpl.n	8000882 <mA_2_StallTh+0x42>
      return ((uint8_t)result - 1);
 800087e:	3801      	subs	r0, #1
 8000880:	b2c0      	uxtb	r0, r0
}
 8000882:	b002      	add	sp, #8
 8000884:	4770      	bx	lr
    return 0;   // Warning
 8000886:	2000      	movs	r0, #0
}
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	457a0000 	.word	0x457a0000
 8000890:	41fa0000 	.word	0x41fa0000

08000894 <L6470_ID>:
  {
    return (position);
  }
  else
  {
    return 0xFF;
 8000894:	2802      	cmp	r0, #2
  }
}
 8000896:	bf28      	it	cs
 8000898:	20ff      	movcs	r0, #255	; 0xff
 800089a:	4770      	bx	lr

0800089c <L6470_DaisyChainCommand>:
  * @brief  Send command to the L6470 daisy chain via SPI
  * @param  pL6470_DaisyChainSpiTxStruct  Pointer to the matrix array of bytes to be sent to the daisy chain L6470
  * @param  pL6470_DaisyChainSpiRxStruct  Pointer to the matrix array of bytes to be received from the daisy chain L6470
  */
void L6470_DaisyChainCommand(uint8_t* pL6470_DaisyChainSpiTxStruct, uint8_t* pL6470_DaisyChainSpiRxStruct)
{
 800089c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80008a0:	b083      	sub	sp, #12
 80008a2:	4681      	mov	r9, r0
 80008a4:	4688      	mov	r8, r1
  uint8_t spibyte;
  
  L6470_DaisyChain_HalfPrepared = ZERO_F;
 80008a6:	2500      	movs	r5, #0
 80008a8:	4b14      	ldr	r3, [pc, #80]	; (80008fc <L6470_DaisyChainCommand+0x60>)
 80008aa:	701d      	strb	r5, [r3, #0]
  
  /* Send all command bytes via SPI */
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
  {
    /* Enable SPI communication for L6470 */
    L6470_nCS_LOW();
 80008ac:	4e14      	ldr	r6, [pc, #80]	; (8000900 <L6470_DaisyChainCommand+0x64>)
 80008ae:	462f      	mov	r7, r5
    L6470_SPI_Communication(&HSPI, (pL6470_DaisyChainSpiTxStruct+(spibyte * L6470DAISYCHAINSIZE)), (pL6470_DaisyChainSpiRxStruct+(spibyte * L6470DAISYCHAINSIZE)), L6470DAISYCHAINSIZE, 10);
    
    /* Allow the device to decode the received command */
    L6470_nCS_HIGH();
    
    _DELAY(TDISCS);
 80008b0:	461c      	mov	r4, r3
    L6470_nCS_LOW();
 80008b2:	463a      	mov	r2, r7
 80008b4:	8931      	ldrh	r1, [r6, #8]
 80008b6:	6870      	ldr	r0, [r6, #4]
 80008b8:	f001 f984 	bl	8001bc4 <HAL_GPIO_WritePin>
    L6470_SPI_Communication(&HSPI, (pL6470_DaisyChainSpiTxStruct+(spibyte * L6470DAISYCHAINSIZE)), (pL6470_DaisyChainSpiRxStruct+(spibyte * L6470DAISYCHAINSIZE)), L6470DAISYCHAINSIZE, 10);
 80008bc:	230a      	movs	r3, #10
 80008be:	9300      	str	r3, [sp, #0]
 80008c0:	2302      	movs	r3, #2
 80008c2:	eb08 0205 	add.w	r2, r8, r5
 80008c6:	eb09 0105 	add.w	r1, r9, r5
 80008ca:	480e      	ldr	r0, [pc, #56]	; (8000904 <L6470_DaisyChainCommand+0x68>)
 80008cc:	f001 ff34 	bl	8002738 <HAL_SPI_TransmitReceive>
    L6470_nCS_HIGH();
 80008d0:	2201      	movs	r2, #1
 80008d2:	8931      	ldrh	r1, [r6, #8]
 80008d4:	6870      	ldr	r0, [r6, #4]
 80008d6:	f001 f975 	bl	8001bc4 <HAL_GPIO_WritePin>
    _DELAY(TDISCS);
 80008da:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80008de:	bf00      	nop
 80008e0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80008e4:	3301      	adds	r3, #1
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80008ec:	2b13      	cmp	r3, #19
 80008ee:	d9f6      	bls.n	80008de <L6470_DaisyChainCommand+0x42>
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 80008f0:	3502      	adds	r5, #2
 80008f2:	2d08      	cmp	r5, #8
 80008f4:	d1dd      	bne.n	80008b2 <L6470_DaisyChainCommand+0x16>
  }
}
 80008f6:	b003      	add	sp, #12
 80008f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80008fc:	20000384 	.word	0x20000384
 8000900:	200003c0 	.word	0x200003c0
 8000904:	200003d0 	.word	0x200003d0

08000908 <L6470_SetParam>:
{
 8000908:	b570      	push	{r4, r5, r6, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	460b      	mov	r3, r1
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 800090e:	4c0b      	ldr	r4, [pc, #44]	; (800093c <L6470_SetParam+0x34>)
 8000910:	1d26      	adds	r6, r4, #4
 8000912:	2100      	movs	r1, #0
 8000914:	9101      	str	r1, [sp, #4]
 8000916:	9200      	str	r2, [sp, #0]
 8000918:	2201      	movs	r2, #1
 800091a:	4631      	mov	r1, r6
 800091c:	f7ff fc64 	bl	80001e8 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000920:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8000924:	4629      	mov	r1, r5
 8000926:	4630      	mov	r0, r6
 8000928:	f7ff fd86 	bl	8000438 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800092c:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8000930:	4628      	mov	r0, r5
 8000932:	f7ff ffb3 	bl	800089c <L6470_DaisyChainCommand>
}
 8000936:	b002      	add	sp, #8
 8000938:	bd70      	pop	{r4, r5, r6, pc}
 800093a:	bf00      	nop
 800093c:	20000384 	.word	0x20000384

08000940 <L6470_Run>:
{
 8000940:	b570      	push	{r4, r5, r6, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	460b      	mov	r3, r1
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 8000946:	4c0b      	ldr	r4, [pc, #44]	; (8000974 <L6470_Run+0x34>)
 8000948:	1d26      	adds	r6, r4, #4
 800094a:	2100      	movs	r1, #0
 800094c:	9101      	str	r1, [sp, #4]
 800094e:	9200      	str	r2, [sp, #0]
 8000950:	2203      	movs	r2, #3
 8000952:	4631      	mov	r1, r6
 8000954:	f7ff fc48 	bl	80001e8 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000958:	f104 0528 	add.w	r5, r4, #40	; 0x28
 800095c:	4629      	mov	r1, r5
 800095e:	4630      	mov	r0, r6
 8000960:	f7ff fd6a 	bl	8000438 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000964:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8000968:	4628      	mov	r0, r5
 800096a:	f7ff ff97 	bl	800089c <L6470_DaisyChainCommand>
}
 800096e:	b002      	add	sp, #8
 8000970:	bd70      	pop	{r4, r5, r6, pc}
 8000972:	bf00      	nop
 8000974:	20000384 	.word	0x20000384

08000978 <L6470_StepClock>:
{
 8000978:	b570      	push	{r4, r5, r6, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	460b      	mov	r3, r1
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 800097e:	4c0b      	ldr	r4, [pc, #44]	; (80009ac <L6470_StepClock+0x34>)
 8000980:	1d26      	adds	r6, r4, #4
 8000982:	2200      	movs	r2, #0
 8000984:	9201      	str	r2, [sp, #4]
 8000986:	9200      	str	r2, [sp, #0]
 8000988:	2204      	movs	r2, #4
 800098a:	4631      	mov	r1, r6
 800098c:	f7ff fc2c 	bl	80001e8 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000990:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8000994:	4629      	mov	r1, r5
 8000996:	4630      	mov	r0, r6
 8000998:	f7ff fd4e 	bl	8000438 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800099c:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80009a0:	4628      	mov	r0, r5
 80009a2:	f7ff ff7b 	bl	800089c <L6470_DaisyChainCommand>
}
 80009a6:	b002      	add	sp, #8
 80009a8:	bd70      	pop	{r4, r5, r6, pc}
 80009aa:	bf00      	nop
 80009ac:	20000384 	.word	0x20000384

080009b0 <L6470_Move>:
{
 80009b0:	b570      	push	{r4, r5, r6, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	460b      	mov	r3, r1
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 80009b6:	4c0b      	ldr	r4, [pc, #44]	; (80009e4 <L6470_Move+0x34>)
 80009b8:	1d26      	adds	r6, r4, #4
 80009ba:	2100      	movs	r1, #0
 80009bc:	9101      	str	r1, [sp, #4]
 80009be:	9200      	str	r2, [sp, #0]
 80009c0:	2205      	movs	r2, #5
 80009c2:	4631      	mov	r1, r6
 80009c4:	f7ff fc10 	bl	80001e8 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80009c8:	f104 0528 	add.w	r5, r4, #40	; 0x28
 80009cc:	4629      	mov	r1, r5
 80009ce:	4630      	mov	r0, r6
 80009d0:	f7ff fd32 	bl	8000438 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80009d4:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80009d8:	4628      	mov	r0, r5
 80009da:	f7ff ff5f 	bl	800089c <L6470_DaisyChainCommand>
}
 80009de:	b002      	add	sp, #8
 80009e0:	bd70      	pop	{r4, r5, r6, pc}
 80009e2:	bf00      	nop
 80009e4:	20000384 	.word	0x20000384

080009e8 <L6470_GoTo>:
  if (AbsPos <= L6470_POSITION_RANGE)
 80009e8:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 80009ec:	d300      	bcc.n	80009f0 <L6470_GoTo+0x8>
 80009ee:	4770      	bx	lr
{
 80009f0:	b570      	push	{r4, r5, r6, lr}
 80009f2:	b082      	sub	sp, #8
    L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 80009f4:	4c0b      	ldr	r4, [pc, #44]	; (8000a24 <L6470_GoTo+0x3c>)
 80009f6:	1d26      	adds	r6, r4, #4
 80009f8:	2200      	movs	r2, #0
 80009fa:	9201      	str	r2, [sp, #4]
 80009fc:	9200      	str	r2, [sp, #0]
 80009fe:	460b      	mov	r3, r1
 8000a00:	2206      	movs	r2, #6
 8000a02:	4631      	mov	r1, r6
 8000a04:	f7ff fbf0 	bl	80001e8 <L6470_PrepareAppCmdPkg>
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000a08:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8000a0c:	4629      	mov	r1, r5
 8000a0e:	4630      	mov	r0, r6
 8000a10:	f7ff fd12 	bl	8000438 <L6470_PrepareDaisyChainCommand>
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000a14:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8000a18:	4628      	mov	r0, r5
 8000a1a:	f7ff ff3f 	bl	800089c <L6470_DaisyChainCommand>
}
 8000a1e:	b002      	add	sp, #8
 8000a20:	bd70      	pop	{r4, r5, r6, pc}
 8000a22:	bf00      	nop
 8000a24:	20000384 	.word	0x20000384

08000a28 <L6470_GoToDir>:
  if (AbsPos <= L6470_POSITION_RANGE)
 8000a28:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8000a2c:	d300      	bcc.n	8000a30 <L6470_GoToDir+0x8>
 8000a2e:	4770      	bx	lr
{
 8000a30:	b570      	push	{r4, r5, r6, lr}
 8000a32:	b082      	sub	sp, #8
    L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 8000a34:	4c0b      	ldr	r4, [pc, #44]	; (8000a64 <L6470_GoToDir+0x3c>)
 8000a36:	1d26      	adds	r6, r4, #4
 8000a38:	2300      	movs	r3, #0
 8000a3a:	9301      	str	r3, [sp, #4]
 8000a3c:	9200      	str	r2, [sp, #0]
 8000a3e:	460b      	mov	r3, r1
 8000a40:	2207      	movs	r2, #7
 8000a42:	4631      	mov	r1, r6
 8000a44:	f7ff fbd0 	bl	80001e8 <L6470_PrepareAppCmdPkg>
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000a48:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8000a4c:	4629      	mov	r1, r5
 8000a4e:	4630      	mov	r0, r6
 8000a50:	f7ff fcf2 	bl	8000438 <L6470_PrepareDaisyChainCommand>
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000a54:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8000a58:	4628      	mov	r0, r5
 8000a5a:	f7ff ff1f 	bl	800089c <L6470_DaisyChainCommand>
}
 8000a5e:	b002      	add	sp, #8
 8000a60:	bd70      	pop	{r4, r5, r6, pc}
 8000a62:	bf00      	nop
 8000a64:	20000384 	.word	0x20000384

08000a68 <L6470_GoUntil>:
{
 8000a68:	b570      	push	{r4, r5, r6, lr}
 8000a6a:	b082      	sub	sp, #8
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 8000a6c:	4c0a      	ldr	r4, [pc, #40]	; (8000a98 <L6470_GoUntil+0x30>)
 8000a6e:	1d26      	adds	r6, r4, #4
 8000a70:	9301      	str	r3, [sp, #4]
 8000a72:	9200      	str	r2, [sp, #0]
 8000a74:	460b      	mov	r3, r1
 8000a76:	2208      	movs	r2, #8
 8000a78:	4631      	mov	r1, r6
 8000a7a:	f7ff fbb5 	bl	80001e8 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000a7e:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8000a82:	4629      	mov	r1, r5
 8000a84:	4630      	mov	r0, r6
 8000a86:	f7ff fcd7 	bl	8000438 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000a8a:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8000a8e:	4628      	mov	r0, r5
 8000a90:	f7ff ff04 	bl	800089c <L6470_DaisyChainCommand>
}
 8000a94:	b002      	add	sp, #8
 8000a96:	bd70      	pop	{r4, r5, r6, pc}
 8000a98:	20000384 	.word	0x20000384

08000a9c <L6470_ReleaseSW>:
{
 8000a9c:	b570      	push	{r4, r5, r6, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	460b      	mov	r3, r1
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 8000aa2:	4c0b      	ldr	r4, [pc, #44]	; (8000ad0 <L6470_ReleaseSW+0x34>)
 8000aa4:	1d26      	adds	r6, r4, #4
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	9101      	str	r1, [sp, #4]
 8000aaa:	9200      	str	r2, [sp, #0]
 8000aac:	2209      	movs	r2, #9
 8000aae:	4631      	mov	r1, r6
 8000ab0:	f7ff fb9a 	bl	80001e8 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000ab4:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8000ab8:	4629      	mov	r1, r5
 8000aba:	4630      	mov	r0, r6
 8000abc:	f7ff fcbc 	bl	8000438 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000ac0:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8000ac4:	4628      	mov	r0, r5
 8000ac6:	f7ff fee9 	bl	800089c <L6470_DaisyChainCommand>
}
 8000aca:	b002      	add	sp, #8
 8000acc:	bd70      	pop	{r4, r5, r6, pc}
 8000ace:	bf00      	nop
 8000ad0:	20000384 	.word	0x20000384

08000ad4 <L6470_GoHome>:
{
 8000ad4:	b570      	push	{r4, r5, r6, lr}
 8000ad6:	b082      	sub	sp, #8
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 8000ad8:	4c0a      	ldr	r4, [pc, #40]	; (8000b04 <L6470_GoHome+0x30>)
 8000ada:	1d26      	adds	r6, r4, #4
 8000adc:	2300      	movs	r3, #0
 8000ade:	9301      	str	r3, [sp, #4]
 8000ae0:	9300      	str	r3, [sp, #0]
 8000ae2:	220a      	movs	r2, #10
 8000ae4:	4631      	mov	r1, r6
 8000ae6:	f7ff fb7f 	bl	80001e8 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000aea:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8000aee:	4629      	mov	r1, r5
 8000af0:	4630      	mov	r0, r6
 8000af2:	f7ff fca1 	bl	8000438 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000af6:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8000afa:	4628      	mov	r0, r5
 8000afc:	f7ff fece 	bl	800089c <L6470_DaisyChainCommand>
}
 8000b00:	b002      	add	sp, #8
 8000b02:	bd70      	pop	{r4, r5, r6, pc}
 8000b04:	20000384 	.word	0x20000384

08000b08 <L6470_GoMark>:
{
 8000b08:	b570      	push	{r4, r5, r6, lr}
 8000b0a:	b082      	sub	sp, #8
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 8000b0c:	4c0a      	ldr	r4, [pc, #40]	; (8000b38 <L6470_GoMark+0x30>)
 8000b0e:	1d26      	adds	r6, r4, #4
 8000b10:	2300      	movs	r3, #0
 8000b12:	9301      	str	r3, [sp, #4]
 8000b14:	9300      	str	r3, [sp, #0]
 8000b16:	220b      	movs	r2, #11
 8000b18:	4631      	mov	r1, r6
 8000b1a:	f7ff fb65 	bl	80001e8 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000b1e:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8000b22:	4629      	mov	r1, r5
 8000b24:	4630      	mov	r0, r6
 8000b26:	f7ff fc87 	bl	8000438 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000b2a:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8000b2e:	4628      	mov	r0, r5
 8000b30:	f7ff feb4 	bl	800089c <L6470_DaisyChainCommand>
}
 8000b34:	b002      	add	sp, #8
 8000b36:	bd70      	pop	{r4, r5, r6, pc}
 8000b38:	20000384 	.word	0x20000384

08000b3c <L6470_ResetPos>:
{
 8000b3c:	b570      	push	{r4, r5, r6, lr}
 8000b3e:	b082      	sub	sp, #8
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 8000b40:	4c0a      	ldr	r4, [pc, #40]	; (8000b6c <L6470_ResetPos+0x30>)
 8000b42:	1d26      	adds	r6, r4, #4
 8000b44:	2300      	movs	r3, #0
 8000b46:	9301      	str	r3, [sp, #4]
 8000b48:	9300      	str	r3, [sp, #0]
 8000b4a:	220c      	movs	r2, #12
 8000b4c:	4631      	mov	r1, r6
 8000b4e:	f7ff fb4b 	bl	80001e8 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000b52:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8000b56:	4629      	mov	r1, r5
 8000b58:	4630      	mov	r0, r6
 8000b5a:	f7ff fc6d 	bl	8000438 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000b5e:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8000b62:	4628      	mov	r0, r5
 8000b64:	f7ff fe9a 	bl	800089c <L6470_DaisyChainCommand>
}
 8000b68:	b002      	add	sp, #8
 8000b6a:	bd70      	pop	{r4, r5, r6, pc}
 8000b6c:	20000384 	.word	0x20000384

08000b70 <L6470_ResetDevice>:
{
 8000b70:	b570      	push	{r4, r5, r6, lr}
 8000b72:	b082      	sub	sp, #8
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 8000b74:	4c0a      	ldr	r4, [pc, #40]	; (8000ba0 <L6470_ResetDevice+0x30>)
 8000b76:	1d26      	adds	r6, r4, #4
 8000b78:	2300      	movs	r3, #0
 8000b7a:	9301      	str	r3, [sp, #4]
 8000b7c:	9300      	str	r3, [sp, #0]
 8000b7e:	220d      	movs	r2, #13
 8000b80:	4631      	mov	r1, r6
 8000b82:	f7ff fb31 	bl	80001e8 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000b86:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8000b8a:	4629      	mov	r1, r5
 8000b8c:	4630      	mov	r0, r6
 8000b8e:	f7ff fc53 	bl	8000438 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000b92:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8000b96:	4628      	mov	r0, r5
 8000b98:	f7ff fe80 	bl	800089c <L6470_DaisyChainCommand>
}
 8000b9c:	b002      	add	sp, #8
 8000b9e:	bd70      	pop	{r4, r5, r6, pc}
 8000ba0:	20000384 	.word	0x20000384

08000ba4 <L6470_SoftStop>:
{
 8000ba4:	b570      	push	{r4, r5, r6, lr}
 8000ba6:	b082      	sub	sp, #8
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 8000ba8:	4c0a      	ldr	r4, [pc, #40]	; (8000bd4 <L6470_SoftStop+0x30>)
 8000baa:	1d26      	adds	r6, r4, #4
 8000bac:	2300      	movs	r3, #0
 8000bae:	9301      	str	r3, [sp, #4]
 8000bb0:	9300      	str	r3, [sp, #0]
 8000bb2:	220e      	movs	r2, #14
 8000bb4:	4631      	mov	r1, r6
 8000bb6:	f7ff fb17 	bl	80001e8 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000bba:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8000bbe:	4629      	mov	r1, r5
 8000bc0:	4630      	mov	r0, r6
 8000bc2:	f7ff fc39 	bl	8000438 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000bc6:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8000bca:	4628      	mov	r0, r5
 8000bcc:	f7ff fe66 	bl	800089c <L6470_DaisyChainCommand>
}
 8000bd0:	b002      	add	sp, #8
 8000bd2:	bd70      	pop	{r4, r5, r6, pc}
 8000bd4:	20000384 	.word	0x20000384

08000bd8 <L6470_HardStop>:
{
 8000bd8:	b570      	push	{r4, r5, r6, lr}
 8000bda:	b082      	sub	sp, #8
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 8000bdc:	4c0a      	ldr	r4, [pc, #40]	; (8000c08 <L6470_HardStop+0x30>)
 8000bde:	1d26      	adds	r6, r4, #4
 8000be0:	2300      	movs	r3, #0
 8000be2:	9301      	str	r3, [sp, #4]
 8000be4:	9300      	str	r3, [sp, #0]
 8000be6:	220f      	movs	r2, #15
 8000be8:	4631      	mov	r1, r6
 8000bea:	f7ff fafd 	bl	80001e8 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000bee:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8000bf2:	4629      	mov	r1, r5
 8000bf4:	4630      	mov	r0, r6
 8000bf6:	f7ff fc1f 	bl	8000438 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000bfa:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8000bfe:	4628      	mov	r0, r5
 8000c00:	f7ff fe4c 	bl	800089c <L6470_DaisyChainCommand>
}
 8000c04:	b002      	add	sp, #8
 8000c06:	bd70      	pop	{r4, r5, r6, pc}
 8000c08:	20000384 	.word	0x20000384

08000c0c <L6470_SoftHiZ>:
{
 8000c0c:	b570      	push	{r4, r5, r6, lr}
 8000c0e:	b082      	sub	sp, #8
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 8000c10:	4c0a      	ldr	r4, [pc, #40]	; (8000c3c <L6470_SoftHiZ+0x30>)
 8000c12:	1d26      	adds	r6, r4, #4
 8000c14:	2300      	movs	r3, #0
 8000c16:	9301      	str	r3, [sp, #4]
 8000c18:	9300      	str	r3, [sp, #0]
 8000c1a:	2210      	movs	r2, #16
 8000c1c:	4631      	mov	r1, r6
 8000c1e:	f7ff fae3 	bl	80001e8 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000c22:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8000c26:	4629      	mov	r1, r5
 8000c28:	4630      	mov	r0, r6
 8000c2a:	f7ff fc05 	bl	8000438 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000c2e:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8000c32:	4628      	mov	r0, r5
 8000c34:	f7ff fe32 	bl	800089c <L6470_DaisyChainCommand>
}
 8000c38:	b002      	add	sp, #8
 8000c3a:	bd70      	pop	{r4, r5, r6, pc}
 8000c3c:	20000384 	.word	0x20000384

08000c40 <L6470_HardHiZ>:
{
 8000c40:	b570      	push	{r4, r5, r6, lr}
 8000c42:	b082      	sub	sp, #8
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 8000c44:	4c0a      	ldr	r4, [pc, #40]	; (8000c70 <L6470_HardHiZ+0x30>)
 8000c46:	1d26      	adds	r6, r4, #4
 8000c48:	2300      	movs	r3, #0
 8000c4a:	9301      	str	r3, [sp, #4]
 8000c4c:	9300      	str	r3, [sp, #0]
 8000c4e:	2211      	movs	r2, #17
 8000c50:	4631      	mov	r1, r6
 8000c52:	f7ff fac9 	bl	80001e8 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000c56:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8000c5a:	4629      	mov	r1, r5
 8000c5c:	4630      	mov	r0, r6
 8000c5e:	f7ff fbeb 	bl	8000438 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000c62:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8000c66:	4628      	mov	r0, r5
 8000c68:	f7ff fe18 	bl	800089c <L6470_DaisyChainCommand>
}
 8000c6c:	b002      	add	sp, #8
 8000c6e:	bd70      	pop	{r4, r5, r6, pc}
 8000c70:	20000384 	.word	0x20000384

08000c74 <L6470_PerformPreparedApplicationCommand>:
{
 8000c74:	b538      	push	{r3, r4, r5, lr}
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000c76:	4c07      	ldr	r4, [pc, #28]	; (8000c94 <L6470_PerformPreparedApplicationCommand+0x20>)
 8000c78:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8000c7c:	4629      	mov	r1, r5
 8000c7e:	1d20      	adds	r0, r4, #4
 8000c80:	f7ff fbda 	bl	8000438 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000c84:	3430      	adds	r4, #48	; 0x30
 8000c86:	4621      	mov	r1, r4
 8000c88:	4628      	mov	r0, r5
 8000c8a:	f7ff fe07 	bl	800089c <L6470_DaisyChainCommand>
}
 8000c8e:	4620      	mov	r0, r4
 8000c90:	bd38      	pop	{r3, r4, r5, pc}
 8000c92:	bf00      	nop
 8000c94:	20000384 	.word	0x20000384

08000c98 <L6470_ExtractReturnedData>:
{
  uint32_t value;
  uint8_t i;
  
  value = 0x000000;
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 8000c98:	4401      	add	r1, r0
 8000c9a:	1e53      	subs	r3, r2, #1
 8000c9c:	00db      	lsls	r3, r3, #3
 8000c9e:	f102 5200 	add.w	r2, r2, #536870912	; 0x20000000
 8000ca2:	3a04      	subs	r2, #4
 8000ca4:	00d2      	lsls	r2, r2, #3
  value = 0x000000;
 8000ca6:	2000      	movs	r0, #0
  {
    value |= (*(pL6470_DaisyChainSpiRxStruct+(i*L6470DAISYCHAINSIZE)+L6470_Id))<<((LengthByte-i)*8);
 8000ca8:	f811 cf02 	ldrb.w	ip, [r1, #2]!
 8000cac:	fa0c fc03 	lsl.w	ip, ip, r3
 8000cb0:	ea40 000c 	orr.w	r0, r0, ip
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 8000cb4:	3b08      	subs	r3, #8
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d1f6      	bne.n	8000ca8 <L6470_ExtractReturnedData+0x10>
  }
  
  return value;
}
 8000cba:	4770      	bx	lr

08000cbc <L6470_GetParam>:
{
 8000cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000cc0:	b082      	sub	sp, #8
 8000cc2:	4606      	mov	r6, r0
 8000cc4:	460c      	mov	r4, r1
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 8000cc6:	4d12      	ldr	r5, [pc, #72]	; (8000d10 <L6470_GetParam+0x54>)
 8000cc8:	f105 0804 	add.w	r8, r5, #4
 8000ccc:	2300      	movs	r3, #0
 8000cce:	9301      	str	r3, [sp, #4]
 8000cd0:	9300      	str	r3, [sp, #0]
 8000cd2:	460b      	mov	r3, r1
 8000cd4:	2202      	movs	r2, #2
 8000cd6:	4641      	mov	r1, r8
 8000cd8:	f7ff fa86 	bl	80001e8 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000cdc:	f105 0728 	add.w	r7, r5, #40	; 0x28
 8000ce0:	4639      	mov	r1, r7
 8000ce2:	4640      	mov	r0, r8
 8000ce4:	f7ff fba8 	bl	8000438 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000ce8:	3530      	adds	r5, #48	; 0x30
 8000cea:	4629      	mov	r1, r5
 8000cec:	4638      	mov	r0, r7
 8000cee:	f7ff fdd5 	bl	800089c <L6470_DaisyChainCommand>
  ValueLengthByte = L6470_Register[L6470_RegId].LengthByte;
 8000cf2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8000cf6:	4907      	ldr	r1, [pc, #28]	; (8000d14 <L6470_GetParam+0x58>)
 8000cf8:	eb01 0484 	add.w	r4, r1, r4, lsl #2
  ReceivedValue = L6470_ExtractReturnedData(L6470_Id, (uint8_t*)L6470_DaisyChainSpiRxStruct, ValueLengthByte);
 8000cfc:	f894 211a 	ldrb.w	r2, [r4, #282]	; 0x11a
 8000d00:	4629      	mov	r1, r5
 8000d02:	4630      	mov	r0, r6
 8000d04:	f7ff ffc8 	bl	8000c98 <L6470_ExtractReturnedData>
}
 8000d08:	b002      	add	sp, #8
 8000d0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d0e:	bf00      	nop
 8000d10:	20000384 	.word	0x20000384
 8000d14:	080040e0 	.word	0x080040e0

08000d18 <L6470_CheckStatusRegisterFlag>:
  *
  * @retval state The flag state.
  */

uint8_t L6470_CheckStatusRegisterFlag(uint8_t L6470_Id, uint8_t L6470_StatusRegisterFlagId)
{
 8000d18:	b510      	push	{r4, lr}
 8000d1a:	460c      	mov	r4, r1
  uint8_t state = 0;
  
  *((uint16_t*)pL6470_StatusRegister) = L6470_GetParam(L6470_Id, L6470_STATUS_ID);
 8000d1c:	2118      	movs	r1, #24
 8000d1e:	f7ff ffcd 	bl	8000cbc <L6470_GetParam>
 8000d22:	4b34      	ldr	r3, [pc, #208]	; (8000df4 <L6470_CheckStatusRegisterFlag+0xdc>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	8018      	strh	r0, [r3, #0]
  
  switch(L6470_StatusRegisterFlagId)
 8000d28:	2c0e      	cmp	r4, #14
 8000d2a:	d861      	bhi.n	8000df0 <L6470_CheckStatusRegisterFlag+0xd8>
 8000d2c:	e8df f004 	tbb	[pc, r4]
 8000d30:	1a140e08 	.word	0x1a140e08
 8000d34:	312c2620 	.word	0x312c2620
 8000d38:	49433d37 	.word	0x49433d37
 8000d3c:	554f      	.short	0x554f
 8000d3e:	5b          	.byte	0x5b
 8000d3f:	00          	.byte	0x00
  {
  case HiZ_ID:
    state = pL6470_StatusRegister->HiZ;
 8000d40:	4b2c      	ldr	r3, [pc, #176]	; (8000df4 <L6470_CheckStatusRegisterFlag+0xdc>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	7818      	ldrb	r0, [r3, #0]
 8000d46:	f000 0001 	and.w	r0, r0, #1
    state = pL6470_StatusRegister->SCK_MOD;
    break;
  }
  
  return state;
}
 8000d4a:	bd10      	pop	{r4, pc}
    state = pL6470_StatusRegister->BUSY;
 8000d4c:	4b29      	ldr	r3, [pc, #164]	; (8000df4 <L6470_CheckStatusRegisterFlag+0xdc>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	7818      	ldrb	r0, [r3, #0]
 8000d52:	f3c0 0040 	ubfx	r0, r0, #1, #1
    break;
 8000d56:	e7f8      	b.n	8000d4a <L6470_CheckStatusRegisterFlag+0x32>
    state = pL6470_StatusRegister->SW_F;
 8000d58:	4b26      	ldr	r3, [pc, #152]	; (8000df4 <L6470_CheckStatusRegisterFlag+0xdc>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	7818      	ldrb	r0, [r3, #0]
 8000d5e:	f3c0 0080 	ubfx	r0, r0, #2, #1
    break;
 8000d62:	e7f2      	b.n	8000d4a <L6470_CheckStatusRegisterFlag+0x32>
    state = pL6470_StatusRegister->SW_EVN;
 8000d64:	4b23      	ldr	r3, [pc, #140]	; (8000df4 <L6470_CheckStatusRegisterFlag+0xdc>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	7818      	ldrb	r0, [r3, #0]
 8000d6a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    break;
 8000d6e:	e7ec      	b.n	8000d4a <L6470_CheckStatusRegisterFlag+0x32>
    state = pL6470_StatusRegister->DIR;
 8000d70:	4b20      	ldr	r3, [pc, #128]	; (8000df4 <L6470_CheckStatusRegisterFlag+0xdc>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	7818      	ldrb	r0, [r3, #0]
 8000d76:	f3c0 1000 	ubfx	r0, r0, #4, #1
    break;
 8000d7a:	e7e6      	b.n	8000d4a <L6470_CheckStatusRegisterFlag+0x32>
    state = pL6470_StatusRegister->MOT_STATUS;
 8000d7c:	4b1d      	ldr	r3, [pc, #116]	; (8000df4 <L6470_CheckStatusRegisterFlag+0xdc>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	7818      	ldrb	r0, [r3, #0]
 8000d82:	f3c0 1041 	ubfx	r0, r0, #5, #2
    break;
 8000d86:	e7e0      	b.n	8000d4a <L6470_CheckStatusRegisterFlag+0x32>
    state = pL6470_StatusRegister->NOTPERF_CMD;
 8000d88:	4b1a      	ldr	r3, [pc, #104]	; (8000df4 <L6470_CheckStatusRegisterFlag+0xdc>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	7818      	ldrb	r0, [r3, #0]
 8000d8e:	09c0      	lsrs	r0, r0, #7
    break;
 8000d90:	e7db      	b.n	8000d4a <L6470_CheckStatusRegisterFlag+0x32>
    state = pL6470_StatusRegister->WRONG_CMD;
 8000d92:	4b18      	ldr	r3, [pc, #96]	; (8000df4 <L6470_CheckStatusRegisterFlag+0xdc>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	7858      	ldrb	r0, [r3, #1]
 8000d98:	f000 0001 	and.w	r0, r0, #1
    break;
 8000d9c:	e7d5      	b.n	8000d4a <L6470_CheckStatusRegisterFlag+0x32>
    state = pL6470_StatusRegister->UVLO;
 8000d9e:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <L6470_CheckStatusRegisterFlag+0xdc>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	7858      	ldrb	r0, [r3, #1]
 8000da4:	f3c0 0040 	ubfx	r0, r0, #1, #1
    break;
 8000da8:	e7cf      	b.n	8000d4a <L6470_CheckStatusRegisterFlag+0x32>
    state = pL6470_StatusRegister->TH_WRN;
 8000daa:	4b12      	ldr	r3, [pc, #72]	; (8000df4 <L6470_CheckStatusRegisterFlag+0xdc>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	7858      	ldrb	r0, [r3, #1]
 8000db0:	f3c0 0080 	ubfx	r0, r0, #2, #1
    break;
 8000db4:	e7c9      	b.n	8000d4a <L6470_CheckStatusRegisterFlag+0x32>
    state = pL6470_StatusRegister->TH_SD;
 8000db6:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <L6470_CheckStatusRegisterFlag+0xdc>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	7858      	ldrb	r0, [r3, #1]
 8000dbc:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    break;
 8000dc0:	e7c3      	b.n	8000d4a <L6470_CheckStatusRegisterFlag+0x32>
    state = pL6470_StatusRegister->OCD;
 8000dc2:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <L6470_CheckStatusRegisterFlag+0xdc>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	7858      	ldrb	r0, [r3, #1]
 8000dc8:	f3c0 1000 	ubfx	r0, r0, #4, #1
    break;
 8000dcc:	e7bd      	b.n	8000d4a <L6470_CheckStatusRegisterFlag+0x32>
    state = pL6470_StatusRegister->STEP_LOSS_A;
 8000dce:	4b09      	ldr	r3, [pc, #36]	; (8000df4 <L6470_CheckStatusRegisterFlag+0xdc>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	7858      	ldrb	r0, [r3, #1]
 8000dd4:	f3c0 1040 	ubfx	r0, r0, #5, #1
    break;
 8000dd8:	e7b7      	b.n	8000d4a <L6470_CheckStatusRegisterFlag+0x32>
    state = pL6470_StatusRegister->STEP_LOSS_B;
 8000dda:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <L6470_CheckStatusRegisterFlag+0xdc>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	7858      	ldrb	r0, [r3, #1]
 8000de0:	f3c0 1080 	ubfx	r0, r0, #6, #1
    break;
 8000de4:	e7b1      	b.n	8000d4a <L6470_CheckStatusRegisterFlag+0x32>
    state = pL6470_StatusRegister->SCK_MOD;
 8000de6:	4b03      	ldr	r3, [pc, #12]	; (8000df4 <L6470_CheckStatusRegisterFlag+0xdc>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	7858      	ldrb	r0, [r3, #1]
 8000dec:	09c0      	lsrs	r0, r0, #7
    break;
 8000dee:	e7ac      	b.n	8000d4a <L6470_CheckStatusRegisterFlag+0x32>
  switch(L6470_StatusRegisterFlagId)
 8000df0:	2000      	movs	r0, #0
 8000df2:	e7aa      	b.n	8000d4a <L6470_CheckStatusRegisterFlag+0x32>
 8000df4:	20000000 	.word	0x20000000

08000df8 <L6470_GetStatus>:
{
 8000df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	4605      	mov	r5, r0
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 8000dfe:	4c0e      	ldr	r4, [pc, #56]	; (8000e38 <L6470_GetStatus+0x40>)
 8000e00:	1d27      	adds	r7, r4, #4
 8000e02:	2300      	movs	r3, #0
 8000e04:	9301      	str	r3, [sp, #4]
 8000e06:	9300      	str	r3, [sp, #0]
 8000e08:	2212      	movs	r2, #18
 8000e0a:	4639      	mov	r1, r7
 8000e0c:	f7ff f9ec 	bl	80001e8 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000e10:	f104 0628 	add.w	r6, r4, #40	; 0x28
 8000e14:	4631      	mov	r1, r6
 8000e16:	4638      	mov	r0, r7
 8000e18:	f7ff fb0e 	bl	8000438 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000e1c:	3430      	adds	r4, #48	; 0x30
 8000e1e:	4621      	mov	r1, r4
 8000e20:	4630      	mov	r0, r6
 8000e22:	f7ff fd3b 	bl	800089c <L6470_DaisyChainCommand>
  ReceivedValue = (uint16_t)L6470_ExtractReturnedData(L6470_Id, (uint8_t*)L6470_DaisyChainSpiRxStruct, 2);
 8000e26:	2202      	movs	r2, #2
 8000e28:	4621      	mov	r1, r4
 8000e2a:	4628      	mov	r0, r5
 8000e2c:	f7ff ff34 	bl	8000c98 <L6470_ExtractReturnedData>
}
 8000e30:	b280      	uxth	r0, r0
 8000e32:	b003      	add	sp, #12
 8000e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20000384 	.word	0x20000384

08000e3c <L6470_Config>:
  * @brief  Configures the L6470 registers.
  * @param  StepperMotorDriverHandle_t* The pointer to the stepper motor driver handle structure.
  * @param  MotorParameterData_t* The pointer to the related parameter data structure.
  */
void L6470_Config(StepperMotorDriverHandle_t *StepperMotorDriverHandle, MotorParameterData_t *MotorParameterData)
{
 8000e3c:	b570      	push	{r4, r5, r6, lr}
 8000e3e:	4604      	mov	r4, r0
 8000e40:	460d      	mov	r5, r1
  /* Prepare the 'Register' field of StepperMotorDriverHandle */
  StepperMotorDriverHandle->Register.ACC = Step_s2_2_Acc(MotorParameterData->acc);
 8000e42:	ed91 0a05 	vldr	s0, [r1, #20]
 8000e46:	f7ff fbef 	bl	8000628 <Step_s2_2_Acc>
 8000e4a:	4606      	mov	r6, r0
 8000e4c:	83a0      	strh	r0, [r4, #28]
  StepperMotorDriverHandle->Register.DEC = Step_s2_2_Dec(MotorParameterData->dec);
 8000e4e:	ed95 0a06 	vldr	s0, [r5, #24]
 8000e52:	f7ff fc01 	bl	8000658 <Step_s2_2_Dec>
 8000e56:	83e0      	strh	r0, [r4, #30]
  StepperMotorDriverHandle->Register.MAX_SPEED = Step_s_2_MaxSpeed(MotorParameterData->maxspeed);
 8000e58:	ed95 0a07 	vldr	s0, [r5, #28]
 8000e5c:	f7ff fc14 	bl	8000688 <Step_s_2_MaxSpeed>
 8000e60:	8420      	strh	r0, [r4, #32]
  StepperMotorDriverHandle->Register.MIN_SPEED = Step_s_2_MinSpeed(MotorParameterData->minspeed);
 8000e62:	ed95 0a08 	vldr	s0, [r5, #32]
 8000e66:	f7ff fc27 	bl	80006b8 <Step_s_2_MinSpeed>
 8000e6a:	8460      	strh	r0, [r4, #34]	; 0x22
  StepperMotorDriverHandle->Register.FS_SPD = Step_s_2_FsSpd(MotorParameterData->fsspd);
 8000e6c:	ed95 0a09 	vldr	s0, [r5, #36]	; 0x24
 8000e70:	f7ff fc3a 	bl	80006e8 <Step_s_2_FsSpd>
 8000e74:	84a0      	strh	r0, [r4, #36]	; 0x24
  StepperMotorDriverHandle->Register.KVAL_HOLD = (uint8_t)((float)((float)(MotorParameterData->kvalhold * 256) / (MotorParameterData->motorvoltage)));
 8000e76:	edd5 6a0a 	vldr	s13, [r5, #40]	; 0x28
 8000e7a:	eddf 7a74 	vldr	s15, [pc, #464]	; 800104c <L6470_Config+0x210>
 8000e7e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000e82:	ed95 6a00 	vldr	s12, [r5]
 8000e86:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8000e8a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8000e8e:	ee17 3a10 	vmov	r3, s14
 8000e92:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
  StepperMotorDriverHandle->Register.KVAL_RUN = (uint8_t)((float)((float)(MotorParameterData->kvalrun * 256) / (MotorParameterData->motorvoltage)));
 8000e96:	edd5 6a0b 	vldr	s13, [r5, #44]	; 0x2c
 8000e9a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000e9e:	ed95 6a00 	vldr	s12, [r5]
 8000ea2:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8000ea6:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8000eaa:	ee17 3a10 	vmov	r3, s14
 8000eae:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
  StepperMotorDriverHandle->Register.KVAL_ACC = (uint8_t)((float)((float)(MotorParameterData->kvalacc * 256) / (MotorParameterData->motorvoltage)));
 8000eb2:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8000eb6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000eba:	ed95 6a00 	vldr	s12, [r5]
 8000ebe:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8000ec2:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8000ec6:	ee17 3a10 	vmov	r3, s14
 8000eca:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  StepperMotorDriverHandle->Register.KVAL_DEC = (uint8_t)((float)((float)(MotorParameterData->kvaldec * 256) / (MotorParameterData->motorvoltage)));
 8000ece:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
 8000ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ed6:	edd5 6a00 	vldr	s13, [r5]
 8000eda:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000ede:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8000ee2:	ee17 3a90 	vmov	r3, s15
 8000ee6:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
  StepperMotorDriverHandle->Register.INT_SPEED = Step_s_2_IntSpeed(MotorParameterData->intspeed);
 8000eea:	ed95 0a0e 	vldr	s0, [r5, #56]	; 0x38
 8000eee:	f7ff fc17 	bl	8000720 <Step_s_2_IntSpeed>
 8000ef2:	8560      	strh	r0, [r4, #42]	; 0x2a
  StepperMotorDriverHandle->Register.ST_SLP = s_Step_2_StSlp(MotorParameterData->stslp);
 8000ef4:	ed95 0a0f 	vldr	s0, [r5, #60]	; 0x3c
 8000ef8:	f7ff fc2a 	bl	8000750 <s_Step_2_StSlp>
 8000efc:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
  StepperMotorDriverHandle->Register.FN_SLP_ACC = s_Step_2_FnSlpAcc(MotorParameterData->fnslpacc);
 8000f00:	ed95 0a10 	vldr	s0, [r5, #64]	; 0x40
 8000f04:	f7ff fc3e 	bl	8000784 <s_Step_2_FnSlpAcc>
 8000f08:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
  StepperMotorDriverHandle->Register.FN_SLP_DEC = s_Step_2_FnSlpDec(MotorParameterData->fnslpdec);
 8000f0c:	ed95 0a11 	vldr	s0, [r5, #68]	; 0x44
 8000f10:	f7ff fc52 	bl	80007b8 <s_Step_2_FnSlpDec>
 8000f14:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
  StepperMotorDriverHandle->Register.K_THERM = MotorParameterData->kterm;
 8000f18:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
 8000f1c:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
  StepperMotorDriverHandle->Register.OCD_TH = mA_2_OcdTh(MotorParameterData->ocdth);
 8000f20:	ed95 0a13 	vldr	s0, [r5, #76]	; 0x4c
 8000f24:	f7ff fc62 	bl	80007ec <mA_2_OcdTh>
 8000f28:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
  StepperMotorDriverHandle->Register.STALL_TH = mA_2_StallTh(MotorParameterData->stallth);
 8000f2c:	ed95 0a14 	vldr	s0, [r5, #80]	; 0x50
 8000f30:	f7ff fc86 	bl	8000840 <mA_2_StallTh>
 8000f34:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
  StepperMotorDriverHandle->Register.STEP_MODE = MotorParameterData->step_sel;
 8000f38:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
 8000f3c:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  StepperMotorDriverHandle->Register.ALARM_EN = MotorParameterData->alarmen;
 8000f40:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 8000f44:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  StepperMotorDriverHandle->Register.CONFIG = MotorParameterData->config;
 8000f48:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
 8000f4c:	86e3      	strh	r3, [r4, #54]	; 0x36
  
  /* Write the L6470 registers with the prepared data */
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_ACC_ID, StepperMotorDriverHandle->Register.ACC);
 8000f4e:	68a3      	ldr	r3, [r4, #8]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4632      	mov	r2, r6
 8000f54:	2104      	movs	r1, #4
 8000f56:	7820      	ldrb	r0, [r4, #0]
 8000f58:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_DEC_ID, StepperMotorDriverHandle->Register.DEC);
 8000f5a:	68a3      	ldr	r3, [r4, #8]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	8be2      	ldrh	r2, [r4, #30]
 8000f60:	2105      	movs	r1, #5
 8000f62:	7820      	ldrb	r0, [r4, #0]
 8000f64:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_MAX_SPEED_ID, StepperMotorDriverHandle->Register.MAX_SPEED);
 8000f66:	68a3      	ldr	r3, [r4, #8]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	8c22      	ldrh	r2, [r4, #32]
 8000f6c:	2106      	movs	r1, #6
 8000f6e:	7820      	ldrb	r0, [r4, #0]
 8000f70:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_MIN_SPEED_ID, StepperMotorDriverHandle->Register.MIN_SPEED);
 8000f72:	68a3      	ldr	r3, [r4, #8]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 8000f78:	2107      	movs	r1, #7
 8000f7a:	7820      	ldrb	r0, [r4, #0]
 8000f7c:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_FS_SPD_ID, StepperMotorDriverHandle->Register.FS_SPD);
 8000f7e:	68a3      	ldr	r3, [r4, #8]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
 8000f84:	2108      	movs	r1, #8
 8000f86:	7820      	ldrb	r0, [r4, #0]
 8000f88:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_KVAL_HOLD_ID, StepperMotorDriverHandle->Register.KVAL_HOLD);
 8000f8a:	68a3      	ldr	r3, [r4, #8]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 8000f92:	2109      	movs	r1, #9
 8000f94:	7820      	ldrb	r0, [r4, #0]
 8000f96:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_KVAL_RUN_ID, StepperMotorDriverHandle->Register.KVAL_RUN);
 8000f98:	68a3      	ldr	r3, [r4, #8]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
 8000fa0:	210a      	movs	r1, #10
 8000fa2:	7820      	ldrb	r0, [r4, #0]
 8000fa4:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_KVAL_ACC_ID, StepperMotorDriverHandle->Register.KVAL_ACC);
 8000fa6:	68a3      	ldr	r3, [r4, #8]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8000fae:	210b      	movs	r1, #11
 8000fb0:	7820      	ldrb	r0, [r4, #0]
 8000fb2:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_KVAL_DEC_ID, StepperMotorDriverHandle->Register.KVAL_DEC);
 8000fb4:	68a3      	ldr	r3, [r4, #8]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 8000fbc:	210c      	movs	r1, #12
 8000fbe:	7820      	ldrb	r0, [r4, #0]
 8000fc0:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_INT_SPEED_ID, StepperMotorDriverHandle->Register.INT_SPEED);
 8000fc2:	68a3      	ldr	r3, [r4, #8]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8000fc8:	210d      	movs	r1, #13
 8000fca:	7820      	ldrb	r0, [r4, #0]
 8000fcc:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_ST_SLP_ID, StepperMotorDriverHandle->Register.ST_SLP);
 8000fce:	68a3      	ldr	r3, [r4, #8]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8000fd6:	210e      	movs	r1, #14
 8000fd8:	7820      	ldrb	r0, [r4, #0]
 8000fda:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_FN_SLP_ACC_ID, StepperMotorDriverHandle->Register.FN_SLP_ACC);
 8000fdc:	68a3      	ldr	r3, [r4, #8]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8000fe4:	210f      	movs	r1, #15
 8000fe6:	7820      	ldrb	r0, [r4, #0]
 8000fe8:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_FN_SLP_DEC_ID, StepperMotorDriverHandle->Register.FN_SLP_DEC);
 8000fea:	68a3      	ldr	r3, [r4, #8]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
 8000ff2:	2110      	movs	r1, #16
 8000ff4:	7820      	ldrb	r0, [r4, #0]
 8000ff6:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_K_THERM_ID, StepperMotorDriverHandle->Register.K_THERM);
 8000ff8:	68a3      	ldr	r3, [r4, #8]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
 8001000:	2111      	movs	r1, #17
 8001002:	7820      	ldrb	r0, [r4, #0]
 8001004:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_OCD_TH_ID, StepperMotorDriverHandle->Register.OCD_TH);
 8001006:	68a3      	ldr	r3, [r4, #8]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 800100e:	2113      	movs	r1, #19
 8001010:	7820      	ldrb	r0, [r4, #0]
 8001012:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_STALL_TH_ID, StepperMotorDriverHandle->Register.STALL_TH);
 8001014:	68a3      	ldr	r3, [r4, #8]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
 800101c:	2114      	movs	r1, #20
 800101e:	7820      	ldrb	r0, [r4, #0]
 8001020:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_STEP_MODE_ID, StepperMotorDriverHandle->Register.STEP_MODE);
 8001022:	68a3      	ldr	r3, [r4, #8]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
 800102a:	2115      	movs	r1, #21
 800102c:	7820      	ldrb	r0, [r4, #0]
 800102e:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_ALARM_EN_ID, StepperMotorDriverHandle->Register.ALARM_EN);
 8001030:	68a3      	ldr	r3, [r4, #8]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8001038:	2116      	movs	r1, #22
 800103a:	7820      	ldrb	r0, [r4, #0]
 800103c:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_CONFIG_ID, StepperMotorDriverHandle->Register.CONFIG);
 800103e:	68a3      	ldr	r3, [r4, #8]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001044:	2117      	movs	r1, #23
 8001046:	7820      	ldrb	r0, [r4, #0]
 8001048:	4798      	blx	r3
}
 800104a:	bd70      	pop	{r4, r5, r6, pc}
 800104c:	43800000 	.word	0x43800000

08001050 <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8001050:	b530      	push	{r4, r5, lr}
 8001052:	b087      	sub	sp, #28
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8001054:	4602      	mov	r2, r0
 8001056:	b948      	cbnz	r0, 800106c <BSP_LED_Init+0x1c>
 8001058:	4b0f      	ldr	r3, [pc, #60]	; (8001098 <BSP_LED_Init+0x48>)
 800105a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800105c:	f041 0101 	orr.w	r1, r1, #1
 8001060:	6319      	str	r1, [r3, #48]	; 0x30
 8001062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001064:	f003 0301 	and.w	r3, r3, #1
 8001068:	9300      	str	r3, [sp, #0]
 800106a:	9b00      	ldr	r3, [sp, #0]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 800106c:	2520      	movs	r5, #32
 800106e:	9501      	str	r5, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001070:	2301      	movs	r3, #1
 8001072:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001074:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001076:	2302      	movs	r3, #2
 8001078:	9304      	str	r3, [sp, #16]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 800107a:	4c08      	ldr	r4, [pc, #32]	; (800109c <BSP_LED_Init+0x4c>)
 800107c:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8001080:	a901      	add	r1, sp, #4
 8001082:	6860      	ldr	r0, [r4, #4]
 8001084:	f000 fc70 	bl	8001968 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8001088:	2200      	movs	r2, #0
 800108a:	4629      	mov	r1, r5
 800108c:	6860      	ldr	r0, [r4, #4]
 800108e:	f000 fd99 	bl	8001bc4 <HAL_GPIO_WritePin>
}
 8001092:	b007      	add	sp, #28
 8001094:	bd30      	pop	{r4, r5, pc}
 8001096:	bf00      	nop
 8001098:	40023800 	.word	0x40023800
 800109c:	20000098 	.word	0x20000098

080010a0 <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80010a0:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 80010a2:	4b04      	ldr	r3, [pc, #16]	; (80010b4 <BSP_LED_On+0x14>)
 80010a4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80010a8:	2201      	movs	r2, #1
 80010aa:	2120      	movs	r1, #32
 80010ac:	6840      	ldr	r0, [r0, #4]
 80010ae:	f000 fd89 	bl	8001bc4 <HAL_GPIO_WritePin>
}
 80010b2:	bd08      	pop	{r3, pc}
 80010b4:	20000098 	.word	0x20000098

080010b8 <BSP_LED_Off>:
  *   This parameter can be one of following parameters:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 80010b8:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80010ba:	4b04      	ldr	r3, [pc, #16]	; (80010cc <BSP_LED_Off+0x14>)
 80010bc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80010c0:	2200      	movs	r2, #0
 80010c2:	2120      	movs	r1, #32
 80010c4:	6840      	ldr	r0, [r0, #4]
 80010c6:	f000 fd7d 	bl	8001bc4 <HAL_GPIO_WritePin>
}
 80010ca:	bd08      	pop	{r3, pc}
 80010cc:	20000098 	.word	0x20000098

080010d0 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80010d0:	b510      	push	{r4, lr}
 80010d2:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80010d4:	4684      	mov	ip, r0
 80010d6:	b948      	cbnz	r0, 80010ec <BSP_PB_Init+0x1c>
 80010d8:	4b1b      	ldr	r3, [pc, #108]	; (8001148 <BSP_PB_Init+0x78>)
 80010da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010dc:	f042 0204 	orr.w	r2, r2, #4
 80010e0:	631a      	str	r2, [r3, #48]	; 0x30
 80010e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e4:	f003 0304 	and.w	r3, r3, #4
 80010e8:	9300      	str	r3, [sp, #0]
 80010ea:	9b00      	ldr	r3, [sp, #0]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 80010ec:	b119      	cbz	r1, 80010f6 <BSP_PB_Init+0x26>
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 80010ee:	2901      	cmp	r1, #1
 80010f0:	d012      	beq.n	8001118 <BSP_PB_Init+0x48>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
  }
}
 80010f2:	b006      	add	sp, #24
 80010f4:	bd10      	pop	{r4, pc}
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 80010f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010fa:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010fc:	2300      	movs	r3, #0
 80010fe:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001100:	2302      	movs	r3, #2
 8001102:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001104:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8001106:	4b11      	ldr	r3, [pc, #68]	; (800114c <BSP_PB_Init+0x7c>)
 8001108:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800110c:	a901      	add	r1, sp, #4
 800110e:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8001112:	f000 fc29 	bl	8001968 <HAL_GPIO_Init>
  if(ButtonMode == BUTTON_MODE_EXTI)
 8001116:	e7ec      	b.n	80010f2 <BSP_PB_Init+0x22>
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8001118:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800111c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2400      	movs	r4, #0
 8001120:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; 
 8001122:	4b0b      	ldr	r3, [pc, #44]	; (8001150 <BSP_PB_Init+0x80>)
 8001124:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8001126:	4b09      	ldr	r3, [pc, #36]	; (800114c <BSP_PB_Init+0x7c>)
 8001128:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800112c:	a901      	add	r1, sp, #4
 800112e:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8001132:	f000 fc19 	bl	8001968 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8001136:	4622      	mov	r2, r4
 8001138:	210f      	movs	r1, #15
 800113a:	2028      	movs	r0, #40	; 0x28
 800113c:	f000 fb88 	bl	8001850 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8001140:	2028      	movs	r0, #40	; 0x28
 8001142:	f000 fbc9 	bl	80018d8 <HAL_NVIC_EnableIRQ>
}
 8001146:	e7d4      	b.n	80010f2 <BSP_PB_Init+0x22>
 8001148:	40023800 	.word	0x40023800
 800114c:	20000098 	.word	0x20000098
 8001150:	10210000 	.word	0x10210000

08001154 <BSP_Select>:
  * @param  ExpBrd_Id   The identifier of the Expansion Board to be addressed.
  * @retval FlagStatus  SET or RESET related to the result.
  */
uint8_t BSP_Select(uint8_t ExpBrd_Id)
{
  if (ExpBrd_Id < EXPBRD_MOUNTED_NR)
 8001154:	b948      	cbnz	r0, 800116a <BSP_Select+0x16>
  {
    L6470_nCS_GPIO.gpio_clk_enable = L6470_nCS_GPIO_Array[ExpBrd_Id].gpio_clk_enable;
 8001156:	4b06      	ldr	r3, [pc, #24]	; (8001170 <BSP_Select+0x1c>)
 8001158:	4a06      	ldr	r2, [pc, #24]	; (8001174 <BSP_Select+0x20>)
 800115a:	6811      	ldr	r1, [r2, #0]
 800115c:	6019      	str	r1, [r3, #0]
    L6470_nCS_GPIO.port = L6470_nCS_GPIO_Array[ExpBrd_Id].port;
 800115e:	6851      	ldr	r1, [r2, #4]
 8001160:	6059      	str	r1, [r3, #4]
    L6470_nCS_GPIO.pin = L6470_nCS_GPIO_Array[ExpBrd_Id].pin;
 8001162:	8912      	ldrh	r2, [r2, #8]
 8001164:	811a      	strh	r2, [r3, #8]
    return SET;
 8001166:	2001      	movs	r0, #1
 8001168:	4770      	bx	lr
  }
  else
    return RESET;
 800116a:	2000      	movs	r0, #0
}
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	200003c0 	.word	0x200003c0
 8001174:	200000a4 	.word	0x200000a4

08001178 <BSP_L6470_ResetDevice>:
{
 8001178:	b510      	push	{r4, lr}
 800117a:	460c      	mov	r4, r1
  if (BSP_Select(ExpBrd_Id))
 800117c:	f7ff ffea 	bl	8001154 <BSP_Select>
 8001180:	b900      	cbnz	r0, 8001184 <BSP_L6470_ResetDevice+0xc>
}
 8001182:	bd10      	pop	{r4, pc}
    L6470_ResetDevice(L6470_Id);
 8001184:	4620      	mov	r0, r4
 8001186:	f7ff fcf3 	bl	8000b70 <L6470_ResetDevice>
}
 800118a:	e7fa      	b.n	8001182 <BSP_L6470_ResetDevice+0xa>

0800118c <BSP_L6470_GetStatus>:
{
 800118c:	b510      	push	{r4, lr}
 800118e:	460c      	mov	r4, r1
  if (BSP_Select(ExpBrd_Id))
 8001190:	f7ff ffe0 	bl	8001154 <BSP_Select>
 8001194:	b908      	cbnz	r0, 800119a <BSP_L6470_GetStatus+0xe>
    return 0;
 8001196:	2000      	movs	r0, #0
}
 8001198:	bd10      	pop	{r4, pc}
    return L6470_GetStatus(L6470_Id);
 800119a:	4620      	mov	r0, r4
 800119c:	f7ff fe2c 	bl	8000df8 <L6470_GetStatus>
 80011a0:	e7fa      	b.n	8001198 <BSP_L6470_GetStatus+0xc>

080011a2 <BSP_L6470_SetParam>:
{
 80011a2:	b570      	push	{r4, r5, r6, lr}
 80011a4:	460c      	mov	r4, r1
 80011a6:	4615      	mov	r5, r2
 80011a8:	461e      	mov	r6, r3
  if (BSP_Select(ExpBrd_Id))
 80011aa:	f7ff ffd3 	bl	8001154 <BSP_Select>
 80011ae:	b900      	cbnz	r0, 80011b2 <BSP_L6470_SetParam+0x10>
}
 80011b0:	bd70      	pop	{r4, r5, r6, pc}
    L6470_SetParam(L6470_Id, L6470_RegId, Value);
 80011b2:	4632      	mov	r2, r6
 80011b4:	4629      	mov	r1, r5
 80011b6:	4620      	mov	r0, r4
 80011b8:	f7ff fba6 	bl	8000908 <L6470_SetParam>
}
 80011bc:	e7f8      	b.n	80011b0 <BSP_L6470_SetParam+0xe>

080011be <BSP_L6470_GetParam>:
{
 80011be:	b538      	push	{r3, r4, r5, lr}
 80011c0:	460c      	mov	r4, r1
 80011c2:	4615      	mov	r5, r2
  if (BSP_Select(ExpBrd_Id))
 80011c4:	f7ff ffc6 	bl	8001154 <BSP_Select>
 80011c8:	b908      	cbnz	r0, 80011ce <BSP_L6470_GetParam+0x10>
    return 0xFF;
 80011ca:	20ff      	movs	r0, #255	; 0xff
}
 80011cc:	bd38      	pop	{r3, r4, r5, pc}
    return L6470_GetParam(L6470_Id, L6470_RegId);
 80011ce:	4629      	mov	r1, r5
 80011d0:	4620      	mov	r0, r4
 80011d2:	f7ff fd73 	bl	8000cbc <L6470_GetParam>
 80011d6:	e7f9      	b.n	80011cc <BSP_L6470_GetParam+0xe>

080011d8 <BSP_L6470_Run>:
{
 80011d8:	b570      	push	{r4, r5, r6, lr}
 80011da:	460c      	mov	r4, r1
 80011dc:	4615      	mov	r5, r2
 80011de:	461e      	mov	r6, r3
  if (BSP_Select(ExpBrd_Id))
 80011e0:	f7ff ffb8 	bl	8001154 <BSP_Select>
 80011e4:	b900      	cbnz	r0, 80011e8 <BSP_L6470_Run+0x10>
}
 80011e6:	bd70      	pop	{r4, r5, r6, pc}
    L6470_Run(L6470_Id, L6470_DirId, Speed);
 80011e8:	4632      	mov	r2, r6
 80011ea:	4629      	mov	r1, r5
 80011ec:	4620      	mov	r0, r4
 80011ee:	f7ff fba7 	bl	8000940 <L6470_Run>
}
 80011f2:	e7f8      	b.n	80011e6 <BSP_L6470_Run+0xe>

080011f4 <BSP_L6470_StepClock>:
{
 80011f4:	b538      	push	{r3, r4, r5, lr}
 80011f6:	460c      	mov	r4, r1
 80011f8:	4615      	mov	r5, r2
  if (BSP_Select(ExpBrd_Id))
 80011fa:	f7ff ffab 	bl	8001154 <BSP_Select>
 80011fe:	b900      	cbnz	r0, 8001202 <BSP_L6470_StepClock+0xe>
}
 8001200:	bd38      	pop	{r3, r4, r5, pc}
    L6470_StepClock(L6470_Id, L6470_DirId);
 8001202:	4629      	mov	r1, r5
 8001204:	4620      	mov	r0, r4
 8001206:	f7ff fbb7 	bl	8000978 <L6470_StepClock>
}
 800120a:	e7f9      	b.n	8001200 <BSP_L6470_StepClock+0xc>

0800120c <BSP_L6470_Move>:
{
 800120c:	b570      	push	{r4, r5, r6, lr}
 800120e:	460c      	mov	r4, r1
 8001210:	4615      	mov	r5, r2
 8001212:	461e      	mov	r6, r3
  if (BSP_Select(ExpBrd_Id))
 8001214:	f7ff ff9e 	bl	8001154 <BSP_Select>
 8001218:	b900      	cbnz	r0, 800121c <BSP_L6470_Move+0x10>
}
 800121a:	bd70      	pop	{r4, r5, r6, pc}
    L6470_Move(L6470_Id, L6470_DirId, N_Step);
 800121c:	4632      	mov	r2, r6
 800121e:	4629      	mov	r1, r5
 8001220:	4620      	mov	r0, r4
 8001222:	f7ff fbc5 	bl	80009b0 <L6470_Move>
}
 8001226:	e7f8      	b.n	800121a <BSP_L6470_Move+0xe>

08001228 <BSP_L6470_GoTo>:
{
 8001228:	b538      	push	{r3, r4, r5, lr}
 800122a:	460c      	mov	r4, r1
 800122c:	4615      	mov	r5, r2
  if (BSP_Select(ExpBrd_Id))
 800122e:	f7ff ff91 	bl	8001154 <BSP_Select>
 8001232:	b900      	cbnz	r0, 8001236 <BSP_L6470_GoTo+0xe>
}
 8001234:	bd38      	pop	{r3, r4, r5, pc}
    L6470_GoTo(L6470_Id, AbsPos);
 8001236:	4629      	mov	r1, r5
 8001238:	4620      	mov	r0, r4
 800123a:	f7ff fbd5 	bl	80009e8 <L6470_GoTo>
}
 800123e:	e7f9      	b.n	8001234 <BSP_L6470_GoTo+0xc>

08001240 <BSP_L6470_GoToDir>:
{
 8001240:	b570      	push	{r4, r5, r6, lr}
 8001242:	460c      	mov	r4, r1
 8001244:	4615      	mov	r5, r2
 8001246:	461e      	mov	r6, r3
  if (BSP_Select(ExpBrd_Id))
 8001248:	f7ff ff84 	bl	8001154 <BSP_Select>
 800124c:	b900      	cbnz	r0, 8001250 <BSP_L6470_GoToDir+0x10>
}
 800124e:	bd70      	pop	{r4, r5, r6, pc}
    L6470_GoToDir(L6470_Id, L6470_DirId, AbsPos);
 8001250:	4632      	mov	r2, r6
 8001252:	4629      	mov	r1, r5
 8001254:	4620      	mov	r0, r4
 8001256:	f7ff fbe7 	bl	8000a28 <L6470_GoToDir>
}
 800125a:	e7f8      	b.n	800124e <BSP_L6470_GoToDir+0xe>

0800125c <BSP_L6470_GoUntil>:
{
 800125c:	b570      	push	{r4, r5, r6, lr}
 800125e:	460c      	mov	r4, r1
 8001260:	4615      	mov	r5, r2
 8001262:	461e      	mov	r6, r3
  if (BSP_Select(ExpBrd_Id))
 8001264:	f7ff ff76 	bl	8001154 <BSP_Select>
 8001268:	b900      	cbnz	r0, 800126c <BSP_L6470_GoUntil+0x10>
}
 800126a:	bd70      	pop	{r4, r5, r6, pc}
    L6470_GoUntil(L6470_Id, L6470_ActId, L6470_DirId, Speed);
 800126c:	9b04      	ldr	r3, [sp, #16]
 800126e:	4632      	mov	r2, r6
 8001270:	4629      	mov	r1, r5
 8001272:	4620      	mov	r0, r4
 8001274:	f7ff fbf8 	bl	8000a68 <L6470_GoUntil>
}
 8001278:	e7f7      	b.n	800126a <BSP_L6470_GoUntil+0xe>

0800127a <BSP_L6470_ReleaseSW>:
{
 800127a:	b570      	push	{r4, r5, r6, lr}
 800127c:	460c      	mov	r4, r1
 800127e:	4615      	mov	r5, r2
 8001280:	461e      	mov	r6, r3
  if (BSP_Select(ExpBrd_Id))
 8001282:	f7ff ff67 	bl	8001154 <BSP_Select>
 8001286:	b900      	cbnz	r0, 800128a <BSP_L6470_ReleaseSW+0x10>
}
 8001288:	bd70      	pop	{r4, r5, r6, pc}
    L6470_ReleaseSW(L6470_Id, L6470_ActId, L6470_DirId);
 800128a:	4632      	mov	r2, r6
 800128c:	4629      	mov	r1, r5
 800128e:	4620      	mov	r0, r4
 8001290:	f7ff fc04 	bl	8000a9c <L6470_ReleaseSW>
}
 8001294:	e7f8      	b.n	8001288 <BSP_L6470_ReleaseSW+0xe>

08001296 <BSP_L6470_GoHome>:
{
 8001296:	b510      	push	{r4, lr}
 8001298:	460c      	mov	r4, r1
  if (BSP_Select(ExpBrd_Id))
 800129a:	f7ff ff5b 	bl	8001154 <BSP_Select>
 800129e:	b900      	cbnz	r0, 80012a2 <BSP_L6470_GoHome+0xc>
}
 80012a0:	bd10      	pop	{r4, pc}
    L6470_GoHome(L6470_Id);
 80012a2:	4620      	mov	r0, r4
 80012a4:	f7ff fc16 	bl	8000ad4 <L6470_GoHome>
}
 80012a8:	e7fa      	b.n	80012a0 <BSP_L6470_GoHome+0xa>

080012aa <BSP_L6470_GoMark>:
{
 80012aa:	b510      	push	{r4, lr}
 80012ac:	460c      	mov	r4, r1
  if (BSP_Select(ExpBrd_Id))
 80012ae:	f7ff ff51 	bl	8001154 <BSP_Select>
 80012b2:	b900      	cbnz	r0, 80012b6 <BSP_L6470_GoMark+0xc>
}
 80012b4:	bd10      	pop	{r4, pc}
    L6470_GoMark(L6470_Id);
 80012b6:	4620      	mov	r0, r4
 80012b8:	f7ff fc26 	bl	8000b08 <L6470_GoMark>
}
 80012bc:	e7fa      	b.n	80012b4 <BSP_L6470_GoMark+0xa>

080012be <BSP_L6470_ResetPos>:
{
 80012be:	b510      	push	{r4, lr}
 80012c0:	460c      	mov	r4, r1
  if (BSP_Select(ExpBrd_Id))
 80012c2:	f7ff ff47 	bl	8001154 <BSP_Select>
 80012c6:	b900      	cbnz	r0, 80012ca <BSP_L6470_ResetPos+0xc>
}
 80012c8:	bd10      	pop	{r4, pc}
    L6470_ResetPos(L6470_Id);
 80012ca:	4620      	mov	r0, r4
 80012cc:	f7ff fc36 	bl	8000b3c <L6470_ResetPos>
}
 80012d0:	e7fa      	b.n	80012c8 <BSP_L6470_ResetPos+0xa>

080012d2 <BSP_L6470_SoftStop>:
{
 80012d2:	b510      	push	{r4, lr}
 80012d4:	460c      	mov	r4, r1
  if (BSP_Select(ExpBrd_Id))
 80012d6:	f7ff ff3d 	bl	8001154 <BSP_Select>
 80012da:	b900      	cbnz	r0, 80012de <BSP_L6470_SoftStop+0xc>
}
 80012dc:	bd10      	pop	{r4, pc}
    L6470_SoftStop(L6470_Id);
 80012de:	4620      	mov	r0, r4
 80012e0:	f7ff fc60 	bl	8000ba4 <L6470_SoftStop>
}
 80012e4:	e7fa      	b.n	80012dc <BSP_L6470_SoftStop+0xa>

080012e6 <BSP_L6470_HardStop>:
{
 80012e6:	b510      	push	{r4, lr}
 80012e8:	460c      	mov	r4, r1
  if (BSP_Select(ExpBrd_Id))
 80012ea:	f7ff ff33 	bl	8001154 <BSP_Select>
 80012ee:	b900      	cbnz	r0, 80012f2 <BSP_L6470_HardStop+0xc>
}
 80012f0:	bd10      	pop	{r4, pc}
    L6470_HardStop(L6470_Id);
 80012f2:	4620      	mov	r0, r4
 80012f4:	f7ff fc70 	bl	8000bd8 <L6470_HardStop>
}
 80012f8:	e7fa      	b.n	80012f0 <BSP_L6470_HardStop+0xa>

080012fa <BSP_L6470_SoftHiZ>:
{
 80012fa:	b510      	push	{r4, lr}
 80012fc:	460c      	mov	r4, r1
  if (BSP_Select(ExpBrd_Id))
 80012fe:	f7ff ff29 	bl	8001154 <BSP_Select>
 8001302:	b900      	cbnz	r0, 8001306 <BSP_L6470_SoftHiZ+0xc>
}
 8001304:	bd10      	pop	{r4, pc}
    L6470_SoftHiZ(L6470_Id);
 8001306:	4620      	mov	r0, r4
 8001308:	f7ff fc80 	bl	8000c0c <L6470_SoftHiZ>
}
 800130c:	e7fa      	b.n	8001304 <BSP_L6470_SoftHiZ+0xa>

0800130e <BSP_L6470_HardHiZ>:
{
 800130e:	b510      	push	{r4, lr}
 8001310:	460c      	mov	r4, r1
  if (BSP_Select(ExpBrd_Id))
 8001312:	f7ff ff1f 	bl	8001154 <BSP_Select>
 8001316:	b900      	cbnz	r0, 800131a <BSP_L6470_HardHiZ+0xc>
}
 8001318:	bd10      	pop	{r4, pc}
    L6470_HardHiZ(L6470_Id);
 800131a:	4620      	mov	r0, r4
 800131c:	f7ff fc90 	bl	8000c40 <L6470_HardHiZ>
}
 8001320:	e7fa      	b.n	8001318 <BSP_L6470_HardHiZ+0xa>

08001322 <BSP_L6470_CheckStatusRegisterFlag>:
{
 8001322:	b538      	push	{r3, r4, r5, lr}
 8001324:	460c      	mov	r4, r1
 8001326:	4615      	mov	r5, r2
  if (BSP_Select(ExpBrd_Id))
 8001328:	f7ff ff14 	bl	8001154 <BSP_Select>
 800132c:	b908      	cbnz	r0, 8001332 <BSP_L6470_CheckStatusRegisterFlag+0x10>
    return 0xFF;
 800132e:	20ff      	movs	r0, #255	; 0xff
}
 8001330:	bd38      	pop	{r3, r4, r5, pc}
    return L6470_CheckStatusRegisterFlag(L6470_Id, L6470_StatusRegisterFlagId);
 8001332:	4629      	mov	r1, r5
 8001334:	4620      	mov	r0, r4
 8001336:	f7ff fcef 	bl	8000d18 <L6470_CheckStatusRegisterFlag>
 800133a:	e7f9      	b.n	8001330 <BSP_L6470_CheckStatusRegisterFlag+0xe>

0800133c <BSP_L6470_0_0_Config>:
 * @brief   Initialize the data structure related to the stepper motor driver #0
 *          of the expansion board #0.
 * @param   MotorParameterData_t* The pointer to the related parameter data structure.
*/
void BSP_L6470_0_0_Config(MotorParameterData_t *MotorParameterData)
{
 800133c:	b508      	push	{r3, lr}
 800133e:	4601      	mov	r1, r0
  StepperMotorDriverHandle_t *StepperMotorDriverHandle;
  
  StepperMotorDriverHandle = &L6470DrvMtx[0][0];
  L6470_Config(StepperMotorDriverHandle, MotorParameterData);
 8001340:	4801      	ldr	r0, [pc, #4]	; (8001348 <BSP_L6470_0_0_Config+0xc>)
 8001342:	f7ff fd7b 	bl	8000e3c <L6470_Config>
}
 8001346:	bd08      	pop	{r3, pc}
 8001348:	200000b0 	.word	0x200000b0

0800134c <BSP_L6470_0_1_Config>:
 * @brief   Initialize the data structure related to the stepper motor driver #1
 *          of the expansion board #0.
 * @param   MotorParameterData_t* The pointer to the related parameter data structure.
 */
void BSP_L6470_0_1_Config(MotorParameterData_t *MotorParameterData)
{
 800134c:	b508      	push	{r3, lr}
 800134e:	4601      	mov	r1, r0
  StepperMotorDriverHandle_t *StepperMotorDriverHandle;
  
  StepperMotorDriverHandle = &L6470DrvMtx[0][1];
  L6470_Config(StepperMotorDriverHandle, MotorParameterData);
 8001350:	4801      	ldr	r0, [pc, #4]	; (8001358 <BSP_L6470_0_1_Config+0xc>)
 8001352:	f7ff fd73 	bl	8000e3c <L6470_Config>
}
 8001356:	bd08      	pop	{r3, pc}
 8001358:	200000ec 	.word	0x200000ec

0800135c <BSP_L6470_1_0_Config>:
 * @brief   Initialize the data structure related to the stepper motor driver #0
 *          of the expansion board #1.
 * @param   MotorParameterData_t* The pointer to the related parameter data structure.
 */
void BSP_L6470_1_0_Config(MotorParameterData_t *MotorParameterData)
{
 800135c:	b508      	push	{r3, lr}
 800135e:	4601      	mov	r1, r0
  StepperMotorDriverHandle_t *StepperMotorDriverHandle;
  
  StepperMotorDriverHandle = &L6470DrvMtx[1][0];
  L6470_Config(StepperMotorDriverHandle, MotorParameterData);
 8001360:	4801      	ldr	r0, [pc, #4]	; (8001368 <BSP_L6470_1_0_Config+0xc>)
 8001362:	f7ff fd6b 	bl	8000e3c <L6470_Config>
}
 8001366:	bd08      	pop	{r3, pc}
 8001368:	20000128 	.word	0x20000128

0800136c <BSP_L6470_1_1_Config>:
 * @brief   Initialize the data structure related to the stepper motor driver #1
 *          of the expansion board #1.
 * @param   MotorParameterData_t* The pointer to the related parameter data structure.
 */
void BSP_L6470_1_1_Config(MotorParameterData_t *MotorParameterData)
{
 800136c:	b508      	push	{r3, lr}
 800136e:	4601      	mov	r1, r0
  StepperMotorDriverHandle_t *StepperMotorDriverHandle;
  
  StepperMotorDriverHandle = &L6470DrvMtx[1][1];
  L6470_Config(StepperMotorDriverHandle, MotorParameterData);
 8001370:	4801      	ldr	r0, [pc, #4]	; (8001378 <BSP_L6470_1_1_Config+0xc>)
 8001372:	f7ff fd63 	bl	8000e3c <L6470_Config>
}
 8001376:	bd08      	pop	{r3, pc}
 8001378:	20000164 	.word	0x20000164

0800137c <BSP_L6470_2_0_Config>:
 * @brief   Initialize the data structure related to the stepper motor driver #0
 *          of the expansion board #2.
 * @param   MotorParameterData_t* The pointer to the related parameter data structure.
 */
void BSP_L6470_2_0_Config(MotorParameterData_t *MotorParameterData)
{
 800137c:	b508      	push	{r3, lr}
 800137e:	4601      	mov	r1, r0
  StepperMotorDriverHandle_t *StepperMotorDriverHandle;
  
  StepperMotorDriverHandle = &L6470DrvMtx[2][0];
  L6470_Config(StepperMotorDriverHandle, MotorParameterData);
 8001380:	4801      	ldr	r0, [pc, #4]	; (8001388 <BSP_L6470_2_0_Config+0xc>)
 8001382:	f7ff fd5b 	bl	8000e3c <L6470_Config>
}
 8001386:	bd08      	pop	{r3, pc}
 8001388:	200001a0 	.word	0x200001a0

0800138c <BSP_L6470_2_1_Config>:
 * @brief   Initialize the data structure related to the stepper motor driver #1
 *          of the expansion board #2.
 * @param   MotorParameterData_t* The pointer to the related parameter data structure.
 */
void BSP_L6470_2_1_Config(MotorParameterData_t *MotorParameterData)
{
 800138c:	b508      	push	{r3, lr}
 800138e:	4601      	mov	r1, r0
  StepperMotorDriverHandle_t *StepperMotorDriverHandle;
  
  StepperMotorDriverHandle = &L6470DrvMtx[2][1];
  L6470_Config(StepperMotorDriverHandle, MotorParameterData);
 8001390:	4801      	ldr	r0, [pc, #4]	; (8001398 <BSP_L6470_2_1_Config+0xc>)
 8001392:	f7ff fd53 	bl	8000e3c <L6470_Config>
}
 8001396:	bd08      	pop	{r3, pc}
 8001398:	200001dc 	.word	0x200001dc

0800139c <BSP_L6470_3_0_Config>:
 * @brief   Initialize the data structure related to the stepper motor driver #0
 *          of the expansion board #3.
 * @param   MotorParameterData_t* The pointer to the related parameter data structure.
 */
void BSP_L6470_3_0_Config(MotorParameterData_t *MotorParameterData)
{
 800139c:	b508      	push	{r3, lr}
 800139e:	4601      	mov	r1, r0
  StepperMotorDriverHandle_t *StepperMotorDriverHandle;
  
  StepperMotorDriverHandle = &L6470DrvMtx[3][0];
  L6470_Config(StepperMotorDriverHandle, MotorParameterData);
 80013a0:	4801      	ldr	r0, [pc, #4]	; (80013a8 <BSP_L6470_3_0_Config+0xc>)
 80013a2:	f7ff fd4b 	bl	8000e3c <L6470_Config>
}
 80013a6:	bd08      	pop	{r3, pc}
 80013a8:	20000218 	.word	0x20000218

080013ac <BSP_L6470_3_1_Config>:
 * @brief   Initialize the data structure related to the stepper motor driver #1
 *          of the expansion board #3.
 * @param   MotorParameterData_t* The pointer to the related parameter data structure.
 */
void BSP_L6470_3_1_Config(MotorParameterData_t *MotorParameterData)
{
 80013ac:	b508      	push	{r3, lr}
 80013ae:	4601      	mov	r1, r0
  StepperMotorDriverHandle_t *StepperMotorDriverHandle;
  
  StepperMotorDriverHandle = &L6470DrvMtx[3][1];
  L6470_Config(StepperMotorDriverHandle, MotorParameterData);
 80013b0:	4801      	ldr	r0, [pc, #4]	; (80013b8 <BSP_L6470_3_1_Config+0xc>)
 80013b2:	f7ff fd43 	bl	8000e3c <L6470_Config>
}
 80013b6:	bd08      	pop	{r3, pc}
 80013b8:	20000254 	.word	0x20000254

080013bc <BSP_NUCLEO_GPIO_Init>:
{
 80013bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013c0:	b086      	sub	sp, #24
  GPIO_CLK_ENABLE(L6470_nSTBY_nRST_GPIO.gpio_clk_enable);
 80013c2:	4e29      	ldr	r6, [pc, #164]	; (8001468 <BSP_NUCLEO_GPIO_Init+0xac>)
 80013c4:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80013c6:	4c29      	ldr	r4, [pc, #164]	; (800146c <BSP_NUCLEO_GPIO_Init+0xb0>)
 80013c8:	f8d4 21ec 	ldr.w	r2, [r4, #492]	; 0x1ec
 80013cc:	4313      	orrs	r3, r2
 80013ce:	6333      	str	r3, [r6, #48]	; 0x30
  GPIO_InitStruct.Pin = L6470_nSTBY_nRST_GPIO.pin;
 80013d0:	f8b4 31f4 	ldrh.w	r3, [r4, #500]	; 0x1f4
 80013d4:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80013d6:	2311      	movs	r3, #17
 80013d8:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013da:	2500      	movs	r5, #0
 80013dc:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80013de:	2703      	movs	r7, #3
 80013e0:	9704      	str	r7, [sp, #16]
  HAL_GPIO_Init(L6470_nSTBY_nRST_GPIO.port, &GPIO_InitStruct);
 80013e2:	a901      	add	r1, sp, #4
 80013e4:	f8d4 01f0 	ldr.w	r0, [r4, #496]	; 0x1f0
 80013e8:	f000 fabe 	bl	8001968 <HAL_GPIO_Init>
  GPIO_CLK_ENABLE(L6470_nBUSY_SYNC_GPIO.gpio_clk_enable);
 80013ec:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80013ee:	f8d4 21f8 	ldr.w	r2, [r4, #504]	; 0x1f8
 80013f2:	4313      	orrs	r3, r2
 80013f4:	6333      	str	r3, [r6, #48]	; 0x30
  GPIO_InitStruct.Pin = L6470_nBUSY_SYNC_GPIO.pin;
 80013f6:	f8b4 3200 	ldrh.w	r3, [r4, #512]	; 0x200
 80013fa:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013fc:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8001470 <BSP_NUCLEO_GPIO_Init+0xb4>
 8001400:	f8cd 8008 	str.w	r8, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	9503      	str	r5, [sp, #12]
  HAL_GPIO_Init(L6470_nBUSY_SYNC_GPIO.port, &GPIO_InitStruct);
 8001406:	a901      	add	r1, sp, #4
 8001408:	f8d4 01fc 	ldr.w	r0, [r4, #508]	; 0x1fc
 800140c:	f000 faac 	bl	8001968 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(L6470_nBUSY_SYNC_IRQn, 0, 0);
 8001410:	462a      	mov	r2, r5
 8001412:	4629      	mov	r1, r5
 8001414:	2006      	movs	r0, #6
 8001416:	f000 fa1b 	bl	8001850 <HAL_NVIC_SetPriority>
  GPIO_CLK_ENABLE(L6470_nFLAG_GPIO.gpio_clk_enable);
 800141a:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800141c:	f8d4 2204 	ldr.w	r2, [r4, #516]	; 0x204
 8001420:	4313      	orrs	r3, r2
 8001422:	6333      	str	r3, [r6, #48]	; 0x30
  GPIO_InitStruct.Pin = L6470_nFLAG_GPIO.pin;
 8001424:	f8b4 320c 	ldrh.w	r3, [r4, #524]	; 0x20c
 8001428:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800142a:	f8cd 8008 	str.w	r8, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	9503      	str	r5, [sp, #12]
  HAL_GPIO_Init(L6470_nFLAG_GPIO.port, &GPIO_InitStruct);
 8001430:	a901      	add	r1, sp, #4
 8001432:	f8d4 0208 	ldr.w	r0, [r4, #520]	; 0x208
 8001436:	f000 fa97 	bl	8001968 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(L6470_nFLAG_IRQn, 0, 0);
 800143a:	462a      	mov	r2, r5
 800143c:	4629      	mov	r1, r5
 800143e:	2007      	movs	r0, #7
 8001440:	f000 fa06 	bl	8001850 <HAL_NVIC_SetPriority>
    GPIO_CLK_ENABLE(L6470_nCS_GPIO_Array[ExpBrd].gpio_clk_enable);
 8001444:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8001446:	6822      	ldr	r2, [r4, #0]
 8001448:	4313      	orrs	r3, r2
 800144a:	6333      	str	r3, [r6, #48]	; 0x30
    GPIO_InitStruct.Pin = L6470_nCS_GPIO_Array[ExpBrd].pin;
 800144c:	8923      	ldrh	r3, [r4, #8]
 800144e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001450:	2301      	movs	r3, #1
 8001452:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8001456:	9704      	str	r7, [sp, #16]
    HAL_GPIO_Init(L6470_nCS_GPIO_Array[ExpBrd].port, &GPIO_InitStruct);
 8001458:	a901      	add	r1, sp, #4
 800145a:	6860      	ldr	r0, [r4, #4]
 800145c:	f000 fa84 	bl	8001968 <HAL_GPIO_Init>
}
 8001460:	b006      	add	sp, #24
 8001462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001466:	bf00      	nop
 8001468:	40023800 	.word	0x40023800
 800146c:	200000a4 	.word	0x200000a4
 8001470:	10210000 	.word	0x10210000

08001474 <BSP_L6470_Init>:
{
 8001474:	b538      	push	{r3, r4, r5, lr}
  L6470_DISABLE();
 8001476:	4c17      	ldr	r4, [pc, #92]	; (80014d4 <BSP_L6470_Init+0x60>)
 8001478:	2200      	movs	r2, #0
 800147a:	f8b4 11f4 	ldrh.w	r1, [r4, #500]	; 0x1f4
 800147e:	f8d4 01f0 	ldr.w	r0, [r4, #496]	; 0x1f0
 8001482:	f000 fb9f 	bl	8001bc4 <HAL_GPIO_WritePin>
  L6470_ENABLE();
 8001486:	2201      	movs	r2, #1
 8001488:	f8b4 11f4 	ldrh.w	r1, [r4, #500]	; 0x1f4
 800148c:	f8d4 01f0 	ldr.w	r0, [r4, #496]	; 0x1f0
 8001490:	f000 fb98 	bl	8001bc4 <HAL_GPIO_WritePin>
    BSP_Select(ExpBrd);
 8001494:	2000      	movs	r0, #0
 8001496:	f7ff fe5d 	bl	8001154 <BSP_Select>
    L6470_nCS_HIGH();
 800149a:	4b0f      	ldr	r3, [pc, #60]	; (80014d8 <BSP_L6470_Init+0x64>)
 800149c:	2201      	movs	r2, #1
 800149e:	8919      	ldrh	r1, [r3, #8]
 80014a0:	6858      	ldr	r0, [r3, #4]
 80014a2:	f000 fb8f 	bl	8001bc4 <HAL_GPIO_WritePin>
    for (L6470_Id = L6470_ID(0); L6470_Id<=L6470_ID(L6470DAISYCHAINSIZE-1); L6470_Id++)
 80014a6:	2000      	movs	r0, #0
 80014a8:	f7ff f9f4 	bl	8000894 <L6470_ID>
 80014ac:	4604      	mov	r4, r0
 80014ae:	2501      	movs	r5, #1
 80014b0:	e007      	b.n	80014c2 <BSP_L6470_Init+0x4e>
      L6470_ResetDevice(L6470_Id);
 80014b2:	4620      	mov	r0, r4
 80014b4:	f7ff fb5c 	bl	8000b70 <L6470_ResetDevice>
      L6470_GetStatus(L6470_Id);
 80014b8:	4620      	mov	r0, r4
 80014ba:	f7ff fc9d 	bl	8000df8 <L6470_GetStatus>
    for (L6470_Id = L6470_ID(0); L6470_Id<=L6470_ID(L6470DAISYCHAINSIZE-1); L6470_Id++)
 80014be:	3401      	adds	r4, #1
 80014c0:	b2e4      	uxtb	r4, r4
 80014c2:	4628      	mov	r0, r5
 80014c4:	f7ff f9e6 	bl	8000894 <L6470_ID>
 80014c8:	42a0      	cmp	r0, r4
 80014ca:	d2f2      	bcs.n	80014b2 <BSP_L6470_Init+0x3e>
  BSP_Select(EXPBRD_ID(0));
 80014cc:	2000      	movs	r0, #0
 80014ce:	f7ff fe41 	bl	8001154 <BSP_Select>
}
 80014d2:	bd38      	pop	{r3, r4, r5, pc}
 80014d4:	200000a4 	.word	0x200000a4
 80014d8:	200003c0 	.word	0x200003c0

080014dc <BSP_IRQ>:
{
 80014dc:	b508      	push	{r3, lr}
  if(fs == ENABLE)
 80014de:	2801      	cmp	r0, #1
 80014e0:	d006      	beq.n	80014f0 <BSP_IRQ+0x14>
    HAL_NVIC_DisableIRQ(L6470_nBUSY_SYNC_IRQn);
 80014e2:	2006      	movs	r0, #6
 80014e4:	f000 fa0e 	bl	8001904 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(L6470_nFLAG_IRQn);
 80014e8:	2007      	movs	r0, #7
 80014ea:	f000 fa0b 	bl	8001904 <HAL_NVIC_DisableIRQ>
}
 80014ee:	bd08      	pop	{r3, pc}
    HAL_NVIC_EnableIRQ(L6470_nBUSY_SYNC_IRQn);
 80014f0:	2006      	movs	r0, #6
 80014f2:	f000 f9f1 	bl	80018d8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(L6470_nFLAG_IRQn);
 80014f6:	2007      	movs	r0, #7
 80014f8:	f000 f9ee 	bl	80018d8 <HAL_NVIC_EnableIRQ>
 80014fc:	e7f7      	b.n	80014ee <BSP_IRQ+0x12>

080014fe <BSP_Init>:
{
 80014fe:	b508      	push	{r3, lr}
  BSP_Select(EXPBRD_ID(0));
 8001500:	2000      	movs	r0, #0
 8001502:	f7ff fe27 	bl	8001154 <BSP_Select>
  BSP_NUCLEO_GPIO_Init();
 8001506:	f7ff ff59 	bl	80013bc <BSP_NUCLEO_GPIO_Init>
  BSP_L6470_Init();
 800150a:	f7ff ffb3 	bl	8001474 <BSP_L6470_Init>
  BSP_IRQ(ENABLE);
 800150e:	2001      	movs	r0, #1
 8001510:	f7ff ffe4 	bl	80014dc <BSP_IRQ>
}
 8001514:	bd08      	pop	{r3, pc}

08001516 <BSP_L6470_BusySynchEventManager>:
 8001516:	bf00      	nop
}
 8001518:	4770      	bx	lr

0800151a <BSP_L6470_FlagEventManager>:
 800151a:	bf00      	nop
}
 800151c:	4770      	bx	lr
	...

08001520 <BSP_EmergencyStop>:
{
 8001520:	b508      	push	{r3, lr}
  L6470_DISABLE();
 8001522:	4b04      	ldr	r3, [pc, #16]	; (8001534 <BSP_EmergencyStop+0x14>)
 8001524:	2200      	movs	r2, #0
 8001526:	f8b3 11f4 	ldrh.w	r1, [r3, #500]	; 0x1f4
 800152a:	f8d3 01f0 	ldr.w	r0, [r3, #496]	; 0x1f0
 800152e:	f000 fb49 	bl	8001bc4 <HAL_GPIO_WritePin>
  while(1);
 8001532:	e7fe      	b.n	8001532 <BSP_EmergencyStop+0x12>
 8001534:	200000a4 	.word	0x200000a4

08001538 <BSP_Config>:
  * @brief  Configures each L6470 mounted on the X-NUCLEO-IHM02A1.
  * @param  StepperMotorBoardHandle_t* The pointer to the stepper motor board handle structure.
  * @param  MotorParameterData_t* The pointer to the parameter data structure.
  */
void BSP_Config(StepperMotorBoardHandle_t *StepperMotorBoardHandle, MotorParameterData_t *MotorParameterData)
{
 8001538:	b538      	push	{r3, r4, r5, lr}
 800153a:	4604      	mov	r4, r0
 800153c:	460d      	mov	r5, r1
  StepperMotorBoardHandle->Select(StepperMotorBoardHandle->StackedPosition);
 800153e:	6943      	ldr	r3, [r0, #20]
 8001540:	7800      	ldrb	r0, [r0, #0]
 8001542:	4798      	blx	r3
  
  StepperMotorBoardHandle->StepperMotorDriverHandle[0]->Config(MotorParameterData+0);
 8001544:	68e3      	ldr	r3, [r4, #12]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	4628      	mov	r0, r5
 800154a:	4798      	blx	r3
  StepperMotorBoardHandle->StepperMotorDriverHandle[1]->Config(MotorParameterData+1);
 800154c:	6923      	ldr	r3, [r4, #16]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f105 0058 	add.w	r0, r5, #88	; 0x58
 8001554:	4798      	blx	r3
}
 8001556:	bd38      	pop	{r3, r4, r5, pc}

08001558 <BSP_0_Config>:
{
 8001558:	b508      	push	{r3, lr}
 800155a:	4601      	mov	r1, r0
  BSP_Config(StepperMotorBoardHandle, MotorParameterData);
 800155c:	4801      	ldr	r0, [pc, #4]	; (8001564 <BSP_0_Config+0xc>)
 800155e:	f7ff ffeb 	bl	8001538 <BSP_Config>
}
 8001562:	bd08      	pop	{r3, pc}
 8001564:	200002b4 	.word	0x200002b4

08001568 <BSP_1_Config>:
{
 8001568:	b508      	push	{r3, lr}
 800156a:	4601      	mov	r1, r0
  BSP_Config(StepperMotorBoardHandle, MotorParameterData);
 800156c:	4801      	ldr	r0, [pc, #4]	; (8001574 <BSP_1_Config+0xc>)
 800156e:	f7ff ffe3 	bl	8001538 <BSP_Config>
}
 8001572:	bd08      	pop	{r3, pc}
 8001574:	200002cc 	.word	0x200002cc

08001578 <BSP_2_Config>:
{
 8001578:	b508      	push	{r3, lr}
 800157a:	4601      	mov	r1, r0
  BSP_Config(StepperMotorBoardHandle, MotorParameterData);
 800157c:	4801      	ldr	r0, [pc, #4]	; (8001584 <BSP_2_Config+0xc>)
 800157e:	f7ff ffdb 	bl	8001538 <BSP_Config>
}
 8001582:	bd08      	pop	{r3, pc}
 8001584:	200002e4 	.word	0x200002e4

08001588 <BSP_3_Config>:
{
 8001588:	b508      	push	{r3, lr}
 800158a:	4601      	mov	r1, r0
  BSP_Config(StepperMotorBoardHandle, MotorParameterData);
 800158c:	4801      	ldr	r0, [pc, #4]	; (8001594 <BSP_3_Config+0xc>)
 800158e:	f7ff ffd3 	bl	8001538 <BSP_Config>
}
 8001592:	bd08      	pop	{r3, pc}
 8001594:	200002fc 	.word	0x200002fc

08001598 <SystemClock_Config>:
  *         - APB1 Timer Clocks: 84 MHz
  *         - APB2 Peripheral Clocks: 84 MHz
  *         - APB2 Timer Clocks: 84 MHz
  */
void SystemClock_Config(void)
{
 8001598:	b530      	push	{r4, r5, lr}
 800159a:	b095      	sub	sp, #84	; 0x54

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __PWR_CLK_ENABLE();
 800159c:	4b1b      	ldr	r3, [pc, #108]	; (800160c <SystemClock_Config+0x74>)
 800159e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015a0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80015a4:	641a      	str	r2, [r3, #64]	; 0x40
 80015a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ac:	9301      	str	r3, [sp, #4]
 80015ae:	9b01      	ldr	r3, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80015b0:	4a17      	ldr	r2, [pc, #92]	; (8001610 <SystemClock_Config+0x78>)
 80015b2:	6813      	ldr	r3, [r2, #0]
 80015b4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80015b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015bc:	6013      	str	r3, [r2, #0]
 80015be:	6813      	ldr	r3, [r2, #0]
 80015c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015c4:	9302      	str	r3, [sp, #8]
 80015c6:	9b02      	ldr	r3, [sp, #8]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015c8:	2402      	movs	r4, #2
 80015ca:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015cc:	2301      	movs	r3, #1
 80015ce:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80015d0:	2310      	movs	r3, #16
 80015d2:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015d4:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015d6:	2500      	movs	r5, #0
 80015d8:	950f      	str	r5, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80015da:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80015dc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80015e0:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80015e2:	2304      	movs	r3, #4
 80015e4:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80015e6:	2307      	movs	r3, #7
 80015e8:	9313      	str	r3, [sp, #76]	; 0x4c
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80015ea:	a808      	add	r0, sp, #32
 80015ec:	f000 fb12 	bl	8001c14 <HAL_RCC_OscConfig>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1;
 80015f0:	2305      	movs	r3, #5
 80015f2:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015f4:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015f6:	9505      	str	r5, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015fc:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015fe:	9507      	str	r5, [sp, #28]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 8001600:	4621      	mov	r1, r4
 8001602:	a803      	add	r0, sp, #12
 8001604:	f000 fd4c 	bl	80020a0 <HAL_RCC_ClockConfig>

}
 8001608:	b015      	add	sp, #84	; 0x54
 800160a:	bd30      	pop	{r4, r5, pc}
 800160c:	40023800 	.word	0x40023800
 8001610:	40007000 	.word	0x40007000

08001614 <MX_GPIO_Init>:

/**
  * @brief  This function initializes the GPIO MX.
  */
void MX_GPIO_Init(void)
{
 8001614:	b508      	push	{r3, lr}
#ifdef NUCLEO_USE_USER_BUTTON
  /* Configures Button GPIO and EXTI Line */
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8001616:	2101      	movs	r1, #1
 8001618:	2000      	movs	r0, #0
 800161a:	f7ff fd59 	bl	80010d0 <BSP_PB_Init>
#endif

#ifdef NUCLEO_USE_USER_LED
  /* Configures LED GPIO */
  BSP_LED_Init(LED2);
 800161e:	2000      	movs	r0, #0
 8001620:	f7ff fd16 	bl	8001050 <BSP_LED_Init>
#endif
}
 8001624:	bd08      	pop	{r3, pc}
	...

08001628 <MX_SPI1_Init>:
  *         - CPOL High
  *         - CPHA 2nd Edge
  *         - Baud Rate lower than 5 MBits/s
  */
void MX_SPI1_Init(void)
{
 8001628:	b508      	push	{r3, lr}
  #define MAX_BAUDRATE  5000000
  uint32_t freq;
  uint16_t freq_div;
  uint32_t spi_baudrateprescaler;
  
  hspi1.Instance = SPI1;
 800162a:	4b1f      	ldr	r3, [pc, #124]	; (80016a8 <MX_SPI1_Init+0x80>)
 800162c:	4a1f      	ldr	r2, [pc, #124]	; (80016ac <MX_SPI1_Init+0x84>)
 800162e:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001630:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001634:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001636:	2200      	movs	r2, #0
 8001638:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800163a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800163c:	2102      	movs	r1, #2
 800163e:	6119      	str	r1, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001640:	2101      	movs	r1, #1
 8001642:	6159      	str	r1, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001644:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001648:	6199      	str	r1, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800164a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLED;
 800164c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800164e:	629a      	str	r2, [r3, #40]	; 0x28
  
  freq = HAL_RCC_GetPCLK2Freq();
 8001650:	f000 ff3a 	bl	80024c8 <HAL_RCC_GetPCLK2Freq>
  freq_div = (freq / MAX_BAUDRATE);
 8001654:	4b16      	ldr	r3, [pc, #88]	; (80016b0 <MX_SPI1_Init+0x88>)
 8001656:	fba3 3000 	umull	r3, r0, r3, r0
  
  if (freq_div < 2)
 800165a:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
 800165e:	d30f      	bcc.n	8001680 <MX_SPI1_Init+0x58>
 8001660:	0d43      	lsrs	r3, r0, #21
  {
    spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_2;
  }
  else
  {
    if (freq_div < 4)
 8001662:	2b03      	cmp	r3, #3
 8001664:	d90e      	bls.n	8001684 <MX_SPI1_Init+0x5c>
    {
      spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_4;
    }
    else
    {
      if (freq_div < 8)
 8001666:	2b07      	cmp	r3, #7
 8001668:	d912      	bls.n	8001690 <MX_SPI1_Init+0x68>
      {
        spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_8;
      }
      else
      {
        if (freq_div < 16)
 800166a:	2b0f      	cmp	r3, #15
 800166c:	d912      	bls.n	8001694 <MX_SPI1_Init+0x6c>
        {
          spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_16;
        }
        else
        {
          if (freq_div < 32)
 800166e:	2b1f      	cmp	r3, #31
 8001670:	d912      	bls.n	8001698 <MX_SPI1_Init+0x70>
          {
            spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_32;
          }
          else
          {
            if (freq_div < 64)
 8001672:	2b3f      	cmp	r3, #63	; 0x3f
 8001674:	d912      	bls.n	800169c <MX_SPI1_Init+0x74>
            {
              spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_64;
            }
            else
            {
              if (freq_div < 128)
 8001676:	2b7f      	cmp	r3, #127	; 0x7f
 8001678:	d912      	bls.n	80016a0 <MX_SPI1_Init+0x78>
              {
                spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_128;
              }
              else
              {
                if (freq_div < 256)
 800167a:	2bff      	cmp	r3, #255	; 0xff
 800167c:	d912      	bls.n	80016a4 <MX_SPI1_Init+0x7c>
                  spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_256;
                }
                else
                {
                  /* the condition is not possible, you should reduce the CPU frequency */
                  while(1);
 800167e:	e7fe      	b.n	800167e <MX_SPI1_Init+0x56>
    spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_2;
 8001680:	2300      	movs	r3, #0
 8001682:	e000      	b.n	8001686 <MX_SPI1_Init+0x5e>
      spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_4;
 8001684:	2308      	movs	r3, #8
        }
      }
    }
  }
  
  hspi1.Init.BaudRatePrescaler = spi_baudrateprescaler;  // the baudrate will be lower than MAX_BAUDRATE (5 MBits/s)
 8001686:	4808      	ldr	r0, [pc, #32]	; (80016a8 <MX_SPI1_Init+0x80>)
 8001688:	61c3      	str	r3, [r0, #28]
  HAL_SPI_Init(&hspi1);
 800168a:	f000 ffa3 	bl	80025d4 <HAL_SPI_Init>
}
 800168e:	bd08      	pop	{r3, pc}
        spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_8;
 8001690:	2310      	movs	r3, #16
 8001692:	e7f8      	b.n	8001686 <MX_SPI1_Init+0x5e>
          spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_16;
 8001694:	2318      	movs	r3, #24
 8001696:	e7f6      	b.n	8001686 <MX_SPI1_Init+0x5e>
            spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_32;
 8001698:	2320      	movs	r3, #32
 800169a:	e7f4      	b.n	8001686 <MX_SPI1_Init+0x5e>
              spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_64;
 800169c:	2328      	movs	r3, #40	; 0x28
 800169e:	e7f2      	b.n	8001686 <MX_SPI1_Init+0x5e>
                spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_128;
 80016a0:	2330      	movs	r3, #48	; 0x30
 80016a2:	e7f0      	b.n	8001686 <MX_SPI1_Init+0x5e>
                  spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_256;
 80016a4:	2338      	movs	r3, #56	; 0x38
 80016a6:	e7ee      	b.n	8001686 <MX_SPI1_Init+0x5e>
 80016a8:	200003d0 	.word	0x200003d0
 80016ac:	40013000 	.word	0x40013000
 80016b0:	6b5fca6b 	.word	0x6b5fca6b

080016b4 <MX_USART2_Init>:
  *         - Stop Bit:   1
  *         - Parity:     None
  *         - Mode:       TX/RX
  */
void MX_USART2_Init(void)
{
 80016b4:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 80016b6:	4808      	ldr	r0, [pc, #32]	; (80016d8 <MX_USART2_Init+0x24>)
 80016b8:	4b08      	ldr	r3, [pc, #32]	; (80016dc <MX_USART2_Init+0x28>)
 80016ba:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 80016bc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80016c0:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016c2:	2300      	movs	r3, #0
 80016c4:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016c6:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016c8:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016ca:	220c      	movs	r2, #12
 80016cc:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ce:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016d0:	61c3      	str	r3, [r0, #28]
  HAL_UART_Init(&huart2);
 80016d2:	f001 fb89 	bl	8002de8 <HAL_UART_Init>
}
 80016d6:	bd08      	pop	{r3, pc}
 80016d8:	200004c8 	.word	0x200004c8
 80016dc:	40004400 	.word	0x40004400

080016e0 <User_LED_Blinking>:
  uint8_t r;
  uint16_t half_period_ms;
  
  half_period_ms = period_ms >> 1;
  
  for (r=0; r<repetitions; r++)
 80016e0:	b1a8      	cbz	r0, 800170e <User_LED_Blinking+0x2e>
{
 80016e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016e4:	084d      	lsrs	r5, r1, #1
 80016e6:	4607      	mov	r7, r0
  for (r=0; r<repetitions; r++)
 80016e8:	2400      	movs	r4, #0
  {
    /* Switch on the user LED */
    BSP_LED_On(LED2);
 80016ea:	4626      	mov	r6, r4
 80016ec:	4630      	mov	r0, r6
 80016ee:	f7ff fcd7 	bl	80010a0 <BSP_LED_On>
    /* ms delay */
    HAL_Delay(half_period_ms);
 80016f2:	4628      	mov	r0, r5
 80016f4:	f000 f880 	bl	80017f8 <HAL_Delay>
    /* Switch off the user LED */
    BSP_LED_Off(LED2);
 80016f8:	4630      	mov	r0, r6
 80016fa:	f7ff fcdd 	bl	80010b8 <BSP_LED_Off>
    /* ms delay */
    HAL_Delay(half_period_ms);
 80016fe:	4628      	mov	r0, r5
 8001700:	f000 f87a 	bl	80017f8 <HAL_Delay>
  for (r=0; r<repetitions; r++)
 8001704:	3401      	adds	r4, #1
 8001706:	b2e4      	uxtb	r4, r4
 8001708:	42a7      	cmp	r7, r4
 800170a:	d1ef      	bne.n	80016ec <User_LED_Blinking+0xc>
  }
}
 800170c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800170e:	4770      	bx	lr

08001710 <NUCLEO_Board_Init>:
{
 8001710:	b508      	push	{r3, lr}
  HAL_Init();
 8001712:	f000 f849 	bl	80017a8 <HAL_Init>
  SystemClock_Config();
 8001716:	f7ff ff3f 	bl	8001598 <SystemClock_Config>
  MX_GPIO_Init();
 800171a:	f7ff ff7b 	bl	8001614 <MX_GPIO_Init>
  MX_SPI1_Init();
 800171e:	f7ff ff83 	bl	8001628 <MX_SPI1_Init>
  MX_USART2_Init();
 8001722:	f7ff ffc7 	bl	80016b4 <MX_USART2_Init>
  User_LED_Blinking(3, 750);
 8001726:	f240 21ee 	movw	r1, #750	; 0x2ee
 800172a:	2003      	movs	r0, #3
 800172c:	f7ff ffd8 	bl	80016e0 <User_LED_Blinking>
}
 8001730:	bd08      	pop	{r3, pc}
	...

08001734 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001734:	490f      	ldr	r1, [pc, #60]	; (8001774 <SystemInit+0x40>)
 8001736:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800173a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800173e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001742:	4b0d      	ldr	r3, [pc, #52]	; (8001778 <SystemInit+0x44>)
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	f042 0201 	orr.w	r2, r2, #1
 800174a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800174c:	2000      	movs	r0, #0
 800174e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001756:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800175a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800175c:	4a07      	ldr	r2, [pc, #28]	; (800177c <SystemInit+0x48>)
 800175e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001766:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001768:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800176a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800176e:	608b      	str	r3, [r1, #8]
#endif
}
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	e000ed00 	.word	0xe000ed00
 8001778:	40023800 	.word	0x40023800
 800177c:	24003010 	.word	0x24003010

08001780 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001780:	b510      	push	{r4, lr}
 8001782:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001784:	f000 fe70 	bl	8002468 <HAL_RCC_GetHCLKFreq>
 8001788:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <HAL_InitTick+0x24>)
 800178a:	fba3 3000 	umull	r3, r0, r3, r0
 800178e:	0980      	lsrs	r0, r0, #6
 8001790:	f000 f8d0 	bl	8001934 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8001794:	2200      	movs	r2, #0
 8001796:	4621      	mov	r1, r4
 8001798:	f04f 30ff 	mov.w	r0, #4294967295
 800179c:	f000 f858 	bl	8001850 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 80017a0:	2000      	movs	r0, #0
 80017a2:	bd10      	pop	{r4, pc}
 80017a4:	10624dd3 	.word	0x10624dd3

080017a8 <HAL_Init>:
{
 80017a8:	b508      	push	{r3, lr}
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017aa:	4b0b      	ldr	r3, [pc, #44]	; (80017d8 <HAL_Init+0x30>)
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017b2:	601a      	str	r2, [r3, #0]
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80017ba:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017c2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017c4:	2003      	movs	r0, #3
 80017c6:	f000 f825 	bl	8001814 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80017ca:	2000      	movs	r0, #0
 80017cc:	f7ff ffd8 	bl	8001780 <HAL_InitTick>
  HAL_MspInit();
 80017d0:	f002 fb71 	bl	8003eb6 <HAL_MspInit>
}
 80017d4:	2000      	movs	r0, #0
 80017d6:	bd08      	pop	{r3, pc}
 80017d8:	40023c00 	.word	0x40023c00

080017dc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80017dc:	4a02      	ldr	r2, [pc, #8]	; (80017e8 <HAL_IncTick+0xc>)
 80017de:	6813      	ldr	r3, [r2, #0]
 80017e0:	3301      	adds	r3, #1
 80017e2:	6013      	str	r3, [r2, #0]
}
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	200004c4 	.word	0x200004c4

080017ec <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80017ec:	4b01      	ldr	r3, [pc, #4]	; (80017f4 <HAL_GetTick+0x8>)
 80017ee:	6818      	ldr	r0, [r3, #0]
}
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	200004c4 	.word	0x200004c4

080017f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80017f8:	b510      	push	{r4, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 80017fe:	f7ff fff5 	bl	80017ec <HAL_GetTick>
 8001802:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8001804:	f7ff fff2 	bl	80017ec <HAL_GetTick>
 8001808:	9b01      	ldr	r3, [sp, #4]
 800180a:	1b00      	subs	r0, r0, r4
 800180c:	4298      	cmp	r0, r3
 800180e:	d3f9      	bcc.n	8001804 <HAL_Delay+0xc>
  {
  }
}
 8001810:	b002      	add	sp, #8
 8001812:	bd10      	pop	{r4, pc}

08001814 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001814:	b510      	push	{r4, lr}
 8001816:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001818:	1ec3      	subs	r3, r0, #3
 800181a:	2b04      	cmp	r3, #4
 800181c:	d80e      	bhi.n	800183c <HAL_NVIC_SetPriorityGrouping+0x28>
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800181e:	490a      	ldr	r1, [pc, #40]	; (8001848 <HAL_NVIC_SetPriorityGrouping+0x34>)
 8001820:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8)                       );              /* Insert write key and priorty group */
 8001822:	0223      	lsls	r3, r4, #8
 8001824:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
 8001828:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 800182c:	4014      	ands	r4, r2
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800182e:	4323      	orrs	r3, r4
  reg_value  =  (reg_value                                   |
 8001830:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001834:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001838:	60cb      	str	r3, [r1, #12]
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800183a:	bd10      	pop	{r4, pc}
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800183c:	21a4      	movs	r1, #164	; 0xa4
 800183e:	4803      	ldr	r0, [pc, #12]	; (800184c <HAL_NVIC_SetPriorityGrouping+0x38>)
 8001840:	f002 fb38 	bl	8003eb4 <assert_failed>
 8001844:	e7eb      	b.n	800181e <HAL_NVIC_SetPriorityGrouping+0xa>
 8001846:	bf00      	nop
 8001848:	e000ed00 	.word	0xe000ed00
 800184c:	08004410 	.word	0x08004410

08001850 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001850:	b570      	push	{r4, r5, r6, lr}
 8001852:	4605      	mov	r5, r0
 8001854:	460c      	mov	r4, r1
 8001856:	4616      	mov	r6, r2
  uint32_t prioritygroup = 0x00;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001858:	2a0f      	cmp	r2, #15
 800185a:	d826      	bhi.n	80018aa <HAL_NVIC_SetPriority+0x5a>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800185c:	2c0f      	cmp	r4, #15
 800185e:	d829      	bhi.n	80018b4 <HAL_NVIC_SetPriority+0x64>

    \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001860:	4b1a      	ldr	r3, [pc, #104]	; (80018cc <HAL_NVIC_SetPriority+0x7c>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001868:	f1c3 0207 	rsb	r2, r3, #7
 800186c:	2a04      	cmp	r2, #4
 800186e:	bf28      	it	cs
 8001870:	2204      	movcs	r2, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001872:	1d19      	adds	r1, r3, #4
 8001874:	2906      	cmp	r1, #6
 8001876:	bf8c      	ite	hi
 8001878:	3b03      	subhi	r3, #3
 800187a:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800187c:	f04f 31ff 	mov.w	r1, #4294967295
 8001880:	fa01 f202 	lsl.w	r2, r1, r2
 8001884:	ea24 0402 	bic.w	r4, r4, r2
 8001888:	409c      	lsls	r4, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800188a:	fa01 f303 	lsl.w	r3, r1, r3
 800188e:	ea26 0603 	bic.w	r6, r6, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001892:	4334      	orrs	r4, r6
  if((int32_t)IRQn < 0) {
 8001894:	2d00      	cmp	r5, #0
 8001896:	db12      	blt.n	80018be <HAL_NVIC_SetPriority+0x6e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001898:	0124      	lsls	r4, r4, #4
 800189a:	b2e4      	uxtb	r4, r4
 800189c:	f105 4560 	add.w	r5, r5, #3758096384	; 0xe0000000
 80018a0:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
 80018a4:	f885 4300 	strb.w	r4, [r5, #768]	; 0x300
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80018a8:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80018aa:	21bc      	movs	r1, #188	; 0xbc
 80018ac:	4808      	ldr	r0, [pc, #32]	; (80018d0 <HAL_NVIC_SetPriority+0x80>)
 80018ae:	f002 fb01 	bl	8003eb4 <assert_failed>
 80018b2:	e7d3      	b.n	800185c <HAL_NVIC_SetPriority+0xc>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80018b4:	21bd      	movs	r1, #189	; 0xbd
 80018b6:	4806      	ldr	r0, [pc, #24]	; (80018d0 <HAL_NVIC_SetPriority+0x80>)
 80018b8:	f002 fafc 	bl	8003eb4 <assert_failed>
 80018bc:	e7d0      	b.n	8001860 <HAL_NVIC_SetPriority+0x10>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018be:	f005 050f 	and.w	r5, r5, #15
 80018c2:	0124      	lsls	r4, r4, #4
 80018c4:	b2e4      	uxtb	r4, r4
 80018c6:	4b03      	ldr	r3, [pc, #12]	; (80018d4 <HAL_NVIC_SetPriority+0x84>)
 80018c8:	555c      	strb	r4, [r3, r5]
 80018ca:	e7ed      	b.n	80018a8 <HAL_NVIC_SetPriority+0x58>
 80018cc:	e000ed00 	.word	0xe000ed00
 80018d0:	08004410 	.word	0x08004410
 80018d4:	e000ed14 	.word	0xe000ed14

080018d8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018d8:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80018da:	1e04      	subs	r4, r0, #0
 80018dc:	db09      	blt.n	80018f2 <HAL_NVIC_EnableIRQ+0x1a>
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80018de:	0962      	lsrs	r2, r4, #5
 80018e0:	f004 041f 	and.w	r4, r4, #31
 80018e4:	2001      	movs	r0, #1
 80018e6:	fa00 f404 	lsl.w	r4, r0, r4
 80018ea:	4b04      	ldr	r3, [pc, #16]	; (80018fc <HAL_NVIC_EnableIRQ+0x24>)
 80018ec:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80018f0:	bd10      	pop	{r4, pc}
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80018f2:	21d0      	movs	r1, #208	; 0xd0
 80018f4:	4802      	ldr	r0, [pc, #8]	; (8001900 <HAL_NVIC_EnableIRQ+0x28>)
 80018f6:	f002 fadd 	bl	8003eb4 <assert_failed>
 80018fa:	e7f0      	b.n	80018de <HAL_NVIC_EnableIRQ+0x6>
 80018fc:	e000e100 	.word	0xe000e100
 8001900:	08004410 	.word	0x08004410

08001904 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001904:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001906:	1e04      	subs	r4, r0, #0
 8001908:	db0a      	blt.n	8001920 <HAL_NVIC_DisableIRQ+0x1c>
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800190a:	0963      	lsrs	r3, r4, #5
 800190c:	f004 041f 	and.w	r4, r4, #31
 8001910:	2001      	movs	r0, #1
 8001912:	fa00 f404 	lsl.w	r4, r0, r4
 8001916:	3320      	adds	r3, #32
 8001918:	4a04      	ldr	r2, [pc, #16]	; (800192c <HAL_NVIC_DisableIRQ+0x28>)
 800191a:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800191e:	bd10      	pop	{r4, pc}
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001920:	21e0      	movs	r1, #224	; 0xe0
 8001922:	4803      	ldr	r0, [pc, #12]	; (8001930 <HAL_NVIC_DisableIRQ+0x2c>)
 8001924:	f002 fac6 	bl	8003eb4 <assert_failed>
 8001928:	e7ef      	b.n	800190a <HAL_NVIC_DisableIRQ+0x6>
 800192a:	bf00      	nop
 800192c:	e000e100 	.word	0xe000e100
 8001930:	08004410 	.word	0x08004410

08001934 <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 8001934:	3801      	subs	r0, #1
 8001936:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800193a:	d20b      	bcs.n	8001954 <HAL_SYSTICK_Config+0x20>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800193c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001940:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001942:	4a05      	ldr	r2, [pc, #20]	; (8001958 <HAL_SYSTICK_Config+0x24>)
 8001944:	21f0      	movs	r1, #240	; 0xf0
 8001946:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800194a:	2000      	movs	r0, #0
 800194c:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800194e:	2207      	movs	r2, #7
 8001950:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001952:	4770      	bx	lr
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 8001954:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001956:	4770      	bx	lr
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800195c:	4770      	bx	lr

0800195e <HAL_SYSTICK_IRQHandler>:
{
 800195e:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8001960:	f7ff fffc 	bl	800195c <HAL_SYSTICK_Callback>
}
 8001964:	bd08      	pop	{r3, pc}
	...

08001968 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800196c:	b083      	sub	sp, #12
 800196e:	4607      	mov	r7, r0
 8001970:	460e      	mov	r6, r1
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001972:	4b8d      	ldr	r3, [pc, #564]	; (8001ba8 <HAL_GPIO_Init+0x240>)
 8001974:	4298      	cmp	r0, r3
 8001976:	d017      	beq.n	80019a8 <HAL_GPIO_Init+0x40>
 8001978:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800197c:	4298      	cmp	r0, r3
 800197e:	d013      	beq.n	80019a8 <HAL_GPIO_Init+0x40>
 8001980:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001984:	4298      	cmp	r0, r3
 8001986:	d00f      	beq.n	80019a8 <HAL_GPIO_Init+0x40>
 8001988:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800198c:	4298      	cmp	r0, r3
 800198e:	d00b      	beq.n	80019a8 <HAL_GPIO_Init+0x40>
 8001990:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001994:	4298      	cmp	r0, r3
 8001996:	d007      	beq.n	80019a8 <HAL_GPIO_Init+0x40>
 8001998:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800199c:	4298      	cmp	r0, r3
 800199e:	d003      	beq.n	80019a8 <HAL_GPIO_Init+0x40>
 80019a0:	21c5      	movs	r1, #197	; 0xc5
 80019a2:	4882      	ldr	r0, [pc, #520]	; (8001bac <HAL_GPIO_Init+0x244>)
 80019a4:	f002 fa86 	bl	8003eb4 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80019a8:	8833      	ldrh	r3, [r6, #0]
 80019aa:	b30b      	cbz	r3, 80019f0 <HAL_GPIO_Init+0x88>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80019ac:	6873      	ldr	r3, [r6, #4]
 80019ae:	2b03      	cmp	r3, #3
 80019b0:	d917      	bls.n	80019e2 <HAL_GPIO_Init+0x7a>
 80019b2:	f1a3 0211 	sub.w	r2, r3, #17
 80019b6:	2a01      	cmp	r2, #1
 80019b8:	d913      	bls.n	80019e2 <HAL_GPIO_Init+0x7a>
 80019ba:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80019be:	497c      	ldr	r1, [pc, #496]	; (8001bb0 <HAL_GPIO_Init+0x248>)
 80019c0:	428a      	cmp	r2, r1
 80019c2:	d00e      	beq.n	80019e2 <HAL_GPIO_Init+0x7a>
 80019c4:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 80019c8:	428b      	cmp	r3, r1
 80019ca:	d00a      	beq.n	80019e2 <HAL_GPIO_Init+0x7a>
 80019cc:	f5a1 2170 	sub.w	r1, r1, #983040	; 0xf0000
 80019d0:	428a      	cmp	r2, r1
 80019d2:	d006      	beq.n	80019e2 <HAL_GPIO_Init+0x7a>
 80019d4:	4a77      	ldr	r2, [pc, #476]	; (8001bb4 <HAL_GPIO_Init+0x24c>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d003      	beq.n	80019e2 <HAL_GPIO_Init+0x7a>
 80019da:	21c7      	movs	r1, #199	; 0xc7
 80019dc:	4873      	ldr	r0, [pc, #460]	; (8001bac <HAL_GPIO_Init+0x244>)
 80019de:	f002 fa69 	bl	8003eb4 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80019e2:	68b3      	ldr	r3, [r6, #8]
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d808      	bhi.n	80019fa <HAL_GPIO_Init+0x92>
{
 80019e8:	2400      	movs	r4, #0
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80019ea:	f8df b1d4 	ldr.w	fp, [pc, #468]	; 8001bc0 <HAL_GPIO_Init+0x258>
 80019ee:	e05f      	b.n	8001ab0 <HAL_GPIO_Init+0x148>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80019f0:	21c6      	movs	r1, #198	; 0xc6
 80019f2:	486e      	ldr	r0, [pc, #440]	; (8001bac <HAL_GPIO_Init+0x244>)
 80019f4:	f002 fa5e 	bl	8003eb4 <assert_failed>
 80019f8:	e7d8      	b.n	80019ac <HAL_GPIO_Init+0x44>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80019fa:	21c8      	movs	r1, #200	; 0xc8
 80019fc:	486b      	ldr	r0, [pc, #428]	; (8001bac <HAL_GPIO_Init+0x244>)
 80019fe:	f002 fa59 	bl	8003eb4 <assert_failed>
 8001a02:	e7f1      	b.n	80019e8 <HAL_GPIO_Init+0x80>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8001a04:	6933      	ldr	r3, [r6, #16]
 8001a06:	2b0f      	cmp	r3, #15
 8001a08:	d816      	bhi.n	8001a38 <HAL_GPIO_Init+0xd0>
 8001a0a:	f249 72f7 	movw	r2, #38903	; 0x97f7
 8001a0e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a12:	f013 0f01 	tst.w	r3, #1
 8001a16:	d00f      	beq.n	8001a38 <HAL_GPIO_Init+0xd0>
        temp = GPIOx->AFR[position >> 3];
 8001a18:	08e2      	lsrs	r2, r4, #3
 8001a1a:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 8001a1e:	6a10      	ldr	r0, [r2, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001a20:	f004 0307 	and.w	r3, r4, #7
 8001a24:	0099      	lsls	r1, r3, #2
 8001a26:	230f      	movs	r3, #15
 8001a28:	408b      	lsls	r3, r1
 8001a2a:	ea20 0003 	bic.w	r0, r0, r3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001a2e:	6933      	ldr	r3, [r6, #16]
 8001a30:	408b      	lsls	r3, r1
 8001a32:	4303      	orrs	r3, r0
        GPIOx->AFR[position >> 3] = temp;
 8001a34:	6213      	str	r3, [r2, #32]
 8001a36:	e048      	b.n	8001aca <HAL_GPIO_Init+0x162>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8001a38:	21d9      	movs	r1, #217	; 0xd9
 8001a3a:	485c      	ldr	r0, [pc, #368]	; (8001bac <HAL_GPIO_Init+0x244>)
 8001a3c:	f002 fa3a 	bl	8003eb4 <assert_failed>
 8001a40:	e7ea      	b.n	8001a18 <HAL_GPIO_Init+0xb0>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001a42:	21ec      	movs	r1, #236	; 0xec
 8001a44:	4859      	ldr	r0, [pc, #356]	; (8001bac <HAL_GPIO_Init+0x244>)
 8001a46:	f002 fa35 	bl	8003eb4 <assert_failed>
 8001a4a:	e058      	b.n	8001afe <HAL_GPIO_Init+0x196>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	408a      	lsls	r2, r1
 8001a50:	4302      	orrs	r2, r0
        SYSCFG->EXTICR[position >> 2] = temp;
 8001a52:	609a      	str	r2, [r3, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a54:	4b58      	ldr	r3, [pc, #352]	; (8001bb8 <HAL_GPIO_Init+0x250>)
 8001a56:	681a      	ldr	r2, [r3, #0]
        temp &= ~((uint32_t)iocurrent);
 8001a58:	ea6f 010a 	mvn.w	r1, sl
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a5c:	6873      	ldr	r3, [r6, #4]
 8001a5e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001a62:	bf0c      	ite	eq
 8001a64:	400a      	andeq	r2, r1
        {
          temp |= iocurrent;
 8001a66:	ea4a 0202 	orrne.w	r2, sl, r2
        }
        EXTI->IMR = temp;
 8001a6a:	4b53      	ldr	r3, [pc, #332]	; (8001bb8 <HAL_GPIO_Init+0x250>)
 8001a6c:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001a6e:	685a      	ldr	r2, [r3, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a70:	6873      	ldr	r3, [r6, #4]
 8001a72:	f413 3f00 	tst.w	r3, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001a76:	bf0c      	ite	eq
 8001a78:	400a      	andeq	r2, r1
        {
          temp |= iocurrent;
 8001a7a:	ea4a 0202 	orrne.w	r2, sl, r2
        }
        EXTI->EMR = temp;
 8001a7e:	4b4e      	ldr	r3, [pc, #312]	; (8001bb8 <HAL_GPIO_Init+0x250>)
 8001a80:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a82:	689a      	ldr	r2, [r3, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a84:	6873      	ldr	r3, [r6, #4]
 8001a86:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001a8a:	bf0c      	ite	eq
 8001a8c:	400a      	andeq	r2, r1
        {
          temp |= iocurrent;
 8001a8e:	ea4a 0202 	orrne.w	r2, sl, r2
        }
        EXTI->RTSR = temp;
 8001a92:	4b49      	ldr	r3, [pc, #292]	; (8001bb8 <HAL_GPIO_Init+0x250>)
 8001a94:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001a96:	68db      	ldr	r3, [r3, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a98:	6872      	ldr	r2, [r6, #4]
 8001a9a:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 8001a9e:	bf0c      	ite	eq
 8001aa0:	400b      	andeq	r3, r1
        {
          temp |= iocurrent;
 8001aa2:	ea4a 0303 	orrne.w	r3, sl, r3
        }
        EXTI->FTSR = temp;
 8001aa6:	4a44      	ldr	r2, [pc, #272]	; (8001bb8 <HAL_GPIO_Init+0x250>)
 8001aa8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001aaa:	3401      	adds	r4, #1
 8001aac:	2c10      	cmp	r4, #16
 8001aae:	d077      	beq.n	8001ba0 <HAL_GPIO_Init+0x238>
    ioposition = ((uint32_t)0x01) << position;
 8001ab0:	2501      	movs	r5, #1
 8001ab2:	40a5      	lsls	r5, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ab4:	6833      	ldr	r3, [r6, #0]
 8001ab6:	ea05 0a03 	and.w	sl, r5, r3
    if(iocurrent == ioposition)
 8001aba:	ea35 0303 	bics.w	r3, r5, r3
 8001abe:	d1f4      	bne.n	8001aaa <HAL_GPIO_Init+0x142>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ac0:	6873      	ldr	r3, [r6, #4]
 8001ac2:	f023 0310 	bic.w	r3, r3, #16
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d09c      	beq.n	8001a04 <HAL_GPIO_Init+0x9c>
      temp = GPIOx->MODER;
 8001aca:	683a      	ldr	r2, [r7, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001acc:	ea4f 0944 	mov.w	r9, r4, lsl #1
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	fa03 f309 	lsl.w	r3, r3, r9
 8001ad6:	ea6f 0803 	mvn.w	r8, r3
 8001ada:	ea22 0203 	bic.w	r2, r2, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001ade:	6873      	ldr	r3, [r6, #4]
 8001ae0:	f003 0303 	and.w	r3, r3, #3
 8001ae4:	fa03 f309 	lsl.w	r3, r3, r9
 8001ae8:	4313      	orrs	r3, r2
      GPIOx->MODER = temp;
 8001aea:	603b      	str	r3, [r7, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001aec:	6873      	ldr	r3, [r6, #4]
 8001aee:	f023 0310 	bic.w	r3, r3, #16
 8001af2:	3b01      	subs	r3, #1
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d813      	bhi.n	8001b20 <HAL_GPIO_Init+0x1b8>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001af8:	68f3      	ldr	r3, [r6, #12]
 8001afa:	2b03      	cmp	r3, #3
 8001afc:	d8a1      	bhi.n	8001a42 <HAL_GPIO_Init+0xda>
        temp = GPIOx->OSPEEDR; 
 8001afe:	68ba      	ldr	r2, [r7, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001b00:	ea08 0202 	and.w	r2, r8, r2
        temp |= (GPIO_Init->Speed << (position * 2));
 8001b04:	68f3      	ldr	r3, [r6, #12]
 8001b06:	fa03 f309 	lsl.w	r3, r3, r9
 8001b0a:	4313      	orrs	r3, r2
        GPIOx->OSPEEDR = temp;
 8001b0c:	60bb      	str	r3, [r7, #8]
        temp = GPIOx->OTYPER;
 8001b0e:	687a      	ldr	r2, [r7, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b10:	ea22 0205 	bic.w	r2, r2, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001b14:	6873      	ldr	r3, [r6, #4]
 8001b16:	f3c3 1500 	ubfx	r5, r3, #4, #1
 8001b1a:	40a5      	lsls	r5, r4
 8001b1c:	4315      	orrs	r5, r2
        GPIOx->OTYPER = temp;
 8001b1e:	607d      	str	r5, [r7, #4]
      temp = GPIOx->PUPDR;
 8001b20:	68fb      	ldr	r3, [r7, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001b22:	ea08 0803 	and.w	r8, r8, r3
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001b26:	68b3      	ldr	r3, [r6, #8]
 8001b28:	fa03 f309 	lsl.w	r3, r3, r9
 8001b2c:	ea43 0308 	orr.w	r3, r3, r8
      GPIOx->PUPDR = temp;
 8001b30:	60fb      	str	r3, [r7, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b32:	6873      	ldr	r3, [r6, #4]
 8001b34:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001b38:	d0b7      	beq.n	8001aaa <HAL_GPIO_Init+0x142>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b3a:	4b20      	ldr	r3, [pc, #128]	; (8001bbc <HAL_GPIO_Init+0x254>)
 8001b3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b42:	645a      	str	r2, [r3, #68]	; 0x44
 8001b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b4a:	9301      	str	r3, [sp, #4]
 8001b4c:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8001b4e:	f024 0303 	bic.w	r3, r4, #3
 8001b52:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001b56:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8001b5a:	6898      	ldr	r0, [r3, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001b5c:	f004 0203 	and.w	r2, r4, #3
 8001b60:	0091      	lsls	r1, r2, #2
 8001b62:	220f      	movs	r2, #15
 8001b64:	408a      	lsls	r2, r1
 8001b66:	ea20 0002 	bic.w	r0, r0, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001b6a:	4a0f      	ldr	r2, [pc, #60]	; (8001ba8 <HAL_GPIO_Init+0x240>)
 8001b6c:	4297      	cmp	r7, r2
 8001b6e:	f43f af6d 	beq.w	8001a4c <HAL_GPIO_Init+0xe4>
 8001b72:	455f      	cmp	r7, fp
 8001b74:	d00e      	beq.n	8001b94 <HAL_GPIO_Init+0x22c>
 8001b76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b7a:	4297      	cmp	r7, r2
 8001b7c:	d00c      	beq.n	8001b98 <HAL_GPIO_Init+0x230>
 8001b7e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b82:	4297      	cmp	r7, r2
 8001b84:	d00a      	beq.n	8001b9c <HAL_GPIO_Init+0x234>
 8001b86:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b8a:	4297      	cmp	r7, r2
 8001b8c:	bf0c      	ite	eq
 8001b8e:	2204      	moveq	r2, #4
 8001b90:	2205      	movne	r2, #5
 8001b92:	e75c      	b.n	8001a4e <HAL_GPIO_Init+0xe6>
 8001b94:	2201      	movs	r2, #1
 8001b96:	e75a      	b.n	8001a4e <HAL_GPIO_Init+0xe6>
 8001b98:	2202      	movs	r2, #2
 8001b9a:	e758      	b.n	8001a4e <HAL_GPIO_Init+0xe6>
 8001b9c:	2203      	movs	r2, #3
 8001b9e:	e756      	b.n	8001a4e <HAL_GPIO_Init+0xe6>
      }
    }
  }
}
 8001ba0:	b003      	add	sp, #12
 8001ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40020000 	.word	0x40020000
 8001bac:	0800449c 	.word	0x0800449c
 8001bb0:	10110000 	.word	0x10110000
 8001bb4:	10220000 	.word	0x10220000
 8001bb8:	40013c00 	.word	0x40013c00
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	40020400 	.word	0x40020400

08001bc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bc4:	b570      	push	{r4, r5, r6, lr}
 8001bc6:	4605      	mov	r5, r0
 8001bc8:	4614      	mov	r4, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001bca:	460e      	mov	r6, r1
 8001bcc:	b129      	cbz	r1, 8001bda <HAL_GPIO_WritePin+0x16>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8001bce:	2c01      	cmp	r4, #1
 8001bd0:	d809      	bhi.n	8001be6 <HAL_GPIO_WritePin+0x22>

  if(PinState != GPIO_PIN_RESET)
 8001bd2:	b96c      	cbnz	r4, 8001bf0 <HAL_GPIO_WritePin+0x2c>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001bd4:	0436      	lsls	r6, r6, #16
 8001bd6:	61ae      	str	r6, [r5, #24]
  }
}
 8001bd8:	e00b      	b.n	8001bf2 <HAL_GPIO_WritePin+0x2e>
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001bda:	f240 11b1 	movw	r1, #433	; 0x1b1
 8001bde:	4805      	ldr	r0, [pc, #20]	; (8001bf4 <HAL_GPIO_WritePin+0x30>)
 8001be0:	f002 f968 	bl	8003eb4 <assert_failed>
 8001be4:	e7f3      	b.n	8001bce <HAL_GPIO_WritePin+0xa>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8001be6:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
 8001bea:	4802      	ldr	r0, [pc, #8]	; (8001bf4 <HAL_GPIO_WritePin+0x30>)
 8001bec:	f002 f962 	bl	8003eb4 <assert_failed>
    GPIOx->BSRR = GPIO_Pin;
 8001bf0:	61ae      	str	r6, [r5, #24]
}
 8001bf2:	bd70      	pop	{r4, r5, r6, pc}
 8001bf4:	0800449c 	.word	0x0800449c

08001bf8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001bf8:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001bfa:	4b05      	ldr	r3, [pc, #20]	; (8001c10 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8001bfc:	695b      	ldr	r3, [r3, #20]
 8001bfe:	4203      	tst	r3, r0
 8001c00:	d100      	bne.n	8001c04 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8001c02:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c04:	4b02      	ldr	r3, [pc, #8]	; (8001c10 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8001c06:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c08:	f001 fb56 	bl	80032b8 <HAL_GPIO_EXTI_Callback>
}
 8001c0c:	e7f9      	b.n	8001c02 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8001c0e:	bf00      	nop
 8001c10:	40013c00 	.word	0x40013c00

08001c14 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c16:	b083      	sub	sp, #12
 8001c18:	4604      	mov	r4, r0
 uint32_t tickstart = 0;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8001c1a:	6803      	ldr	r3, [r0, #0]
 8001c1c:	2b0f      	cmp	r3, #15
 8001c1e:	d84f      	bhi.n	8001cc0 <HAL_RCC_OscConfig+0xac>
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c20:	6823      	ldr	r3, [r4, #0]
 8001c22:	f013 0f01 	tst.w	r3, #1
 8001c26:	d01e      	beq.n	8001c66 <HAL_RCC_OscConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8001c28:	6863      	ldr	r3, [r4, #4]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0x1e>
 8001c2e:	2b05      	cmp	r3, #5
 8001c30:	d14c      	bne.n	8001ccc <HAL_RCC_OscConfig+0xb8>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001c32:	4ba6      	ldr	r3, [pc, #664]	; (8001ecc <HAL_RCC_OscConfig+0x2b8>)
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f003 030c 	and.w	r3, r3, #12
 8001c3a:	2b04      	cmp	r3, #4
 8001c3c:	d00a      	beq.n	8001c54 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c3e:	4ba3      	ldr	r3, [pc, #652]	; (8001ecc <HAL_RCC_OscConfig+0x2b8>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001c46:	2b08      	cmp	r3, #8
 8001c48:	d146      	bne.n	8001cd8 <HAL_RCC_OscConfig+0xc4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c4a:	4ba0      	ldr	r3, [pc, #640]	; (8001ecc <HAL_RCC_OscConfig+0x2b8>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001c52:	d041      	beq.n	8001cd8 <HAL_RCC_OscConfig+0xc4>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c54:	4b9d      	ldr	r3, [pc, #628]	; (8001ecc <HAL_RCC_OscConfig+0x2b8>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001c5c:	d003      	beq.n	8001c66 <HAL_RCC_OscConfig+0x52>
 8001c5e:	6863      	ldr	r3, [r4, #4]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	f000 820d 	beq.w	8002080 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c66:	6823      	ldr	r3, [r4, #0]
 8001c68:	f013 0f02 	tst.w	r3, #2
 8001c6c:	f000 8096 	beq.w	8001d9c <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8001c70:	68e3      	ldr	r3, [r4, #12]
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d86b      	bhi.n	8001d4e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8001c76:	6923      	ldr	r3, [r4, #16]
 8001c78:	2b1f      	cmp	r3, #31
 8001c7a:	d86e      	bhi.n	8001d5a <HAL_RCC_OscConfig+0x146>
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001c7c:	4b93      	ldr	r3, [pc, #588]	; (8001ecc <HAL_RCC_OscConfig+0x2b8>)
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f013 0f0c 	tst.w	r3, #12
 8001c84:	d074      	beq.n	8001d70 <HAL_RCC_OscConfig+0x15c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c86:	4b91      	ldr	r3, [pc, #580]	; (8001ecc <HAL_RCC_OscConfig+0x2b8>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001c8e:	2b08      	cmp	r3, #8
 8001c90:	d069      	beq.n	8001d66 <HAL_RCC_OscConfig+0x152>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c92:	68e3      	ldr	r3, [r4, #12]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	f000 80ac 	beq.w	8001df2 <HAL_RCC_OscConfig+0x1de>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c9a:	4b8d      	ldr	r3, [pc, #564]	; (8001ed0 <HAL_RCC_OscConfig+0x2bc>)
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca0:	f7ff fda4 	bl	80017ec <HAL_GetTick>
 8001ca4:	4605      	mov	r5, r0

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ca6:	4e89      	ldr	r6, [pc, #548]	; (8001ecc <HAL_RCC_OscConfig+0x2b8>)
 8001ca8:	6833      	ldr	r3, [r6, #0]
 8001caa:	f013 0f02 	tst.w	r3, #2
 8001cae:	f040 8092 	bne.w	8001dd6 <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cb2:	f7ff fd9b 	bl	80017ec <HAL_GetTick>
 8001cb6:	1b40      	subs	r0, r0, r5
 8001cb8:	2864      	cmp	r0, #100	; 0x64
 8001cba:	d9f5      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x94>
          {
            return HAL_TIMEOUT;
 8001cbc:	2003      	movs	r0, #3
 8001cbe:	e1e4      	b.n	800208a <HAL_RCC_OscConfig+0x476>
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8001cc0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cc4:	4883      	ldr	r0, [pc, #524]	; (8001ed4 <HAL_RCC_OscConfig+0x2c0>)
 8001cc6:	f002 f8f5 	bl	8003eb4 <assert_failed>
 8001cca:	e7a9      	b.n	8001c20 <HAL_RCC_OscConfig+0xc>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8001ccc:	f240 1105 	movw	r1, #261	; 0x105
 8001cd0:	4880      	ldr	r0, [pc, #512]	; (8001ed4 <HAL_RCC_OscConfig+0x2c0>)
 8001cd2:	f002 f8ef 	bl	8003eb4 <assert_failed>
 8001cd6:	e7ac      	b.n	8001c32 <HAL_RCC_OscConfig+0x1e>
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8001cd8:	4b7c      	ldr	r3, [pc, #496]	; (8001ecc <HAL_RCC_OscConfig+0x2b8>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	709a      	strb	r2, [r3, #2]
      tickstart = HAL_GetTick();
 8001cde:	f7ff fd85 	bl	80017ec <HAL_GetTick>
 8001ce2:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ce4:	4e79      	ldr	r6, [pc, #484]	; (8001ecc <HAL_RCC_OscConfig+0x2b8>)
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ce6:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cea:	6833      	ldr	r3, [r6, #0]
 8001cec:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001cf0:	d006      	beq.n	8001d00 <HAL_RCC_OscConfig+0xec>
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cf2:	f7ff fd7b 	bl	80017ec <HAL_GetTick>
 8001cf6:	1b40      	subs	r0, r0, r5
 8001cf8:	42b8      	cmp	r0, r7
 8001cfa:	d9f6      	bls.n	8001cea <HAL_RCC_OscConfig+0xd6>
          return HAL_TIMEOUT;
 8001cfc:	2003      	movs	r0, #3
 8001cfe:	e1c4      	b.n	800208a <HAL_RCC_OscConfig+0x476>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d00:	7922      	ldrb	r2, [r4, #4]
 8001d02:	4b72      	ldr	r3, [pc, #456]	; (8001ecc <HAL_RCC_OscConfig+0x2b8>)
 8001d04:	709a      	strb	r2, [r3, #2]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d06:	6863      	ldr	r3, [r4, #4]
 8001d08:	b183      	cbz	r3, 8001d2c <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 8001d0a:	f7ff fd6f 	bl	80017ec <HAL_GetTick>
 8001d0e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d10:	4e6e      	ldr	r6, [pc, #440]	; (8001ecc <HAL_RCC_OscConfig+0x2b8>)
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d12:	f241 3788 	movw	r7, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d16:	6833      	ldr	r3, [r6, #0]
 8001d18:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001d1c:	d1a3      	bne.n	8001c66 <HAL_RCC_OscConfig+0x52>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d1e:	f7ff fd65 	bl	80017ec <HAL_GetTick>
 8001d22:	1b40      	subs	r0, r0, r5
 8001d24:	42b8      	cmp	r0, r7
 8001d26:	d9f6      	bls.n	8001d16 <HAL_RCC_OscConfig+0x102>
            return HAL_TIMEOUT;
 8001d28:	2003      	movs	r0, #3
 8001d2a:	e1ae      	b.n	800208a <HAL_RCC_OscConfig+0x476>
        tickstart = HAL_GetTick();
 8001d2c:	f7ff fd5e 	bl	80017ec <HAL_GetTick>
 8001d30:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d32:	4e66      	ldr	r6, [pc, #408]	; (8001ecc <HAL_RCC_OscConfig+0x2b8>)
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d34:	f241 3788 	movw	r7, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d38:	6833      	ldr	r3, [r6, #0]
 8001d3a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001d3e:	d092      	beq.n	8001c66 <HAL_RCC_OscConfig+0x52>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d40:	f7ff fd54 	bl	80017ec <HAL_GetTick>
 8001d44:	1b40      	subs	r0, r0, r5
 8001d46:	42b8      	cmp	r0, r7
 8001d48:	d9f6      	bls.n	8001d38 <HAL_RCC_OscConfig+0x124>
            return HAL_TIMEOUT;
 8001d4a:	2003      	movs	r0, #3
 8001d4c:	e19d      	b.n	800208a <HAL_RCC_OscConfig+0x476>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8001d4e:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8001d52:	4860      	ldr	r0, [pc, #384]	; (8001ed4 <HAL_RCC_OscConfig+0x2c0>)
 8001d54:	f002 f8ae 	bl	8003eb4 <assert_failed>
 8001d58:	e78d      	b.n	8001c76 <HAL_RCC_OscConfig+0x62>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8001d5a:	f240 1147 	movw	r1, #327	; 0x147
 8001d5e:	485d      	ldr	r0, [pc, #372]	; (8001ed4 <HAL_RCC_OscConfig+0x2c0>)
 8001d60:	f002 f8a8 	bl	8003eb4 <assert_failed>
 8001d64:	e78a      	b.n	8001c7c <HAL_RCC_OscConfig+0x68>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d66:	4b59      	ldr	r3, [pc, #356]	; (8001ecc <HAL_RCC_OscConfig+0x2b8>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001d6e:	d190      	bne.n	8001c92 <HAL_RCC_OscConfig+0x7e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d70:	4b56      	ldr	r3, [pc, #344]	; (8001ecc <HAL_RCC_OscConfig+0x2b8>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f013 0f02 	tst.w	r3, #2
 8001d78:	d003      	beq.n	8001d82 <HAL_RCC_OscConfig+0x16e>
 8001d7a:	68e3      	ldr	r3, [r4, #12]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	f040 8181 	bne.w	8002084 <HAL_RCC_OscConfig+0x470>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d82:	4852      	ldr	r0, [pc, #328]	; (8001ecc <HAL_RCC_OscConfig+0x2b8>)
 8001d84:	6801      	ldr	r1, [r0, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d86:	23f8      	movs	r3, #248	; 0xf8
 8001d88:	fa93 f3a3 	rbit	r3, r3
 8001d8c:	fab3 f283 	clz	r2, r3
 8001d90:	6923      	ldr	r3, [r4, #16]
 8001d92:	4093      	lsls	r3, r2
 8001d94:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	6003      	str	r3, [r0, #0]
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d9c:	6823      	ldr	r3, [r4, #0]
 8001d9e:	f013 0f08 	tst.w	r3, #8
 8001da2:	d051      	beq.n	8001e48 <HAL_RCC_OscConfig+0x234>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8001da4:	6963      	ldr	r3, [r4, #20]
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d835      	bhi.n	8001e16 <HAL_RCC_OscConfig+0x202>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001daa:	6963      	ldr	r3, [r4, #20]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d038      	beq.n	8001e22 <HAL_RCC_OscConfig+0x20e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001db0:	4b47      	ldr	r3, [pc, #284]	; (8001ed0 <HAL_RCC_OscConfig+0x2bc>)
 8001db2:	2201      	movs	r2, #1
 8001db4:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001db8:	f7ff fd18 	bl	80017ec <HAL_GetTick>
 8001dbc:	4605      	mov	r5, r0
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dbe:	4e43      	ldr	r6, [pc, #268]	; (8001ecc <HAL_RCC_OscConfig+0x2b8>)
 8001dc0:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8001dc2:	f013 0f02 	tst.w	r3, #2
 8001dc6:	d13f      	bne.n	8001e48 <HAL_RCC_OscConfig+0x234>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dc8:	f7ff fd10 	bl	80017ec <HAL_GetTick>
 8001dcc:	1b40      	subs	r0, r0, r5
 8001dce:	2864      	cmp	r0, #100	; 0x64
 8001dd0:	d9f6      	bls.n	8001dc0 <HAL_RCC_OscConfig+0x1ac>
        {
          return HAL_TIMEOUT;
 8001dd2:	2003      	movs	r0, #3
 8001dd4:	e159      	b.n	800208a <HAL_RCC_OscConfig+0x476>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dd6:	483d      	ldr	r0, [pc, #244]	; (8001ecc <HAL_RCC_OscConfig+0x2b8>)
 8001dd8:	6801      	ldr	r1, [r0, #0]
 8001dda:	23f8      	movs	r3, #248	; 0xf8
 8001ddc:	fa93 f3a3 	rbit	r3, r3
 8001de0:	fab3 f283 	clz	r2, r3
 8001de4:	6923      	ldr	r3, [r4, #16]
 8001de6:	4093      	lsls	r3, r2
 8001de8:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8001dec:	4313      	orrs	r3, r2
 8001dee:	6003      	str	r3, [r0, #0]
 8001df0:	e7d4      	b.n	8001d9c <HAL_RCC_OscConfig+0x188>
        __HAL_RCC_HSI_DISABLE();
 8001df2:	4b37      	ldr	r3, [pc, #220]	; (8001ed0 <HAL_RCC_OscConfig+0x2bc>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001df8:	f7ff fcf8 	bl	80017ec <HAL_GetTick>
 8001dfc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dfe:	4e33      	ldr	r6, [pc, #204]	; (8001ecc <HAL_RCC_OscConfig+0x2b8>)
 8001e00:	6833      	ldr	r3, [r6, #0]
 8001e02:	f013 0f02 	tst.w	r3, #2
 8001e06:	d0c9      	beq.n	8001d9c <HAL_RCC_OscConfig+0x188>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e08:	f7ff fcf0 	bl	80017ec <HAL_GetTick>
 8001e0c:	1b40      	subs	r0, r0, r5
 8001e0e:	2864      	cmp	r0, #100	; 0x64
 8001e10:	d9f6      	bls.n	8001e00 <HAL_RCC_OscConfig+0x1ec>
            return HAL_TIMEOUT;
 8001e12:	2003      	movs	r0, #3
 8001e14:	e139      	b.n	800208a <HAL_RCC_OscConfig+0x476>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8001e16:	f240 1187 	movw	r1, #391	; 0x187
 8001e1a:	482e      	ldr	r0, [pc, #184]	; (8001ed4 <HAL_RCC_OscConfig+0x2c0>)
 8001e1c:	f002 f84a 	bl	8003eb4 <assert_failed>
 8001e20:	e7c3      	b.n	8001daa <HAL_RCC_OscConfig+0x196>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e22:	4b2b      	ldr	r3, [pc, #172]	; (8001ed0 <HAL_RCC_OscConfig+0x2bc>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e2a:	f7ff fcdf 	bl	80017ec <HAL_GetTick>
 8001e2e:	4605      	mov	r5, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e30:	4e26      	ldr	r6, [pc, #152]	; (8001ecc <HAL_RCC_OscConfig+0x2b8>)
 8001e32:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8001e34:	f013 0f02 	tst.w	r3, #2
 8001e38:	d006      	beq.n	8001e48 <HAL_RCC_OscConfig+0x234>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e3a:	f7ff fcd7 	bl	80017ec <HAL_GetTick>
 8001e3e:	1b40      	subs	r0, r0, r5
 8001e40:	2864      	cmp	r0, #100	; 0x64
 8001e42:	d9f6      	bls.n	8001e32 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8001e44:	2003      	movs	r0, #3
 8001e46:	e120      	b.n	800208a <HAL_RCC_OscConfig+0x476>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e48:	6823      	ldr	r3, [r4, #0]
 8001e4a:	f013 0f04 	tst.w	r3, #4
 8001e4e:	d06d      	beq.n	8001f2c <HAL_RCC_OscConfig+0x318>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8001e50:	68a3      	ldr	r3, [r4, #8]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0x246>
 8001e56:	2b05      	cmp	r3, #5
 8001e58:	d11d      	bne.n	8001e96 <HAL_RCC_OscConfig+0x282>
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e5a:	4b1c      	ldr	r3, [pc, #112]	; (8001ecc <HAL_RCC_OscConfig+0x2b8>)
 8001e5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e5e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001e62:	641a      	str	r2, [r3, #64]	; 0x40
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6a:	9301      	str	r3, [sp, #4]
 8001e6c:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001e6e:	4a1a      	ldr	r2, [pc, #104]	; (8001ed8 <HAL_RCC_OscConfig+0x2c4>)
 8001e70:	6813      	ldr	r3, [r2, #0]
 8001e72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e76:	6013      	str	r3, [r2, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e78:	f7ff fcb8 	bl	80017ec <HAL_GetTick>
 8001e7c:	4605      	mov	r5, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001e7e:	4e16      	ldr	r6, [pc, #88]	; (8001ed8 <HAL_RCC_OscConfig+0x2c4>)
 8001e80:	6833      	ldr	r3, [r6, #0]
 8001e82:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001e86:	d10c      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x28e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001e88:	f7ff fcb0 	bl	80017ec <HAL_GetTick>
 8001e8c:	1b40      	subs	r0, r0, r5
 8001e8e:	2864      	cmp	r0, #100	; 0x64
 8001e90:	d9f6      	bls.n	8001e80 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_TIMEOUT;
 8001e92:	2003      	movs	r0, #3
 8001e94:	e0f9      	b.n	800208a <HAL_RCC_OscConfig+0x476>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8001e96:	f240 11b1 	movw	r1, #433	; 0x1b1
 8001e9a:	480e      	ldr	r0, [pc, #56]	; (8001ed4 <HAL_RCC_OscConfig+0x2c0>)
 8001e9c:	f002 f80a 	bl	8003eb4 <assert_failed>
 8001ea0:	e7db      	b.n	8001e5a <HAL_RCC_OscConfig+0x246>
      }      
    }
    
    /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8001ea2:	4b0a      	ldr	r3, [pc, #40]	; (8001ecc <HAL_RCC_OscConfig+0x2b8>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001eaa:	f7ff fc9f 	bl	80017ec <HAL_GetTick>
 8001eae:	4605      	mov	r5, r0
    
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eb0:	4e06      	ldr	r6, [pc, #24]	; (8001ecc <HAL_RCC_OscConfig+0x2b8>)
    {
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001eb2:	f241 3788 	movw	r7, #5000	; 0x1388
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eb6:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8001eb8:	f013 0f02 	tst.w	r3, #2
 8001ebc:	d00e      	beq.n	8001edc <HAL_RCC_OscConfig+0x2c8>
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ebe:	f7ff fc95 	bl	80017ec <HAL_GetTick>
 8001ec2:	1b40      	subs	r0, r0, r5
 8001ec4:	42b8      	cmp	r0, r7
 8001ec6:	d9f6      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x2a2>
      {
        return HAL_TIMEOUT;
 8001ec8:	2003      	movs	r0, #3
 8001eca:	e0de      	b.n	800208a <HAL_RCC_OscConfig+0x476>
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	42470000 	.word	0x42470000
 8001ed4:	08004524 	.word	0x08004524
 8001ed8:	40007000 	.word	0x40007000
      }    
    } 
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001edc:	7a22      	ldrb	r2, [r4, #8]
 8001ede:	4b6d      	ldr	r3, [pc, #436]	; (8002094 <HAL_RCC_OscConfig+0x480>)
 8001ee0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ee4:	68a3      	ldr	r3, [r4, #8]
 8001ee6:	b183      	cbz	r3, 8001f0a <HAL_RCC_OscConfig+0x2f6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ee8:	f7ff fc80 	bl	80017ec <HAL_GetTick>
 8001eec:	4605      	mov	r5, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eee:	4e69      	ldr	r6, [pc, #420]	; (8002094 <HAL_RCC_OscConfig+0x480>)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ef0:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ef4:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8001ef6:	f013 0f02 	tst.w	r3, #2
 8001efa:	d117      	bne.n	8001f2c <HAL_RCC_OscConfig+0x318>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001efc:	f7ff fc76 	bl	80017ec <HAL_GetTick>
 8001f00:	1b40      	subs	r0, r0, r5
 8001f02:	42b8      	cmp	r0, r7
 8001f04:	d9f6      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x2e0>
        {
          return HAL_TIMEOUT;
 8001f06:	2003      	movs	r0, #3
 8001f08:	e0bf      	b.n	800208a <HAL_RCC_OscConfig+0x476>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f0a:	f7ff fc6f 	bl	80017ec <HAL_GetTick>
 8001f0e:	4605      	mov	r5, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f10:	4e60      	ldr	r6, [pc, #384]	; (8002094 <HAL_RCC_OscConfig+0x480>)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f12:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f16:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8001f18:	f013 0f02 	tst.w	r3, #2
 8001f1c:	d006      	beq.n	8001f2c <HAL_RCC_OscConfig+0x318>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f1e:	f7ff fc65 	bl	80017ec <HAL_GetTick>
 8001f22:	1b40      	subs	r0, r0, r5
 8001f24:	42b8      	cmp	r0, r7
 8001f26:	d9f6      	bls.n	8001f16 <HAL_RCC_OscConfig+0x302>
        {
          return HAL_TIMEOUT;
 8001f28:	2003      	movs	r0, #3
 8001f2a:	e0ae      	b.n	800208a <HAL_RCC_OscConfig+0x476>
      }
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8001f2c:	69a3      	ldr	r3, [r4, #24]
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d83d      	bhi.n	8001fae <HAL_RCC_OscConfig+0x39a>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f32:	69a3      	ldr	r3, [r4, #24]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	f000 80a7 	beq.w	8002088 <HAL_RCC_OscConfig+0x474>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f3a:	4a56      	ldr	r2, [pc, #344]	; (8002094 <HAL_RCC_OscConfig+0x480>)
 8001f3c:	6892      	ldr	r2, [r2, #8]
 8001f3e:	f002 020c 	and.w	r2, r2, #12
 8001f42:	2a08      	cmp	r2, #8
 8001f44:	f000 80a3 	beq.w	800208e <HAL_RCC_OscConfig+0x47a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	f040 8085 	bne.w	8002058 <HAL_RCC_OscConfig+0x444>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8001f4e:	69e3      	ldr	r3, [r4, #28]
 8001f50:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 8001f54:	d004      	beq.n	8001f60 <HAL_RCC_OscConfig+0x34c>
 8001f56:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 8001f5a:	484f      	ldr	r0, [pc, #316]	; (8002098 <HAL_RCC_OscConfig+0x484>)
 8001f5c:	f001 ffaa 	bl	8003eb4 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8001f60:	6a23      	ldr	r3, [r4, #32]
 8001f62:	2b3f      	cmp	r3, #63	; 0x3f
 8001f64:	d829      	bhi.n	8001fba <HAL_RCC_OscConfig+0x3a6>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8001f66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f68:	3bc0      	subs	r3, #192	; 0xc0
 8001f6a:	2bf0      	cmp	r3, #240	; 0xf0
 8001f6c:	d82b      	bhi.n	8001fc6 <HAL_RCC_OscConfig+0x3b2>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8001f6e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001f70:	2b08      	cmp	r3, #8
 8001f72:	d82e      	bhi.n	8001fd2 <HAL_RCC_OscConfig+0x3be>
 8001f74:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8001f78:	fa22 f303 	lsr.w	r3, r2, r3
 8001f7c:	f013 0f01 	tst.w	r3, #1
 8001f80:	d027      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x3be>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8001f82:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001f84:	3b04      	subs	r3, #4
 8001f86:	2b0b      	cmp	r3, #11
 8001f88:	d829      	bhi.n	8001fde <HAL_RCC_OscConfig+0x3ca>
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f8a:	4b44      	ldr	r3, [pc, #272]	; (800209c <HAL_RCC_OscConfig+0x488>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	661a      	str	r2, [r3, #96]	; 0x60
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f90:	f7ff fc2c 	bl	80017ec <HAL_GetTick>
 8001f94:	4605      	mov	r5, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f96:	4e3f      	ldr	r6, [pc, #252]	; (8002094 <HAL_RCC_OscConfig+0x480>)
 8001f98:	6833      	ldr	r3, [r6, #0]
 8001f9a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001f9e:	d024      	beq.n	8001fea <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fa0:	f7ff fc24 	bl	80017ec <HAL_GetTick>
 8001fa4:	1b40      	subs	r0, r0, r5
 8001fa6:	2864      	cmp	r0, #100	; 0x64
 8001fa8:	d9f6      	bls.n	8001f98 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8001faa:	2003      	movs	r0, #3
 8001fac:	e06d      	b.n	800208a <HAL_RCC_OscConfig+0x476>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8001fae:	f240 11f5 	movw	r1, #501	; 0x1f5
 8001fb2:	4839      	ldr	r0, [pc, #228]	; (8002098 <HAL_RCC_OscConfig+0x484>)
 8001fb4:	f001 ff7e 	bl	8003eb4 <assert_failed>
 8001fb8:	e7bb      	b.n	8001f32 <HAL_RCC_OscConfig+0x31e>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8001fba:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001fbe:	4836      	ldr	r0, [pc, #216]	; (8002098 <HAL_RCC_OscConfig+0x484>)
 8001fc0:	f001 ff78 	bl	8003eb4 <assert_failed>
 8001fc4:	e7cf      	b.n	8001f66 <HAL_RCC_OscConfig+0x352>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8001fc6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fca:	4833      	ldr	r0, [pc, #204]	; (8002098 <HAL_RCC_OscConfig+0x484>)
 8001fcc:	f001 ff72 	bl	8003eb4 <assert_failed>
 8001fd0:	e7cd      	b.n	8001f6e <HAL_RCC_OscConfig+0x35a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8001fd2:	f240 2101 	movw	r1, #513	; 0x201
 8001fd6:	4830      	ldr	r0, [pc, #192]	; (8002098 <HAL_RCC_OscConfig+0x484>)
 8001fd8:	f001 ff6c 	bl	8003eb4 <assert_failed>
 8001fdc:	e7d1      	b.n	8001f82 <HAL_RCC_OscConfig+0x36e>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8001fde:	f240 2102 	movw	r1, #514	; 0x202
 8001fe2:	482d      	ldr	r0, [pc, #180]	; (8002098 <HAL_RCC_OscConfig+0x484>)
 8001fe4:	f001 ff66 	bl	8003eb4 <assert_failed>
 8001fe8:	e7cf      	b.n	8001f8a <HAL_RCC_OscConfig+0x376>
 8001fea:	f647 75c0 	movw	r5, #32704	; 0x7fc0
 8001fee:	fa95 f5a5 	rbit	r5, r5
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ff2:	fab5 f585 	clz	r5, r5
 8001ff6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001ffa:	fa92 f2a2 	rbit	r2, r2
 8001ffe:	fab2 f082 	clz	r0, r2
 8002002:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8002006:	fa91 f1a1 	rbit	r1, r1
 800200a:	fab1 f181 	clz	r1, r1
 800200e:	69e3      	ldr	r3, [r4, #28]
 8002010:	6a22      	ldr	r2, [r4, #32]
 8002012:	4313      	orrs	r3, r2
 8002014:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002016:	40aa      	lsls	r2, r5
 8002018:	4313      	orrs	r3, r2
 800201a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800201c:	0852      	lsrs	r2, r2, #1
 800201e:	3a01      	subs	r2, #1
 8002020:	4082      	lsls	r2, r0
 8002022:	4313      	orrs	r3, r2
 8002024:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002026:	fa02 f101 	lsl.w	r1, r2, r1
 800202a:	430b      	orrs	r3, r1
 800202c:	4a19      	ldr	r2, [pc, #100]	; (8002094 <HAL_RCC_OscConfig+0x480>)
 800202e:	6053      	str	r3, [r2, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1) -1) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002030:	4b1a      	ldr	r3, [pc, #104]	; (800209c <HAL_RCC_OscConfig+0x488>)
 8002032:	2201      	movs	r2, #1
 8002034:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002036:	f7ff fbd9 	bl	80017ec <HAL_GetTick>
 800203a:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800203c:	4d15      	ldr	r5, [pc, #84]	; (8002094 <HAL_RCC_OscConfig+0x480>)
 800203e:	682b      	ldr	r3, [r5, #0]
 8002040:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002044:	d106      	bne.n	8002054 <HAL_RCC_OscConfig+0x440>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002046:	f7ff fbd1 	bl	80017ec <HAL_GetTick>
 800204a:	1b00      	subs	r0, r0, r4
 800204c:	2864      	cmp	r0, #100	; 0x64
 800204e:	d9f6      	bls.n	800203e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002050:	2003      	movs	r0, #3
 8002052:	e01a      	b.n	800208a <HAL_RCC_OscConfig+0x476>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8002054:	2000      	movs	r0, #0
 8002056:	e018      	b.n	800208a <HAL_RCC_OscConfig+0x476>
        __HAL_RCC_PLL_DISABLE();
 8002058:	4b10      	ldr	r3, [pc, #64]	; (800209c <HAL_RCC_OscConfig+0x488>)
 800205a:	2200      	movs	r2, #0
 800205c:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800205e:	f7ff fbc5 	bl	80017ec <HAL_GetTick>
 8002062:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002064:	4d0b      	ldr	r5, [pc, #44]	; (8002094 <HAL_RCC_OscConfig+0x480>)
 8002066:	682b      	ldr	r3, [r5, #0]
 8002068:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800206c:	d006      	beq.n	800207c <HAL_RCC_OscConfig+0x468>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800206e:	f7ff fbbd 	bl	80017ec <HAL_GetTick>
 8002072:	1b00      	subs	r0, r0, r4
 8002074:	2864      	cmp	r0, #100	; 0x64
 8002076:	d9f6      	bls.n	8002066 <HAL_RCC_OscConfig+0x452>
            return HAL_TIMEOUT;
 8002078:	2003      	movs	r0, #3
 800207a:	e006      	b.n	800208a <HAL_RCC_OscConfig+0x476>
  return HAL_OK;
 800207c:	2000      	movs	r0, #0
 800207e:	e004      	b.n	800208a <HAL_RCC_OscConfig+0x476>
        return HAL_ERROR;
 8002080:	2001      	movs	r0, #1
 8002082:	e002      	b.n	800208a <HAL_RCC_OscConfig+0x476>
        return HAL_ERROR;
 8002084:	2001      	movs	r0, #1
 8002086:	e000      	b.n	800208a <HAL_RCC_OscConfig+0x476>
  return HAL_OK;
 8002088:	2000      	movs	r0, #0
}
 800208a:	b003      	add	sp, #12
 800208c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_ERROR;
 800208e:	2001      	movs	r0, #1
 8002090:	e7fb      	b.n	800208a <HAL_RCC_OscConfig+0x476>
 8002092:	bf00      	nop
 8002094:	40023800 	.word	0x40023800
 8002098:	08004524 	.word	0x08004524
 800209c:	42470000 	.word	0x42470000

080020a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020a4:	4604      	mov	r4, r0
 80020a6:	460d      	mov	r5, r1
  uint32_t tickstart = 0;   
 
  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80020a8:	6803      	ldr	r3, [r0, #0]
 80020aa:	3b01      	subs	r3, #1
 80020ac:	2b0e      	cmp	r3, #14
 80020ae:	d861      	bhi.n	8002174 <HAL_RCC_ClockConfig+0xd4>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80020b0:	2d07      	cmp	r5, #7
 80020b2:	d865      	bhi.n	8002180 <HAL_RCC_ClockConfig+0xe0>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80020b4:	4ba0      	ldr	r3, [pc, #640]	; (8002338 <HAL_RCC_ClockConfig+0x298>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 030f 	and.w	r3, r3, #15
 80020bc:	42ab      	cmp	r3, r5
 80020be:	f080 80aa 	bcs.w	8002216 <HAL_RCC_ClockConfig+0x176>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020c2:	b2ea      	uxtb	r2, r5
 80020c4:	4b9c      	ldr	r3, [pc, #624]	; (8002338 <HAL_RCC_ClockConfig+0x298>)
 80020c6:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 030f 	and.w	r3, r3, #15
 80020ce:	42ab      	cmp	r3, r5
 80020d0:	f040 817f 	bne.w	80023d2 <HAL_RCC_ClockConfig+0x332>
    {
      return HAL_ERROR;
    }

    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020d4:	6823      	ldr	r3, [r4, #0]
 80020d6:	f013 0f02 	tst.w	r3, #2
 80020da:	d018      	beq.n	800210e <HAL_RCC_ClockConfig+0x6e>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80020dc:	68a3      	ldr	r3, [r4, #8]
 80020de:	f033 0280 	bics.w	r2, r3, #128	; 0x80
 80020e2:	d00d      	beq.n	8002100 <HAL_RCC_ClockConfig+0x60>
 80020e4:	f023 0220 	bic.w	r2, r3, #32
 80020e8:	2a90      	cmp	r2, #144	; 0x90
 80020ea:	d009      	beq.n	8002100 <HAL_RCC_ClockConfig+0x60>
 80020ec:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80020f0:	2aa0      	cmp	r2, #160	; 0xa0
 80020f2:	d005      	beq.n	8002100 <HAL_RCC_ClockConfig+0x60>
 80020f4:	f023 0210 	bic.w	r2, r3, #16
 80020f8:	2ac0      	cmp	r2, #192	; 0xc0
 80020fa:	d001      	beq.n	8002100 <HAL_RCC_ClockConfig+0x60>
 80020fc:	2bf0      	cmp	r3, #240	; 0xf0
 80020fe:	d145      	bne.n	800218c <HAL_RCC_ClockConfig+0xec>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002100:	4a8e      	ldr	r2, [pc, #568]	; (800233c <HAL_RCC_ClockConfig+0x29c>)
 8002102:	6893      	ldr	r3, [r2, #8]
 8002104:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002108:	68a1      	ldr	r1, [r4, #8]
 800210a:	430b      	orrs	r3, r1
 800210c:	6093      	str	r3, [r2, #8]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/ 
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800210e:	6823      	ldr	r3, [r4, #0]
 8002110:	f013 0f01 	tst.w	r3, #1
 8002114:	f000 811e 	beq.w	8002354 <HAL_RCC_ClockConfig+0x2b4>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8002118:	6863      	ldr	r3, [r4, #4]
 800211a:	2b03      	cmp	r3, #3
 800211c:	d83c      	bhi.n	8002198 <HAL_RCC_ClockConfig+0xf8>
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800211e:	6862      	ldr	r2, [r4, #4]
 8002120:	2a01      	cmp	r2, #1
 8002122:	d03f      	beq.n	80021a4 <HAL_RCC_ClockConfig+0x104>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8002124:	1e93      	subs	r3, r2, #2
 8002126:	2b01      	cmp	r3, #1
 8002128:	d943      	bls.n	80021b2 <HAL_RCC_ClockConfig+0x112>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800212a:	4b84      	ldr	r3, [pc, #528]	; (800233c <HAL_RCC_ClockConfig+0x29c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f013 0f02 	tst.w	r3, #2
 8002132:	f000 8150 	beq.w	80023d6 <HAL_RCC_ClockConfig+0x336>
        {
          return HAL_ERROR;
        }
      }

      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002136:	4981      	ldr	r1, [pc, #516]	; (800233c <HAL_RCC_ClockConfig+0x29c>)
 8002138:	688b      	ldr	r3, [r1, #8]
 800213a:	f023 0303 	bic.w	r3, r3, #3
 800213e:	4313      	orrs	r3, r2
 8002140:	608b      	str	r3, [r1, #8]
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002142:	f7ff fb53 	bl	80017ec <HAL_GetTick>
 8002146:	4605      	mov	r5, r0
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002148:	6863      	ldr	r3, [r4, #4]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d038      	beq.n	80021c0 <HAL_RCC_ClockConfig+0x120>
          {
            return HAL_TIMEOUT;
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800214e:	2b02      	cmp	r3, #2
 8002150:	d046      	beq.n	80021e0 <HAL_RCC_ClockConfig+0x140>
          {
            return HAL_TIMEOUT;
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8002152:	2b03      	cmp	r3, #3
 8002154:	d054      	beq.n	8002200 <HAL_RCC_ClockConfig+0x160>
          }
        }
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002156:	4e79      	ldr	r6, [pc, #484]	; (800233c <HAL_RCC_ClockConfig+0x29c>)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002158:	f241 3788 	movw	r7, #5000	; 0x1388
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800215c:	68b3      	ldr	r3, [r6, #8]
 800215e:	f013 0f0c 	tst.w	r3, #12
 8002162:	f000 80f7 	beq.w	8002354 <HAL_RCC_ClockConfig+0x2b4>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002166:	f7ff fb41 	bl	80017ec <HAL_GetTick>
 800216a:	1b43      	subs	r3, r0, r5
 800216c:	42bb      	cmp	r3, r7
 800216e:	d9f5      	bls.n	800215c <HAL_RCC_ClockConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8002170:	2003      	movs	r0, #3
 8002172:	e12c      	b.n	80023ce <HAL_RCC_ClockConfig+0x32e>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8002174:	f44f 7118 	mov.w	r1, #608	; 0x260
 8002178:	4871      	ldr	r0, [pc, #452]	; (8002340 <HAL_RCC_ClockConfig+0x2a0>)
 800217a:	f001 fe9b 	bl	8003eb4 <assert_failed>
 800217e:	e797      	b.n	80020b0 <HAL_RCC_ClockConfig+0x10>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8002180:	f240 2161 	movw	r1, #609	; 0x261
 8002184:	486e      	ldr	r0, [pc, #440]	; (8002340 <HAL_RCC_ClockConfig+0x2a0>)
 8002186:	f001 fe95 	bl	8003eb4 <assert_failed>
 800218a:	e793      	b.n	80020b4 <HAL_RCC_ClockConfig+0x14>
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800218c:	f240 2177 	movw	r1, #631	; 0x277
 8002190:	486b      	ldr	r0, [pc, #428]	; (8002340 <HAL_RCC_ClockConfig+0x2a0>)
 8002192:	f001 fe8f 	bl	8003eb4 <assert_failed>
 8002196:	e7b3      	b.n	8002100 <HAL_RCC_ClockConfig+0x60>
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8002198:	f240 217e 	movw	r1, #638	; 0x27e
 800219c:	4868      	ldr	r0, [pc, #416]	; (8002340 <HAL_RCC_ClockConfig+0x2a0>)
 800219e:	f001 fe89 	bl	8003eb4 <assert_failed>
 80021a2:	e7bc      	b.n	800211e <HAL_RCC_ClockConfig+0x7e>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021a4:	4b65      	ldr	r3, [pc, #404]	; (800233c <HAL_RCC_ClockConfig+0x29c>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80021ac:	d1c3      	bne.n	8002136 <HAL_RCC_ClockConfig+0x96>
          return HAL_ERROR;
 80021ae:	2001      	movs	r0, #1
 80021b0:	e10d      	b.n	80023ce <HAL_RCC_ClockConfig+0x32e>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021b2:	4b62      	ldr	r3, [pc, #392]	; (800233c <HAL_RCC_ClockConfig+0x29c>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80021ba:	d1bc      	bne.n	8002136 <HAL_RCC_ClockConfig+0x96>
          return HAL_ERROR;
 80021bc:	2001      	movs	r0, #1
 80021be:	e106      	b.n	80023ce <HAL_RCC_ClockConfig+0x32e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80021c0:	4e5e      	ldr	r6, [pc, #376]	; (800233c <HAL_RCC_ClockConfig+0x29c>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021c2:	f241 3788 	movw	r7, #5000	; 0x1388
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80021c6:	68b3      	ldr	r3, [r6, #8]
 80021c8:	f003 030c 	and.w	r3, r3, #12
 80021cc:	2b04      	cmp	r3, #4
 80021ce:	f000 80c1 	beq.w	8002354 <HAL_RCC_ClockConfig+0x2b4>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021d2:	f7ff fb0b 	bl	80017ec <HAL_GetTick>
 80021d6:	1b43      	subs	r3, r0, r5
 80021d8:	42bb      	cmp	r3, r7
 80021da:	d9f4      	bls.n	80021c6 <HAL_RCC_ClockConfig+0x126>
            return HAL_TIMEOUT;
 80021dc:	2003      	movs	r0, #3
 80021de:	e0f6      	b.n	80023ce <HAL_RCC_ClockConfig+0x32e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021e0:	4e56      	ldr	r6, [pc, #344]	; (800233c <HAL_RCC_ClockConfig+0x29c>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021e2:	f241 3788 	movw	r7, #5000	; 0x1388
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021e6:	68b3      	ldr	r3, [r6, #8]
 80021e8:	f003 030c 	and.w	r3, r3, #12
 80021ec:	2b08      	cmp	r3, #8
 80021ee:	f000 80b1 	beq.w	8002354 <HAL_RCC_ClockConfig+0x2b4>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021f2:	f7ff fafb 	bl	80017ec <HAL_GetTick>
 80021f6:	1b40      	subs	r0, r0, r5
 80021f8:	42b8      	cmp	r0, r7
 80021fa:	d9f4      	bls.n	80021e6 <HAL_RCC_ClockConfig+0x146>
            return HAL_TIMEOUT;
 80021fc:	2003      	movs	r0, #3
 80021fe:	e0e6      	b.n	80023ce <HAL_RCC_ClockConfig+0x32e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8002200:	4e4e      	ldr	r6, [pc, #312]	; (800233c <HAL_RCC_ClockConfig+0x29c>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002202:	f241 3488 	movw	r4, #5000	; 0x1388
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8002206:	68b3      	ldr	r3, [r6, #8]
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002208:	f7ff faf0 	bl	80017ec <HAL_GetTick>
 800220c:	1b40      	subs	r0, r0, r5
 800220e:	42a0      	cmp	r0, r4
 8002210:	d9f9      	bls.n	8002206 <HAL_RCC_ClockConfig+0x166>
            return HAL_TIMEOUT;
 8002212:	2003      	movs	r0, #3
 8002214:	e0db      	b.n	80023ce <HAL_RCC_ClockConfig+0x32e>
  }
  /* Decreasing the CPU frequency */
  else
  {
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002216:	6823      	ldr	r3, [r4, #0]
 8002218:	f013 0f02 	tst.w	r3, #2
 800221c:	d018      	beq.n	8002250 <HAL_RCC_ClockConfig+0x1b0>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800221e:	68a3      	ldr	r3, [r4, #8]
 8002220:	f033 0280 	bics.w	r2, r3, #128	; 0x80
 8002224:	d00d      	beq.n	8002242 <HAL_RCC_ClockConfig+0x1a2>
 8002226:	f023 0220 	bic.w	r2, r3, #32
 800222a:	2a90      	cmp	r2, #144	; 0x90
 800222c:	d009      	beq.n	8002242 <HAL_RCC_ClockConfig+0x1a2>
 800222e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002232:	2aa0      	cmp	r2, #160	; 0xa0
 8002234:	d005      	beq.n	8002242 <HAL_RCC_ClockConfig+0x1a2>
 8002236:	f023 0210 	bic.w	r2, r3, #16
 800223a:	2ac0      	cmp	r2, #192	; 0xc0
 800223c:	d001      	beq.n	8002242 <HAL_RCC_ClockConfig+0x1a2>
 800223e:	2bf0      	cmp	r3, #240	; 0xf0
 8002240:	d137      	bne.n	80022b2 <HAL_RCC_ClockConfig+0x212>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002242:	4a3e      	ldr	r2, [pc, #248]	; (800233c <HAL_RCC_ClockConfig+0x29c>)
 8002244:	6893      	ldr	r3, [r2, #8]
 8002246:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800224a:	68a1      	ldr	r1, [r4, #8]
 800224c:	430b      	orrs	r3, r1
 800224e:	6093      	str	r3, [r2, #8]
    }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002250:	6823      	ldr	r3, [r4, #0]
 8002252:	f013 0f01 	tst.w	r3, #1
 8002256:	d075      	beq.n	8002344 <HAL_RCC_ClockConfig+0x2a4>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8002258:	6863      	ldr	r3, [r4, #4]
 800225a:	2b03      	cmp	r3, #3
 800225c:	d82f      	bhi.n	80022be <HAL_RCC_ClockConfig+0x21e>
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800225e:	6862      	ldr	r2, [r4, #4]
 8002260:	2a01      	cmp	r2, #1
 8002262:	d032      	beq.n	80022ca <HAL_RCC_ClockConfig+0x22a>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) || 
 8002264:	1e93      	subs	r3, r2, #2
 8002266:	2b01      	cmp	r3, #1
 8002268:	d936      	bls.n	80022d8 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800226a:	4b34      	ldr	r3, [pc, #208]	; (800233c <HAL_RCC_ClockConfig+0x29c>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f013 0f02 	tst.w	r3, #2
 8002272:	f000 80b2 	beq.w	80023da <HAL_RCC_ClockConfig+0x33a>
        {
          return HAL_ERROR;
        }
      }
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002276:	4931      	ldr	r1, [pc, #196]	; (800233c <HAL_RCC_ClockConfig+0x29c>)
 8002278:	688b      	ldr	r3, [r1, #8]
 800227a:	f023 0303 	bic.w	r3, r3, #3
 800227e:	4313      	orrs	r3, r2
 8002280:	608b      	str	r3, [r1, #8]
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002282:	f7ff fab3 	bl	80017ec <HAL_GetTick>
 8002286:	4606      	mov	r6, r0
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002288:	6863      	ldr	r3, [r4, #4]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d02b      	beq.n	80022e6 <HAL_RCC_ClockConfig+0x246>
          {
            return HAL_TIMEOUT;
          } 
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800228e:	2b02      	cmp	r3, #2
 8002290:	d038      	beq.n	8002304 <HAL_RCC_ClockConfig+0x264>
          {
            return HAL_TIMEOUT;
          } 
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8002292:	2b03      	cmp	r3, #3
 8002294:	d045      	beq.n	8002322 <HAL_RCC_ClockConfig+0x282>
          } 
        }
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002296:	4f29      	ldr	r7, [pc, #164]	; (800233c <HAL_RCC_ClockConfig+0x29c>)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002298:	f241 3888 	movw	r8, #5000	; 0x1388
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	f013 0f0c 	tst.w	r3, #12
 80022a2:	d04f      	beq.n	8002344 <HAL_RCC_ClockConfig+0x2a4>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022a4:	f7ff faa2 	bl	80017ec <HAL_GetTick>
 80022a8:	1b83      	subs	r3, r0, r6
 80022aa:	4543      	cmp	r3, r8
 80022ac:	d9f6      	bls.n	800229c <HAL_RCC_ClockConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80022ae:	2003      	movs	r0, #3
 80022b0:	e08d      	b.n	80023ce <HAL_RCC_ClockConfig+0x32e>
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80022b2:	f240 21d1 	movw	r1, #721	; 0x2d1
 80022b6:	4822      	ldr	r0, [pc, #136]	; (8002340 <HAL_RCC_ClockConfig+0x2a0>)
 80022b8:	f001 fdfc 	bl	8003eb4 <assert_failed>
 80022bc:	e7c1      	b.n	8002242 <HAL_RCC_ClockConfig+0x1a2>
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80022be:	f44f 7136 	mov.w	r1, #728	; 0x2d8
 80022c2:	481f      	ldr	r0, [pc, #124]	; (8002340 <HAL_RCC_ClockConfig+0x2a0>)
 80022c4:	f001 fdf6 	bl	8003eb4 <assert_failed>
 80022c8:	e7c9      	b.n	800225e <HAL_RCC_ClockConfig+0x1be>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ca:	4b1c      	ldr	r3, [pc, #112]	; (800233c <HAL_RCC_ClockConfig+0x29c>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80022d2:	d1d0      	bne.n	8002276 <HAL_RCC_ClockConfig+0x1d6>
          return HAL_ERROR;
 80022d4:	2001      	movs	r0, #1
 80022d6:	e07a      	b.n	80023ce <HAL_RCC_ClockConfig+0x32e>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022d8:	4b18      	ldr	r3, [pc, #96]	; (800233c <HAL_RCC_ClockConfig+0x29c>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80022e0:	d1c9      	bne.n	8002276 <HAL_RCC_ClockConfig+0x1d6>
          return HAL_ERROR;
 80022e2:	2001      	movs	r0, #1
 80022e4:	e073      	b.n	80023ce <HAL_RCC_ClockConfig+0x32e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80022e6:	4f15      	ldr	r7, [pc, #84]	; (800233c <HAL_RCC_ClockConfig+0x29c>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022e8:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	f003 030c 	and.w	r3, r3, #12
 80022f2:	2b04      	cmp	r3, #4
 80022f4:	d026      	beq.n	8002344 <HAL_RCC_ClockConfig+0x2a4>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022f6:	f7ff fa79 	bl	80017ec <HAL_GetTick>
 80022fa:	1b83      	subs	r3, r0, r6
 80022fc:	4543      	cmp	r3, r8
 80022fe:	d9f5      	bls.n	80022ec <HAL_RCC_ClockConfig+0x24c>
            return HAL_TIMEOUT;
 8002300:	2003      	movs	r0, #3
 8002302:	e064      	b.n	80023ce <HAL_RCC_ClockConfig+0x32e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002304:	4f0d      	ldr	r7, [pc, #52]	; (800233c <HAL_RCC_ClockConfig+0x29c>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002306:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	f003 030c 	and.w	r3, r3, #12
 8002310:	2b08      	cmp	r3, #8
 8002312:	d017      	beq.n	8002344 <HAL_RCC_ClockConfig+0x2a4>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002314:	f7ff fa6a 	bl	80017ec <HAL_GetTick>
 8002318:	1b80      	subs	r0, r0, r6
 800231a:	4540      	cmp	r0, r8
 800231c:	d9f5      	bls.n	800230a <HAL_RCC_ClockConfig+0x26a>
            return HAL_TIMEOUT;
 800231e:	2003      	movs	r0, #3
 8002320:	e055      	b.n	80023ce <HAL_RCC_ClockConfig+0x32e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8002322:	4d06      	ldr	r5, [pc, #24]	; (800233c <HAL_RCC_ClockConfig+0x29c>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002324:	f241 3488 	movw	r4, #5000	; 0x1388
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8002328:	68ab      	ldr	r3, [r5, #8]
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800232a:	f7ff fa5f 	bl	80017ec <HAL_GetTick>
 800232e:	1b80      	subs	r0, r0, r6
 8002330:	42a0      	cmp	r0, r4
 8002332:	d9f9      	bls.n	8002328 <HAL_RCC_ClockConfig+0x288>
            return HAL_TIMEOUT;
 8002334:	2003      	movs	r0, #3
 8002336:	e04a      	b.n	80023ce <HAL_RCC_ClockConfig+0x32e>
 8002338:	40023c00 	.word	0x40023c00
 800233c:	40023800 	.word	0x40023800
 8002340:	08004524 	.word	0x08004524
        }
      }
    }
    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002344:	b2ea      	uxtb	r2, r5
 8002346:	4b27      	ldr	r3, [pc, #156]	; (80023e4 <HAL_RCC_ClockConfig+0x344>)
 8002348:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 030f 	and.w	r3, r3, #15
 8002350:	42ab      	cmp	r3, r5
 8002352:	d144      	bne.n	80023de <HAL_RCC_ClockConfig+0x33e>
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002354:	6823      	ldr	r3, [r4, #0]
 8002356:	f013 0f04 	tst.w	r3, #4
 800235a:	d017      	beq.n	800238c <HAL_RCC_ClockConfig+0x2ec>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800235c:	68e3      	ldr	r3, [r4, #12]
 800235e:	f433 5280 	bics.w	r2, r3, #4096	; 0x1000
 8002362:	d00c      	beq.n	800237e <HAL_RCC_ClockConfig+0x2de>
 8002364:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002368:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 800236c:	d007      	beq.n	800237e <HAL_RCC_ClockConfig+0x2de>
 800236e:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002372:	d004      	beq.n	800237e <HAL_RCC_ClockConfig+0x2de>
 8002374:	f240 3132 	movw	r1, #818	; 0x332
 8002378:	481b      	ldr	r0, [pc, #108]	; (80023e8 <HAL_RCC_ClockConfig+0x348>)
 800237a:	f001 fd9b 	bl	8003eb4 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800237e:	4a1b      	ldr	r2, [pc, #108]	; (80023ec <HAL_RCC_ClockConfig+0x34c>)
 8002380:	6893      	ldr	r3, [r2, #8]
 8002382:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002386:	68e1      	ldr	r1, [r4, #12]
 8002388:	430b      	orrs	r3, r1
 800238a:	6093      	str	r3, [r2, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800238c:	6823      	ldr	r3, [r4, #0]
 800238e:	f013 0f08 	tst.w	r3, #8
 8002392:	d018      	beq.n	80023c6 <HAL_RCC_ClockConfig+0x326>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8002394:	6923      	ldr	r3, [r4, #16]
 8002396:	f433 5280 	bics.w	r2, r3, #4096	; 0x1000
 800239a:	d00c      	beq.n	80023b6 <HAL_RCC_ClockConfig+0x316>
 800239c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80023a0:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 80023a4:	d007      	beq.n	80023b6 <HAL_RCC_ClockConfig+0x316>
 80023a6:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80023aa:	d004      	beq.n	80023b6 <HAL_RCC_ClockConfig+0x316>
 80023ac:	f240 3139 	movw	r1, #825	; 0x339
 80023b0:	480d      	ldr	r0, [pc, #52]	; (80023e8 <HAL_RCC_ClockConfig+0x348>)
 80023b2:	f001 fd7f 	bl	8003eb4 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023b6:	4a0d      	ldr	r2, [pc, #52]	; (80023ec <HAL_RCC_ClockConfig+0x34c>)
 80023b8:	6893      	ldr	r3, [r2, #8]
 80023ba:	6921      	ldr	r1, [r4, #16]
 80023bc:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80023c0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80023c4:	6093      	str	r3, [r2, #8]
  }

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80023c6:	2000      	movs	r0, #0
 80023c8:	f7ff f9da 	bl	8001780 <HAL_InitTick>
  
  return HAL_OK;
 80023cc:	2000      	movs	r0, #0
}
 80023ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_ERROR;
 80023d2:	2001      	movs	r0, #1
 80023d4:	e7fb      	b.n	80023ce <HAL_RCC_ClockConfig+0x32e>
          return HAL_ERROR;
 80023d6:	2001      	movs	r0, #1
 80023d8:	e7f9      	b.n	80023ce <HAL_RCC_ClockConfig+0x32e>
          return HAL_ERROR;
 80023da:	2001      	movs	r0, #1
 80023dc:	e7f7      	b.n	80023ce <HAL_RCC_ClockConfig+0x32e>
      return HAL_ERROR;
 80023de:	2001      	movs	r0, #1
 80023e0:	e7f5      	b.n	80023ce <HAL_RCC_ClockConfig+0x32e>
 80023e2:	bf00      	nop
 80023e4:	40023c00 	.word	0x40023c00
 80023e8:	08004524 	.word	0x08004524
 80023ec:	40023800 	.word	0x40023800

080023f0 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023f0:	4b1a      	ldr	r3, [pc, #104]	; (800245c <HAL_RCC_GetSysClockFreq+0x6c>)
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f003 030c 	and.w	r3, r3, #12
 80023f8:	2b04      	cmp	r3, #4
 80023fa:	d02b      	beq.n	8002454 <HAL_RCC_GetSysClockFreq+0x64>
 80023fc:	2b08      	cmp	r3, #8
 80023fe:	d12b      	bne.n	8002458 <HAL_RCC_GetSysClockFreq+0x68>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002400:	4b16      	ldr	r3, [pc, #88]	; (800245c <HAL_RCC_GetSysClockFreq+0x6c>)
 8002402:	685a      	ldr	r2, [r3, #4]
 8002404:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 800240e:	4b13      	ldr	r3, [pc, #76]	; (800245c <HAL_RCC_GetSysClockFreq+0x6c>)
 8002410:	6858      	ldr	r0, [r3, #4]
 8002412:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8002416:	fa91 f3a1 	rbit	r3, r1
 800241a:	fab3 f383 	clz	r3, r3
 800241e:	ea00 0001 	and.w	r0, r0, r1
 8002422:	fa20 f003 	lsr.w	r0, r0, r3
 8002426:	bf14      	ite	ne
 8002428:	4b0d      	ldrne	r3, [pc, #52]	; (8002460 <HAL_RCC_GetSysClockFreq+0x70>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 800242a:	4b0e      	ldreq	r3, [pc, #56]	; (8002464 <HAL_RCC_GetSysClockFreq+0x74>)
 800242c:	fbb3 f2f2 	udiv	r2, r3, r2
 8002430:	fb02 f000 	mul.w	r0, r2, r0
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 8002434:	4b09      	ldr	r3, [pc, #36]	; (800245c <HAL_RCC_GetSysClockFreq+0x6c>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800243c:	fa92 f2a2 	rbit	r2, r2
 8002440:	fab2 f282 	clz	r2, r2
 8002444:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002448:	40d3      	lsrs	r3, r2
 800244a:	3301      	adds	r3, #1
 800244c:	005b      	lsls	r3, r3, #1
      
      sysclockfreq = pllvco/pllp;
 800244e:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8002452:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002454:	4802      	ldr	r0, [pc, #8]	; (8002460 <HAL_RCC_GetSysClockFreq+0x70>)
 8002456:	4770      	bx	lr
      sysclockfreq = HSI_VALUE;
 8002458:	4802      	ldr	r0, [pc, #8]	; (8002464 <HAL_RCC_GetSysClockFreq+0x74>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800245a:	4770      	bx	lr
 800245c:	40023800 	.word	0x40023800
 8002460:	007a1200 	.word	0x007a1200
 8002464:	00f42400 	.word	0x00f42400

08002468 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002468:	b508      	push	{r3, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800246a:	f7ff ffc1 	bl	80023f0 <HAL_RCC_GetSysClockFreq>
 800246e:	4b08      	ldr	r3, [pc, #32]	; (8002490 <HAL_RCC_GetHCLKFreq+0x28>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	22f0      	movs	r2, #240	; 0xf0
 8002474:	fa92 f2a2 	rbit	r2, r2
 8002478:	fab2 f282 	clz	r2, r2
 800247c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002480:	40d3      	lsrs	r3, r2
 8002482:	4a04      	ldr	r2, [pc, #16]	; (8002494 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002484:	5cd3      	ldrb	r3, [r2, r3]
 8002486:	40d8      	lsrs	r0, r3
 8002488:	4b03      	ldr	r3, [pc, #12]	; (8002498 <HAL_RCC_GetHCLKFreq+0x30>)
 800248a:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 800248c:	bd08      	pop	{r3, pc}
 800248e:	bf00      	nop
 8002490:	40023800 	.word	0x40023800
 8002494:	08004400 	.word	0x08004400
 8002498:	20000364 	.word	0x20000364

0800249c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
 800249c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 800249e:	f7ff ffe3 	bl	8002468 <HAL_RCC_GetHCLKFreq>
 80024a2:	4b07      	ldr	r3, [pc, #28]	; (80024c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 80024aa:	fa92 f2a2 	rbit	r2, r2
 80024ae:	fab2 f282 	clz	r2, r2
 80024b2:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80024b6:	40d3      	lsrs	r3, r2
 80024b8:	4a02      	ldr	r2, [pc, #8]	; (80024c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80024ba:	5cd3      	ldrb	r3, [r2, r3]
}
 80024bc:	40d8      	lsrs	r0, r3
 80024be:	bd08      	pop	{r3, pc}
 80024c0:	40023800 	.word	0x40023800
 80024c4:	08004400 	.word	0x08004400

080024c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024c8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 80024ca:	f7ff ffcd 	bl	8002468 <HAL_RCC_GetHCLKFreq>
 80024ce:	4b07      	ldr	r3, [pc, #28]	; (80024ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80024d6:	fa92 f2a2 	rbit	r2, r2
 80024da:	fab2 f282 	clz	r2, r2
 80024de:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80024e2:	40d3      	lsrs	r3, r2
 80024e4:	4a02      	ldr	r2, [pc, #8]	; (80024f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80024e6:	5cd3      	ldrb	r3, [r2, r3]
} 
 80024e8:	40d8      	lsrs	r0, r3
 80024ea:	bd08      	pop	{r3, pc}
 80024ec:	40023800 	.word	0x40023800
 80024f0:	08004400 	.word	0x08004400

080024f4 <SPI_WaitOnFlagUntilTimeout>:
  * @param  Status: Flag status to check: RESET or set
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status, uint32_t Timeout)  
{
 80024f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024f8:	4606      	mov	r6, r0
 80024fa:	460d      	mov	r5, r1
 80024fc:	4690      	mov	r8, r2
 80024fe:	461c      	mov	r4, r3
  uint32_t tickstart = 0;

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002500:	f7ff f974 	bl	80017ec <HAL_GetTick>
 8002504:	4607      	mov	r7, r0

  /* Wait until flag is set */
  if(Status == RESET)
 8002506:	f1b8 0f00 	cmp.w	r8, #0
 800250a:	d02e      	beq.n	800256a <SPI_WaitOnFlagUntilTimeout+0x76>
      }
    }
  }
  else
  {
    while(__HAL_SPI_GET_FLAG(hspi, Flag) != RESET)
 800250c:	6832      	ldr	r2, [r6, #0]
 800250e:	6893      	ldr	r3, [r2, #8]
 8002510:	ea35 0303 	bics.w	r3, r5, r3
 8002514:	d15b      	bne.n	80025ce <SPI_WaitOnFlagUntilTimeout+0xda>
    {
      if(Timeout != HAL_MAX_DELAY)
 8002516:	f1b4 3fff 	cmp.w	r4, #4294967295
 800251a:	d0f8      	beq.n	800250e <SPI_WaitOnFlagUntilTimeout+0x1a>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800251c:	b124      	cbz	r4, 8002528 <SPI_WaitOnFlagUntilTimeout+0x34>
 800251e:	f7ff f965 	bl	80017ec <HAL_GetTick>
 8002522:	1bc0      	subs	r0, r0, r7
 8002524:	42a0      	cmp	r0, r4
 8002526:	d9f1      	bls.n	800250c <SPI_WaitOnFlagUntilTimeout+0x18>
          /* Disable the SPI and reset the CRC: the CRC value should be cleared
             on both master and slave sides in order to resynchronize the master
             and slave for their respective CRC calculation */

          /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
          __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002528:	6832      	ldr	r2, [r6, #0]
 800252a:	6853      	ldr	r3, [r2, #4]
 800252c:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8002530:	6053      	str	r3, [r2, #4]

          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002532:	6832      	ldr	r2, [r6, #0]
 8002534:	6813      	ldr	r3, [r2, #0]
 8002536:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800253a:	6013      	str	r3, [r2, #0]

          /* Reset CRC Calculation */
          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800253c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800253e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002542:	d039      	beq.n	80025b8 <SPI_WaitOnFlagUntilTimeout+0xc4>
          {
            SPI_RESET_CRC(hspi);
          }

          hspi->State= HAL_SPI_STATE_READY;
 8002544:	2301      	movs	r3, #1
 8002546:	f886 3051 	strb.w	r3, [r6, #81]	; 0x51

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800254a:	2300      	movs	r3, #0
 800254c:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50

          return HAL_TIMEOUT;
 8002550:	2003      	movs	r0, #3
 8002552:	e02f      	b.n	80025b4 <SPI_WaitOnFlagUntilTimeout+0xc0>
            SPI_RESET_CRC(hspi);
 8002554:	6832      	ldr	r2, [r6, #0]
 8002556:	6813      	ldr	r3, [r2, #0]
 8002558:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800255c:	6013      	str	r3, [r2, #0]
 800255e:	6832      	ldr	r2, [r6, #0]
 8002560:	6813      	ldr	r3, [r2, #0]
 8002562:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002566:	6013      	str	r3, [r2, #0]
 8002568:	e01b      	b.n	80025a2 <SPI_WaitOnFlagUntilTimeout+0xae>
    while(__HAL_SPI_GET_FLAG(hspi, Flag) == RESET)
 800256a:	6831      	ldr	r1, [r6, #0]
 800256c:	688b      	ldr	r3, [r1, #8]
 800256e:	ea35 0303 	bics.w	r3, r5, r3
 8002572:	d01e      	beq.n	80025b2 <SPI_WaitOnFlagUntilTimeout+0xbe>
      if(Timeout != HAL_MAX_DELAY)
 8002574:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002578:	d0f8      	beq.n	800256c <SPI_WaitOnFlagUntilTimeout+0x78>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800257a:	b124      	cbz	r4, 8002586 <SPI_WaitOnFlagUntilTimeout+0x92>
 800257c:	f7ff f936 	bl	80017ec <HAL_GetTick>
 8002580:	1bc0      	subs	r0, r0, r7
 8002582:	42a0      	cmp	r0, r4
 8002584:	d9f1      	bls.n	800256a <SPI_WaitOnFlagUntilTimeout+0x76>
          __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002586:	6832      	ldr	r2, [r6, #0]
 8002588:	6853      	ldr	r3, [r2, #4]
 800258a:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800258e:	6053      	str	r3, [r2, #4]
          __HAL_SPI_DISABLE(hspi);
 8002590:	6832      	ldr	r2, [r6, #0]
 8002592:	6813      	ldr	r3, [r2, #0]
 8002594:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002598:	6013      	str	r3, [r2, #0]
          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800259a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800259c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025a0:	d0d8      	beq.n	8002554 <SPI_WaitOnFlagUntilTimeout+0x60>
          hspi->State= HAL_SPI_STATE_READY;
 80025a2:	2301      	movs	r3, #1
 80025a4:	f886 3051 	strb.w	r3, [r6, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 80025a8:	2300      	movs	r3, #0
 80025aa:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
          return HAL_TIMEOUT;
 80025ae:	2003      	movs	r0, #3
 80025b0:	e000      	b.n	80025b4 <SPI_WaitOnFlagUntilTimeout+0xc0>
        }
      }
    }
  }
  return HAL_OK;
 80025b2:	4640      	mov	r0, r8
}
 80025b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            SPI_RESET_CRC(hspi);
 80025b8:	6832      	ldr	r2, [r6, #0]
 80025ba:	6813      	ldr	r3, [r2, #0]
 80025bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80025c0:	6013      	str	r3, [r2, #0]
 80025c2:	6832      	ldr	r2, [r6, #0]
 80025c4:	6813      	ldr	r3, [r2, #0]
 80025c6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80025ca:	6013      	str	r3, [r2, #0]
 80025cc:	e7ba      	b.n	8002544 <SPI_WaitOnFlagUntilTimeout+0x50>
  return HAL_OK;
 80025ce:	2000      	movs	r0, #0
 80025d0:	e7f0      	b.n	80025b4 <SPI_WaitOnFlagUntilTimeout+0xc0>
	...

080025d4 <HAL_SPI_Init>:
  if(hspi == NULL)
 80025d4:	2800      	cmp	r0, #0
 80025d6:	f000 80aa 	beq.w	800272e <HAL_SPI_Init+0x15a>
{
 80025da:	b510      	push	{r4, lr}
 80025dc:	4604      	mov	r4, r0
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 80025de:	6843      	ldr	r3, [r0, #4]
 80025e0:	b113      	cbz	r3, 80025e8 <HAL_SPI_Init+0x14>
 80025e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025e6:	d17e      	bne.n	80026e6 <HAL_SPI_Init+0x112>
  assert_param(IS_SPI_DIRECTION_MODE(hspi->Init.Direction));
 80025e8:	68a3      	ldr	r3, [r4, #8]
 80025ea:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 80025ee:	d002      	beq.n	80025f6 <HAL_SPI_Init+0x22>
 80025f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025f4:	d17c      	bne.n	80026f0 <HAL_SPI_Init+0x11c>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 80025f6:	68e3      	ldr	r3, [r4, #12]
 80025f8:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 80025fc:	d17d      	bne.n	80026fa <HAL_SPI_Init+0x126>
  assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 80025fe:	6923      	ldr	r3, [r4, #16]
 8002600:	f033 0302 	bics.w	r3, r3, #2
 8002604:	d003      	beq.n	800260e <HAL_SPI_Init+0x3a>
 8002606:	21bb      	movs	r1, #187	; 0xbb
 8002608:	484a      	ldr	r0, [pc, #296]	; (8002734 <HAL_SPI_Init+0x160>)
 800260a:	f001 fc53 	bl	8003eb4 <assert_failed>
  assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800260e:	6963      	ldr	r3, [r4, #20]
 8002610:	2b01      	cmp	r3, #1
 8002612:	d877      	bhi.n	8002704 <HAL_SPI_Init+0x130>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8002614:	69a3      	ldr	r3, [r4, #24]
 8002616:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 800261a:	d002      	beq.n	8002622 <HAL_SPI_Init+0x4e>
 800261c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002620:	d175      	bne.n	800270e <HAL_SPI_Init+0x13a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8002622:	69e3      	ldr	r3, [r4, #28]
 8002624:	f033 0308 	bics.w	r3, r3, #8
 8002628:	d009      	beq.n	800263e <HAL_SPI_Init+0x6a>
 800262a:	2b10      	cmp	r3, #16
 800262c:	d007      	beq.n	800263e <HAL_SPI_Init+0x6a>
 800262e:	2b20      	cmp	r3, #32
 8002630:	d005      	beq.n	800263e <HAL_SPI_Init+0x6a>
 8002632:	2b30      	cmp	r3, #48	; 0x30
 8002634:	d003      	beq.n	800263e <HAL_SPI_Init+0x6a>
 8002636:	21be      	movs	r1, #190	; 0xbe
 8002638:	483e      	ldr	r0, [pc, #248]	; (8002734 <HAL_SPI_Init+0x160>)
 800263a:	f001 fc3b 	bl	8003eb4 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800263e:	6a23      	ldr	r3, [r4, #32]
 8002640:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8002644:	d003      	beq.n	800264e <HAL_SPI_Init+0x7a>
 8002646:	21bf      	movs	r1, #191	; 0xbf
 8002648:	483a      	ldr	r0, [pc, #232]	; (8002734 <HAL_SPI_Init+0x160>)
 800264a:	f001 fc33 	bl	8003eb4 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800264e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002650:	f033 0310 	bics.w	r3, r3, #16
 8002654:	d003      	beq.n	800265e <HAL_SPI_Init+0x8a>
 8002656:	21c0      	movs	r1, #192	; 0xc0
 8002658:	4836      	ldr	r0, [pc, #216]	; (8002734 <HAL_SPI_Init+0x160>)
 800265a:	f001 fc2b 	bl	8003eb4 <assert_failed>
  assert_param(IS_SPI_CRC_CALCULATION(hspi->Init.CRCCalculation));
 800265e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002660:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 8002664:	d003      	beq.n	800266e <HAL_SPI_Init+0x9a>
 8002666:	21c1      	movs	r1, #193	; 0xc1
 8002668:	4832      	ldr	r0, [pc, #200]	; (8002734 <HAL_SPI_Init+0x160>)
 800266a:	f001 fc23 	bl	8003eb4 <assert_failed>
  assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
 800266e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002670:	3b01      	subs	r3, #1
 8002672:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002676:	4293      	cmp	r3, r2
 8002678:	d84e      	bhi.n	8002718 <HAL_SPI_Init+0x144>
  if(hspi->State == HAL_SPI_STATE_RESET)
 800267a:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800267e:	2b00      	cmp	r3, #0
 8002680:	d04f      	beq.n	8002722 <HAL_SPI_Init+0x14e>
  hspi->State = HAL_SPI_STATE_BUSY;
 8002682:	2302      	movs	r3, #2
 8002684:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8002688:	6822      	ldr	r2, [r4, #0]
 800268a:	6813      	ldr	r3, [r2, #0]
 800268c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002690:	6013      	str	r3, [r2, #0]
  hspi->Instance->CR1 = (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002692:	6822      	ldr	r2, [r4, #0]
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 8002694:	6863      	ldr	r3, [r4, #4]
 8002696:	68a1      	ldr	r1, [r4, #8]
 8002698:	430b      	orrs	r3, r1
 800269a:	68e1      	ldr	r1, [r4, #12]
 800269c:	430b      	orrs	r3, r1
 800269e:	6921      	ldr	r1, [r4, #16]
 80026a0:	430b      	orrs	r3, r1
 80026a2:	6961      	ldr	r1, [r4, #20]
 80026a4:	430b      	orrs	r3, r1
 80026a6:	69e1      	ldr	r1, [r4, #28]
 80026a8:	430b      	orrs	r3, r1
 80026aa:	6a21      	ldr	r1, [r4, #32]
 80026ac:	430b      	orrs	r3, r1
 80026ae:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80026b0:	430b      	orrs	r3, r1
                         hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
 80026b2:	69a1      	ldr	r1, [r4, #24]
 80026b4:	f401 7100 	and.w	r1, r1, #512	; 0x200
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 80026b8:	430b      	orrs	r3, r1
  hspi->Instance->CR1 = (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80026ba:	6013      	str	r3, [r2, #0]
  hspi->Instance->CR2 = (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode);
 80026bc:	6822      	ldr	r2, [r4, #0]
 80026be:	8b63      	ldrh	r3, [r4, #26]
 80026c0:	f003 0304 	and.w	r3, r3, #4
 80026c4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80026c6:	430b      	orrs	r3, r1
 80026c8:	6053      	str	r3, [r2, #4]
  hspi->Instance->CRCPR = hspi->Init.CRCPolynomial;
 80026ca:	6823      	ldr	r3, [r4, #0]
 80026cc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80026ce:	611a      	str	r2, [r3, #16]
  hspi->Instance->I2SCFGR &= (uint32_t)(~SPI_I2SCFGR_I2SMOD);
 80026d0:	6822      	ldr	r2, [r4, #0]
 80026d2:	69d3      	ldr	r3, [r2, #28]
 80026d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80026d8:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80026da:	2000      	movs	r0, #0
 80026dc:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80026de:	2301      	movs	r3, #1
 80026e0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 80026e4:	bd10      	pop	{r4, pc}
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 80026e6:	21b8      	movs	r1, #184	; 0xb8
 80026e8:	4812      	ldr	r0, [pc, #72]	; (8002734 <HAL_SPI_Init+0x160>)
 80026ea:	f001 fbe3 	bl	8003eb4 <assert_failed>
 80026ee:	e77b      	b.n	80025e8 <HAL_SPI_Init+0x14>
  assert_param(IS_SPI_DIRECTION_MODE(hspi->Init.Direction));
 80026f0:	21b9      	movs	r1, #185	; 0xb9
 80026f2:	4810      	ldr	r0, [pc, #64]	; (8002734 <HAL_SPI_Init+0x160>)
 80026f4:	f001 fbde 	bl	8003eb4 <assert_failed>
 80026f8:	e77d      	b.n	80025f6 <HAL_SPI_Init+0x22>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 80026fa:	21ba      	movs	r1, #186	; 0xba
 80026fc:	480d      	ldr	r0, [pc, #52]	; (8002734 <HAL_SPI_Init+0x160>)
 80026fe:	f001 fbd9 	bl	8003eb4 <assert_failed>
 8002702:	e77c      	b.n	80025fe <HAL_SPI_Init+0x2a>
  assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8002704:	21bc      	movs	r1, #188	; 0xbc
 8002706:	480b      	ldr	r0, [pc, #44]	; (8002734 <HAL_SPI_Init+0x160>)
 8002708:	f001 fbd4 	bl	8003eb4 <assert_failed>
 800270c:	e782      	b.n	8002614 <HAL_SPI_Init+0x40>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800270e:	21bd      	movs	r1, #189	; 0xbd
 8002710:	4808      	ldr	r0, [pc, #32]	; (8002734 <HAL_SPI_Init+0x160>)
 8002712:	f001 fbcf 	bl	8003eb4 <assert_failed>
 8002716:	e784      	b.n	8002622 <HAL_SPI_Init+0x4e>
  assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
 8002718:	21c2      	movs	r1, #194	; 0xc2
 800271a:	4806      	ldr	r0, [pc, #24]	; (8002734 <HAL_SPI_Init+0x160>)
 800271c:	f001 fbca 	bl	8003eb4 <assert_failed>
 8002720:	e7ab      	b.n	800267a <HAL_SPI_Init+0xa6>
    hspi->Lock = HAL_UNLOCKED;
 8002722:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8002726:	4620      	mov	r0, r4
 8002728:	f001 fbd0 	bl	8003ecc <HAL_SPI_MspInit>
 800272c:	e7a9      	b.n	8002682 <HAL_SPI_Init+0xae>
    return HAL_ERROR;
 800272e:	2001      	movs	r0, #1
}
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	080045ac 	.word	0x080045ac

08002738 <HAL_SPI_TransmitReceive>:
{
 8002738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800273c:	b082      	sub	sp, #8
 800273e:	4604      	mov	r4, r0
 8002740:	460f      	mov	r7, r1
 8002742:	4690      	mov	r8, r2
 8002744:	461d      	mov	r5, r3
 8002746:	9e08      	ldr	r6, [sp, #32]
  tmpstate = hspi->State; 
 8002748:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 800274c:	b2db      	uxtb	r3, r3
  if((tmpstate == HAL_SPI_STATE_READY) || (tmpstate == HAL_SPI_STATE_BUSY_RX))
 800274e:	2b01      	cmp	r3, #1
 8002750:	d002      	beq.n	8002758 <HAL_SPI_TransmitReceive+0x20>
 8002752:	2b22      	cmp	r3, #34	; 0x22
 8002754:	f040 818f 	bne.w	8002a76 <HAL_SPI_TransmitReceive+0x33e>
    if((pTxData == NULL ) || (pRxData == NULL ) || (Size == 0))
 8002758:	2f00      	cmp	r7, #0
 800275a:	f000 8190 	beq.w	8002a7e <HAL_SPI_TransmitReceive+0x346>
 800275e:	f1b8 0f00 	cmp.w	r8, #0
 8002762:	f000 8191 	beq.w	8002a88 <HAL_SPI_TransmitReceive+0x350>
 8002766:	2d00      	cmp	r5, #0
 8002768:	f000 8190 	beq.w	8002a8c <HAL_SPI_TransmitReceive+0x354>
    assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 800276c:	68a3      	ldr	r3, [r4, #8]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d145      	bne.n	80027fe <HAL_SPI_TransmitReceive+0xc6>
    __HAL_LOCK(hspi);
 8002772:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8002776:	2b01      	cmp	r3, #1
 8002778:	f000 818a 	beq.w	8002a90 <HAL_SPI_TransmitReceive+0x358>
 800277c:	2301      	movs	r3, #1
 800277e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    if(hspi->State == HAL_SPI_STATE_READY)
 8002782:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8002786:	b2db      	uxtb	r3, r3
 8002788:	2b01      	cmp	r3, #1
      hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800278a:	bf04      	itt	eq
 800278c:	2332      	moveq	r3, #50	; 0x32
 800278e:	f884 3051 	strbeq.w	r3, [r4, #81]	; 0x51
    hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002792:	2300      	movs	r3, #0
 8002794:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->pRxBuffPtr  = pRxData;
 8002796:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
    hspi->RxXferSize  = Size;
 800279a:	87a5      	strh	r5, [r4, #60]	; 0x3c
    hspi->RxXferCount = Size;  
 800279c:	87e5      	strh	r5, [r4, #62]	; 0x3e
    hspi->pTxBuffPtr  = pTxData;
 800279e:	6327      	str	r7, [r4, #48]	; 0x30
    hspi->TxXferSize  = Size; 
 80027a0:	86a5      	strh	r5, [r4, #52]	; 0x34
    hspi->TxXferCount = Size;
 80027a2:	86e5      	strh	r5, [r4, #54]	; 0x36
    hspi->RxISR = 0;
 80027a4:	64a3      	str	r3, [r4, #72]	; 0x48
    hspi->TxISR = 0;
 80027a6:	64e3      	str	r3, [r4, #76]	; 0x4c
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80027a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80027aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027ae:	d02c      	beq.n	800280a <HAL_SPI_TransmitReceive+0xd2>
    if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 80027b0:	6823      	ldr	r3, [r4, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	f012 0f40 	tst.w	r2, #64	; 0x40
 80027b8:	d103      	bne.n	80027c2 <HAL_SPI_TransmitReceive+0x8a>
      __HAL_SPI_ENABLE(hspi);
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027c0:	601a      	str	r2, [r3, #0]
    if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80027c2:	68e3      	ldr	r3, [r4, #12]
 80027c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027c8:	d02a      	beq.n	8002820 <HAL_SPI_TransmitReceive+0xe8>
      if((hspi->Init.Mode == SPI_MODE_SLAVE) || ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->TxXferCount == 0x01)))
 80027ca:	6863      	ldr	r3, [r4, #4]
 80027cc:	b12b      	cbz	r3, 80027da <HAL_SPI_TransmitReceive+0xa2>
 80027ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027d2:	d10b      	bne.n	80027ec <HAL_SPI_TransmitReceive+0xb4>
 80027d4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d108      	bne.n	80027ec <HAL_SPI_TransmitReceive+0xb4>
        hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 80027da:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80027dc:	1c5a      	adds	r2, r3, #1
 80027de:	6322      	str	r2, [r4, #48]	; 0x30
 80027e0:	6822      	ldr	r2, [r4, #0]
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 80027e6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80027e8:	3b01      	subs	r3, #1
 80027ea:	86e3      	strh	r3, [r4, #54]	; 0x36
      if(hspi->TxXferCount == 0)
 80027ec:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	f000 8098 	beq.w	8002924 <HAL_SPI_TransmitReceive+0x1ec>
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80027f4:	2500      	movs	r5, #0
 80027f6:	2702      	movs	r7, #2
            if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 80027f8:	f04f 0801 	mov.w	r8, #1
 80027fc:	e0e9      	b.n	80029d2 <HAL_SPI_TransmitReceive+0x29a>
    assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 80027fe:	f44f 7126 	mov.w	r1, #664	; 0x298
 8002802:	48a0      	ldr	r0, [pc, #640]	; (8002a84 <HAL_SPI_TransmitReceive+0x34c>)
 8002804:	f001 fb56 	bl	8003eb4 <assert_failed>
 8002808:	e7b3      	b.n	8002772 <HAL_SPI_TransmitReceive+0x3a>
      SPI_RESET_CRC(hspi);
 800280a:	6822      	ldr	r2, [r4, #0]
 800280c:	6813      	ldr	r3, [r2, #0]
 800280e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002812:	6013      	str	r3, [r2, #0]
 8002814:	6822      	ldr	r2, [r4, #0]
 8002816:	6813      	ldr	r3, [r2, #0]
 8002818:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800281c:	6013      	str	r3, [r2, #0]
 800281e:	e7c7      	b.n	80027b0 <HAL_SPI_TransmitReceive+0x78>
      if((hspi->Init.Mode == SPI_MODE_SLAVE) || ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->TxXferCount == 0x01)))
 8002820:	6863      	ldr	r3, [r4, #4]
 8002822:	b12b      	cbz	r3, 8002830 <HAL_SPI_TransmitReceive+0xf8>
 8002824:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002828:	d10c      	bne.n	8002844 <HAL_SPI_TransmitReceive+0x10c>
 800282a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800282c:	2b01      	cmp	r3, #1
 800282e:	d109      	bne.n	8002844 <HAL_SPI_TransmitReceive+0x10c>
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 8002830:	6823      	ldr	r3, [r4, #0]
 8002832:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002834:	8812      	ldrh	r2, [r2, #0]
 8002836:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr+=2;
 8002838:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800283a:	3302      	adds	r3, #2
 800283c:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800283e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002840:	3b01      	subs	r3, #1
 8002842:	86e3      	strh	r3, [r4, #54]	; 0x36
      if(hspi->TxXferCount == 0)
 8002844:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002846:	b123      	cbz	r3, 8002852 <HAL_SPI_TransmitReceive+0x11a>
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8002848:	2500      	movs	r5, #0
 800284a:	2702      	movs	r7, #2
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 800284c:	f04f 0801 	mov.w	r8, #1
 8002850:	e032      	b.n	80028b8 <HAL_SPI_TransmitReceive+0x180>
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002852:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002854:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002858:	d013      	beq.n	8002882 <HAL_SPI_TransmitReceive+0x14a>
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 800285a:	4633      	mov	r3, r6
 800285c:	2200      	movs	r2, #0
 800285e:	2101      	movs	r1, #1
 8002860:	4620      	mov	r0, r4
 8002862:	f7ff fe47 	bl	80024f4 <SPI_WaitOnFlagUntilTimeout>
 8002866:	2800      	cmp	r0, #0
 8002868:	f040 8114 	bne.w	8002a94 <HAL_SPI_TransmitReceive+0x35c>
        *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800286c:	6823      	ldr	r3, [r4, #0]
 800286e:	68da      	ldr	r2, [r3, #12]
 8002870:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002872:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr+=2;
 8002874:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002876:	3302      	adds	r3, #2
 8002878:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800287a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800287c:	3b01      	subs	r3, #1
 800287e:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8002880:	e064      	b.n	800294c <HAL_SPI_TransmitReceive+0x214>
          hspi->Instance->CR1 |= SPI_CR1_CRCNEXT;
 8002882:	6822      	ldr	r2, [r4, #0]
 8002884:	6813      	ldr	r3, [r2, #0]
 8002886:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800288a:	6013      	str	r3, [r2, #0]
 800288c:	e7e5      	b.n	800285a <HAL_SPI_TransmitReceive+0x122>
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 800288e:	4633      	mov	r3, r6
 8002890:	462a      	mov	r2, r5
 8002892:	4641      	mov	r1, r8
 8002894:	4620      	mov	r0, r4
 8002896:	f7ff fe2d 	bl	80024f4 <SPI_WaitOnFlagUntilTimeout>
 800289a:	2800      	cmp	r0, #0
 800289c:	f040 80fe 	bne.w	8002a9c <HAL_SPI_TransmitReceive+0x364>
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80028a0:	6823      	ldr	r3, [r4, #0]
 80028a2:	68da      	ldr	r2, [r3, #12]
 80028a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80028a6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr+=2;
 80028a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80028aa:	3302      	adds	r3, #2
 80028ac:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->RxXferCount--;
 80028ae:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80028b0:	3b01      	subs	r3, #1
 80028b2:	87e3      	strh	r3, [r4, #62]	; 0x3e
        while(hspi->TxXferCount > 0)
 80028b4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80028b6:	b1fb      	cbz	r3, 80028f8 <HAL_SPI_TransmitReceive+0x1c0>
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80028b8:	4633      	mov	r3, r6
 80028ba:	462a      	mov	r2, r5
 80028bc:	4639      	mov	r1, r7
 80028be:	4620      	mov	r0, r4
 80028c0:	f7ff fe18 	bl	80024f4 <SPI_WaitOnFlagUntilTimeout>
 80028c4:	2800      	cmp	r0, #0
 80028c6:	f040 80e7 	bne.w	8002a98 <HAL_SPI_TransmitReceive+0x360>
          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 80028ca:	6823      	ldr	r3, [r4, #0]
 80028cc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80028ce:	8812      	ldrh	r2, [r2, #0]
 80028d0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr+=2;
 80028d2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80028d4:	3302      	adds	r3, #2
 80028d6:	6323      	str	r3, [r4, #48]	; 0x30
          hspi->TxXferCount--;
 80028d8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80028da:	3b01      	subs	r3, #1
 80028dc:	b29b      	uxth	r3, r3
 80028de:	86e3      	strh	r3, [r4, #54]	; 0x36
          if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d1d4      	bne.n	800288e <HAL_SPI_TransmitReceive+0x156>
 80028e4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80028e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028ea:	d1d0      	bne.n	800288e <HAL_SPI_TransmitReceive+0x156>
            hspi->Instance->CR1 |= SPI_CR1_CRCNEXT;
 80028ec:	6822      	ldr	r2, [r4, #0]
 80028ee:	6813      	ldr	r3, [r2, #0]
 80028f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80028f4:	6013      	str	r3, [r2, #0]
 80028f6:	e7ca      	b.n	800288e <HAL_SPI_TransmitReceive+0x156>
        if(hspi->Init.Mode == SPI_MODE_SLAVE)
 80028f8:	6863      	ldr	r3, [r4, #4]
 80028fa:	bb3b      	cbnz	r3, 800294c <HAL_SPI_TransmitReceive+0x214>
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 80028fc:	4633      	mov	r3, r6
 80028fe:	2200      	movs	r2, #0
 8002900:	2101      	movs	r1, #1
 8002902:	4620      	mov	r0, r4
 8002904:	f7ff fdf6 	bl	80024f4 <SPI_WaitOnFlagUntilTimeout>
 8002908:	2800      	cmp	r0, #0
 800290a:	f040 80c9 	bne.w	8002aa0 <HAL_SPI_TransmitReceive+0x368>
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800290e:	6823      	ldr	r3, [r4, #0]
 8002910:	68da      	ldr	r2, [r3, #12]
 8002912:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002914:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr+=2;
 8002916:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002918:	3302      	adds	r3, #2
 800291a:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->RxXferCount--;
 800291c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800291e:	3b01      	subs	r3, #1
 8002920:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8002922:	e013      	b.n	800294c <HAL_SPI_TransmitReceive+0x214>
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002924:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002926:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800292a:	d039      	beq.n	80029a0 <HAL_SPI_TransmitReceive+0x268>
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 800292c:	4633      	mov	r3, r6
 800292e:	2200      	movs	r2, #0
 8002930:	2101      	movs	r1, #1
 8002932:	4620      	mov	r0, r4
 8002934:	f7ff fdde 	bl	80024f4 <SPI_WaitOnFlagUntilTimeout>
 8002938:	2800      	cmp	r0, #0
 800293a:	f040 80b3 	bne.w	8002aa4 <HAL_SPI_TransmitReceive+0x36c>
        (*hspi->pRxBuffPtr) = hspi->Instance->DR;
 800293e:	6823      	ldr	r3, [r4, #0]
 8002940:	68da      	ldr	r2, [r3, #12]
 8002942:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002944:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 8002946:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002948:	3b01      	subs	r3, #1
 800294a:	87e3      	strh	r3, [r4, #62]	; 0x3e
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800294c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800294e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002952:	d071      	beq.n	8002a38 <HAL_SPI_TransmitReceive+0x300>
    if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_BSY, SET, Timeout) != HAL_OK)
 8002954:	4633      	mov	r3, r6
 8002956:	2201      	movs	r2, #1
 8002958:	2180      	movs	r1, #128	; 0x80
 800295a:	4620      	mov	r0, r4
 800295c:	f7ff fdca 	bl	80024f4 <SPI_WaitOnFlagUntilTimeout>
 8002960:	2800      	cmp	r0, #0
 8002962:	d17e      	bne.n	8002a62 <HAL_SPI_TransmitReceive+0x32a>
    hspi->State = HAL_SPI_STATE_READY;
 8002964:	2301      	movs	r3, #1
 8002966:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    tmp = __HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR);
 800296a:	6823      	ldr	r3, [r4, #0]
 800296c:	6899      	ldr	r1, [r3, #8]
    if((hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) && (tmp != RESET))
 800296e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002970:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002974:	d17b      	bne.n	8002a6e <HAL_SPI_TransmitReceive+0x336>
 8002976:	f011 0f10 	tst.w	r1, #16
 800297a:	d078      	beq.n	8002a6e <HAL_SPI_TransmitReceive+0x336>
      hspi->ErrorCode |= HAL_SPI_ERROR_CRC;
 800297c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800297e:	f042 0202 	orr.w	r2, r2, #2
 8002982:	6562      	str	r2, [r4, #84]	; 0x54
        SPI_RESET_CRC(hspi);
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800298a:	601a      	str	r2, [r3, #0]
 800298c:	6822      	ldr	r2, [r4, #0]
 800298e:	6813      	ldr	r3, [r2, #0]
 8002990:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002994:	6013      	str	r3, [r2, #0]
      __HAL_UNLOCK(hspi);
 8002996:	2300      	movs	r3, #0
 8002998:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      return HAL_ERROR; 
 800299c:	2001      	movs	r0, #1
 800299e:	e06b      	b.n	8002a78 <HAL_SPI_TransmitReceive+0x340>
          hspi->Instance->CR1 |= SPI_CR1_CRCNEXT;
 80029a0:	6822      	ldr	r2, [r4, #0]
 80029a2:	6813      	ldr	r3, [r2, #0]
 80029a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80029a8:	6013      	str	r3, [r2, #0]
 80029aa:	e7bf      	b.n	800292c <HAL_SPI_TransmitReceive+0x1f4>
            if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 80029ac:	4633      	mov	r3, r6
 80029ae:	462a      	mov	r2, r5
 80029b0:	4641      	mov	r1, r8
 80029b2:	4620      	mov	r0, r4
 80029b4:	f7ff fd9e 	bl	80024f4 <SPI_WaitOnFlagUntilTimeout>
 80029b8:	2800      	cmp	r0, #0
 80029ba:	d177      	bne.n	8002aac <HAL_SPI_TransmitReceive+0x374>
            (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 80029bc:	6823      	ldr	r3, [r4, #0]
 80029be:	68da      	ldr	r2, [r3, #12]
 80029c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80029c2:	1c59      	adds	r1, r3, #1
 80029c4:	63a1      	str	r1, [r4, #56]	; 0x38
 80029c6:	701a      	strb	r2, [r3, #0]
            hspi->RxXferCount--;
 80029c8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80029ca:	3b01      	subs	r3, #1
 80029cc:	87e3      	strh	r3, [r4, #62]	; 0x3e
        while(hspi->TxXferCount > 0)
 80029ce:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80029d0:	b1eb      	cbz	r3, 8002a0e <HAL_SPI_TransmitReceive+0x2d6>
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80029d2:	4633      	mov	r3, r6
 80029d4:	462a      	mov	r2, r5
 80029d6:	4639      	mov	r1, r7
 80029d8:	4620      	mov	r0, r4
 80029da:	f7ff fd8b 	bl	80024f4 <SPI_WaitOnFlagUntilTimeout>
 80029de:	2800      	cmp	r0, #0
 80029e0:	d162      	bne.n	8002aa8 <HAL_SPI_TransmitReceive+0x370>
          hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 80029e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80029e4:	1c5a      	adds	r2, r3, #1
 80029e6:	6322      	str	r2, [r4, #48]	; 0x30
 80029e8:	6822      	ldr	r2, [r4, #0]
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	60d3      	str	r3, [r2, #12]
          hspi->TxXferCount--;
 80029ee:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80029f0:	3b01      	subs	r3, #1
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	86e3      	strh	r3, [r4, #54]	; 0x36
          if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d1d8      	bne.n	80029ac <HAL_SPI_TransmitReceive+0x274>
 80029fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80029fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a00:	d1d4      	bne.n	80029ac <HAL_SPI_TransmitReceive+0x274>
            hspi->Instance->CR1 |= SPI_CR1_CRCNEXT;
 8002a02:	6822      	ldr	r2, [r4, #0]
 8002a04:	6813      	ldr	r3, [r2, #0]
 8002a06:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a0a:	6013      	str	r3, [r2, #0]
 8002a0c:	e7ce      	b.n	80029ac <HAL_SPI_TransmitReceive+0x274>
        if(hspi->Init.Mode == SPI_MODE_SLAVE)
 8002a0e:	6863      	ldr	r3, [r4, #4]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d19b      	bne.n	800294c <HAL_SPI_TransmitReceive+0x214>
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8002a14:	4633      	mov	r3, r6
 8002a16:	2200      	movs	r2, #0
 8002a18:	2101      	movs	r1, #1
 8002a1a:	4620      	mov	r0, r4
 8002a1c:	f7ff fd6a 	bl	80024f4 <SPI_WaitOnFlagUntilTimeout>
 8002a20:	2800      	cmp	r0, #0
 8002a22:	d145      	bne.n	8002ab0 <HAL_SPI_TransmitReceive+0x378>
          (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 8002a24:	6823      	ldr	r3, [r4, #0]
 8002a26:	68da      	ldr	r2, [r3, #12]
 8002a28:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002a2a:	1c59      	adds	r1, r3, #1
 8002a2c:	63a1      	str	r1, [r4, #56]	; 0x38
 8002a2e:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 8002a30:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002a32:	3b01      	subs	r3, #1
 8002a34:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8002a36:	e789      	b.n	800294c <HAL_SPI_TransmitReceive+0x214>
      if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8002a38:	4633      	mov	r3, r6
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	2101      	movs	r1, #1
 8002a3e:	4620      	mov	r0, r4
 8002a40:	f7ff fd58 	bl	80024f4 <SPI_WaitOnFlagUntilTimeout>
 8002a44:	b938      	cbnz	r0, 8002a56 <HAL_SPI_TransmitReceive+0x31e>
      tmpreg = hspi->Instance->DR;
 8002a46:	6823      	ldr	r3, [r4, #0]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	f8ad 3006 	strh.w	r3, [sp, #6]
      UNUSED(tmpreg);
 8002a50:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8002a54:	e77e      	b.n	8002954 <HAL_SPI_TransmitReceive+0x21c>
        hspi->ErrorCode |= HAL_SPI_ERROR_CRC;
 8002a56:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002a58:	f043 0302 	orr.w	r3, r3, #2
 8002a5c:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8002a5e:	2003      	movs	r0, #3
 8002a60:	e00a      	b.n	8002a78 <HAL_SPI_TransmitReceive+0x340>
      hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
 8002a62:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002a64:	f043 0320 	orr.w	r3, r3, #32
 8002a68:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8002a6a:	2003      	movs	r0, #3
 8002a6c:	e004      	b.n	8002a78 <HAL_SPI_TransmitReceive+0x340>
    __HAL_UNLOCK(hspi);
 8002a6e:	2300      	movs	r3, #0
 8002a70:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    return HAL_OK;
 8002a74:	e000      	b.n	8002a78 <HAL_SPI_TransmitReceive+0x340>
    return HAL_BUSY;
 8002a76:	2002      	movs	r0, #2
}
 8002a78:	b002      	add	sp, #8
 8002a7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8002a7e:	2001      	movs	r0, #1
 8002a80:	e7fa      	b.n	8002a78 <HAL_SPI_TransmitReceive+0x340>
 8002a82:	bf00      	nop
 8002a84:	080045ac 	.word	0x080045ac
 8002a88:	2001      	movs	r0, #1
 8002a8a:	e7f5      	b.n	8002a78 <HAL_SPI_TransmitReceive+0x340>
 8002a8c:	2001      	movs	r0, #1
 8002a8e:	e7f3      	b.n	8002a78 <HAL_SPI_TransmitReceive+0x340>
    __HAL_LOCK(hspi);
 8002a90:	2002      	movs	r0, #2
 8002a92:	e7f1      	b.n	8002a78 <HAL_SPI_TransmitReceive+0x340>
          return HAL_TIMEOUT;
 8002a94:	2003      	movs	r0, #3
 8002a96:	e7ef      	b.n	8002a78 <HAL_SPI_TransmitReceive+0x340>
            return HAL_TIMEOUT;
 8002a98:	2003      	movs	r0, #3
 8002a9a:	e7ed      	b.n	8002a78 <HAL_SPI_TransmitReceive+0x340>
            return HAL_TIMEOUT;
 8002a9c:	2003      	movs	r0, #3
 8002a9e:	e7eb      	b.n	8002a78 <HAL_SPI_TransmitReceive+0x340>
            return HAL_TIMEOUT;
 8002aa0:	2003      	movs	r0, #3
 8002aa2:	e7e9      	b.n	8002a78 <HAL_SPI_TransmitReceive+0x340>
          return HAL_TIMEOUT;
 8002aa4:	2003      	movs	r0, #3
 8002aa6:	e7e7      	b.n	8002a78 <HAL_SPI_TransmitReceive+0x340>
            return HAL_TIMEOUT;
 8002aa8:	2003      	movs	r0, #3
 8002aaa:	e7e5      	b.n	8002a78 <HAL_SPI_TransmitReceive+0x340>
              return HAL_TIMEOUT;
 8002aac:	2003      	movs	r0, #3
 8002aae:	e7e3      	b.n	8002a78 <HAL_SPI_TransmitReceive+0x340>
            return HAL_TIMEOUT;
 8002ab0:	2003      	movs	r0, #3
 8002ab2:	e7e1      	b.n	8002a78 <HAL_SPI_TransmitReceive+0x340>

08002ab4 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ab6:	4604      	mov	r4, r0
  uint32_t tmpreg = 0x00;
  
  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));  
 8002ab8:	6842      	ldr	r2, [r0, #4]
 8002aba:	4b94      	ldr	r3, [pc, #592]	; (8002d0c <UART_SetConfig+0x258>)
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d878      	bhi.n	8002bb2 <UART_SetConfig+0xfe>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8002ac0:	68e3      	ldr	r3, [r4, #12]
 8002ac2:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 8002ac6:	d004      	beq.n	8002ad2 <UART_SetConfig+0x1e>
 8002ac8:	f240 7137 	movw	r1, #1847	; 0x737
 8002acc:	4890      	ldr	r0, [pc, #576]	; (8002d10 <UART_SetConfig+0x25c>)
 8002ace:	f001 f9f1 	bl	8003eb4 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8002ad2:	6923      	ldr	r3, [r4, #16]
 8002ad4:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 8002ad8:	d002      	beq.n	8002ae0 <UART_SetConfig+0x2c>
 8002ada:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002ade:	d16e      	bne.n	8002bbe <UART_SetConfig+0x10a>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8002ae0:	6963      	ldr	r3, [r4, #20]
 8002ae2:	f64f 72f3 	movw	r2, #65523	; 0xfff3
 8002ae6:	4213      	tst	r3, r2
 8002ae8:	d100      	bne.n	8002aec <UART_SetConfig+0x38>
 8002aea:	b923      	cbnz	r3, 8002af6 <UART_SetConfig+0x42>
 8002aec:	f240 7139 	movw	r1, #1849	; 0x739
 8002af0:	4887      	ldr	r0, [pc, #540]	; (8002d10 <UART_SetConfig+0x25c>)
 8002af2:	f001 f9df 	bl	8003eb4 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8002af6:	6822      	ldr	r2, [r4, #0]
 8002af8:	6913      	ldr	r3, [r2, #16]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8002afa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8002afe:	68e1      	ldr	r1, [r4, #12]
 8002b00:	430b      	orrs	r3, r1
  
  /* Write to USART CR2 */
  huart->Instance->CR2 = (uint32_t)tmpreg;
 8002b02:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8002b04:	6821      	ldr	r1, [r4, #0]
 8002b06:	68ca      	ldr	r2, [r1, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8002b08:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
 8002b0c:	f022 020c 	bic.w	r2, r2, #12
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b10:	68a3      	ldr	r3, [r4, #8]
 8002b12:	6920      	ldr	r0, [r4, #16]
 8002b14:	4303      	orrs	r3, r0
 8002b16:	6960      	ldr	r0, [r4, #20]
 8002b18:	4303      	orrs	r3, r0
 8002b1a:	69e0      	ldr	r0, [r4, #28]
 8002b1c:	4303      	orrs	r3, r0
 8002b1e:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  huart->Instance->CR1 = (uint32_t)tmpreg;
 8002b20:	60cb      	str	r3, [r1, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8002b22:	6822      	ldr	r2, [r4, #0]
 8002b24:	6953      	ldr	r3, [r2, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8002b26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8002b2a:	69a1      	ldr	r1, [r4, #24]
 8002b2c:	430b      	orrs	r3, r1
  
  /* Write to USART CR3 */
  huart->Instance->CR3 = (uint32_t)tmpreg;
 8002b2e:	6153      	str	r3, [r2, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b30:	69e3      	ldr	r3, [r4, #28]
 8002b32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b36:	d048      	beq.n	8002bca <UART_SetConfig+0x116>
    }
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b38:	6823      	ldr	r3, [r4, #0]
 8002b3a:	4a76      	ldr	r2, [pc, #472]	; (8002d14 <UART_SetConfig+0x260>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	f000 80b2 	beq.w	8002ca6 <UART_SetConfig+0x1f2>
 8002b42:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002b46:	4293      	cmp	r3, r2
 8002b48:	f000 80ad 	beq.w	8002ca6 <UART_SetConfig+0x1f2>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002b4c:	f7ff fca6 	bl	800249c <HAL_RCC_GetPCLK1Freq>
 8002b50:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002b54:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002b58:	6863      	ldr	r3, [r4, #4]
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b60:	4f6d      	ldr	r7, [pc, #436]	; (8002d18 <UART_SetConfig+0x264>)
 8002b62:	fba7 2303 	umull	r2, r3, r7, r3
 8002b66:	095b      	lsrs	r3, r3, #5
 8002b68:	011e      	lsls	r6, r3, #4
 8002b6a:	f7ff fc97 	bl	800249c <HAL_RCC_GetPCLK1Freq>
 8002b6e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002b72:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002b76:	6865      	ldr	r5, [r4, #4]
 8002b78:	00ad      	lsls	r5, r5, #2
 8002b7a:	fbb0 f5f5 	udiv	r5, r0, r5
 8002b7e:	f7ff fc8d 	bl	800249c <HAL_RCC_GetPCLK1Freq>
 8002b82:	6822      	ldr	r2, [r4, #0]
 8002b84:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002b88:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002b8c:	6863      	ldr	r3, [r4, #4]
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b94:	fba7 1303 	umull	r1, r3, r7, r3
 8002b98:	095b      	lsrs	r3, r3, #5
 8002b9a:	2164      	movs	r1, #100	; 0x64
 8002b9c:	fb01 5313 	mls	r3, r1, r3, r5
 8002ba0:	011b      	lsls	r3, r3, #4
 8002ba2:	3332      	adds	r3, #50	; 0x32
 8002ba4:	fba7 1303 	umull	r1, r3, r7, r3
 8002ba8:	f3c3 1343 	ubfx	r3, r3, #5, #4
 8002bac:	4333      	orrs	r3, r6
 8002bae:	6093      	str	r3, [r2, #8]
    }
  }
}
 8002bb0:	e0ab      	b.n	8002d0a <UART_SetConfig+0x256>
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));  
 8002bb2:	f240 7136 	movw	r1, #1846	; 0x736
 8002bb6:	4856      	ldr	r0, [pc, #344]	; (8002d10 <UART_SetConfig+0x25c>)
 8002bb8:	f001 f97c 	bl	8003eb4 <assert_failed>
 8002bbc:	e780      	b.n	8002ac0 <UART_SetConfig+0xc>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8002bbe:	f44f 61e7 	mov.w	r1, #1848	; 0x738
 8002bc2:	4853      	ldr	r0, [pc, #332]	; (8002d10 <UART_SetConfig+0x25c>)
 8002bc4:	f001 f976 	bl	8003eb4 <assert_failed>
 8002bc8:	e78a      	b.n	8002ae0 <UART_SetConfig+0x2c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002bca:	6823      	ldr	r3, [r4, #0]
 8002bcc:	4a51      	ldr	r2, [pc, #324]	; (8002d14 <UART_SetConfig+0x260>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d036      	beq.n	8002c40 <UART_SetConfig+0x18c>
 8002bd2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d032      	beq.n	8002c40 <UART_SetConfig+0x18c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002bda:	f7ff fc5f 	bl	800249c <HAL_RCC_GetPCLK1Freq>
 8002bde:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002be2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002be6:	6863      	ldr	r3, [r4, #4]
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bee:	4f4a      	ldr	r7, [pc, #296]	; (8002d18 <UART_SetConfig+0x264>)
 8002bf0:	fba7 2303 	umull	r2, r3, r7, r3
 8002bf4:	095b      	lsrs	r3, r3, #5
 8002bf6:	011e      	lsls	r6, r3, #4
 8002bf8:	f7ff fc50 	bl	800249c <HAL_RCC_GetPCLK1Freq>
 8002bfc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002c00:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002c04:	6865      	ldr	r5, [r4, #4]
 8002c06:	006d      	lsls	r5, r5, #1
 8002c08:	fbb0 f5f5 	udiv	r5, r0, r5
 8002c0c:	f7ff fc46 	bl	800249c <HAL_RCC_GetPCLK1Freq>
 8002c10:	6822      	ldr	r2, [r4, #0]
 8002c12:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002c16:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002c1a:	6863      	ldr	r3, [r4, #4]
 8002c1c:	005b      	lsls	r3, r3, #1
 8002c1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c22:	fba7 1303 	umull	r1, r3, r7, r3
 8002c26:	095b      	lsrs	r3, r3, #5
 8002c28:	2164      	movs	r1, #100	; 0x64
 8002c2a:	fb01 5313 	mls	r3, r1, r3, r5
 8002c2e:	011b      	lsls	r3, r3, #4
 8002c30:	3332      	adds	r3, #50	; 0x32
 8002c32:	fba7 1303 	umull	r1, r3, r7, r3
 8002c36:	f3c3 1343 	ubfx	r3, r3, #5, #4
 8002c3a:	4333      	orrs	r3, r6
 8002c3c:	6093      	str	r3, [r2, #8]
 8002c3e:	e064      	b.n	8002d0a <UART_SetConfig+0x256>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002c40:	f7ff fc42 	bl	80024c8 <HAL_RCC_GetPCLK2Freq>
 8002c44:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002c48:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002c4c:	6863      	ldr	r3, [r4, #4]
 8002c4e:	005b      	lsls	r3, r3, #1
 8002c50:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c54:	4f30      	ldr	r7, [pc, #192]	; (8002d18 <UART_SetConfig+0x264>)
 8002c56:	fba7 2303 	umull	r2, r3, r7, r3
 8002c5a:	095b      	lsrs	r3, r3, #5
 8002c5c:	011e      	lsls	r6, r3, #4
 8002c5e:	f7ff fc33 	bl	80024c8 <HAL_RCC_GetPCLK2Freq>
 8002c62:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002c66:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002c6a:	6865      	ldr	r5, [r4, #4]
 8002c6c:	006d      	lsls	r5, r5, #1
 8002c6e:	fbb0 f5f5 	udiv	r5, r0, r5
 8002c72:	f7ff fc29 	bl	80024c8 <HAL_RCC_GetPCLK2Freq>
 8002c76:	6822      	ldr	r2, [r4, #0]
 8002c78:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002c7c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002c80:	6863      	ldr	r3, [r4, #4]
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c88:	fba7 1303 	umull	r1, r3, r7, r3
 8002c8c:	095b      	lsrs	r3, r3, #5
 8002c8e:	2164      	movs	r1, #100	; 0x64
 8002c90:	fb01 5313 	mls	r3, r1, r3, r5
 8002c94:	011b      	lsls	r3, r3, #4
 8002c96:	3332      	adds	r3, #50	; 0x32
 8002c98:	fba7 1303 	umull	r1, r3, r7, r3
 8002c9c:	f3c3 1343 	ubfx	r3, r3, #5, #4
 8002ca0:	4333      	orrs	r3, r6
 8002ca2:	6093      	str	r3, [r2, #8]
 8002ca4:	e031      	b.n	8002d0a <UART_SetConfig+0x256>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002ca6:	f7ff fc0f 	bl	80024c8 <HAL_RCC_GetPCLK2Freq>
 8002caa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002cae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002cb2:	6863      	ldr	r3, [r4, #4]
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cba:	4f17      	ldr	r7, [pc, #92]	; (8002d18 <UART_SetConfig+0x264>)
 8002cbc:	fba7 2303 	umull	r2, r3, r7, r3
 8002cc0:	095b      	lsrs	r3, r3, #5
 8002cc2:	011e      	lsls	r6, r3, #4
 8002cc4:	f7ff fc00 	bl	80024c8 <HAL_RCC_GetPCLK2Freq>
 8002cc8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002ccc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002cd0:	6865      	ldr	r5, [r4, #4]
 8002cd2:	00ad      	lsls	r5, r5, #2
 8002cd4:	fbb0 f5f5 	udiv	r5, r0, r5
 8002cd8:	f7ff fbf6 	bl	80024c8 <HAL_RCC_GetPCLK2Freq>
 8002cdc:	6822      	ldr	r2, [r4, #0]
 8002cde:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002ce2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002ce6:	6863      	ldr	r3, [r4, #4]
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cee:	fba7 1303 	umull	r1, r3, r7, r3
 8002cf2:	095b      	lsrs	r3, r3, #5
 8002cf4:	2164      	movs	r1, #100	; 0x64
 8002cf6:	fb01 5313 	mls	r3, r1, r3, r5
 8002cfa:	011b      	lsls	r3, r3, #4
 8002cfc:	3332      	adds	r3, #50	; 0x32
 8002cfe:	fba7 1303 	umull	r1, r3, r7, r3
 8002d02:	f3c3 1343 	ubfx	r3, r3, #5, #4
 8002d06:	4333      	orrs	r3, r6
 8002d08:	6093      	str	r3, [r2, #8]
}
 8002d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d0c:	00a037a0 	.word	0x00a037a0
 8002d10:	08004634 	.word	0x08004634
 8002d14:	40011000 	.word	0x40011000
 8002d18:	51eb851f 	.word	0x51eb851f

08002d1c <UART_WaitOnFlagUntilTimeout>:
{
 8002d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d20:	4606      	mov	r6, r0
 8002d22:	460d      	mov	r5, r1
 8002d24:	4690      	mov	r8, r2
 8002d26:	461c      	mov	r4, r3
  tickstart = HAL_GetTick();
 8002d28:	f7fe fd60 	bl	80017ec <HAL_GetTick>
 8002d2c:	4607      	mov	r7, r0
  if(Status == RESET)
 8002d2e:	f1b8 0f00 	cmp.w	r8, #0
 8002d32:	d029      	beq.n	8002d88 <UART_WaitOnFlagUntilTimeout+0x6c>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 8002d34:	6832      	ldr	r2, [r6, #0]
 8002d36:	6813      	ldr	r3, [r2, #0]
 8002d38:	ea35 0303 	bics.w	r3, r5, r3
 8002d3c:	d151      	bne.n	8002de2 <UART_WaitOnFlagUntilTimeout+0xc6>
      if(Timeout != HAL_MAX_DELAY)
 8002d3e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002d42:	d0f8      	beq.n	8002d36 <UART_WaitOnFlagUntilTimeout+0x1a>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8002d44:	b124      	cbz	r4, 8002d50 <UART_WaitOnFlagUntilTimeout+0x34>
 8002d46:	f7fe fd51 	bl	80017ec <HAL_GetTick>
 8002d4a:	1bc0      	subs	r0, r0, r7
 8002d4c:	42a0      	cmp	r0, r4
 8002d4e:	d9f1      	bls.n	8002d34 <UART_WaitOnFlagUntilTimeout+0x18>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002d50:	6832      	ldr	r2, [r6, #0]
 8002d52:	68d3      	ldr	r3, [r2, #12]
 8002d54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d58:	60d3      	str	r3, [r2, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002d5a:	6832      	ldr	r2, [r6, #0]
 8002d5c:	68d3      	ldr	r3, [r2, #12]
 8002d5e:	f023 0320 	bic.w	r3, r3, #32
 8002d62:	60d3      	str	r3, [r2, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002d64:	6832      	ldr	r2, [r6, #0]
 8002d66:	68d3      	ldr	r3, [r2, #12]
 8002d68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d6c:	60d3      	str	r3, [r2, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002d6e:	6832      	ldr	r2, [r6, #0]
 8002d70:	6953      	ldr	r3, [r2, #20]
 8002d72:	f023 0301 	bic.w	r3, r3, #1
 8002d76:	6153      	str	r3, [r2, #20]
          huart->State= HAL_UART_STATE_READY;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	f886 3039 	strb.w	r3, [r6, #57]	; 0x39
          __HAL_UNLOCK(huart);
 8002d7e:	2300      	movs	r3, #0
 8002d80:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38
          return HAL_TIMEOUT;
 8002d84:	2003      	movs	r0, #3
 8002d86:	e02a      	b.n	8002dde <UART_WaitOnFlagUntilTimeout+0xc2>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8002d88:	6831      	ldr	r1, [r6, #0]
 8002d8a:	680b      	ldr	r3, [r1, #0]
 8002d8c:	ea35 0303 	bics.w	r3, r5, r3
 8002d90:	d024      	beq.n	8002ddc <UART_WaitOnFlagUntilTimeout+0xc0>
      if(Timeout != HAL_MAX_DELAY)
 8002d92:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002d96:	d0f8      	beq.n	8002d8a <UART_WaitOnFlagUntilTimeout+0x6e>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8002d98:	b124      	cbz	r4, 8002da4 <UART_WaitOnFlagUntilTimeout+0x88>
 8002d9a:	f7fe fd27 	bl	80017ec <HAL_GetTick>
 8002d9e:	1bc0      	subs	r0, r0, r7
 8002da0:	42a0      	cmp	r0, r4
 8002da2:	d9f1      	bls.n	8002d88 <UART_WaitOnFlagUntilTimeout+0x6c>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002da4:	6832      	ldr	r2, [r6, #0]
 8002da6:	68d3      	ldr	r3, [r2, #12]
 8002da8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dac:	60d3      	str	r3, [r2, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002dae:	6832      	ldr	r2, [r6, #0]
 8002db0:	68d3      	ldr	r3, [r2, #12]
 8002db2:	f023 0320 	bic.w	r3, r3, #32
 8002db6:	60d3      	str	r3, [r2, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002db8:	6832      	ldr	r2, [r6, #0]
 8002dba:	68d3      	ldr	r3, [r2, #12]
 8002dbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002dc0:	60d3      	str	r3, [r2, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002dc2:	6832      	ldr	r2, [r6, #0]
 8002dc4:	6953      	ldr	r3, [r2, #20]
 8002dc6:	f023 0301 	bic.w	r3, r3, #1
 8002dca:	6153      	str	r3, [r2, #20]
          huart->State= HAL_UART_STATE_READY;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	f886 3039 	strb.w	r3, [r6, #57]	; 0x39
          __HAL_UNLOCK(huart);
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38
          return HAL_TIMEOUT;
 8002dd8:	2003      	movs	r0, #3
 8002dda:	e000      	b.n	8002dde <UART_WaitOnFlagUntilTimeout+0xc2>
  return HAL_OK;
 8002ddc:	4640      	mov	r0, r8
}
 8002dde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 8002de2:	2000      	movs	r0, #0
 8002de4:	e7fb      	b.n	8002dde <UART_WaitOnFlagUntilTimeout+0xc2>
	...

08002de8 <HAL_UART_Init>:
  if(huart == NULL)
 8002de8:	2800      	cmp	r0, #0
 8002dea:	d072      	beq.n	8002ed2 <HAL_UART_Init+0xea>
{
 8002dec:	b510      	push	{r4, lr}
 8002dee:	4604      	mov	r4, r0
  if(huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8002df0:	6983      	ldr	r3, [r0, #24]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d055      	beq.n	8002ea2 <HAL_UART_Init+0xba>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8002df6:	6802      	ldr	r2, [r0, #0]
 8002df8:	4937      	ldr	r1, [pc, #220]	; (8002ed8 <HAL_UART_Init+0xf0>)
 8002dfa:	428a      	cmp	r2, r1
 8002dfc:	d044      	beq.n	8002e88 <HAL_UART_Init+0xa0>
 8002dfe:	f5a1 414c 	sub.w	r1, r1, #52224	; 0xcc00
 8002e02:	428a      	cmp	r2, r1
 8002e04:	d040      	beq.n	8002e88 <HAL_UART_Init+0xa0>
 8002e06:	f501 4150 	add.w	r1, r1, #53248	; 0xd000
 8002e0a:	428a      	cmp	r2, r1
 8002e0c:	d03c      	beq.n	8002e88 <HAL_UART_Init+0xa0>
 8002e0e:	21fc      	movs	r1, #252	; 0xfc
 8002e10:	4832      	ldr	r0, [pc, #200]	; (8002edc <HAL_UART_Init+0xf4>)
 8002e12:	f001 f84f 	bl	8003eb4 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8002e16:	69a3      	ldr	r3, [r4, #24]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d135      	bne.n	8002e88 <HAL_UART_Init+0xa0>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8002e1c:	68a3      	ldr	r3, [r4, #8]
 8002e1e:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 8002e22:	d004      	beq.n	8002e2e <HAL_UART_Init+0x46>
 8002e24:	f240 1103 	movw	r1, #259	; 0x103
 8002e28:	482c      	ldr	r0, [pc, #176]	; (8002edc <HAL_UART_Init+0xf4>)
 8002e2a:	f001 f843 	bl	8003eb4 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8002e2e:	69e3      	ldr	r3, [r4, #28]
 8002e30:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 8002e34:	d004      	beq.n	8002e40 <HAL_UART_Init+0x58>
 8002e36:	f44f 7182 	mov.w	r1, #260	; 0x104
 8002e3a:	4828      	ldr	r0, [pc, #160]	; (8002edc <HAL_UART_Init+0xf4>)
 8002e3c:	f001 f83a 	bl	8003eb4 <assert_failed>
  if(huart->State == HAL_UART_STATE_RESET)
 8002e40:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d03e      	beq.n	8002ec6 <HAL_UART_Init+0xde>
  huart->State = HAL_UART_STATE_BUSY;
 8002e48:	2302      	movs	r3, #2
 8002e4a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002e4e:	6822      	ldr	r2, [r4, #0]
 8002e50:	68d3      	ldr	r3, [r2, #12]
 8002e52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e56:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002e58:	4620      	mov	r0, r4
 8002e5a:	f7ff fe2b 	bl	8002ab4 <UART_SetConfig>
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8002e5e:	6822      	ldr	r2, [r4, #0]
 8002e60:	6913      	ldr	r3, [r2, #16]
 8002e62:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002e66:	6113      	str	r3, [r2, #16]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8002e68:	6822      	ldr	r2, [r4, #0]
 8002e6a:	6953      	ldr	r3, [r2, #20]
 8002e6c:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002e70:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8002e72:	6822      	ldr	r2, [r4, #0]
 8002e74:	68d3      	ldr	r3, [r2, #12]
 8002e76:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002e7a:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e7c:	2000      	movs	r0, #0
 8002e7e:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->State= HAL_UART_STATE_READY;
 8002e80:	2301      	movs	r3, #1
 8002e82:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 8002e86:	bd10      	pop	{r4, pc}
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8002e88:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002e8c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8002e90:	d0c4      	beq.n	8002e1c <HAL_UART_Init+0x34>
 8002e92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e96:	d0c1      	beq.n	8002e1c <HAL_UART_Init+0x34>
 8002e98:	21fd      	movs	r1, #253	; 0xfd
 8002e9a:	4810      	ldr	r0, [pc, #64]	; (8002edc <HAL_UART_Init+0xf4>)
 8002e9c:	f001 f80a 	bl	8003eb4 <assert_failed>
 8002ea0:	e7bc      	b.n	8002e1c <HAL_UART_Init+0x34>
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8002ea2:	6803      	ldr	r3, [r0, #0]
 8002ea4:	4a0c      	ldr	r2, [pc, #48]	; (8002ed8 <HAL_UART_Init+0xf0>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d0b8      	beq.n	8002e1c <HAL_UART_Init+0x34>
 8002eaa:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d0b4      	beq.n	8002e1c <HAL_UART_Init+0x34>
 8002eb2:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d0b0      	beq.n	8002e1c <HAL_UART_Init+0x34>
 8002eba:	f240 1101 	movw	r1, #257	; 0x101
 8002ebe:	4807      	ldr	r0, [pc, #28]	; (8002edc <HAL_UART_Init+0xf4>)
 8002ec0:	f000 fff8 	bl	8003eb4 <assert_failed>
 8002ec4:	e7aa      	b.n	8002e1c <HAL_UART_Init+0x34>
    huart->Lock = HAL_UNLOCKED;
 8002ec6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002eca:	4620      	mov	r0, r4
 8002ecc:	f001 f86c 	bl	8003fa8 <HAL_UART_MspInit>
 8002ed0:	e7ba      	b.n	8002e48 <HAL_UART_Init+0x60>
    return HAL_ERROR;
 8002ed2:	2001      	movs	r0, #1
}
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	40011000 	.word	0x40011000
 8002edc:	08004634 	.word	0x08004634

08002ee0 <HAL_UART_Transmit>:
{
 8002ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ee4:	4604      	mov	r4, r0
 8002ee6:	4688      	mov	r8, r1
 8002ee8:	461d      	mov	r5, r3
  tmp1 = huart->State;
 8002eea:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002eee:	b2db      	uxtb	r3, r3
  if((tmp1 == HAL_UART_STATE_READY) || (tmp1 == HAL_UART_STATE_BUSY_RX))
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d001      	beq.n	8002ef8 <HAL_UART_Transmit+0x18>
 8002ef4:	2b22      	cmp	r3, #34	; 0x22
 8002ef6:	d15b      	bne.n	8002fb0 <HAL_UART_Transmit+0xd0>
    if((pData == NULL ) || (Size == 0)) 
 8002ef8:	f1b8 0f00 	cmp.w	r8, #0
 8002efc:	d05b      	beq.n	8002fb6 <HAL_UART_Transmit+0xd6>
 8002efe:	2a00      	cmp	r2, #0
 8002f00:	d05b      	beq.n	8002fba <HAL_UART_Transmit+0xda>
    __HAL_LOCK(huart);
 8002f02:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d059      	beq.n	8002fbe <HAL_UART_Transmit+0xde>
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f10:	2300      	movs	r3, #0
 8002f12:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 8002f14:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b22      	cmp	r3, #34	; 0x22
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8002f1c:	bf0c      	ite	eq
 8002f1e:	2332      	moveq	r3, #50	; 0x32
      huart->State = HAL_UART_STATE_BUSY_TX;
 8002f20:	2312      	movne	r3, #18
 8002f22:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    huart->TxXferSize = Size;
 8002f26:	84a2      	strh	r2, [r4, #36]	; 0x24
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8002f28:	2700      	movs	r7, #0
 8002f2a:	2680      	movs	r6, #128	; 0x80
 8002f2c:	e01d      	b.n	8002f6a <HAL_UART_Transmit+0x8a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8002f2e:	462b      	mov	r3, r5
 8002f30:	463a      	mov	r2, r7
 8002f32:	4631      	mov	r1, r6
 8002f34:	4620      	mov	r0, r4
 8002f36:	f7ff fef1 	bl	8002d1c <UART_WaitOnFlagUntilTimeout>
 8002f3a:	2800      	cmp	r0, #0
 8002f3c:	d141      	bne.n	8002fc2 <HAL_UART_Transmit+0xe2>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002f3e:	6822      	ldr	r2, [r4, #0]
 8002f40:	f8b8 3000 	ldrh.w	r3, [r8]
 8002f44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f48:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8002f4a:	6923      	ldr	r3, [r4, #16]
 8002f4c:	b913      	cbnz	r3, 8002f54 <HAL_UART_Transmit+0x74>
          pData +=2;
 8002f4e:	f108 0802 	add.w	r8, r8, #2
 8002f52:	e008      	b.n	8002f66 <HAL_UART_Transmit+0x86>
          pData +=1;
 8002f54:	f108 0801 	add.w	r8, r8, #1
 8002f58:	e005      	b.n	8002f66 <HAL_UART_Transmit+0x86>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002f5a:	4641      	mov	r1, r8
 8002f5c:	6823      	ldr	r3, [r4, #0]
 8002f5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002f62:	605a      	str	r2, [r3, #4]
 8002f64:	4688      	mov	r8, r1
    while(huart->TxXferCount > 0)
 8002f66:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8002f68:	b17a      	cbz	r2, 8002f8a <HAL_UART_Transmit+0xaa>
      huart->TxXferCount--;
 8002f6a:	3a01      	subs	r2, #1
 8002f6c:	84e2      	strh	r2, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002f6e:	68a2      	ldr	r2, [r4, #8]
 8002f70:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002f74:	d0db      	beq.n	8002f2e <HAL_UART_Transmit+0x4e>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8002f76:	462b      	mov	r3, r5
 8002f78:	463a      	mov	r2, r7
 8002f7a:	4631      	mov	r1, r6
 8002f7c:	4620      	mov	r0, r4
 8002f7e:	f7ff fecd 	bl	8002d1c <UART_WaitOnFlagUntilTimeout>
 8002f82:	2800      	cmp	r0, #0
 8002f84:	d0e9      	beq.n	8002f5a <HAL_UART_Transmit+0x7a>
          return HAL_TIMEOUT;
 8002f86:	2003      	movs	r0, #3
 8002f88:	e013      	b.n	8002fb2 <HAL_UART_Transmit+0xd2>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 8002f8a:	462b      	mov	r3, r5
 8002f8c:	2140      	movs	r1, #64	; 0x40
 8002f8e:	4620      	mov	r0, r4
 8002f90:	f7ff fec4 	bl	8002d1c <UART_WaitOnFlagUntilTimeout>
 8002f94:	b9b8      	cbnz	r0, 8002fc6 <HAL_UART_Transmit+0xe6>
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8002f96:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	2b32      	cmp	r3, #50	; 0x32
      huart->State = HAL_UART_STATE_BUSY_RX;
 8002f9e:	bf0c      	ite	eq
 8002fa0:	2322      	moveq	r3, #34	; 0x22
      huart->State = HAL_UART_STATE_READY;
 8002fa2:	2301      	movne	r3, #1
 8002fa4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8002fa8:	2300      	movs	r3, #0
 8002faa:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    return HAL_OK;
 8002fae:	e000      	b.n	8002fb2 <HAL_UART_Transmit+0xd2>
    return HAL_BUSY;   
 8002fb0:	2002      	movs	r0, #2
}
 8002fb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8002fb6:	2001      	movs	r0, #1
 8002fb8:	e7fb      	b.n	8002fb2 <HAL_UART_Transmit+0xd2>
 8002fba:	2001      	movs	r0, #1
 8002fbc:	e7f9      	b.n	8002fb2 <HAL_UART_Transmit+0xd2>
    __HAL_LOCK(huart);
 8002fbe:	2002      	movs	r0, #2
 8002fc0:	e7f7      	b.n	8002fb2 <HAL_UART_Transmit+0xd2>
          return HAL_TIMEOUT;
 8002fc2:	2003      	movs	r0, #3
 8002fc4:	e7f5      	b.n	8002fb2 <HAL_UART_Transmit+0xd2>
      return HAL_TIMEOUT;
 8002fc6:	2003      	movs	r0, #3
 8002fc8:	e7f3      	b.n	8002fb2 <HAL_UART_Transmit+0xd2>

08002fca <HAL_UART_Receive_IT>:
  tmp = huart->State;  
 8002fca:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002fce:	b2db      	uxtb	r3, r3
  if((tmp == HAL_UART_STATE_READY) || (tmp == HAL_UART_STATE_BUSY_TX))
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d001      	beq.n	8002fd8 <HAL_UART_Receive_IT+0xe>
 8002fd4:	2b12      	cmp	r3, #18
 8002fd6:	d12c      	bne.n	8003032 <HAL_UART_Receive_IT+0x68>
    if((pData == NULL ) || (Size == 0)) 
 8002fd8:	2900      	cmp	r1, #0
 8002fda:	d02c      	beq.n	8003036 <HAL_UART_Receive_IT+0x6c>
 8002fdc:	2a00      	cmp	r2, #0
 8002fde:	d02c      	beq.n	800303a <HAL_UART_Receive_IT+0x70>
    __HAL_LOCK(huart);
 8002fe0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d02a      	beq.n	800303e <HAL_UART_Receive_IT+0x74>
 8002fe8:	2301      	movs	r3, #1
 8002fea:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->pRxBuffPtr = pData;
 8002fee:	6281      	str	r1, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 8002ff0:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002ff2:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	63c3      	str	r3, [r0, #60]	; 0x3c
    if(huart->State == HAL_UART_STATE_BUSY_TX) 
 8002ff8:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b12      	cmp	r3, #18
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8003000:	bf0c      	ite	eq
 8003002:	2332      	moveq	r3, #50	; 0x32
      huart->State = HAL_UART_STATE_BUSY_RX;
 8003004:	2322      	movne	r3, #34	; 0x22
 8003006:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800300a:	6802      	ldr	r2, [r0, #0]
 800300c:	68d3      	ldr	r3, [r2, #12]
 800300e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003012:	60d3      	str	r3, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003014:	6802      	ldr	r2, [r0, #0]
 8003016:	6953      	ldr	r3, [r2, #20]
 8003018:	f043 0301 	orr.w	r3, r3, #1
 800301c:	6153      	str	r3, [r2, #20]
    __HAL_UNLOCK(huart);
 800301e:	2300      	movs	r3, #0
 8003020:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003024:	6801      	ldr	r1, [r0, #0]
 8003026:	68ca      	ldr	r2, [r1, #12]
 8003028:	f042 0220 	orr.w	r2, r2, #32
 800302c:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 800302e:	4618      	mov	r0, r3
 8003030:	4770      	bx	lr
    return HAL_BUSY; 
 8003032:	2002      	movs	r0, #2
 8003034:	4770      	bx	lr
      return HAL_ERROR;
 8003036:	2001      	movs	r0, #1
 8003038:	4770      	bx	lr
 800303a:	2001      	movs	r0, #1
 800303c:	4770      	bx	lr
    __HAL_LOCK(huart);
 800303e:	2002      	movs	r0, #2
}
 8003040:	4770      	bx	lr

08003042 <HAL_UART_TxCpltCallback>:
}
 8003042:	4770      	bx	lr

08003044 <HAL_UART_RxCpltCallback>:
}
 8003044:	4770      	bx	lr

08003046 <HAL_UART_ErrorCallback>:
}
 8003046:	4770      	bx	lr

08003048 <HAL_UART_IRQHandler>:
{
 8003048:	b510      	push	{r4, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	4604      	mov	r4, r0
  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
 800304e:	6803      	ldr	r3, [r0, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE);  
 8003052:	68d9      	ldr	r1, [r3, #12]
  if((tmp1 != RESET) && (tmp2 != RESET))
 8003054:	f012 0f01 	tst.w	r2, #1
 8003058:	d00b      	beq.n	8003072 <HAL_UART_IRQHandler+0x2a>
 800305a:	f411 7f80 	tst.w	r1, #256	; 0x100
 800305e:	d008      	beq.n	8003072 <HAL_UART_IRQHandler+0x2a>
    __HAL_UART_CLEAR_PEFLAG(huart);
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	9200      	str	r2, [sp, #0]
 8003064:	685a      	ldr	r2, [r3, #4]
 8003066:	9200      	str	r2, [sp, #0]
 8003068:	9a00      	ldr	r2, [sp, #0]
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 800306a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800306c:	f042 0201 	orr.w	r2, r2, #1
 8003070:	63c2      	str	r2, [r0, #60]	; 0x3c
  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_FE);
 8003072:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 8003074:	6959      	ldr	r1, [r3, #20]
  if((tmp1 != RESET) && (tmp2 != RESET))
 8003076:	f012 0f02 	tst.w	r2, #2
 800307a:	d00b      	beq.n	8003094 <HAL_UART_IRQHandler+0x4c>
 800307c:	f011 0f01 	tst.w	r1, #1
 8003080:	d008      	beq.n	8003094 <HAL_UART_IRQHandler+0x4c>
    __HAL_UART_CLEAR_FEFLAG(huart);
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	9201      	str	r2, [sp, #4]
 8003086:	685a      	ldr	r2, [r3, #4]
 8003088:	9201      	str	r2, [sp, #4]
 800308a:	9a01      	ldr	r2, [sp, #4]
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 800308c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800308e:	f042 0204 	orr.w	r2, r2, #4
 8003092:	63e2      	str	r2, [r4, #60]	; 0x3c
  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_NE);
 8003094:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 8003096:	6959      	ldr	r1, [r3, #20]
  if((tmp1 != RESET) && (tmp2 != RESET))
 8003098:	f012 0f04 	tst.w	r2, #4
 800309c:	d00b      	beq.n	80030b6 <HAL_UART_IRQHandler+0x6e>
 800309e:	f011 0f01 	tst.w	r1, #1
 80030a2:	d008      	beq.n	80030b6 <HAL_UART_IRQHandler+0x6e>
    __HAL_UART_CLEAR_NEFLAG(huart);
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	9202      	str	r2, [sp, #8]
 80030a8:	685a      	ldr	r2, [r3, #4]
 80030aa:	9202      	str	r2, [sp, #8]
 80030ac:	9a02      	ldr	r2, [sp, #8]
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 80030ae:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80030b0:	f042 0202 	orr.w	r2, r2, #2
 80030b4:	63e2      	str	r2, [r4, #60]	; 0x3c
  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_ORE);
 80030b6:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 80030b8:	6959      	ldr	r1, [r3, #20]
  if((tmp1 != RESET) && (tmp2 != RESET))
 80030ba:	f012 0f08 	tst.w	r2, #8
 80030be:	d00b      	beq.n	80030d8 <HAL_UART_IRQHandler+0x90>
 80030c0:	f011 0f01 	tst.w	r1, #1
 80030c4:	d008      	beq.n	80030d8 <HAL_UART_IRQHandler+0x90>
    __HAL_UART_CLEAR_OREFLAG(huart);
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	9203      	str	r2, [sp, #12]
 80030ca:	685a      	ldr	r2, [r3, #4]
 80030cc:	9203      	str	r2, [sp, #12]
 80030ce:	9a03      	ldr	r2, [sp, #12]
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80030d0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80030d2:	f042 0208 	orr.w	r2, r2, #8
 80030d6:	63e2      	str	r2, [r4, #60]	; 0x3c
  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE);
 80030d8:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE);
 80030da:	68d9      	ldr	r1, [r3, #12]
  if((tmp1 != RESET) && (tmp2 != RESET))
 80030dc:	f012 0f20 	tst.w	r2, #32
 80030e0:	d002      	beq.n	80030e8 <HAL_UART_IRQHandler+0xa0>
 80030e2:	f011 0f20 	tst.w	r1, #32
 80030e6:	d118      	bne.n	800311a <HAL_UART_IRQHandler+0xd2>
  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_TXE);
 80030e8:	6823      	ldr	r3, [r4, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE);
 80030ec:	68d9      	ldr	r1, [r3, #12]
  if((tmp1 != RESET) && (tmp2 != RESET))
 80030ee:	f012 0f80 	tst.w	r2, #128	; 0x80
 80030f2:	d002      	beq.n	80030fa <HAL_UART_IRQHandler+0xb2>
 80030f4:	f011 0f80 	tst.w	r1, #128	; 0x80
 80030f8:	d160      	bne.n	80031bc <HAL_UART_IRQHandler+0x174>
  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_TC);
 80030fa:	6823      	ldr	r3, [r4, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC);
 80030fe:	68d9      	ldr	r1, [r3, #12]
  if((tmp1 != RESET) && (tmp2 != RESET))
 8003100:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003104:	d003      	beq.n	800310e <HAL_UART_IRQHandler+0xc6>
 8003106:	f011 0f40 	tst.w	r1, #64	; 0x40
 800310a:	f040 8086 	bne.w	800321a <HAL_UART_IRQHandler+0x1d2>
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800310e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003110:	2b00      	cmp	r3, #0
 8003112:	f040 80a0 	bne.w	8003256 <HAL_UART_IRQHandler+0x20e>
}
 8003116:	b004      	add	sp, #16
 8003118:	bd10      	pop	{r4, pc}
  tmp1 = huart->State; 
 800311a:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
  if((tmp1 == HAL_UART_STATE_BUSY_RX) || (tmp1 == HAL_UART_STATE_BUSY_TX_RX))
 800311e:	f002 02ef 	and.w	r2, r2, #239	; 0xef
 8003122:	2a22      	cmp	r2, #34	; 0x22
 8003124:	d1e0      	bne.n	80030e8 <HAL_UART_IRQHandler+0xa0>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003126:	68a2      	ldr	r2, [r4, #8]
 8003128:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800312c:	d028      	beq.n	8003180 <HAL_UART_IRQHandler+0x138>
      if(huart->Init.Parity == UART_PARITY_NONE)
 800312e:	6922      	ldr	r2, [r4, #16]
 8003130:	2a00      	cmp	r2, #0
 8003132:	d137      	bne.n	80031a4 <HAL_UART_IRQHandler+0x15c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003134:	685a      	ldr	r2, [r3, #4]
 8003136:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003138:	1c59      	adds	r1, r3, #1
 800313a:	62a1      	str	r1, [r4, #40]	; 0x28
 800313c:	701a      	strb	r2, [r3, #0]
    if(--huart->RxXferCount == 0)
 800313e:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8003140:	3b01      	subs	r3, #1
 8003142:	b29b      	uxth	r3, r3
 8003144:	85e3      	strh	r3, [r4, #46]	; 0x2e
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1ce      	bne.n	80030e8 <HAL_UART_IRQHandler+0xa0>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800314a:	6822      	ldr	r2, [r4, #0]
 800314c:	68d3      	ldr	r3, [r2, #12]
 800314e:	f023 0320 	bic.w	r3, r3, #32
 8003152:	60d3      	str	r3, [r2, #12]
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8003154:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b32      	cmp	r3, #50	; 0x32
 800315c:	d02a      	beq.n	80031b4 <HAL_UART_IRQHandler+0x16c>
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800315e:	6822      	ldr	r2, [r4, #0]
 8003160:	68d3      	ldr	r3, [r2, #12]
 8003162:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003166:	60d3      	str	r3, [r2, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003168:	6822      	ldr	r2, [r4, #0]
 800316a:	6953      	ldr	r3, [r2, #20]
 800316c:	f023 0301 	bic.w	r3, r3, #1
 8003170:	6153      	str	r3, [r2, #20]
        huart->State = HAL_UART_STATE_READY;
 8003172:	2301      	movs	r3, #1
 8003174:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      HAL_UART_RxCpltCallback(huart);
 8003178:	4620      	mov	r0, r4
 800317a:	f7ff ff63 	bl	8003044 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 800317e:	e7b3      	b.n	80030e8 <HAL_UART_IRQHandler+0xa0>
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8003180:	6aa1      	ldr	r1, [r4, #40]	; 0x28
      if(huart->Init.Parity == UART_PARITY_NONE)
 8003182:	6922      	ldr	r2, [r4, #16]
 8003184:	b93a      	cbnz	r2, 8003196 <HAL_UART_IRQHandler+0x14e>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800318c:	800b      	strh	r3, [r1, #0]
        huart->pRxBuffPtr += 2;
 800318e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003190:	3302      	adds	r3, #2
 8003192:	62a3      	str	r3, [r4, #40]	; 0x28
 8003194:	e7d3      	b.n	800313e <HAL_UART_IRQHandler+0xf6>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	b2db      	uxtb	r3, r3
 800319a:	800b      	strh	r3, [r1, #0]
        huart->pRxBuffPtr += 1;
 800319c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800319e:	3301      	adds	r3, #1
 80031a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80031a2:	e7cc      	b.n	800313e <HAL_UART_IRQHandler+0xf6>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80031a8:	1c51      	adds	r1, r2, #1
 80031aa:	62a1      	str	r1, [r4, #40]	; 0x28
 80031ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031b0:	7013      	strb	r3, [r2, #0]
 80031b2:	e7c4      	b.n	800313e <HAL_UART_IRQHandler+0xf6>
        huart->State = HAL_UART_STATE_BUSY_TX;
 80031b4:	2312      	movs	r3, #18
 80031b6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 80031ba:	e7dd      	b.n	8003178 <HAL_UART_IRQHandler+0x130>
  tmp1 = huart->State;
 80031bc:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
  if((tmp1 == HAL_UART_STATE_BUSY_TX) || (tmp1 == HAL_UART_STATE_BUSY_TX_RX))
 80031c0:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80031c4:	2a12      	cmp	r2, #18
 80031c6:	d198      	bne.n	80030fa <HAL_UART_IRQHandler+0xb2>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80031c8:	68a2      	ldr	r2, [r4, #8]
 80031ca:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80031ce:	d015      	beq.n	80031fc <HAL_UART_IRQHandler+0x1b4>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80031d0:	6a22      	ldr	r2, [r4, #32]
 80031d2:	1c51      	adds	r1, r2, #1
 80031d4:	6221      	str	r1, [r4, #32]
 80031d6:	7812      	ldrb	r2, [r2, #0]
 80031d8:	605a      	str	r2, [r3, #4]
    if(--huart->TxXferCount == 0)
 80031da:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80031dc:	3b01      	subs	r3, #1
 80031de:	b29b      	uxth	r3, r3
 80031e0:	84e3      	strh	r3, [r4, #38]	; 0x26
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d189      	bne.n	80030fa <HAL_UART_IRQHandler+0xb2>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80031e6:	6822      	ldr	r2, [r4, #0]
 80031e8:	68d3      	ldr	r3, [r2, #12]
 80031ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031ee:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80031f0:	6822      	ldr	r2, [r4, #0]
 80031f2:	68d3      	ldr	r3, [r2, #12]
 80031f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031f8:	60d3      	str	r3, [r2, #12]
 80031fa:	e77e      	b.n	80030fa <HAL_UART_IRQHandler+0xb2>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80031fc:	6a22      	ldr	r2, [r4, #32]
 80031fe:	8812      	ldrh	r2, [r2, #0]
 8003200:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003204:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8003206:	6923      	ldr	r3, [r4, #16]
 8003208:	b91b      	cbnz	r3, 8003212 <HAL_UART_IRQHandler+0x1ca>
        huart->pTxBuffPtr += 2;
 800320a:	6a23      	ldr	r3, [r4, #32]
 800320c:	3302      	adds	r3, #2
 800320e:	6223      	str	r3, [r4, #32]
 8003210:	e7e3      	b.n	80031da <HAL_UART_IRQHandler+0x192>
        huart->pTxBuffPtr += 1;
 8003212:	6a23      	ldr	r3, [r4, #32]
 8003214:	3301      	adds	r3, #1
 8003216:	6223      	str	r3, [r4, #32]
 8003218:	e7df      	b.n	80031da <HAL_UART_IRQHandler+0x192>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800321a:	68da      	ldr	r2, [r3, #12]
 800321c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003220:	60da      	str	r2, [r3, #12]
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8003222:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8003226:	b2db      	uxtb	r3, r3
 8003228:	2b32      	cmp	r3, #50	; 0x32
 800322a:	d010      	beq.n	800324e <HAL_UART_IRQHandler+0x206>
    __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800322c:	6822      	ldr	r2, [r4, #0]
 800322e:	68d3      	ldr	r3, [r2, #12]
 8003230:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003234:	60d3      	str	r3, [r2, #12]
    __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003236:	6822      	ldr	r2, [r4, #0]
 8003238:	6953      	ldr	r3, [r2, #20]
 800323a:	f023 0301 	bic.w	r3, r3, #1
 800323e:	6153      	str	r3, [r2, #20]
    huart->State = HAL_UART_STATE_READY;
 8003240:	2301      	movs	r3, #1
 8003242:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8003246:	4620      	mov	r0, r4
 8003248:	f7ff fefb 	bl	8003042 <HAL_UART_TxCpltCallback>
  return HAL_OK;
 800324c:	e75f      	b.n	800310e <HAL_UART_IRQHandler+0xc6>
    huart->State = HAL_UART_STATE_BUSY_RX;
 800324e:	2322      	movs	r3, #34	; 0x22
 8003250:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 8003254:	e7f7      	b.n	8003246 <HAL_UART_IRQHandler+0x1fe>
    huart->State = HAL_UART_STATE_READY;
 8003256:	2301      	movs	r3, #1
 8003258:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    HAL_UART_ErrorCallback(huart);
 800325c:	4620      	mov	r0, r4
 800325e:	f7ff fef2 	bl	8003046 <HAL_UART_ErrorCallback>
}
 8003262:	e758      	b.n	8003116 <HAL_UART_IRQHandler+0xce>

08003264 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003264:	f8df d034 	ldr.w	sp, [pc, #52]	; 800329c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003268:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800326a:	e003      	b.n	8003274 <LoopCopyDataInit>

0800326c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800326c:	4b0c      	ldr	r3, [pc, #48]	; (80032a0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800326e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003270:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003272:	3104      	adds	r1, #4

08003274 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003274:	480b      	ldr	r0, [pc, #44]	; (80032a4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003276:	4b0c      	ldr	r3, [pc, #48]	; (80032a8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003278:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800327a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800327c:	d3f6      	bcc.n	800326c <CopyDataInit>
  ldr  r2, =_sbss
 800327e:	4a0b      	ldr	r2, [pc, #44]	; (80032ac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003280:	e002      	b.n	8003288 <LoopFillZerobss>

08003282 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003282:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003284:	f842 3b04 	str.w	r3, [r2], #4

08003288 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003288:	4b09      	ldr	r3, [pc, #36]	; (80032b0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800328a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800328c:	d3f9      	bcc.n	8003282 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800328e:	f7fe fa51 	bl	8001734 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003292:	f000 fef5 	bl	8004080 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003296:	f000 fdff 	bl	8003e98 <main>
  bx  lr    
 800329a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800329c:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80032a0:	08004b3c 	.word	0x08004b3c
  ldr  r0, =_sdata
 80032a4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80032a8:	20000368 	.word	0x20000368
  ldr  r2, =_sbss
 80032ac:	20000368 	.word	0x20000368
  ldr  r3, = _ebss
 80032b0:	200005d8 	.word	0x200005d8

080032b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032b4:	e7fe      	b.n	80032b4 <ADC_IRQHandler>
	...

080032b8 <HAL_GPIO_EXTI_Callback>:
  * @retval None
  */

// PA10, PB3, PB5, PA8
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80032b8:	b508      	push	{r3, lr}
  switch (GPIO_Pin)
 80032ba:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80032be:	d02c      	beq.n	800331a <HAL_GPIO_EXTI_Callback+0x62>
 80032c0:	d810      	bhi.n	80032e4 <HAL_GPIO_EXTI_Callback+0x2c>
 80032c2:	2802      	cmp	r0, #2
 80032c4:	d026      	beq.n	8003314 <HAL_GPIO_EXTI_Callback+0x5c>
 80032c6:	2840      	cmp	r0, #64	; 0x40
 80032c8:	d107      	bne.n	80032da <HAL_GPIO_EXTI_Callback+0x22>
    break;
  case L6470_nFLAG_GPIO_PIN:
    BSP_L6470_FlagEventManager();
    break;
  case GPIO_PIN_6:
	  USART_Transmit(&huart2, (uint8_t* )"PA6 Limit Reached\n");
 80032ca:	491c      	ldr	r1, [pc, #112]	; (800333c <HAL_GPIO_EXTI_Callback+0x84>)
 80032cc:	481c      	ldr	r0, [pc, #112]	; (8003340 <HAL_GPIO_EXTI_Callback+0x88>)
 80032ce:	f000 f87c 	bl	80033ca <USART_Transmit>
	  L6470_HardStop(0);
 80032d2:	2000      	movs	r0, #0
 80032d4:	f7fd fc80 	bl	8000bd8 <L6470_HardStop>
	  // PB3
	 break;
 80032d8:	e010      	b.n	80032fc <HAL_GPIO_EXTI_Callback+0x44>
  switch (GPIO_Pin)
 80032da:	2801      	cmp	r0, #1
 80032dc:	d10e      	bne.n	80032fc <HAL_GPIO_EXTI_Callback+0x44>
    BSP_L6470_BusySynchEventManager();
 80032de:	f7fe f91a 	bl	8001516 <BSP_L6470_BusySynchEventManager>
    break;
 80032e2:	e00b      	b.n	80032fc <HAL_GPIO_EXTI_Callback+0x44>
  switch (GPIO_Pin)
 80032e4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80032e8:	d01f      	beq.n	800332a <HAL_GPIO_EXTI_Callback+0x72>
 80032ea:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80032ee:	d106      	bne.n	80032fe <HAL_GPIO_EXTI_Callback+0x46>
	 USART_Transmit(&huart2, (uint8_t* )"EMERGENCY STOP TRIGGERED\n");
 80032f0:	4914      	ldr	r1, [pc, #80]	; (8003344 <HAL_GPIO_EXTI_Callback+0x8c>)
 80032f2:	4813      	ldr	r0, [pc, #76]	; (8003340 <HAL_GPIO_EXTI_Callback+0x88>)
 80032f4:	f000 f869 	bl	80033ca <USART_Transmit>
    BSP_EmergencyStop();
 80032f8:	f7fe f912 	bl	8001520 <BSP_EmergencyStop>
	  USART_Transmit(&huart2, (uint8_t* )"PA10 Limit Reached\n");
	  L6470_HardStop(0);
	  // PA10
	 break;
  }
}
 80032fc:	bd08      	pop	{r3, pc}
  switch (GPIO_Pin)
 80032fe:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003302:	d1fb      	bne.n	80032fc <HAL_GPIO_EXTI_Callback+0x44>
	  USART_Transmit(&huart2, (uint8_t* )"PA9 Limit Reached\n");
 8003304:	4910      	ldr	r1, [pc, #64]	; (8003348 <HAL_GPIO_EXTI_Callback+0x90>)
 8003306:	480e      	ldr	r0, [pc, #56]	; (8003340 <HAL_GPIO_EXTI_Callback+0x88>)
 8003308:	f000 f85f 	bl	80033ca <USART_Transmit>
	  L6470_HardStop(0);
 800330c:	2000      	movs	r0, #0
 800330e:	f7fd fc63 	bl	8000bd8 <L6470_HardStop>
	 break;
 8003312:	e7f3      	b.n	80032fc <HAL_GPIO_EXTI_Callback+0x44>
    BSP_L6470_FlagEventManager();
 8003314:	f7fe f901 	bl	800151a <BSP_L6470_FlagEventManager>
    break;
 8003318:	e7f0      	b.n	80032fc <HAL_GPIO_EXTI_Callback+0x44>
	  USART_Transmit(&huart2, (uint8_t* )"PA8 Limit Reached\n");
 800331a:	490c      	ldr	r1, [pc, #48]	; (800334c <HAL_GPIO_EXTI_Callback+0x94>)
 800331c:	4808      	ldr	r0, [pc, #32]	; (8003340 <HAL_GPIO_EXTI_Callback+0x88>)
 800331e:	f000 f854 	bl	80033ca <USART_Transmit>
	  L6470_HardStop(0);
 8003322:	2000      	movs	r0, #0
 8003324:	f7fd fc58 	bl	8000bd8 <L6470_HardStop>
	 break;
 8003328:	e7e8      	b.n	80032fc <HAL_GPIO_EXTI_Callback+0x44>
	  USART_Transmit(&huart2, (uint8_t* )"PA10 Limit Reached\n");
 800332a:	4909      	ldr	r1, [pc, #36]	; (8003350 <HAL_GPIO_EXTI_Callback+0x98>)
 800332c:	4804      	ldr	r0, [pc, #16]	; (8003340 <HAL_GPIO_EXTI_Callback+0x88>)
 800332e:	f000 f84c 	bl	80033ca <USART_Transmit>
	  L6470_HardStop(0);
 8003332:	2000      	movs	r0, #0
 8003334:	f7fd fc50 	bl	8000bd8 <L6470_HardStop>
}
 8003338:	e7e0      	b.n	80032fc <HAL_GPIO_EXTI_Callback+0x44>
 800333a:	bf00      	nop
 800333c:	08004718 	.word	0x08004718
 8003340:	200004c8 	.word	0x200004c8
 8003344:	080046fc 	.word	0x080046fc
 8003348:	08004740 	.word	0x08004740
 800334c:	0800472c 	.word	0x0800472c
 8003350:	08004754 	.word	0x08004754

08003354 <CompareTwoTextString>:
 * @brief  This function compares two text strings.
 * @param  TextString1 The pointer to the 1st text string to compare.
 * @param  TextString2 The pointer to the 2nd text string to compare.
 * @retval FlagStatus    SET or RESET related the comparison.
 */
FlagStatus CompareTwoTextString(uint8_t* TextString1, uint8_t* TextString2) {
 8003354:	f04f 0c00 	mov.w	ip, #0
	uint8_t c1, c2; /* to store the two characters to be compared */

	i = 0;

	do {
		c1 = *(TextString1 + i);
 8003358:	fa5f f38c 	uxtb.w	r3, ip
 800335c:	5cc2      	ldrb	r2, [r0, r3]
		c2 = *(TextString2 + i);
 800335e:	5ccb      	ldrb	r3, [r1, r3]

		if (c1 != c2) {
 8003360:	429a      	cmp	r2, r3
 8003362:	d106      	bne.n	8003372 <CompareTwoTextString+0x1e>
			return RESET;
		}
		i++;
	} while ((c1 != '\0') && (c2 != '\0'));
 8003364:	b13a      	cbz	r2, 8003376 <CompareTwoTextString+0x22>
 8003366:	f10c 0c01 	add.w	ip, ip, #1
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1f4      	bne.n	8003358 <CompareTwoTextString+0x4>

	return SET;
 800336e:	2001      	movs	r0, #1
 8003370:	4770      	bx	lr
			return RESET;
 8003372:	2000      	movs	r0, #0
 8003374:	4770      	bx	lr
	return SET;
 8003376:	2001      	movs	r0, #1
}
 8003378:	4770      	bx	lr

0800337a <str2num>:
	uint32_t tenpwr;
	uint32_t number;

	digit = 0;

	while (*(str + digit) != '\0') {
 800337a:	7803      	ldrb	r3, [r0, #0]
 800337c:	b31b      	cbz	r3, 80033c6 <str2num+0x4c>
	digit = 0;
 800337e:	2200      	movs	r2, #0
		if (((*(str + digit) >= '0') && (*(str + digit) <= '9'))) {
 8003380:	3b30      	subs	r3, #48	; 0x30
 8003382:	b2db      	uxtb	r3, r3
 8003384:	2b09      	cmp	r3, #9
 8003386:	d81b      	bhi.n	80033c0 <str2num+0x46>
			digit++;
 8003388:	3201      	adds	r2, #1
 800338a:	b2d2      	uxtb	r2, r2
	while (*(str + digit) != '\0') {
 800338c:	5c83      	ldrb	r3, [r0, r2]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1f6      	bne.n	8003380 <str2num+0x6>
FlagStatus str2num(uint8_t* str, uint32_t* pnum) {
 8003392:	b410      	push	{r4}
 8003394:	1e53      	subs	r3, r2, #1
 8003396:	b2db      	uxtb	r3, r3
 8003398:	3301      	adds	r3, #1
 800339a:	4403      	add	r3, r0
			return RESET;
		}
	}

	tenpwr = 1;
	number = 0;
 800339c:	2400      	movs	r4, #0
	tenpwr = 1;
 800339e:	2201      	movs	r2, #1

	do {
		TxtStr_digit = (*(str + (--digit)));
		number += ((TxtStr_digit - '0') * tenpwr);
 80033a0:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
 80033a4:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80033a8:	fb02 440c 	mla	r4, r2, ip, r4
		tenpwr *= 10;
 80033ac:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80033b0:	0052      	lsls	r2, r2, #1
	} while (digit);
 80033b2:	4283      	cmp	r3, r0
 80033b4:	d1f4      	bne.n	80033a0 <str2num+0x26>

	*pnum = number;
 80033b6:	600c      	str	r4, [r1, #0]
	return SET;
 80033b8:	2001      	movs	r0, #1
}
 80033ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80033be:	4770      	bx	lr
			*pnum = 0;
 80033c0:	2000      	movs	r0, #0
 80033c2:	6008      	str	r0, [r1, #0]
}
 80033c4:	4770      	bx	lr
	digit = 0;
 80033c6:	461a      	mov	r2, r3
 80033c8:	e7e3      	b.n	8003392 <str2num+0x18>

080033ca <USART_Transmit>:
 * @param  huart       pointer to a UART_HandleTypeDef structure that contains
 *                     the configuration information for the specified UART module.
 * @param  TextString  The text string to be sent.
 * @note It use the HAL_UART_Transmit function.
 */
void USART_Transmit(UART_HandleTypeDef* huart, uint8_t* TextString) {
 80033ca:	b510      	push	{r4, lr}
	uint8_t TextStringLength;

	/* Calculate the length of the text string to be sent */
	TextStringLength = 0;
	while (TextString[TextStringLength++] != '\0')
 80033cc:	2300      	movs	r3, #0
 80033ce:	b2da      	uxtb	r2, r3
 80033d0:	5c8c      	ldrb	r4, [r1, r2]
 80033d2:	3301      	adds	r3, #1
 80033d4:	2c00      	cmp	r4, #0
 80033d6:	d1fa      	bne.n	80033ce <USART_Transmit+0x4>
		;
	TextStringLength--;

	/* Use the HAL function to send the text string via USART */
	HAL_UART_Transmit(huart, TextString, TextStringLength, 10);
 80033d8:	230a      	movs	r3, #10
 80033da:	f7ff fd81 	bl	8002ee0 <HAL_UART_Transmit>
}
 80033de:	bd10      	pop	{r4, pc}

080033e0 <USART_SplitTextString>:
		sL6470_TextCommandBundle *pL6470_TextCommandBundle) {
 80033e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		*((pL6470_TextCommandBundle + CmdTxt_id)->MotorName) = '\0';
 80033e4:	2300      	movs	r3, #0
 80033e6:	700b      	strb	r3, [r1, #0]
		*((pL6470_TextCommandBundle + CmdTxt_id)->CommandName) = '\0';
 80033e8:	70cb      	strb	r3, [r1, #3]
		*((pL6470_TextCommandBundle + CmdTxt_id)->Param[0]) = '\0';
 80033ea:	73cb      	strb	r3, [r1, #15]
		*((pL6470_TextCommandBundle + CmdTxt_id)->Param[1]) = '\0';
 80033ec:	768b      	strb	r3, [r1, #26]
		*((pL6470_TextCommandBundle + CmdTxt_id)->Param[2]) = '\0';
 80033ee:	f881 3025 	strb.w	r3, [r1, #37]	; 0x25
		*((pL6470_TextCommandBundle + CmdTxt_id)->MotorName) = '\0';
 80033f2:	f881 3030 	strb.w	r3, [r1, #48]	; 0x30
		*((pL6470_TextCommandBundle + CmdTxt_id)->CommandName) = '\0';
 80033f6:	f881 3033 	strb.w	r3, [r1, #51]	; 0x33
		*((pL6470_TextCommandBundle + CmdTxt_id)->Param[0]) = '\0';
 80033fa:	f881 303f 	strb.w	r3, [r1, #63]	; 0x3f
		*((pL6470_TextCommandBundle + CmdTxt_id)->Param[1]) = '\0';
 80033fe:	f881 304a 	strb.w	r3, [r1, #74]	; 0x4a
		*((pL6470_TextCommandBundle + CmdTxt_id)->Param[2]) = '\0';
 8003402:	f881 3055 	strb.w	r3, [r1, #85]	; 0x55
	ch = *(pTextString + c_id);
 8003406:	7802      	ldrb	r2, [r0, #0]
	while (ch != '\0') {
 8003408:	2a00      	cmp	r2, #0
 800340a:	d07c      	beq.n	8003506 <USART_SplitTextString+0x126>
	UsartTextStringDecodingStatus = DECODE_MOTOR;
 800340c:	469e      	mov	lr, r3
	k_idmax = 2;
 800340e:	2602      	movs	r6, #2
	k_id = 0;
 8003410:	469c      	mov	ip, r3
	CmdTxt_id = 0;
 8003412:	461c      	mov	r4, r3
				UsartTextStringDecodingStatus = DECODE_MOTOR;
 8003414:	461d      	mov	r5, r3
					k_idmax = 7;
 8003416:	2707      	movs	r7, #7
					k_idmax = 10;
 8003418:	f04f 0a0a 	mov.w	sl, #10
					k_idmax = 11;
 800341c:	f04f 090b 	mov.w	r9, #11
					k_idmax = 2;
 8003420:	46b0      	mov	r8, r6
 8003422:	e010      	b.n	8003446 <USART_SplitTextString+0x66>
				USART_Transmit(&huart2, (uint8_t* )"Too much entered parameters.\r\n\r\n");
 8003424:	4939      	ldr	r1, [pc, #228]	; (800350c <USART_SplitTextString+0x12c>)
 8003426:	483a      	ldr	r0, [pc, #232]	; (8003510 <USART_SplitTextString+0x130>)
 8003428:	f7ff ffcf 	bl	80033ca <USART_Transmit>
				return RESET;
 800342c:	2000      	movs	r0, #0
 800342e:	e068      	b.n	8003502 <USART_SplitTextString+0x122>
			CmdTxt_id++;
 8003430:	3401      	adds	r4, #1
 8003432:	b2e4      	uxtb	r4, r4
			if (CmdTxt_id != L6470DAISYCHAINSIZE) {
 8003434:	2c02      	cmp	r4, #2
 8003436:	d013      	beq.n	8003460 <USART_SplitTextString+0x80>
				UsartTextStringDecodingStatus = DECODE_MOTOR;
 8003438:	46ae      	mov	lr, r5
				k_id = 0;
 800343a:	46ac      	mov	ip, r5
		c_id++;
 800343c:	3301      	adds	r3, #1
 800343e:	b2db      	uxtb	r3, r3
		ch = *(pTextString + c_id);
 8003440:	5cc2      	ldrb	r2, [r0, r3]
	while (ch != '\0') {
 8003442:	2a00      	cmp	r2, #0
 8003444:	d05c      	beq.n	8003500 <USART_SplitTextString+0x120>
		switch (ch) {
 8003446:	2a2c      	cmp	r2, #44	; 0x2c
 8003448:	d0f2      	beq.n	8003430 <USART_SplitTextString+0x50>
 800344a:	2a2e      	cmp	r2, #46	; 0x2e
 800344c:	d10e      	bne.n	800346c <USART_SplitTextString+0x8c>
			if (UsartTextStringDecodingStatus != DECODE_3rd_PARAM) {
 800344e:	f1be 0f04 	cmp.w	lr, #4
 8003452:	d0e7      	beq.n	8003424 <USART_SplitTextString+0x44>
				UsartTextStringDecodingStatus++;
 8003454:	f10e 0e01 	add.w	lr, lr, #1
 8003458:	fa5f fe8e 	uxtb.w	lr, lr
				k_id = 0;
 800345c:	46ac      	mov	ip, r5
			break;
 800345e:	e7ed      	b.n	800343c <USART_SplitTextString+0x5c>
				USART_Transmit(&huart2, (uint8_t* )"Too much addressed L6470.\r\n\r\n");
 8003460:	492c      	ldr	r1, [pc, #176]	; (8003514 <USART_SplitTextString+0x134>)
 8003462:	482b      	ldr	r0, [pc, #172]	; (8003510 <USART_SplitTextString+0x130>)
 8003464:	f7ff ffb1 	bl	80033ca <USART_Transmit>
				return RESET;
 8003468:	2000      	movs	r0, #0
 800346a:	e04a      	b.n	8003502 <USART_SplitTextString+0x122>
			if (k_id != k_idmax) {
 800346c:	45b4      	cmp	ip, r6
 800346e:	d041      	beq.n	80034f4 <USART_SplitTextString+0x114>
				switch (UsartTextStringDecodingStatus) {
 8003470:	f1be 0f04 	cmp.w	lr, #4
 8003474:	d80d      	bhi.n	8003492 <USART_SplitTextString+0xb2>
 8003476:	e8df f00e 	tbb	[pc, lr]
 800347a:	1103      	.short	0x1103
 800347c:	271c      	.short	0x271c
 800347e:	32          	.byte	0x32
 800347f:	00          	.byte	0x00
					*(((pL6470_TextCommandBundle + CmdTxt_id)->MotorName) + k_id) =
 8003480:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 8003484:	eb01 1606 	add.w	r6, r1, r6, lsl #4
 8003488:	f806 200c 	strb.w	r2, [r6, ip]
							+ (k_id + 1)) = '\0';
 800348c:	4466      	add	r6, ip
 800348e:	7075      	strb	r5, [r6, #1]
					k_idmax = 2;
 8003490:	4646      	mov	r6, r8
				k_id++;
 8003492:	f10c 0c01 	add.w	ip, ip, #1
 8003496:	fa5f fc8c 	uxtb.w	ip, ip
			break;
 800349a:	e7cf      	b.n	800343c <USART_SplitTextString+0x5c>
					*(((pL6470_TextCommandBundle + CmdTxt_id)->CommandName)
 800349c:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 80034a0:	eb01 1606 	add.w	r6, r1, r6, lsl #4
 80034a4:	3603      	adds	r6, #3
							+ k_id) = ch;
 80034a6:	f806 200c 	strb.w	r2, [r6, ip]
							+ (k_id + 1)) = '\0';
 80034aa:	4466      	add	r6, ip
 80034ac:	7075      	strb	r5, [r6, #1]
					k_idmax = 11;
 80034ae:	464e      	mov	r6, r9
					break;
 80034b0:	e7ef      	b.n	8003492 <USART_SplitTextString+0xb2>
					*(((pL6470_TextCommandBundle + CmdTxt_id)->Param[0]) + k_id) =
 80034b2:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 80034b6:	eb01 1606 	add.w	r6, r1, r6, lsl #4
 80034ba:	360f      	adds	r6, #15
 80034bc:	f806 200c 	strb.w	r2, [r6, ip]
							+ (k_id + 1)) = '\0';
 80034c0:	4466      	add	r6, ip
 80034c2:	7075      	strb	r5, [r6, #1]
					k_idmax = 10;
 80034c4:	4656      	mov	r6, sl
					break;
 80034c6:	e7e4      	b.n	8003492 <USART_SplitTextString+0xb2>
					*(((pL6470_TextCommandBundle + CmdTxt_id)->Param[1]) + k_id) =
 80034c8:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 80034cc:	eb01 1606 	add.w	r6, r1, r6, lsl #4
 80034d0:	361a      	adds	r6, #26
 80034d2:	f806 200c 	strb.w	r2, [r6, ip]
							+ (k_id + 1)) = '\0';
 80034d6:	4466      	add	r6, ip
 80034d8:	7075      	strb	r5, [r6, #1]
					k_idmax = 7;
 80034da:	463e      	mov	r6, r7
					break;
 80034dc:	e7d9      	b.n	8003492 <USART_SplitTextString+0xb2>
					*(((pL6470_TextCommandBundle + CmdTxt_id)->Param[2]) + k_id) =
 80034de:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 80034e2:	eb01 1606 	add.w	r6, r1, r6, lsl #4
 80034e6:	3625      	adds	r6, #37	; 0x25
 80034e8:	f806 200c 	strb.w	r2, [r6, ip]
							+ (k_id + 1)) = '\0';
 80034ec:	4466      	add	r6, ip
 80034ee:	7075      	strb	r5, [r6, #1]
					k_idmax = 7;
 80034f0:	463e      	mov	r6, r7
					break;
 80034f2:	e7ce      	b.n	8003492 <USART_SplitTextString+0xb2>
				USART_Transmit(&huart2, (uint8_t* )"Too much entered character.\r\n\r\n");
 80034f4:	4908      	ldr	r1, [pc, #32]	; (8003518 <USART_SplitTextString+0x138>)
 80034f6:	4806      	ldr	r0, [pc, #24]	; (8003510 <USART_SplitTextString+0x130>)
 80034f8:	f7ff ff67 	bl	80033ca <USART_Transmit>
				return RESET;
 80034fc:	2000      	movs	r0, #0
 80034fe:	e000      	b.n	8003502 <USART_SplitTextString+0x122>
	return SET;
 8003500:	2001      	movs	r0, #1
}
 8003502:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return SET;
 8003506:	2001      	movs	r0, #1
 8003508:	e7fb      	b.n	8003502 <USART_SplitTextString+0x122>
 800350a:	bf00      	nop
 800350c:	08004768 	.word	0x08004768
 8003510:	200004c8 	.word	0x200004c8
 8003514:	0800478c 	.word	0x0800478c
 8003518:	080047ac 	.word	0x080047ac

0800351c <USART_CheckTextCommandBundle>:
		uint8_t* pL6470_DaisyChainSpiTxStruct) {
 800351c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003520:	b089      	sub	sp, #36	; 0x24
 8003522:	460f      	mov	r7, r1
	uint8_t MotorMnemonic[4] = "";
 8003524:	2300      	movs	r3, #0
 8003526:	9307      	str	r3, [sp, #28]
			*(pL6470_DaisyChainSpiTxStruct + (i++)) = 0x00;
 8003528:	700b      	strb	r3, [r1, #0]
 800352a:	704b      	strb	r3, [r1, #1]
 800352c:	708b      	strb	r3, [r1, #2]
 800352e:	70cb      	strb	r3, [r1, #3]
 8003530:	710b      	strb	r3, [r1, #4]
 8003532:	714b      	strb	r3, [r1, #5]
 8003534:	718b      	strb	r3, [r1, #6]
 8003536:	71cb      	strb	r3, [r1, #7]
	for (spibyte = 0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 8003538:	f100 080f 	add.w	r8, r0, #15
 800353c:	f100 033f 	add.w	r3, r0, #63	; 0x3f
 8003540:	9302      	str	r3, [sp, #8]
	uint8_t* pMotorMnemonic = MotorMnemonic;
 8003542:	ad07      	add	r5, sp, #28
		while (!CompareTwoTextString(
 8003544:	f8df a2b0 	ldr.w	sl, [pc, #688]	; 80037f8 <USART_CheckTextCommandBundle+0x2dc>
 8003548:	f10a 0b49 	add.w	fp, sl, #73	; 0x49
 800354c:	f1a8 040f 	sub.w	r4, r8, #15
 8003550:	9401      	str	r4, [sp, #4]
 8003552:	4659      	mov	r1, fp
 8003554:	4620      	mov	r0, r4
 8003556:	f7ff fefd 	bl	8003354 <CompareTwoTextString>
 800355a:	b978      	cbnz	r0, 800357c <USART_CheckTextCommandBundle+0x60>
 800355c:	f10a 0156 	add.w	r1, sl, #86	; 0x56
 8003560:	4620      	mov	r0, r4
 8003562:	f7ff fef7 	bl	8003354 <CompareTwoTextString>
 8003566:	4603      	mov	r3, r0
 8003568:	bb78      	cbnz	r0, 80035ca <USART_CheckTextCommandBundle+0xae>
				USART_Transmit(&huart2, (uint8_t* )"It is not possible to identify the L6470.\r\n\r\n");
 800356a:	4699      	mov	r9, r3
 800356c:	49a1      	ldr	r1, [pc, #644]	; (80037f4 <USART_CheckTextCommandBundle+0x2d8>)
 800356e:	48a2      	ldr	r0, [pc, #648]	; (80037f8 <USART_CheckTextCommandBundle+0x2dc>)
 8003570:	f7ff ff2b 	bl	80033ca <USART_Transmit>
}
 8003574:	4648      	mov	r0, r9
 8003576:	b009      	add	sp, #36	; 0x24
 8003578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		i = 0;
 800357c:	2000      	movs	r0, #0
				(uint8_t*) L6470_DaisyChainMnemonic[i].MotorIdMnemonic)) {
 800357e:	f8cd b010 	str.w	fp, [sp, #16]
		L6470_Id = L6470_ID(i);
 8003582:	f7fd f987 	bl	8000894 <L6470_ID>
 8003586:	9003      	str	r0, [sp, #12]
		if (!CompareTwoTextString(
 8003588:	4629      	mov	r1, r5
 800358a:	9804      	ldr	r0, [sp, #16]
 800358c:	f7ff fee2 	bl	8003354 <CompareTwoTextString>
 8003590:	9005      	str	r0, [sp, #20]
 8003592:	2800      	cmp	r0, #0
 8003594:	f040 825d 	bne.w	8003a52 <USART_CheckTextCommandBundle+0x536>
 8003598:	2600      	movs	r6, #0
			while (!CompareTwoTextString(
 800359a:	f1a8 090c 	sub.w	r9, r8, #12
 800359e:	b2f5      	uxtb	r5, r6
					(uint8_t*) L6470_ApplicationCommand[L6470_AppCmdId].Mnemonic)) {
 80035a0:	9500      	str	r5, [sp, #0]
 80035a2:	ebc5 01c5 	rsb	r1, r5, r5, lsl #3
			while (!CompareTwoTextString(
 80035a6:	4b95      	ldr	r3, [pc, #596]	; (80037fc <USART_CheckTextCommandBundle+0x2e0>)
 80035a8:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 80035ac:	4648      	mov	r0, r9
 80035ae:	f7ff fed1 	bl	8003354 <CompareTwoTextString>
 80035b2:	4603      	mov	r3, r0
 80035b4:	b970      	cbnz	r0, 80035d4 <USART_CheckTextCommandBundle+0xb8>
				if (L6470_AppCmdId == L6470APPCMDIDSIZE) {
 80035b6:	3601      	adds	r6, #1
 80035b8:	b2f2      	uxtb	r2, r6
 80035ba:	2a13      	cmp	r2, #19
 80035bc:	d1ef      	bne.n	800359e <USART_CheckTextCommandBundle+0x82>
					USART_Transmit(&huart2, (uint8_t* )"It is not possible to recognize any L6470 application command.\r\n\r\n");
 80035be:	4699      	mov	r9, r3
 80035c0:	498f      	ldr	r1, [pc, #572]	; (8003800 <USART_CheckTextCommandBundle+0x2e4>)
 80035c2:	488d      	ldr	r0, [pc, #564]	; (80037f8 <USART_CheckTextCommandBundle+0x2dc>)
 80035c4:	f7ff ff01 	bl	80033ca <USART_Transmit>
					return RESET;
 80035c8:	e7d4      	b.n	8003574 <USART_CheckTextCommandBundle+0x58>
			i++;
 80035ca:	2001      	movs	r0, #1
				(uint8_t*) L6470_DaisyChainMnemonic[i].MotorIdMnemonic)) {
 80035cc:	f10a 0356 	add.w	r3, sl, #86	; 0x56
 80035d0:	9304      	str	r3, [sp, #16]
 80035d2:	e7d6      	b.n	8003582 <USART_CheckTextCommandBundle+0x66>
			nr_parameters =
 80035d4:	9b00      	ldr	r3, [sp, #0]
 80035d6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80035da:	4a88      	ldr	r2, [pc, #544]	; (80037fc <USART_CheckTextCommandBundle+0x2e0>)
 80035dc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80035e0:	7b59      	ldrb	r1, [r3, #13]
			while (i < nr_parameters) {
 80035e2:	b331      	cbz	r1, 8003632 <USART_CheckTextCommandBundle+0x116>
			i = 0;
 80035e4:	9a05      	ldr	r2, [sp, #20]
				if ((*((pL6470_TextCommandBundle + CmdTxt_id)->Param[i]))
 80035e6:	7be3      	ldrb	r3, [r4, #15]
 80035e8:	b1eb      	cbz	r3, 8003626 <USART_CheckTextCommandBundle+0x10a>
					i++;
 80035ea:	3201      	adds	r2, #1
 80035ec:	b2d2      	uxtb	r2, r2
			while (i < nr_parameters) {
 80035ee:	340b      	adds	r4, #11
 80035f0:	4291      	cmp	r1, r2
 80035f2:	d1f8      	bne.n	80035e6 <USART_CheckTextCommandBundle+0xca>
			if (i < 3) /* Max possible parameters */
 80035f4:	2902      	cmp	r1, #2
 80035f6:	d91c      	bls.n	8003632 <USART_CheckTextCommandBundle+0x116>
			switch (L6470_AppCmdId) {
 80035f8:	2d12      	cmp	r5, #18
 80035fa:	d82d      	bhi.n	8003658 <USART_CheckTextCommandBundle+0x13c>
 80035fc:	e8df f015 	tbh	[pc, r5, lsl #1]
 8003600:	00450029 	.word	0x00450029
 8003604:	00b10082 	.word	0x00b10082
 8003608:	010e00df 	.word	0x010e00df
 800360c:	0153013c 	.word	0x0153013c
 8003610:	01cb0181 	.word	0x01cb0181
 8003614:	02050201 	.word	0x02050201
 8003618:	020d0209 	.word	0x020d0209
 800361c:	02150211 	.word	0x02150211
 8003620:	021d0219 	.word	0x021d0219
 8003624:	0221      	.short	0x0221
					USART_Transmit(&huart2, (uint8_t* )"The number of parameters related to the application command is not right.\r\n\r\n");
 8003626:	4699      	mov	r9, r3
 8003628:	4976      	ldr	r1, [pc, #472]	; (8003804 <USART_CheckTextCommandBundle+0x2e8>)
 800362a:	4873      	ldr	r0, [pc, #460]	; (80037f8 <USART_CheckTextCommandBundle+0x2dc>)
 800362c:	f7ff fecd 	bl	80033ca <USART_Transmit>
					return RESET;
 8003630:	e7a0      	b.n	8003574 <USART_CheckTextCommandBundle+0x58>
				if ((*((pL6470_TextCommandBundle + CmdTxt_id)->Param[i]))
 8003632:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8003636:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800363a:	9a01      	ldr	r2, [sp, #4]
 800363c:	441a      	add	r2, r3
 800363e:	7bd3      	ldrb	r3, [r2, #15]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d0d9      	beq.n	80035f8 <USART_CheckTextCommandBundle+0xdc>
					USART_Transmit(&huart2, (uint8_t* )"The number of parameters related to the application command is not right.\r\n\r\n");
 8003644:	496f      	ldr	r1, [pc, #444]	; (8003804 <USART_CheckTextCommandBundle+0x2e8>)
 8003646:	486c      	ldr	r0, [pc, #432]	; (80037f8 <USART_CheckTextCommandBundle+0x2dc>)
 8003648:	f7ff febf 	bl	80033ca <USART_Transmit>
					return RESET;
 800364c:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8003650:	e790      	b.n	8003574 <USART_CheckTextCommandBundle+0x58>
						+ ((0 * L6470DAISYCHAINSIZE) + L6470_Id)) = 0x00;
 8003652:	2300      	movs	r3, #0
 8003654:	9a03      	ldr	r2, [sp, #12]
 8003656:	54bb      	strb	r3, [r7, r2]
							!= '\0')));
 8003658:	9b02      	ldr	r3, [sp, #8]
 800365a:	4543      	cmp	r3, r8
 800365c:	f000 8203 	beq.w	8003a66 <USART_CheckTextCommandBundle+0x54a>
			&& (((*((pL6470_TextCommandBundle + CmdTxt_id)->MotorName)) != '\0')
 8003660:	f898 2021 	ldrb.w	r2, [r8, #33]	; 0x21
 8003664:	b96a      	cbnz	r2, 8003682 <USART_CheckTextCommandBundle+0x166>
					|| ((*((pL6470_TextCommandBundle + CmdTxt_id)->CommandName))
 8003666:	f898 2024 	ldrb.w	r2, [r8, #36]	; 0x24
 800366a:	b952      	cbnz	r2, 8003682 <USART_CheckTextCommandBundle+0x166>
					|| ((*((pL6470_TextCommandBundle + CmdTxt_id)->Param[0]))
 800366c:	f898 2030 	ldrb.w	r2, [r8, #48]	; 0x30
 8003670:	b93a      	cbnz	r2, 8003682 <USART_CheckTextCommandBundle+0x166>
					|| ((*((pL6470_TextCommandBundle + CmdTxt_id)->Param[1]))
 8003672:	f898 203b 	ldrb.w	r2, [r8, #59]	; 0x3b
 8003676:	b922      	cbnz	r2, 8003682 <USART_CheckTextCommandBundle+0x166>
					|| ((*((pL6470_TextCommandBundle + CmdTxt_id)->Param[2]))
 8003678:	f898 3046 	ldrb.w	r3, [r8, #70]	; 0x46
 800367c:	2b00      	cmp	r3, #0
 800367e:	f000 81ef 	beq.w	8003a60 <USART_CheckTextCommandBundle+0x544>
 8003682:	f108 0830 	add.w	r8, r8, #48	; 0x30
		uint8_t* pL6470_DaisyChainSpiTxStruct) {
 8003686:	9d04      	ldr	r5, [sp, #16]
 8003688:	e760      	b.n	800354c <USART_CheckTextCommandBundle+0x30>
			switch (L6470_AppCmdId) {
 800368a:	2600      	movs	r6, #0
						(uint8_t*) L6470_Register[L6470_RegId].Name)) {
 800368c:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800380c <USART_CheckTextCommandBundle+0x2f0>
				while (!CompareTwoTextString(
 8003690:	b2f4      	uxtb	r4, r6
						(uint8_t*) L6470_Register[L6470_RegId].Name)) {
 8003692:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8003696:	eb09 0181 	add.w	r1, r9, r1, lsl #2
				while (!CompareTwoTextString(
 800369a:	3101      	adds	r1, #1
 800369c:	4640      	mov	r0, r8
 800369e:	f7ff fe59 	bl	8003354 <CompareTwoTextString>
 80036a2:	4603      	mov	r3, r0
 80036a4:	b948      	cbnz	r0, 80036ba <USART_CheckTextCommandBundle+0x19e>
					if (L6470_RegId == L6470REGIDSIZE) {
 80036a6:	3601      	adds	r6, #1
 80036a8:	b2f2      	uxtb	r2, r6
 80036aa:	2a19      	cmp	r2, #25
 80036ac:	d1f0      	bne.n	8003690 <USART_CheckTextCommandBundle+0x174>
						USART_Transmit(&huart2, (uint8_t *)"It is not possible to recognize any L6470 register name.\r\n\r\n");
 80036ae:	4699      	mov	r9, r3
 80036b0:	4955      	ldr	r1, [pc, #340]	; (8003808 <USART_CheckTextCommandBundle+0x2ec>)
 80036b2:	4851      	ldr	r0, [pc, #324]	; (80037f8 <USART_CheckTextCommandBundle+0x2dc>)
 80036b4:	f7ff fe89 	bl	80033ca <USART_Transmit>
						return RESET;
 80036b8:	e75c      	b.n	8003574 <USART_CheckTextCommandBundle+0x58>
						| L6470_Register[L6470_RegId].Address;
 80036ba:	4b54      	ldr	r3, [pc, #336]	; (800380c <USART_CheckTextCommandBundle+0x2f0>)
 80036bc:	2214      	movs	r2, #20
 80036be:	fb02 f404 	mul.w	r4, r2, r4
 80036c2:	191a      	adds	r2, r3, r4
						+ ((0 * L6470DAISYCHAINSIZE) + L6470_Id)) = 0x00
 80036c4:	5d1b      	ldrb	r3, [r3, r4]
 80036c6:	9903      	ldr	r1, [sp, #12]
 80036c8:	547b      	strb	r3, [r7, r1]
				PARAMLengthBytes = L6470_Register[L6470_RegId].LengthByte;
 80036ca:	7b94      	ldrb	r4, [r2, #14]
				if (!str2num(
 80036cc:	a906      	add	r1, sp, #24
 80036ce:	f108 000b 	add.w	r0, r8, #11
 80036d2:	f7ff fe52 	bl	800337a <str2num>
 80036d6:	b178      	cbz	r0, 80036f8 <USART_CheckTextCommandBundle+0x1dc>
									>> (8 * (PARAMLengthBytes - spibyte)));
 80036d8:	9a06      	ldr	r2, [sp, #24]
				for (spibyte = 1; spibyte < (PARAMLengthBytes + 1); spibyte++) {
 80036da:	2c00      	cmp	r4, #0
 80036dc:	d0bc      	beq.n	8003658 <USART_CheckTextCommandBundle+0x13c>
							+ ((spibyte * L6470DAISYCHAINSIZE) + L6470_Id)) =
 80036de:	eb07 0145 	add.w	r1, r7, r5, lsl #1
									>> (8 * (PARAMLengthBytes - spibyte)));
 80036e2:	1b63      	subs	r3, r4, r5
 80036e4:	00db      	lsls	r3, r3, #3
 80036e6:	fa22 f303 	lsr.w	r3, r2, r3
							(uint8_t) (NumericValue
 80036ea:	9803      	ldr	r0, [sp, #12]
 80036ec:	540b      	strb	r3, [r1, r0]
				for (spibyte = 1; spibyte < (PARAMLengthBytes + 1); spibyte++) {
 80036ee:	3501      	adds	r5, #1
 80036f0:	b2ed      	uxtb	r5, r5
 80036f2:	42ac      	cmp	r4, r5
 80036f4:	d2f3      	bcs.n	80036de <USART_CheckTextCommandBundle+0x1c2>
 80036f6:	e7af      	b.n	8003658 <USART_CheckTextCommandBundle+0x13c>
					USART_Transmit(&huart2, (uint8_t *)"It is not possible to recognize any numeric value.\r\n\r\n");
 80036f8:	4681      	mov	r9, r0
 80036fa:	4945      	ldr	r1, [pc, #276]	; (8003810 <USART_CheckTextCommandBundle+0x2f4>)
 80036fc:	483e      	ldr	r0, [pc, #248]	; (80037f8 <USART_CheckTextCommandBundle+0x2dc>)
 80036fe:	f7ff fe64 	bl	80033ca <USART_Transmit>
					return RESET;
 8003702:	e737      	b.n	8003574 <USART_CheckTextCommandBundle+0x58>
			switch (L6470_AppCmdId) {
 8003704:	2500      	movs	r5, #0
						(uint8_t*) L6470_Register[L6470_RegId].Name)) {
 8003706:	4e41      	ldr	r6, [pc, #260]	; (800380c <USART_CheckTextCommandBundle+0x2f0>)
				while (!CompareTwoTextString(
 8003708:	b2ec      	uxtb	r4, r5
						(uint8_t*) L6470_Register[L6470_RegId].Name)) {
 800370a:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 800370e:	eb06 0181 	add.w	r1, r6, r1, lsl #2
				while (!CompareTwoTextString(
 8003712:	3101      	adds	r1, #1
 8003714:	4640      	mov	r0, r8
 8003716:	f7ff fe1d 	bl	8003354 <CompareTwoTextString>
 800371a:	4603      	mov	r3, r0
 800371c:	b948      	cbnz	r0, 8003732 <USART_CheckTextCommandBundle+0x216>
					if (L6470_RegId == L6470REGIDSIZE) {
 800371e:	3501      	adds	r5, #1
 8003720:	b2ea      	uxtb	r2, r5
 8003722:	2a19      	cmp	r2, #25
 8003724:	d1f0      	bne.n	8003708 <USART_CheckTextCommandBundle+0x1ec>
						USART_Transmit(&huart2, (uint8_t *)"It is not possible to recognize any L6470 register name.\r\n\r\n");
 8003726:	4699      	mov	r9, r3
 8003728:	4937      	ldr	r1, [pc, #220]	; (8003808 <USART_CheckTextCommandBundle+0x2ec>)
 800372a:	4833      	ldr	r0, [pc, #204]	; (80037f8 <USART_CheckTextCommandBundle+0x2dc>)
 800372c:	f7ff fe4d 	bl	80033ca <USART_Transmit>
						return RESET;
 8003730:	e720      	b.n	8003574 <USART_CheckTextCommandBundle+0x58>
						| L6470_Register[L6470_RegId].Address;
 8003732:	4b36      	ldr	r3, [pc, #216]	; (800380c <USART_CheckTextCommandBundle+0x2f0>)
 8003734:	2214      	movs	r2, #20
 8003736:	fb02 f404 	mul.w	r4, r2, r4
 800373a:	191a      	adds	r2, r3, r4
						+ ((0 * L6470DAISYCHAINSIZE) + L6470_Id)) = 0x20
 800373c:	5d1b      	ldrb	r3, [r3, r4]
 800373e:	f043 0320 	orr.w	r3, r3, #32
 8003742:	9903      	ldr	r1, [sp, #12]
 8003744:	547b      	strb	r3, [r7, r1]
				PARAMLengthBytes = L6470_Register[L6470_RegId].LengthByte;
 8003746:	7b92      	ldrb	r2, [r2, #14]
				for (spibyte = 1; spibyte < (PARAMLengthBytes + 1); spibyte++) {
 8003748:	2a00      	cmp	r2, #0
 800374a:	d085      	beq.n	8003658 <USART_CheckTextCommandBundle+0x13c>
 800374c:	2301      	movs	r3, #1
							+ ((spibyte * L6470DAISYCHAINSIZE) + L6470_Id)) =
 800374e:	2100      	movs	r1, #0
 8003750:	eb07 0043 	add.w	r0, r7, r3, lsl #1
 8003754:	9c03      	ldr	r4, [sp, #12]
 8003756:	5501      	strb	r1, [r0, r4]
				for (spibyte = 1; spibyte < (PARAMLengthBytes + 1); spibyte++) {
 8003758:	3301      	adds	r3, #1
 800375a:	b2db      	uxtb	r3, r3
 800375c:	429a      	cmp	r2, r3
 800375e:	d2f7      	bcs.n	8003750 <USART_CheckTextCommandBundle+0x234>
 8003760:	e77a      	b.n	8003658 <USART_CheckTextCommandBundle+0x13c>
			switch (L6470_AppCmdId) {
 8003762:	2500      	movs	r5, #0
						(uint8_t*) L6470_Direction[L6470_DirId].Mnemonic)) {
 8003764:	4e2b      	ldr	r6, [pc, #172]	; (8003814 <USART_CheckTextCommandBundle+0x2f8>)
 8003766:	b2ec      	uxtb	r4, r5
 8003768:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
				while (!CompareTwoTextString(
 800376c:	4431      	add	r1, r6
 800376e:	4640      	mov	r0, r8
 8003770:	f7ff fdf0 	bl	8003354 <CompareTwoTextString>
 8003774:	4603      	mov	r3, r0
 8003776:	b948      	cbnz	r0, 800378c <USART_CheckTextCommandBundle+0x270>
					if (L6470_DirId == L6470DIRIDSIZE) {
 8003778:	3501      	adds	r5, #1
 800377a:	b2ea      	uxtb	r2, r5
 800377c:	2a02      	cmp	r2, #2
 800377e:	d1f2      	bne.n	8003766 <USART_CheckTextCommandBundle+0x24a>
						USART_Transmit(&huart2, (uint8_t *)"It is not possible to recognize any direction.\r\n\r\n");
 8003780:	4699      	mov	r9, r3
 8003782:	4925      	ldr	r1, [pc, #148]	; (8003818 <USART_CheckTextCommandBundle+0x2fc>)
 8003784:	481c      	ldr	r0, [pc, #112]	; (80037f8 <USART_CheckTextCommandBundle+0x2dc>)
 8003786:	f7ff fe20 	bl	80033ca <USART_Transmit>
						return RESET;
 800378a:	e6f3      	b.n	8003574 <USART_CheckTextCommandBundle+0x58>
						+ ((0 * L6470DAISYCHAINSIZE) + L6470_Id)) = 0x50
 800378c:	f044 0450 	orr.w	r4, r4, #80	; 0x50
 8003790:	9b03      	ldr	r3, [sp, #12]
 8003792:	54fc      	strb	r4, [r7, r3]
				if (!str2num(
 8003794:	a906      	add	r1, sp, #24
 8003796:	f108 000b 	add.w	r0, r8, #11
 800379a:	f7ff fdee 	bl	800337a <str2num>
 800379e:	b140      	cbz	r0, 80037b2 <USART_CheckTextCommandBundle+0x296>
							(uint8_t) (NumericValue >> (8 * (3 - spibyte)));
 80037a0:	9a06      	ldr	r2, [sp, #24]
							+ ((spibyte * L6470DAISYCHAINSIZE) + L6470_Id)) =
 80037a2:	9b03      	ldr	r3, [sp, #12]
 80037a4:	443b      	add	r3, r7
							(uint8_t) (NumericValue >> (8 * (3 - spibyte)));
 80037a6:	0c11      	lsrs	r1, r2, #16
 80037a8:	7099      	strb	r1, [r3, #2]
 80037aa:	0a11      	lsrs	r1, r2, #8
 80037ac:	7119      	strb	r1, [r3, #4]
 80037ae:	719a      	strb	r2, [r3, #6]
				for (spibyte = 1; spibyte < (3 + 1); spibyte++) {
 80037b0:	e752      	b.n	8003658 <USART_CheckTextCommandBundle+0x13c>
					USART_Transmit(&huart2, (uint8_t *)"It is not possible to recognize any numeric value.\r\n\r\n");
 80037b2:	4681      	mov	r9, r0
 80037b4:	4916      	ldr	r1, [pc, #88]	; (8003810 <USART_CheckTextCommandBundle+0x2f4>)
 80037b6:	4810      	ldr	r0, [pc, #64]	; (80037f8 <USART_CheckTextCommandBundle+0x2dc>)
 80037b8:	f7ff fe07 	bl	80033ca <USART_Transmit>
					return RESET;
 80037bc:	e6da      	b.n	8003574 <USART_CheckTextCommandBundle+0x58>
			switch (L6470_AppCmdId) {
 80037be:	2500      	movs	r5, #0
						(uint8_t*) L6470_Direction[L6470_DirId].Mnemonic)) {
 80037c0:	4e14      	ldr	r6, [pc, #80]	; (8003814 <USART_CheckTextCommandBundle+0x2f8>)
 80037c2:	b2ec      	uxtb	r4, r5
 80037c4:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
				while (!CompareTwoTextString(
 80037c8:	4431      	add	r1, r6
 80037ca:	4640      	mov	r0, r8
 80037cc:	f7ff fdc2 	bl	8003354 <CompareTwoTextString>
 80037d0:	4603      	mov	r3, r0
 80037d2:	b948      	cbnz	r0, 80037e8 <USART_CheckTextCommandBundle+0x2cc>
					if (L6470_DirId == L6470DIRIDSIZE) {
 80037d4:	3501      	adds	r5, #1
 80037d6:	b2ea      	uxtb	r2, r5
 80037d8:	2a02      	cmp	r2, #2
 80037da:	d1f2      	bne.n	80037c2 <USART_CheckTextCommandBundle+0x2a6>
						USART_Transmit(&huart2, (uint8_t *)"It is not possible to recognize any direction.\r\n\r\n");
 80037dc:	4699      	mov	r9, r3
 80037de:	490e      	ldr	r1, [pc, #56]	; (8003818 <USART_CheckTextCommandBundle+0x2fc>)
 80037e0:	4805      	ldr	r0, [pc, #20]	; (80037f8 <USART_CheckTextCommandBundle+0x2dc>)
 80037e2:	f7ff fdf2 	bl	80033ca <USART_Transmit>
						return RESET;
 80037e6:	e6c5      	b.n	8003574 <USART_CheckTextCommandBundle+0x58>
						+ ((0 * L6470DAISYCHAINSIZE) + L6470_Id)) = 0x58
 80037e8:	f044 0458 	orr.w	r4, r4, #88	; 0x58
 80037ec:	9b03      	ldr	r3, [sp, #12]
 80037ee:	54fc      	strb	r4, [r7, r3]
				break;
 80037f0:	e732      	b.n	8003658 <USART_CheckTextCommandBundle+0x13c>
 80037f2:	bf00      	nop
 80037f4:	080047cc 	.word	0x080047cc
 80037f8:	200004c8 	.word	0x200004c8
 80037fc:	080040e0 	.word	0x080040e0
 8003800:	080047fc 	.word	0x080047fc
 8003804:	08004840 	.word	0x08004840
 8003808:	08004890 	.word	0x08004890
 800380c:	080041ec 	.word	0x080041ec
 8003810:	080048d0 	.word	0x080048d0
 8003814:	080043e0 	.word	0x080043e0
 8003818:	08004908 	.word	0x08004908
			switch (L6470_AppCmdId) {
 800381c:	2500      	movs	r5, #0
						(uint8_t*) L6470_Direction[L6470_DirId].Mnemonic)) {
 800381e:	4e93      	ldr	r6, [pc, #588]	; (8003a6c <USART_CheckTextCommandBundle+0x550>)
 8003820:	b2ec      	uxtb	r4, r5
 8003822:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
				while (!CompareTwoTextString(
 8003826:	4431      	add	r1, r6
 8003828:	4640      	mov	r0, r8
 800382a:	f7ff fd93 	bl	8003354 <CompareTwoTextString>
 800382e:	4603      	mov	r3, r0
 8003830:	b948      	cbnz	r0, 8003846 <USART_CheckTextCommandBundle+0x32a>
					if (L6470_DirId == L6470DIRIDSIZE) {
 8003832:	3501      	adds	r5, #1
 8003834:	b2ea      	uxtb	r2, r5
 8003836:	2a02      	cmp	r2, #2
 8003838:	d1f2      	bne.n	8003820 <USART_CheckTextCommandBundle+0x304>
						USART_Transmit(&huart2, (uint8_t *)"It is not possible to recognize any direction.\r\n\r\n");
 800383a:	4699      	mov	r9, r3
 800383c:	498c      	ldr	r1, [pc, #560]	; (8003a70 <USART_CheckTextCommandBundle+0x554>)
 800383e:	488d      	ldr	r0, [pc, #564]	; (8003a74 <USART_CheckTextCommandBundle+0x558>)
 8003840:	f7ff fdc3 	bl	80033ca <USART_Transmit>
						return RESET;
 8003844:	e696      	b.n	8003574 <USART_CheckTextCommandBundle+0x58>
						+ ((0 * L6470DAISYCHAINSIZE) + L6470_Id)) = 0x40
 8003846:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 800384a:	9b03      	ldr	r3, [sp, #12]
 800384c:	54fc      	strb	r4, [r7, r3]
				if (!str2num(
 800384e:	a906      	add	r1, sp, #24
 8003850:	f108 000b 	add.w	r0, r8, #11
 8003854:	f7ff fd91 	bl	800337a <str2num>
 8003858:	b140      	cbz	r0, 800386c <USART_CheckTextCommandBundle+0x350>
							(uint8_t) (NumericValue >> (8 * (3 - spibyte)));
 800385a:	9a06      	ldr	r2, [sp, #24]
							+ ((spibyte * L6470DAISYCHAINSIZE) + L6470_Id)) =
 800385c:	9b03      	ldr	r3, [sp, #12]
 800385e:	443b      	add	r3, r7
							(uint8_t) (NumericValue >> (8 * (3 - spibyte)));
 8003860:	0c11      	lsrs	r1, r2, #16
 8003862:	7099      	strb	r1, [r3, #2]
 8003864:	0a11      	lsrs	r1, r2, #8
 8003866:	7119      	strb	r1, [r3, #4]
 8003868:	719a      	strb	r2, [r3, #6]
				for (spibyte = 1; spibyte < (3 + 1); spibyte++) {
 800386a:	e6f5      	b.n	8003658 <USART_CheckTextCommandBundle+0x13c>
					USART_Transmit(&huart2, (uint8_t *)"It is not possible to recognize any numeric value.\r\n\r\n");
 800386c:	4681      	mov	r9, r0
 800386e:	4982      	ldr	r1, [pc, #520]	; (8003a78 <USART_CheckTextCommandBundle+0x55c>)
 8003870:	4880      	ldr	r0, [pc, #512]	; (8003a74 <USART_CheckTextCommandBundle+0x558>)
 8003872:	f7ff fdaa 	bl	80033ca <USART_Transmit>
					return RESET;
 8003876:	e67d      	b.n	8003574 <USART_CheckTextCommandBundle+0x58>
						+ ((0 * L6470DAISYCHAINSIZE) + L6470_Id)) = 0x60;
 8003878:	2360      	movs	r3, #96	; 0x60
 800387a:	9a03      	ldr	r2, [sp, #12]
 800387c:	54bb      	strb	r3, [r7, r2]
				if (!str2num(
 800387e:	a906      	add	r1, sp, #24
 8003880:	4640      	mov	r0, r8
 8003882:	f7ff fd7a 	bl	800337a <str2num>
 8003886:	b140      	cbz	r0, 800389a <USART_CheckTextCommandBundle+0x37e>
							(uint8_t) (NumericValue >> (8 * (3 - spibyte)));
 8003888:	9a06      	ldr	r2, [sp, #24]
							+ ((spibyte * L6470DAISYCHAINSIZE) + L6470_Id)) =
 800388a:	9b03      	ldr	r3, [sp, #12]
 800388c:	443b      	add	r3, r7
							(uint8_t) (NumericValue >> (8 * (3 - spibyte)));
 800388e:	0c11      	lsrs	r1, r2, #16
 8003890:	7099      	strb	r1, [r3, #2]
 8003892:	0a11      	lsrs	r1, r2, #8
 8003894:	7119      	strb	r1, [r3, #4]
 8003896:	719a      	strb	r2, [r3, #6]
				for (spibyte = 1; spibyte < (3 + 1); spibyte++) {
 8003898:	e6de      	b.n	8003658 <USART_CheckTextCommandBundle+0x13c>
					USART_Transmit(&huart2, (uint8_t *)"It is not possible to recognize any numeric value.\r\n\r\n");
 800389a:	4681      	mov	r9, r0
 800389c:	4976      	ldr	r1, [pc, #472]	; (8003a78 <USART_CheckTextCommandBundle+0x55c>)
 800389e:	4875      	ldr	r0, [pc, #468]	; (8003a74 <USART_CheckTextCommandBundle+0x558>)
 80038a0:	f7ff fd93 	bl	80033ca <USART_Transmit>
					return RESET;
 80038a4:	e666      	b.n	8003574 <USART_CheckTextCommandBundle+0x58>
			switch (L6470_AppCmdId) {
 80038a6:	2500      	movs	r5, #0
						(uint8_t*) L6470_Direction[L6470_DirId].Mnemonic)) {
 80038a8:	4e70      	ldr	r6, [pc, #448]	; (8003a6c <USART_CheckTextCommandBundle+0x550>)
 80038aa:	b2ec      	uxtb	r4, r5
 80038ac:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
				while (!CompareTwoTextString(
 80038b0:	4431      	add	r1, r6
 80038b2:	4640      	mov	r0, r8
 80038b4:	f7ff fd4e 	bl	8003354 <CompareTwoTextString>
 80038b8:	4603      	mov	r3, r0
 80038ba:	b948      	cbnz	r0, 80038d0 <USART_CheckTextCommandBundle+0x3b4>
					if (L6470_DirId == L6470DIRIDSIZE) {
 80038bc:	3501      	adds	r5, #1
 80038be:	b2ea      	uxtb	r2, r5
 80038c0:	2a02      	cmp	r2, #2
 80038c2:	d1f2      	bne.n	80038aa <USART_CheckTextCommandBundle+0x38e>
						USART_Transmit(&huart2, (uint8_t *)"It is not possible to recognize any direction.\r\n\r\n");
 80038c4:	4699      	mov	r9, r3
 80038c6:	496a      	ldr	r1, [pc, #424]	; (8003a70 <USART_CheckTextCommandBundle+0x554>)
 80038c8:	486a      	ldr	r0, [pc, #424]	; (8003a74 <USART_CheckTextCommandBundle+0x558>)
 80038ca:	f7ff fd7e 	bl	80033ca <USART_Transmit>
						return RESET;
 80038ce:	e651      	b.n	8003574 <USART_CheckTextCommandBundle+0x58>
						+ ((0 * L6470DAISYCHAINSIZE) + L6470_Id)) = 0x68
 80038d0:	f044 0468 	orr.w	r4, r4, #104	; 0x68
 80038d4:	9b03      	ldr	r3, [sp, #12]
 80038d6:	54fc      	strb	r4, [r7, r3]
				if (!str2num(
 80038d8:	a906      	add	r1, sp, #24
 80038da:	f108 000b 	add.w	r0, r8, #11
 80038de:	f7ff fd4c 	bl	800337a <str2num>
 80038e2:	b140      	cbz	r0, 80038f6 <USART_CheckTextCommandBundle+0x3da>
							(uint8_t) (NumericValue >> (8 * (3 - spibyte)));
 80038e4:	9a06      	ldr	r2, [sp, #24]
							+ ((spibyte * L6470DAISYCHAINSIZE) + L6470_Id)) =
 80038e6:	9b03      	ldr	r3, [sp, #12]
 80038e8:	443b      	add	r3, r7
							(uint8_t) (NumericValue >> (8 * (3 - spibyte)));
 80038ea:	0c11      	lsrs	r1, r2, #16
 80038ec:	7099      	strb	r1, [r3, #2]
 80038ee:	0a11      	lsrs	r1, r2, #8
 80038f0:	7119      	strb	r1, [r3, #4]
 80038f2:	719a      	strb	r2, [r3, #6]
				for (spibyte = 1; spibyte < (3 + 1); spibyte++) {
 80038f4:	e6b0      	b.n	8003658 <USART_CheckTextCommandBundle+0x13c>
					USART_Transmit(&huart2, (uint8_t *)"It is not possible to recognize any numeric value.\r\n\r\n");
 80038f6:	4681      	mov	r9, r0
 80038f8:	495f      	ldr	r1, [pc, #380]	; (8003a78 <USART_CheckTextCommandBundle+0x55c>)
 80038fa:	485e      	ldr	r0, [pc, #376]	; (8003a74 <USART_CheckTextCommandBundle+0x558>)
 80038fc:	f7ff fd65 	bl	80033ca <USART_Transmit>
					return RESET;
 8003900:	e638      	b.n	8003574 <USART_CheckTextCommandBundle+0x58>
			switch (L6470_AppCmdId) {
 8003902:	2500      	movs	r5, #0
				while (!CompareTwoTextString(
 8003904:	b2ec      	uxtb	r4, r5
						(uint8_t*) L6470_ACT[L6470_ActId].Mnemonic)) {
 8003906:	eb04 0184 	add.w	r1, r4, r4, lsl #2
				while (!CompareTwoTextString(
 800390a:	4b5c      	ldr	r3, [pc, #368]	; (8003a7c <USART_CheckTextCommandBundle+0x560>)
 800390c:	4419      	add	r1, r3
 800390e:	4640      	mov	r0, r8
 8003910:	f7ff fd20 	bl	8003354 <CompareTwoTextString>
 8003914:	4603      	mov	r3, r0
 8003916:	b948      	cbnz	r0, 800392c <USART_CheckTextCommandBundle+0x410>
					if (L6470_ActId == L6470ACTIDSIZE) {
 8003918:	3501      	adds	r5, #1
 800391a:	b2ea      	uxtb	r2, r5
 800391c:	2a02      	cmp	r2, #2
 800391e:	d1f1      	bne.n	8003904 <USART_CheckTextCommandBundle+0x3e8>
						USART_Transmit(&huart2, (uint8_t *)"It is not possible to recognize any action.\r\n\r\n");
 8003920:	4699      	mov	r9, r3
 8003922:	4957      	ldr	r1, [pc, #348]	; (8003a80 <USART_CheckTextCommandBundle+0x564>)
 8003924:	4853      	ldr	r0, [pc, #332]	; (8003a74 <USART_CheckTextCommandBundle+0x558>)
 8003926:	f7ff fd50 	bl	80033ca <USART_Transmit>
						return RESET;
 800392a:	e623      	b.n	8003574 <USART_CheckTextCommandBundle+0x58>
						| (L6470_ActId << 3);
 800392c:	00e4      	lsls	r4, r4, #3
 800392e:	f064 047d 	orn	r4, r4, #125	; 0x7d
 8003932:	b2e4      	uxtb	r4, r4
						+ ((0 * L6470DAISYCHAINSIZE) + L6470_Id)) = 0x82
 8003934:	9b03      	ldr	r3, [sp, #12]
 8003936:	54fc      	strb	r4, [r7, r3]
				while (!CompareTwoTextString(
 8003938:	2600      	movs	r6, #0
 800393a:	f108 090b 	add.w	r9, r8, #11
 800393e:	b2f5      	uxtb	r5, r6
						(uint8_t*) L6470_Direction[L6470_DirId].Mnemonic)) {
 8003940:	eb05 01c5 	add.w	r1, r5, r5, lsl #3
				while (!CompareTwoTextString(
 8003944:	4b49      	ldr	r3, [pc, #292]	; (8003a6c <USART_CheckTextCommandBundle+0x550>)
 8003946:	4419      	add	r1, r3
 8003948:	4648      	mov	r0, r9
 800394a:	f7ff fd03 	bl	8003354 <CompareTwoTextString>
 800394e:	4603      	mov	r3, r0
 8003950:	b948      	cbnz	r0, 8003966 <USART_CheckTextCommandBundle+0x44a>
					if (L6470_DirId == L6470DIRIDSIZE) {
 8003952:	3601      	adds	r6, #1
 8003954:	b2f2      	uxtb	r2, r6
 8003956:	2a02      	cmp	r2, #2
 8003958:	d1f1      	bne.n	800393e <USART_CheckTextCommandBundle+0x422>
						USART_Transmit(&huart2, (uint8_t *)"It is not possible to recognize any direction.\r\n\r\n");
 800395a:	4699      	mov	r9, r3
 800395c:	4944      	ldr	r1, [pc, #272]	; (8003a70 <USART_CheckTextCommandBundle+0x554>)
 800395e:	4845      	ldr	r0, [pc, #276]	; (8003a74 <USART_CheckTextCommandBundle+0x558>)
 8003960:	f7ff fd33 	bl	80033ca <USART_Transmit>
						return RESET;
 8003964:	e606      	b.n	8003574 <USART_CheckTextCommandBundle+0x58>
						+ ((0 * L6470DAISYCHAINSIZE) + L6470_Id)) |=
 8003966:	432c      	orrs	r4, r5
 8003968:	9b03      	ldr	r3, [sp, #12]
 800396a:	54fc      	strb	r4, [r7, r3]
				if (!str2num(
 800396c:	a906      	add	r1, sp, #24
 800396e:	f108 0016 	add.w	r0, r8, #22
 8003972:	f7ff fd02 	bl	800337a <str2num>
 8003976:	b140      	cbz	r0, 800398a <USART_CheckTextCommandBundle+0x46e>
							(uint8_t) (NumericValue >> (8 * (3 - spibyte)));
 8003978:	9a06      	ldr	r2, [sp, #24]
							+ ((spibyte * L6470DAISYCHAINSIZE) + L6470_Id)) =
 800397a:	9b03      	ldr	r3, [sp, #12]
 800397c:	443b      	add	r3, r7
							(uint8_t) (NumericValue >> (8 * (3 - spibyte)));
 800397e:	0c11      	lsrs	r1, r2, #16
 8003980:	7099      	strb	r1, [r3, #2]
 8003982:	0a11      	lsrs	r1, r2, #8
 8003984:	7119      	strb	r1, [r3, #4]
 8003986:	719a      	strb	r2, [r3, #6]
				for (spibyte = 1; spibyte < (3 + 1); spibyte++) {
 8003988:	e666      	b.n	8003658 <USART_CheckTextCommandBundle+0x13c>
					USART_Transmit(&huart2, (uint8_t *)"It is not possible to recognize any numeric value.\r\n\r\n");
 800398a:	4681      	mov	r9, r0
 800398c:	493a      	ldr	r1, [pc, #232]	; (8003a78 <USART_CheckTextCommandBundle+0x55c>)
 800398e:	4839      	ldr	r0, [pc, #228]	; (8003a74 <USART_CheckTextCommandBundle+0x558>)
 8003990:	f7ff fd1b 	bl	80033ca <USART_Transmit>
					return RESET;
 8003994:	e5ee      	b.n	8003574 <USART_CheckTextCommandBundle+0x58>
			switch (L6470_AppCmdId) {
 8003996:	2500      	movs	r5, #0
				while (!CompareTwoTextString(
 8003998:	b2ec      	uxtb	r4, r5
						(uint8_t*) L6470_ACT[L6470_ActId].Mnemonic)) {
 800399a:	eb04 0184 	add.w	r1, r4, r4, lsl #2
				while (!CompareTwoTextString(
 800399e:	4b37      	ldr	r3, [pc, #220]	; (8003a7c <USART_CheckTextCommandBundle+0x560>)
 80039a0:	4419      	add	r1, r3
 80039a2:	4640      	mov	r0, r8
 80039a4:	f7ff fcd6 	bl	8003354 <CompareTwoTextString>
 80039a8:	4603      	mov	r3, r0
 80039aa:	b948      	cbnz	r0, 80039c0 <USART_CheckTextCommandBundle+0x4a4>
					if (L6470_ActId == L6470ACTIDSIZE) {
 80039ac:	3501      	adds	r5, #1
 80039ae:	b2ea      	uxtb	r2, r5
 80039b0:	2a02      	cmp	r2, #2
 80039b2:	d1f1      	bne.n	8003998 <USART_CheckTextCommandBundle+0x47c>
						USART_Transmit(&huart2, (uint8_t *)"It is not possible to recognize any action.\r\n\r\n");
 80039b4:	4699      	mov	r9, r3
 80039b6:	4932      	ldr	r1, [pc, #200]	; (8003a80 <USART_CheckTextCommandBundle+0x564>)
 80039b8:	482e      	ldr	r0, [pc, #184]	; (8003a74 <USART_CheckTextCommandBundle+0x558>)
 80039ba:	f7ff fd06 	bl	80033ca <USART_Transmit>
						return RESET;
 80039be:	e5d9      	b.n	8003574 <USART_CheckTextCommandBundle+0x58>
						| (L6470_ActId << 3);
 80039c0:	00e4      	lsls	r4, r4, #3
 80039c2:	f064 046d 	orn	r4, r4, #109	; 0x6d
 80039c6:	b2e4      	uxtb	r4, r4
						+ ((0 * L6470DAISYCHAINSIZE) + L6470_Id)) = 0x92
 80039c8:	9b03      	ldr	r3, [sp, #12]
 80039ca:	54fc      	strb	r4, [r7, r3]
				while (!CompareTwoTextString(
 80039cc:	2600      	movs	r6, #0
 80039ce:	f108 090b 	add.w	r9, r8, #11
 80039d2:	b2f5      	uxtb	r5, r6
						(uint8_t*) L6470_Direction[L6470_DirId].Mnemonic)) {
 80039d4:	eb05 01c5 	add.w	r1, r5, r5, lsl #3
				while (!CompareTwoTextString(
 80039d8:	4b24      	ldr	r3, [pc, #144]	; (8003a6c <USART_CheckTextCommandBundle+0x550>)
 80039da:	4419      	add	r1, r3
 80039dc:	4648      	mov	r0, r9
 80039de:	f7ff fcb9 	bl	8003354 <CompareTwoTextString>
 80039e2:	4603      	mov	r3, r0
 80039e4:	b948      	cbnz	r0, 80039fa <USART_CheckTextCommandBundle+0x4de>
					if (L6470_DirId == L6470DIRIDSIZE) {
 80039e6:	3601      	adds	r6, #1
 80039e8:	b2f2      	uxtb	r2, r6
 80039ea:	2a02      	cmp	r2, #2
 80039ec:	d1f1      	bne.n	80039d2 <USART_CheckTextCommandBundle+0x4b6>
						USART_Transmit(&huart2, (uint8_t *)"It is not possible to recognize any direction.\r\n\r\n");
 80039ee:	4699      	mov	r9, r3
 80039f0:	491f      	ldr	r1, [pc, #124]	; (8003a70 <USART_CheckTextCommandBundle+0x554>)
 80039f2:	4820      	ldr	r0, [pc, #128]	; (8003a74 <USART_CheckTextCommandBundle+0x558>)
 80039f4:	f7ff fce9 	bl	80033ca <USART_Transmit>
						return RESET;
 80039f8:	e5bc      	b.n	8003574 <USART_CheckTextCommandBundle+0x58>
						+ ((0 * L6470DAISYCHAINSIZE) + L6470_Id)) |=
 80039fa:	432c      	orrs	r4, r5
 80039fc:	9b03      	ldr	r3, [sp, #12]
 80039fe:	54fc      	strb	r4, [r7, r3]
				break;
 8003a00:	e62a      	b.n	8003658 <USART_CheckTextCommandBundle+0x13c>
						+ ((0 * L6470DAISYCHAINSIZE) + L6470_Id)) = 0x70;
 8003a02:	2370      	movs	r3, #112	; 0x70
 8003a04:	9a03      	ldr	r2, [sp, #12]
 8003a06:	54bb      	strb	r3, [r7, r2]
				break;
 8003a08:	e626      	b.n	8003658 <USART_CheckTextCommandBundle+0x13c>
						+ ((0 * L6470DAISYCHAINSIZE) + L6470_Id)) = 0x78;
 8003a0a:	2378      	movs	r3, #120	; 0x78
 8003a0c:	9a03      	ldr	r2, [sp, #12]
 8003a0e:	54bb      	strb	r3, [r7, r2]
				break;
 8003a10:	e622      	b.n	8003658 <USART_CheckTextCommandBundle+0x13c>
						+ ((0 * L6470DAISYCHAINSIZE) + L6470_Id)) = 0xD8;
 8003a12:	23d8      	movs	r3, #216	; 0xd8
 8003a14:	9a03      	ldr	r2, [sp, #12]
 8003a16:	54bb      	strb	r3, [r7, r2]
				break;
 8003a18:	e61e      	b.n	8003658 <USART_CheckTextCommandBundle+0x13c>
						+ ((0 * L6470DAISYCHAINSIZE) + L6470_Id)) = 0xC0;
 8003a1a:	23c0      	movs	r3, #192	; 0xc0
 8003a1c:	9a03      	ldr	r2, [sp, #12]
 8003a1e:	54bb      	strb	r3, [r7, r2]
				break;
 8003a20:	e61a      	b.n	8003658 <USART_CheckTextCommandBundle+0x13c>
						+ ((0 * L6470DAISYCHAINSIZE) + L6470_Id)) = 0xB0;
 8003a22:	23b0      	movs	r3, #176	; 0xb0
 8003a24:	9a03      	ldr	r2, [sp, #12]
 8003a26:	54bb      	strb	r3, [r7, r2]
				break;
 8003a28:	e616      	b.n	8003658 <USART_CheckTextCommandBundle+0x13c>
						+ ((0 * L6470DAISYCHAINSIZE) + L6470_Id)) = 0xB8;
 8003a2a:	23b8      	movs	r3, #184	; 0xb8
 8003a2c:	9a03      	ldr	r2, [sp, #12]
 8003a2e:	54bb      	strb	r3, [r7, r2]
				break;
 8003a30:	e612      	b.n	8003658 <USART_CheckTextCommandBundle+0x13c>
						+ ((0 * L6470DAISYCHAINSIZE) + L6470_Id)) = 0xA0;
 8003a32:	23a0      	movs	r3, #160	; 0xa0
 8003a34:	9a03      	ldr	r2, [sp, #12]
 8003a36:	54bb      	strb	r3, [r7, r2]
				break;
 8003a38:	e60e      	b.n	8003658 <USART_CheckTextCommandBundle+0x13c>
						+ ((0 * L6470DAISYCHAINSIZE) + L6470_Id)) = 0xA8;
 8003a3a:	23a8      	movs	r3, #168	; 0xa8
 8003a3c:	9a03      	ldr	r2, [sp, #12]
 8003a3e:	54bb      	strb	r3, [r7, r2]
				break;
 8003a40:	e60a      	b.n	8003658 <USART_CheckTextCommandBundle+0x13c>
						+ ((0 * L6470DAISYCHAINSIZE) + L6470_Id)) = 0xD0;
 8003a42:	23d0      	movs	r3, #208	; 0xd0
 8003a44:	9a03      	ldr	r2, [sp, #12]
 8003a46:	54bb      	strb	r3, [r7, r2]
							+ ((spibyte * L6470DAISYCHAINSIZE) + L6470_Id)) =
 8003a48:	18bb      	adds	r3, r7, r2
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	709a      	strb	r2, [r3, #2]
 8003a4e:	711a      	strb	r2, [r3, #4]
				for (spibyte = 1; spibyte < 2 + 1; spibyte++) {
 8003a50:	e602      	b.n	8003658 <USART_CheckTextCommandBundle+0x13c>
			USART_Transmit(&huart2, (uint8_t *)"Both entered commands are addressing the same L6470.\r\n\r\n");
 8003a52:	490c      	ldr	r1, [pc, #48]	; (8003a84 <USART_CheckTextCommandBundle+0x568>)
 8003a54:	4807      	ldr	r0, [pc, #28]	; (8003a74 <USART_CheckTextCommandBundle+0x558>)
 8003a56:	f7ff fcb8 	bl	80033ca <USART_Transmit>
			return RESET;
 8003a5a:	f04f 0900 	mov.w	r9, #0
 8003a5e:	e589      	b.n	8003574 <USART_CheckTextCommandBundle+0x58>
	return SET;
 8003a60:	f04f 0901 	mov.w	r9, #1
 8003a64:	e586      	b.n	8003574 <USART_CheckTextCommandBundle+0x58>
 8003a66:	f04f 0901 	mov.w	r9, #1
 8003a6a:	e583      	b.n	8003574 <USART_CheckTextCommandBundle+0x58>
 8003a6c:	080043e0 	.word	0x080043e0
 8003a70:	08004908 	.word	0x08004908
 8003a74:	200004c8 	.word	0x200004c8
 8003a78:	080048d0 	.word	0x080048d0
 8003a7c:	080043f4 	.word	0x080043f4
 8003a80:	0800493c 	.word	0x0800493c
 8003a84:	0800496c 	.word	0x0800496c

08003a88 <USART_TxWelcomeMessage>:
void USART_TxWelcomeMessage(void) {
 8003a88:	b510      	push	{r4, lr}
	USART_Transmit(&huart2, (uint8_t* )"\r\n");
 8003a8a:	4c13      	ldr	r4, [pc, #76]	; (8003ad8 <USART_TxWelcomeMessage+0x50>)
 8003a8c:	4913      	ldr	r1, [pc, #76]	; (8003adc <USART_TxWelcomeMessage+0x54>)
 8003a8e:	4620      	mov	r0, r4
 8003a90:	f7ff fc9b 	bl	80033ca <USART_Transmit>
	USART_Transmit(&huart2, (uint8_t* )" X-NUCLEO-IHM02A1\r\n");
 8003a94:	4912      	ldr	r1, [pc, #72]	; (8003ae0 <USART_TxWelcomeMessage+0x58>)
 8003a96:	4620      	mov	r0, r4
 8003a98:	f7ff fc97 	bl	80033ca <USART_Transmit>
	USART_Transmit(&huart2, (uint8_t* )" -------------------------------------------\r\n");
 8003a9c:	4911      	ldr	r1, [pc, #68]	; (8003ae4 <USART_TxWelcomeMessage+0x5c>)
 8003a9e:	4620      	mov	r0, r4
 8003aa0:	f7ff fc93 	bl	80033ca <USART_Transmit>
	USART_Transmit(&huart2, (uint8_t* )" Dual L6470 Expansion Board for STM32 NUCLEO\r\n");
 8003aa4:	4910      	ldr	r1, [pc, #64]	; (8003ae8 <USART_TxWelcomeMessage+0x60>)
 8003aa6:	4620      	mov	r0, r4
 8003aa8:	f7ff fc8f 	bl	80033ca <USART_Transmit>
	USART_Transmit(&huart2, (uint8_t* )" Stacked on ");
 8003aac:	490f      	ldr	r1, [pc, #60]	; (8003aec <USART_TxWelcomeMessage+0x64>)
 8003aae:	4620      	mov	r0, r4
 8003ab0:	f7ff fc8b 	bl	80033ca <USART_Transmit>
	USART_Transmit(&huart2, NUCLEO_BOARD_NAME);
 8003ab4:	490e      	ldr	r1, [pc, #56]	; (8003af0 <USART_TxWelcomeMessage+0x68>)
 8003ab6:	4620      	mov	r0, r4
 8003ab8:	f7ff fc87 	bl	80033ca <USART_Transmit>
	USART_Transmit(&huart2, (uint8_t* )" \r\n");
 8003abc:	490d      	ldr	r1, [pc, #52]	; (8003af4 <USART_TxWelcomeMessage+0x6c>)
 8003abe:	4620      	mov	r0, r4
 8003ac0:	f7ff fc83 	bl	80033ca <USART_Transmit>
	USART_Transmit(&huart2, (uint8_t* )" X-CUBE-SPN2 v1.1.1\r\n");
 8003ac4:	490c      	ldr	r1, [pc, #48]	; (8003af8 <USART_TxWelcomeMessage+0x70>)
 8003ac6:	4620      	mov	r0, r4
 8003ac8:	f7ff fc7f 	bl	80033ca <USART_Transmit>
	USART_Transmit(&huart2, (uint8_t* )" STMicroelectronics, 2015\r\n\r\n");
 8003acc:	490b      	ldr	r1, [pc, #44]	; (8003afc <USART_TxWelcomeMessage+0x74>)
 8003ace:	4620      	mov	r0, r4
 8003ad0:	f7ff fc7b 	bl	80033ca <USART_Transmit>
}
 8003ad4:	bd10      	pop	{r4, pc}
 8003ad6:	bf00      	nop
 8003ad8:	200004c8 	.word	0x200004c8
 8003adc:	0800483c 	.word	0x0800483c
 8003ae0:	080049a8 	.word	0x080049a8
 8003ae4:	080049bc 	.word	0x080049bc
 8003ae8:	080049ec 	.word	0x080049ec
 8003aec:	08004a1c 	.word	0x08004a1c
 8003af0:	08004a2c 	.word	0x08004a2c
 8003af4:	08004a3c 	.word	0x08004a3c
 8003af8:	08004a40 	.word	0x08004a40
 8003afc:	08004a58 	.word	0x08004a58

08003b00 <USART_ITCharManager>:
 * @brief  Handle text character just received.
 * @param  huart pointer to a UART_HandleTypeDef structure that contains
 *               the configuration information for the specified UART module.
 * @note To use inside USART2_IRQHandler function.
 */
void USART_ITCharManager(UART_HandleTypeDef* huart) {
 8003b00:	b510      	push	{r4, lr}
 8003b02:	4604      	mov	r4, r0
	uint8_t UART_Receive_IT_Char;

	UART_Receive_IT_Char = (uint8_t) (huart->Instance->USART_DATA_REGISTER);
 8003b04:	6803      	ldr	r3, [r0, #0]
 8003b06:	685b      	ldr	r3, [r3, #4]
	/* Checks the buffer full or retur carriage  */
	if ((huart->RxXferCount == 1) || (UART_Receive_IT_Char == '\r')) {
 8003b08:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
 8003b0a:	2a01      	cmp	r2, #1
 8003b0c:	d003      	beq.n	8003b16 <USART_ITCharManager+0x16>
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	2b0d      	cmp	r3, #13
 8003b12:	d000      	beq.n	8003b16 <USART_ITCharManager+0x16>
			__HAL_UART_DISABLE_IT(huart, UART_IT_ERR);

			huart->State = HAL_UART_STATE_READY;
		}
	}
}
 8003b14:	bd10      	pop	{r4, pc}
		huart->RxXferCount += 1;
 8003b16:	3201      	adds	r2, #1
 8003b18:	85e2      	strh	r2, [r4, #46]	; 0x2e
		huart->pRxBuffPtr -= 1;
 8003b1a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003b1c:	1e5a      	subs	r2, r3, #1
 8003b1e:	62a2      	str	r2, [r4, #40]	; 0x28
		*(huart->pRxBuffPtr) = '\0';
 8003b20:	2200      	movs	r2, #0
 8003b22:	f803 2c01 	strb.w	r2, [r3, #-1]
		USART_Transmit(huart, (uint8_t *)"\r\n");
 8003b26:	4912      	ldr	r1, [pc, #72]	; (8003b70 <USART_ITCharManager+0x70>)
 8003b28:	4620      	mov	r0, r4
 8003b2a:	f7ff fc4e 	bl	80033ca <USART_Transmit>
		while (HAL_IS_BIT_SET(huart->Instance->USART_STATUS_REGISTER,
 8003b2e:	6822      	ldr	r2, [r4, #0]
 8003b30:	6813      	ldr	r3, [r2, #0]
 8003b32:	f013 0f20 	tst.w	r3, #32
 8003b36:	d1fb      	bne.n	8003b30 <USART_ITCharManager+0x30>
		__HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003b38:	68d3      	ldr	r3, [r2, #12]
 8003b3a:	f023 0320 	bic.w	r3, r3, #32
 8003b3e:	60d3      	str	r3, [r2, #12]
		if (huart->State == HAL_UART_STATE_BUSY_TX_RX) {
 8003b40:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	2b32      	cmp	r3, #50	; 0x32
 8003b48:	d00d      	beq.n	8003b66 <USART_ITCharManager+0x66>
			__HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003b4a:	6822      	ldr	r2, [r4, #0]
 8003b4c:	68d3      	ldr	r3, [r2, #12]
 8003b4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b52:	60d3      	str	r3, [r2, #12]
			__HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003b54:	6822      	ldr	r2, [r4, #0]
 8003b56:	6953      	ldr	r3, [r2, #20]
 8003b58:	f023 0301 	bic.w	r3, r3, #1
 8003b5c:	6153      	str	r3, [r2, #20]
			huart->State = HAL_UART_STATE_READY;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 8003b64:	e7d6      	b.n	8003b14 <USART_ITCharManager+0x14>
			huart->State = HAL_UART_STATE_BUSY_TX;
 8003b66:	2312      	movs	r3, #18
 8003b68:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 8003b6c:	e7d2      	b.n	8003b14 <USART_ITCharManager+0x14>
 8003b6e:	bf00      	nop
 8003b70:	0800483c 	.word	0x0800483c

08003b74 <Fill_L6470_DaisyChainMnemonic>:
 *
 * @note   This structure will contain the assigned names about the L6470
 *         devices inside the daisy chain and theirs related motors.
 * @note   Its size and contents is updated at boot in relation to the L6470DAISYCHAINSIZE.
 */
void Fill_L6470_DaisyChainMnemonic(void) {
 8003b74:	b570      	push	{r4, r5, r6, lr}
		} else {
			c10 = '0' + (i / 10);
			c1 = '0' + (i - ((i / 10) * 10));
		}

		L6470_DaisyChainMnemonic[i].L6470IdMnemonic[0] = 'L';
 8003b76:	4b20      	ldr	r3, [pc, #128]	; (8003bf8 <Fill_L6470_DaisyChainMnemonic+0x84>)
 8003b78:	264c      	movs	r6, #76	; 0x4c
 8003b7a:	f883 6040 	strb.w	r6, [r3, #64]	; 0x40
		L6470_DaisyChainMnemonic[i].L6470IdMnemonic[1] = '6';
 8003b7e:	2536      	movs	r5, #54	; 0x36
 8003b80:	f883 5041 	strb.w	r5, [r3, #65]	; 0x41
		L6470_DaisyChainMnemonic[i].L6470IdMnemonic[2] = '4';
 8003b84:	2434      	movs	r4, #52	; 0x34
 8003b86:	f883 4042 	strb.w	r4, [r3, #66]	; 0x42
		L6470_DaisyChainMnemonic[i].L6470IdMnemonic[3] = '7';
 8003b8a:	f04f 0e37 	mov.w	lr, #55	; 0x37
 8003b8e:	f883 e043 	strb.w	lr, [r3, #67]	; 0x43
		L6470_DaisyChainMnemonic[i].L6470IdMnemonic[4] = '0';
 8003b92:	2130      	movs	r1, #48	; 0x30
 8003b94:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
		L6470_DaisyChainMnemonic[i].L6470IdMnemonic[5] = '#';
 8003b98:	f04f 0c23 	mov.w	ip, #35	; 0x23
 8003b9c:	f883 c045 	strb.w	ip, [r3, #69]	; 0x45
		L6470_DaisyChainMnemonic[i].L6470IdMnemonic[6] = c10;
 8003ba0:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
		L6470_DaisyChainMnemonic[i].L6470IdMnemonic[7] = c1;
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
		L6470_DaisyChainMnemonic[i].L6470IdMnemonic[8] = '\0';
 8003baa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		L6470_DaisyChainMnemonic[i].MotorIdMnemonic[0] = 'M';
 8003bae:	204d      	movs	r0, #77	; 0x4d
 8003bb0:	f883 0049 	strb.w	r0, [r3, #73]	; 0x49
		L6470_DaisyChainMnemonic[i].MotorIdMnemonic[1] = c10;
 8003bb4:	f883 104a 	strb.w	r1, [r3, #74]	; 0x4a
		L6470_DaisyChainMnemonic[i].MotorIdMnemonic[2] = c1;
 8003bb8:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		L6470_DaisyChainMnemonic[i].MotorIdMnemonic[3] = '\0';
 8003bbc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		L6470_DaisyChainMnemonic[i].L6470IdMnemonic[0] = 'L';
 8003bc0:	f883 604d 	strb.w	r6, [r3, #77]	; 0x4d
		L6470_DaisyChainMnemonic[i].L6470IdMnemonic[1] = '6';
 8003bc4:	f883 504e 	strb.w	r5, [r3, #78]	; 0x4e
		L6470_DaisyChainMnemonic[i].L6470IdMnemonic[2] = '4';
 8003bc8:	f883 404f 	strb.w	r4, [r3, #79]	; 0x4f
		L6470_DaisyChainMnemonic[i].L6470IdMnemonic[3] = '7';
 8003bcc:	f883 e050 	strb.w	lr, [r3, #80]	; 0x50
		L6470_DaisyChainMnemonic[i].L6470IdMnemonic[4] = '0';
 8003bd0:	f883 1051 	strb.w	r1, [r3, #81]	; 0x51
		L6470_DaisyChainMnemonic[i].L6470IdMnemonic[5] = '#';
 8003bd4:	f883 c052 	strb.w	ip, [r3, #82]	; 0x52
		L6470_DaisyChainMnemonic[i].L6470IdMnemonic[6] = c10;
 8003bd8:	2131      	movs	r1, #49	; 0x31
 8003bda:	f883 1053 	strb.w	r1, [r3, #83]	; 0x53
		L6470_DaisyChainMnemonic[i].L6470IdMnemonic[7] = c1;
 8003bde:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		L6470_DaisyChainMnemonic[i].L6470IdMnemonic[8] = '\0';
 8003be2:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
		L6470_DaisyChainMnemonic[i].MotorIdMnemonic[0] = 'M';
 8003be6:	f883 0056 	strb.w	r0, [r3, #86]	; 0x56
		L6470_DaisyChainMnemonic[i].MotorIdMnemonic[1] = c10;
 8003bea:	f883 1057 	strb.w	r1, [r3, #87]	; 0x57
		L6470_DaisyChainMnemonic[i].MotorIdMnemonic[2] = c1;
 8003bee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		L6470_DaisyChainMnemonic[i].MotorIdMnemonic[3] = '\0';
 8003bf2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	}
}
 8003bf6:	bd70      	pop	{r4, r5, r6, pc}
 8003bf8:	200004c8 	.word	0x200004c8

08003bfc <num2hex>:
 * @param  num         The integer number to convert.
 * @param  HexFormat   The output format about hexadecimal number.
 *
 * @retval uint8_t*    The address of the string text for the converted hexadecimal number.
 */
uint8_t* num2hex(uint32_t num, eHexFormat HexFormat) {
 8003bfc:	b510      	push	{r4, lr}
	static uint8_t HexValue[8 + 1];
	uint8_t i;
	uint8_t dummy;
	uint8_t HexDigits = 0;

	switch (HexFormat) {
 8003bfe:	2903      	cmp	r1, #3
 8003c00:	d82c      	bhi.n	8003c5c <num2hex+0x60>
 8003c02:	e8df f001 	tbb	[pc, r1]
 8003c06:	022e      	.short	0x022e
 8003c08:	2831      	.short	0x2831
 8003c0a:	f04f 0c02 	mov.w	ip, #2
	case DOUBLEWORD_F:
		HexDigits = 8;
		break;
	}

	for (i = 0; i < HexDigits; i++) {
 8003c0e:	f10c 32ff 	add.w	r2, ip, #4294967295
 8003c12:	0092      	lsls	r2, r2, #2
 8003c14:	4c16      	ldr	r4, [pc, #88]	; (8003c70 <num2hex+0x74>)
uint8_t* num2hex(uint32_t num, eHexFormat HexFormat) {
 8003c16:	2100      	movs	r1, #0
		HexValue[i] = '\0';
		dummy = (num & (0x0F << (((HexDigits - 1) - i) * 4)))
 8003c18:	f04f 0e0f 	mov.w	lr, #15
 8003c1c:	fa0e f302 	lsl.w	r3, lr, r2
 8003c20:	4003      	ands	r3, r0
				>> (((HexDigits - 1) - i) * 4);
 8003c22:	40d3      	lsrs	r3, r2
		dummy = (num & (0x0F << (((HexDigits - 1) - i) * 4)))
 8003c24:	b2db      	uxtb	r3, r3
		if (dummy < 0x0A) {
 8003c26:	2b09      	cmp	r3, #9
			HexValue[i] = dummy + '0';
 8003c28:	bf94      	ite	ls
 8003c2a:	3330      	addls	r3, #48	; 0x30
		} else {
			HexValue[i] = (dummy - 0x0A) + 'A';
 8003c2c:	3337      	addhi	r3, #55	; 0x37
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	f804 3f01 	strb.w	r3, [r4, #1]!
	for (i = 0; i < HexDigits; i++) {
 8003c34:	3101      	adds	r1, #1
 8003c36:	3a04      	subs	r2, #4
 8003c38:	b2cb      	uxtb	r3, r1
 8003c3a:	459c      	cmp	ip, r3
 8003c3c:	d8ee      	bhi.n	8003c1c <num2hex+0x20>
 8003c3e:	f1bc 0f00 	cmp.w	ip, #0
 8003c42:	bf08      	it	eq
 8003c44:	f04f 0c01 	moveq.w	ip, #1
		}
	}
	HexValue[i] = '\0';
 8003c48:	480a      	ldr	r0, [pc, #40]	; (8003c74 <num2hex+0x78>)
 8003c4a:	4484      	add	ip, r0
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	f88c 305c 	strb.w	r3, [ip, #92]	; 0x5c

	return HexValue;
 8003c52:	305c      	adds	r0, #92	; 0x5c
}
 8003c54:	bd10      	pop	{r4, pc}
		HexDigits = 8;
 8003c56:	f04f 0c08 	mov.w	ip, #8
		break;
 8003c5a:	e7d8      	b.n	8003c0e <num2hex+0x12>
	switch (HexFormat) {
 8003c5c:	f04f 0c00 	mov.w	ip, #0
 8003c60:	e7f2      	b.n	8003c48 <num2hex+0x4c>
		HexDigits = 1;
 8003c62:	f04f 0c01 	mov.w	ip, #1
 8003c66:	e7d2      	b.n	8003c0e <num2hex+0x12>
		HexDigits = 4;
 8003c68:	f04f 0c04 	mov.w	ip, #4
 8003c6c:	e7cf      	b.n	8003c0e <num2hex+0x12>
 8003c6e:	bf00      	nop
 8003c70:	20000523 	.word	0x20000523
 8003c74:	200004c8 	.word	0x200004c8

08003c78 <USART_DecodeTextString>:
		uint8_t* pL6470_DaisyChainSpiRxStruct) {
 8003c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c7c:	b083      	sub	sp, #12
 8003c7e:	460d      	mov	r5, r1
 8003c80:	4614      	mov	r4, r2
 8003c82:	9300      	str	r3, [sp, #0]
	if (USART_SplitTextString(pTextString, pL6470_TextCommandBundle)
 8003c84:	f7ff fbac 	bl	80033e0 <USART_SplitTextString>
 8003c88:	b120      	cbz	r0, 8003c94 <USART_DecodeTextString+0x1c>
			&& USART_CheckTextCommandBundle(pL6470_TextCommandBundle,
 8003c8a:	4621      	mov	r1, r4
 8003c8c:	4628      	mov	r0, r5
 8003c8e:	f7ff fc45 	bl	800351c <USART_CheckTextCommandBundle>
 8003c92:	b938      	cbnz	r0, 8003ca4 <USART_DecodeTextString+0x2c>
		USART_Transmit(&huart2, (uint8_t* )"Please, enter a new command string!\r\n\r\n");
 8003c94:	494b      	ldr	r1, [pc, #300]	; (8003dc4 <USART_DecodeTextString+0x14c>)
 8003c96:	484c      	ldr	r0, [pc, #304]	; (8003dc8 <USART_DecodeTextString+0x150>)
 8003c98:	f7ff fb97 	bl	80033ca <USART_Transmit>
}
 8003c9c:	484b      	ldr	r0, [pc, #300]	; (8003dcc <USART_DecodeTextString+0x154>)
 8003c9e:	b003      	add	sp, #12
 8003ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		USART_Transmit(&huart2, (uint8_t *)"Perform the entered L6470 Application Command...\r\n");
 8003ca4:	4e48      	ldr	r6, [pc, #288]	; (8003dc8 <USART_DecodeTextString+0x150>)
 8003ca6:	494a      	ldr	r1, [pc, #296]	; (8003dd0 <USART_DecodeTextString+0x158>)
 8003ca8:	4630      	mov	r0, r6
 8003caa:	f7ff fb8e 	bl	80033ca <USART_Transmit>
		L6470_DaisyChainCommand(pL6470_DaisyChainSpiTxStruct,
 8003cae:	9900      	ldr	r1, [sp, #0]
 8003cb0:	4620      	mov	r0, r4
 8003cb2:	f7fc fdf3 	bl	800089c <L6470_DaisyChainCommand>
		for (L6470_Id = 0; L6470_Id < L6470DAISYCHAINSIZE; L6470_Id++) {
 8003cb6:	f106 0768 	add.w	r7, r6, #104	; 0x68
 8003cba:	3c01      	subs	r4, #1
 8003cbc:	3640      	adds	r6, #64	; 0x40
 8003cbe:	2500      	movs	r5, #0
						!= (L6470_Register[L6470_RegId].Address))
 8003cc0:	f8df 9120 	ldr.w	r9, [pc, #288]	; 8003de4 <USART_DecodeTextString+0x16c>
				USART_Transmit(&huart2,
 8003cc4:	f1a6 0a40 	sub.w	sl, r6, #64	; 0x40
			ReceivedValue[L6470_Id] = 0x00;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	f847 3b04 	str.w	r3, [r7], #4
			if ((*(pL6470_DaisyChainSpiTxStruct
 8003cce:	3401      	adds	r4, #1
 8003cd0:	46a3      	mov	fp, r4
 8003cd2:	7823      	ldrb	r3, [r4, #0]
 8003cd4:	f003 02e0 	and.w	r2, r3, #224	; 0xe0
 8003cd8:	2a20      	cmp	r2, #32
 8003cda:	d00d      	beq.n	8003cf8 <USART_DecodeTextString+0x80>
			if (*(pL6470_DaisyChainSpiTxStruct
 8003cdc:	f89b 3000 	ldrb.w	r3, [fp]
 8003ce0:	2bd0      	cmp	r3, #208	; 0xd0
 8003ce2:	d052      	beq.n	8003d8a <USART_DecodeTextString+0x112>
		for (L6470_Id = 0; L6470_Id < L6470DAISYCHAINSIZE; L6470_Id++) {
 8003ce4:	3501      	adds	r5, #1
 8003ce6:	b2ed      	uxtb	r5, r5
 8003ce8:	360d      	adds	r6, #13
 8003cea:	2d02      	cmp	r5, #2
 8003cec:	d1ec      	bne.n	8003cc8 <USART_DecodeTextString+0x50>
		USART_Transmit(&huart2, (uint8_t* )"\r\n");
 8003cee:	4939      	ldr	r1, [pc, #228]	; (8003dd4 <USART_DecodeTextString+0x15c>)
 8003cf0:	4835      	ldr	r0, [pc, #212]	; (8003dc8 <USART_DecodeTextString+0x150>)
 8003cf2:	f7ff fb6a 	bl	80033ca <USART_Transmit>
 8003cf6:	e7d1      	b.n	8003c9c <USART_DecodeTextString+0x24>
				while ((*(pL6470_DaisyChainSpiTxStruct
 8003cf8:	f003 021f 	and.w	r2, r3, #31
 8003cfc:	f899 3000 	ldrb.w	r3, [r9]
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d03d      	beq.n	8003d80 <USART_DecodeTextString+0x108>
				L6470_RegId = (eL6470_RegId_t) 0;
 8003d04:	2300      	movs	r3, #0
					L6470_RegId++;
 8003d06:	3301      	adds	r3, #1
 8003d08:	b2db      	uxtb	r3, r3
						!= (L6470_Register[L6470_RegId].Address))
 8003d0a:	4698      	mov	r8, r3
 8003d0c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
				while ((*(pL6470_DaisyChainSpiTxStruct
 8003d10:	f819 1021 	ldrb.w	r1, [r9, r1, lsl #2]
 8003d14:	4291      	cmp	r1, r2
 8003d16:	d1f6      	bne.n	8003d06 <USART_DecodeTextString+0x8e>
				PARAMLengthBytes = L6470_Register[L6470_RegId].LengthByte;
 8003d18:	eb08 0388 	add.w	r3, r8, r8, lsl #2
 8003d1c:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8003d20:	7b9a      	ldrb	r2, [r3, #14]
				switch (PARAMLengthBytes) {
 8003d22:	2a01      	cmp	r2, #1
 8003d24:	d02f      	beq.n	8003d86 <USART_DecodeTextString+0x10e>
 8003d26:	2a02      	cmp	r2, #2
 8003d28:	bf0c      	ite	eq
 8003d2a:	4613      	moveq	r3, r2
 8003d2c:	2303      	movne	r3, #3
 8003d2e:	9301      	str	r3, [sp, #4]
				ReceivedValue[L6470_Id] = L6470_ExtractReturnedData(L6470_Id,
 8003d30:	9900      	ldr	r1, [sp, #0]
 8003d32:	4628      	mov	r0, r5
 8003d34:	f7fc ffb0 	bl	8000c98 <L6470_ExtractReturnedData>
 8003d38:	f847 0c04 	str.w	r0, [r7, #-4]
				USART_Transmit(&huart2,
 8003d3c:	4631      	mov	r1, r6
 8003d3e:	4650      	mov	r0, sl
 8003d40:	f7ff fb43 	bl	80033ca <USART_Transmit>
				USART_Transmit(&huart2, (uint8_t* )" ");
 8003d44:	4924      	ldr	r1, [pc, #144]	; (8003dd8 <USART_DecodeTextString+0x160>)
 8003d46:	4650      	mov	r0, sl
 8003d48:	f7ff fb3f 	bl	80033ca <USART_Transmit>
						(uint8_t*) (L6470_Register[L6470_RegId].Name));
 8003d4c:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 8003d50:	eb09 0188 	add.w	r1, r9, r8, lsl #2
				USART_Transmit(&huart2,
 8003d54:	3101      	adds	r1, #1
 8003d56:	4650      	mov	r0, sl
 8003d58:	f7ff fb37 	bl	80033ca <USART_Transmit>
				USART_Transmit(&huart2, (uint8_t* )" value is 0x");
 8003d5c:	491f      	ldr	r1, [pc, #124]	; (8003ddc <USART_DecodeTextString+0x164>)
 8003d5e:	4650      	mov	r0, sl
 8003d60:	f7ff fb33 	bl	80033ca <USART_Transmit>
				USART_Transmit(&huart2,
 8003d64:	9901      	ldr	r1, [sp, #4]
 8003d66:	f857 0c04 	ldr.w	r0, [r7, #-4]
 8003d6a:	f7ff ff47 	bl	8003bfc <num2hex>
 8003d6e:	4601      	mov	r1, r0
 8003d70:	4650      	mov	r0, sl
 8003d72:	f7ff fb2a 	bl	80033ca <USART_Transmit>
				USART_Transmit(&huart2, (uint8_t* )"\r\n");
 8003d76:	4917      	ldr	r1, [pc, #92]	; (8003dd4 <USART_DecodeTextString+0x15c>)
 8003d78:	4650      	mov	r0, sl
 8003d7a:	f7ff fb26 	bl	80033ca <USART_Transmit>
 8003d7e:	e7ad      	b.n	8003cdc <USART_DecodeTextString+0x64>
						!= (L6470_Register[L6470_RegId].Address))
 8003d80:	f04f 0800 	mov.w	r8, #0
 8003d84:	e7c8      	b.n	8003d18 <USART_DecodeTextString+0xa0>
					HexFormat = BYTE_F;
 8003d86:	9201      	str	r2, [sp, #4]
 8003d88:	e7d2      	b.n	8003d30 <USART_DecodeTextString+0xb8>
				ReceivedValue[L6470_Id] = L6470_ExtractReturnedData(L6470_Id,
 8003d8a:	2202      	movs	r2, #2
 8003d8c:	9900      	ldr	r1, [sp, #0]
 8003d8e:	4628      	mov	r0, r5
 8003d90:	f7fc ff82 	bl	8000c98 <L6470_ExtractReturnedData>
 8003d94:	f847 0c04 	str.w	r0, [r7, #-4]
				USART_Transmit(&huart2,
 8003d98:	4631      	mov	r1, r6
 8003d9a:	4650      	mov	r0, sl
 8003d9c:	f7ff fb15 	bl	80033ca <USART_Transmit>
				USART_Transmit(&huart2, (uint8_t* )" STATUS value is 0x");
 8003da0:	490f      	ldr	r1, [pc, #60]	; (8003de0 <USART_DecodeTextString+0x168>)
 8003da2:	4650      	mov	r0, sl
 8003da4:	f7ff fb11 	bl	80033ca <USART_Transmit>
				USART_Transmit(&huart2,
 8003da8:	2102      	movs	r1, #2
 8003daa:	f857 0c04 	ldr.w	r0, [r7, #-4]
 8003dae:	f7ff ff25 	bl	8003bfc <num2hex>
 8003db2:	4601      	mov	r1, r0
 8003db4:	4650      	mov	r0, sl
 8003db6:	f7ff fb08 	bl	80033ca <USART_Transmit>
				USART_Transmit(&huart2, (uint8_t* )"\r\n");
 8003dba:	4906      	ldr	r1, [pc, #24]	; (8003dd4 <USART_DecodeTextString+0x15c>)
 8003dbc:	4650      	mov	r0, sl
 8003dbe:	f7ff fb04 	bl	80033ca <USART_Transmit>
 8003dc2:	e78f      	b.n	8003ce4 <USART_DecodeTextString+0x6c>
 8003dc4:	08004ad4 	.word	0x08004ad4
 8003dc8:	200004c8 	.word	0x200004c8
 8003dcc:	20000530 	.word	0x20000530
 8003dd0:	08004a78 	.word	0x08004a78
 8003dd4:	0800483c 	.word	0x0800483c
 8003dd8:	08004aac 	.word	0x08004aac
 8003ddc:	08004ab0 	.word	0x08004ab0
 8003de0:	08004ac0 	.word	0x08004ac0
 8003de4:	080041ec 	.word	0x080041ec

08003de8 <USART_CheckAppCmd>:
void USART_CheckAppCmd(void) {
 8003de8:	b508      	push	{r3, lr}
	if (huart2.State == HAL_UART_STATE_READY) {
 8003dea:	4b0d      	ldr	r3, [pc, #52]	; (8003e20 <USART_CheckAppCmd+0x38>)
 8003dec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d000      	beq.n	8003df8 <USART_CheckAppCmd+0x10>
}
 8003df6:	bd08      	pop	{r3, pc}
		if (UsartTextString[0] != '\0') {
 8003df8:	4b09      	ldr	r3, [pc, #36]	; (8003e20 <USART_CheckAppCmd+0x38>)
 8003dfa:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003dfe:	b933      	cbnz	r3, 8003e0e <USART_CheckAppCmd+0x26>
		NucleoUsartReceiveIT(&huart2, UsartTextString, USARTTEXTSTRINGSIZE);
 8003e00:	4807      	ldr	r0, [pc, #28]	; (8003e20 <USART_CheckAppCmd+0x38>)
 8003e02:	2240      	movs	r2, #64	; 0x40
 8003e04:	f100 0170 	add.w	r1, r0, #112	; 0x70
 8003e08:	f7ff f8df 	bl	8002fca <HAL_UART_Receive_IT>
}
 8003e0c:	e7f3      	b.n	8003df6 <USART_CheckAppCmd+0xe>
			USART_DecodeTextString(UsartTextString, L6470_TextCommandBundle,
 8003e0e:	4804      	ldr	r0, [pc, #16]	; (8003e20 <USART_CheckAppCmd+0x38>)
 8003e10:	4b04      	ldr	r3, [pc, #16]	; (8003e24 <USART_CheckAppCmd+0x3c>)
 8003e12:	4a05      	ldr	r2, [pc, #20]	; (8003e28 <USART_CheckAppCmd+0x40>)
 8003e14:	f100 01b0 	add.w	r1, r0, #176	; 0xb0
 8003e18:	3070      	adds	r0, #112	; 0x70
 8003e1a:	f7ff ff2d 	bl	8003c78 <USART_DecodeTextString>
 8003e1e:	e7ef      	b.n	8003e00 <USART_CheckAppCmd+0x18>
 8003e20:	200004c8 	.word	0x200004c8
 8003e24:	200003b4 	.word	0x200003b4
 8003e28:	200003ac 	.word	0x200003ac

08003e2c <limitSwitch_Init>:
/**
  * @brief The FW main module
  */

void limitSwitch_Init()
{
 8003e2c:	b570      	push	{r4, r5, r6, lr}
 8003e2e:	b094      	sub	sp, #80	; 0x50
	  GPIO_InitTypeDef PA6_init, PA8_init, PA9_init, PA10_init;

	  // PA6
	  PA6_init.Pin = GPIO_PIN_6;
 8003e30:	2340      	movs	r3, #64	; 0x40
 8003e32:	930f      	str	r3, [sp, #60]	; 0x3c
	  PA6_init.Mode = GPIO_MODE_IT_FALLING;
 8003e34:	4e16      	ldr	r6, [pc, #88]	; (8003e90 <limitSwitch_Init+0x64>)
 8003e36:	9610      	str	r6, [sp, #64]	; 0x40
	  PA6_init.Pull = GPIO_NOPULL;
 8003e38:	2400      	movs	r4, #0
 8003e3a:	9411      	str	r4, [sp, #68]	; 0x44
	  HAL_GPIO_Init(GPIOA, &PA6_init);
 8003e3c:	4d15      	ldr	r5, [pc, #84]	; (8003e94 <limitSwitch_Init+0x68>)
 8003e3e:	a90f      	add	r1, sp, #60	; 0x3c
 8003e40:	4628      	mov	r0, r5
 8003e42:	f7fd fd91 	bl	8001968 <HAL_GPIO_Init>

	  // PA8
	  PA8_init.Pin = GPIO_PIN_8;
 8003e46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e4a:	930a      	str	r3, [sp, #40]	; 0x28
	  PA8_init.Mode = GPIO_MODE_IT_FALLING;
 8003e4c:	960b      	str	r6, [sp, #44]	; 0x2c
	  PA8_init.Pull = GPIO_NOPULL;
 8003e4e:	940c      	str	r4, [sp, #48]	; 0x30
	  HAL_GPIO_Init(GPIOA, &PA8_init);
 8003e50:	a90a      	add	r1, sp, #40	; 0x28
 8003e52:	4628      	mov	r0, r5
 8003e54:	f7fd fd88 	bl	8001968 <HAL_GPIO_Init>

	  // PA9
	  PA9_init.Pin = GPIO_PIN_9;
 8003e58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e5c:	9305      	str	r3, [sp, #20]
	  PA9_init.Mode = GPIO_MODE_IT_FALLING;
 8003e5e:	9606      	str	r6, [sp, #24]
	  PA9_init.Pull = GPIO_NOPULL;
 8003e60:	9407      	str	r4, [sp, #28]
	  HAL_GPIO_Init(GPIOA, &PA9_init);
 8003e62:	a905      	add	r1, sp, #20
 8003e64:	4628      	mov	r0, r5
 8003e66:	f7fd fd7f 	bl	8001968 <HAL_GPIO_Init>

	  // PA10
	  PA10_init.Pin = GPIO_PIN_10;
 8003e6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e6e:	9300      	str	r3, [sp, #0]
	  PA10_init.Mode = GPIO_MODE_IT_FALLING;
 8003e70:	9601      	str	r6, [sp, #4]
	  PA10_init.Pull = GPIO_NOPULL;
 8003e72:	9402      	str	r4, [sp, #8]
	  HAL_GPIO_Init(GPIOA, &PA10_init);
 8003e74:	4669      	mov	r1, sp
 8003e76:	4628      	mov	r0, r5
 8003e78:	f7fd fd76 	bl	8001968 <HAL_GPIO_Init>

	  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0x01, 0x00);
 8003e7c:	4622      	mov	r2, r4
 8003e7e:	2101      	movs	r1, #1
 8003e80:	2017      	movs	r0, #23
 8003e82:	f7fd fce5 	bl	8001850 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003e86:	2017      	movs	r0, #23
 8003e88:	f7fd fd26 	bl	80018d8 <HAL_NVIC_EnableIRQ>
}
 8003e8c:	b014      	add	sp, #80	; 0x50
 8003e8e:	bd70      	pop	{r4, r5, r6, pc}
 8003e90:	10210000 	.word	0x10210000
 8003e94:	40020000 	.word	0x40020000

08003e98 <main>:

int main(void)
{
 8003e98:	b508      	push	{r3, lr}
  /* NUCLEO board initialization */
  NUCLEO_Board_Init();
 8003e9a:	f7fd fc39 	bl	8001710 <NUCLEO_Board_Init>
  
  /* X-NUCLEO-IHM02A1 initialization */
  BSP_Init();
 8003e9e:	f7fd fb2e 	bl	80014fe <BSP_Init>
  
  /* Setup interrupt GPIO pins */
  limitSwitch_Init();
 8003ea2:	f7ff ffc3 	bl	8003e2c <limitSwitch_Init>

#ifdef NUCLEO_USE_USART
  /* Transmit the initial message to the PC via UART */
  USART_TxWelcomeMessage();
 8003ea6:	f7ff fdef 	bl	8003a88 <USART_TxWelcomeMessage>
  
  /* Infinite loop */
  while (1);
#elif defined (MICROSTEPPING_MOTOR_USART_EXAMPLE)
  /* Fill the L6470_DaisyChainMnemonic structure */
  Fill_L6470_DaisyChainMnemonic();
 8003eaa:	f7ff fe63 	bl	8003b74 <Fill_L6470_DaisyChainMnemonic>
  
  /* Infinite loop */
  while (1)
  {
    /* Check if any Application Command for L6470 has been entered by USART */
    USART_CheckAppCmd();
 8003eae:	f7ff ff9b 	bl	8003de8 <USART_CheckAppCmd>
  while (1)
 8003eb2:	e7fc      	b.n	8003eae <main+0x16>

08003eb4 <assert_failed>:
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
    ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */

}
 8003eb4:	4770      	bx	lr

08003eb6 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003eb6:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003eb8:	2007      	movs	r0, #7
 8003eba:	f7fd fcab 	bl	8001814 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	4611      	mov	r1, r2
 8003ec2:	f04f 30ff 	mov.w	r0, #4294967295
 8003ec6:	f7fd fcc3 	bl	8001850 <HAL_NVIC_SetPriority>
}
 8003eca:	bd08      	pop	{r3, pc}

08003ecc <HAL_SPI_MspInit>:
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_0);
  }
}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ece:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 8003ed0:	6803      	ldr	r3, [r0, #0]
 8003ed2:	4a30      	ldr	r2, [pc, #192]	; (8003f94 <HAL_SPI_MspInit+0xc8>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d004      	beq.n	8003ee2 <HAL_SPI_MspInit+0x16>
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
#elif defined (USE_PA5_AS_SCK)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
#endif
  }
  else if(hspi->Instance==SPI2)
 8003ed8:	4a2f      	ldr	r2, [pc, #188]	; (8003f98 <HAL_SPI_MspInit+0xcc>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d036      	beq.n	8003f4c <HAL_SPI_MspInit+0x80>
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
  }
}
 8003ede:	b00b      	add	sp, #44	; 0x2c
 8003ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __GPIOA_CLK_ENABLE();
 8003ee2:	4b2e      	ldr	r3, [pc, #184]	; (8003f9c <HAL_SPI_MspInit+0xd0>)
 8003ee4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ee6:	f042 0201 	orr.w	r2, r2, #1
 8003eea:	631a      	str	r2, [r3, #48]	; 0x30
 8003eec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003eee:	f002 0201 	and.w	r2, r2, #1
 8003ef2:	9200      	str	r2, [sp, #0]
 8003ef4:	9a00      	ldr	r2, [sp, #0]
    __GPIOB_CLK_ENABLE();
 8003ef6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ef8:	f042 0202 	orr.w	r2, r2, #2
 8003efc:	631a      	str	r2, [r3, #48]	; 0x30
 8003efe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f00:	f002 0202 	and.w	r2, r2, #2
 8003f04:	9201      	str	r2, [sp, #4]
 8003f06:	9a01      	ldr	r2, [sp, #4]
    __SPI1_CLK_ENABLE();
 8003f08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f0a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f0e:	645a      	str	r2, [r3, #68]	; 0x44
 8003f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f16:	9302      	str	r3, [sp, #8]
 8003f18:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003f1a:	23c0      	movs	r3, #192	; 0xc0
 8003f1c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f1e:	2702      	movs	r7, #2
 8003f20:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f22:	2600      	movs	r6, #0
 8003f24:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8003f26:	2503      	movs	r5, #3
 8003f28:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003f2a:	2405      	movs	r4, #5
 8003f2c:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f2e:	a905      	add	r1, sp, #20
 8003f30:	481b      	ldr	r0, [pc, #108]	; (8003fa0 <HAL_SPI_MspInit+0xd4>)
 8003f32:	f7fd fd19 	bl	8001968 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003f36:	2308      	movs	r3, #8
 8003f38:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f3a:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f3c:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8003f3e:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003f40:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f42:	a905      	add	r1, sp, #20
 8003f44:	4817      	ldr	r0, [pc, #92]	; (8003fa4 <HAL_SPI_MspInit+0xd8>)
 8003f46:	f7fd fd0f 	bl	8001968 <HAL_GPIO_Init>
 8003f4a:	e7c8      	b.n	8003ede <HAL_SPI_MspInit+0x12>
    __GPIOB_CLK_ENABLE();
 8003f4c:	4b13      	ldr	r3, [pc, #76]	; (8003f9c <HAL_SPI_MspInit+0xd0>)
 8003f4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f50:	f042 0202 	orr.w	r2, r2, #2
 8003f54:	631a      	str	r2, [r3, #48]	; 0x30
 8003f56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f58:	f002 0202 	and.w	r2, r2, #2
 8003f5c:	9203      	str	r2, [sp, #12]
 8003f5e:	9a03      	ldr	r2, [sp, #12]
    __SPI2_CLK_ENABLE();
 8003f60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f66:	641a      	str	r2, [r3, #64]	; 0x40
 8003f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f6e:	9304      	str	r3, [sp, #16]
 8003f70:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003f72:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003f76:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f78:	2302      	movs	r3, #2
 8003f7a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8003f80:	2303      	movs	r3, #3
 8003f82:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003f84:	2305      	movs	r3, #5
 8003f86:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f88:	a905      	add	r1, sp, #20
 8003f8a:	4806      	ldr	r0, [pc, #24]	; (8003fa4 <HAL_SPI_MspInit+0xd8>)
 8003f8c:	f7fd fcec 	bl	8001968 <HAL_GPIO_Init>
}
 8003f90:	e7a5      	b.n	8003ede <HAL_SPI_MspInit+0x12>
 8003f92:	bf00      	nop
 8003f94:	40013000 	.word	0x40013000
 8003f98:	40003800 	.word	0x40003800
 8003f9c:	40023800 	.word	0x40023800
 8003fa0:	40020000 	.word	0x40020000
 8003fa4:	40020400 	.word	0x40020400

08003fa8 <HAL_UART_MspInit>:
}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 8003fa8:	6802      	ldr	r2, [r0, #0]
 8003faa:	4b19      	ldr	r3, [pc, #100]	; (8004010 <HAL_UART_MspInit+0x68>)
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d000      	beq.n	8003fb2 <HAL_UART_MspInit+0xa>
 8003fb0:	4770      	bx	lr
{
 8003fb2:	b510      	push	{r4, lr}
 8003fb4:	b088      	sub	sp, #32
  {
    /* GPIO clocks enable */
    __GPIOA_CLK_ENABLE();
 8003fb6:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8003fba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fbc:	f042 0201 	orr.w	r2, r2, #1
 8003fc0:	631a      	str	r2, [r3, #48]	; 0x30
 8003fc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fc4:	f002 0201 	and.w	r2, r2, #1
 8003fc8:	9201      	str	r2, [sp, #4]
 8003fca:	9a01      	ldr	r2, [sp, #4]
    
    /* Peripheral clock enable */
    __USART2_CLK_ENABLE();
 8003fcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fce:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003fd2:	641a      	str	r2, [r3, #64]	; 0x40
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fda:	9302      	str	r3, [sp, #8]
 8003fdc:	9b02      	ldr	r3, [sp, #8]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003fde:	230c      	movs	r3, #12
 8003fe0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fe6:	2400      	movs	r4, #0
 8003fe8:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8003fea:	2303      	movs	r3, #3
 8003fec:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003fee:	2307      	movs	r3, #7
 8003ff0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ff2:	a903      	add	r1, sp, #12
 8003ff4:	4807      	ldr	r0, [pc, #28]	; (8004014 <HAL_UART_MspInit+0x6c>)
 8003ff6:	f7fd fcb7 	bl	8001968 <HAL_GPIO_Init>

  /* System interrupt init*/
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003ffa:	4622      	mov	r2, r4
 8003ffc:	4621      	mov	r1, r4
 8003ffe:	2026      	movs	r0, #38	; 0x26
 8004000:	f7fd fc26 	bl	8001850 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004004:	2026      	movs	r0, #38	; 0x26
 8004006:	f7fd fc67 	bl	80018d8 <HAL_NVIC_EnableIRQ>
  }
}
 800400a:	b008      	add	sp, #32
 800400c:	bd10      	pop	{r4, pc}
 800400e:	bf00      	nop
 8004010:	40004400 	.word	0x40004400
 8004014:	40020000 	.word	0x40020000

08004018 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8004018:	b508      	push	{r3, lr}
  HAL_IncTick();
 800401a:	f7fd fbdf 	bl	80017dc <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 800401e:	f7fd fc9e 	bl	800195e <HAL_SYSTICK_IRQHandler>
}
 8004022:	bd08      	pop	{r3, pc}

08004024 <EXTI1_IRQHandler>:

/**
* @brief This function handles EXTI Line1 interrupt.
*/
void EXTI1_IRQHandler(void)
{
 8004024:	b508      	push	{r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8004026:	2002      	movs	r0, #2
 8004028:	f7fd fde6 	bl	8001bf8 <HAL_GPIO_EXTI_IRQHandler>
}
 800402c:	bd08      	pop	{r3, pc}

0800402e <EXTI0_IRQHandler>:

/**
* @brief This function handles EXTI Line0 interrupt.
*/
void EXTI0_IRQHandler(void)
{
 800402e:	b508      	push	{r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8004030:	2001      	movs	r0, #1
 8004032:	f7fd fde1 	bl	8001bf8 <HAL_GPIO_EXTI_IRQHandler>
}
 8004036:	bd08      	pop	{r3, pc}

08004038 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt.
*/
void USART2_IRQHandler(void)
{
 8004038:	b510      	push	{r4, lr}
  HAL_UART_IRQHandler(&huart2);
 800403a:	4c04      	ldr	r4, [pc, #16]	; (800404c <USART2_IRQHandler+0x14>)
 800403c:	4620      	mov	r0, r4
 800403e:	f7ff f803 	bl	8003048 <HAL_UART_IRQHandler>
  USART_ITCharManager(&huart2);
 8004042:	4620      	mov	r0, r4
 8004044:	f7ff fd5c 	bl	8003b00 <USART_ITCharManager>
}
 8004048:	bd10      	pop	{r4, pc}
 800404a:	bf00      	nop
 800404c:	200004c8 	.word	0x200004c8

08004050 <EXTI15_10_IRQHandler>:

/**
* @brief This function handles EXTI Line[15:10] interrupts.
*/
void EXTI15_10_IRQHandler(void)
{
 8004050:	b508      	push	{r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);	// emergency stop
 8004052:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004056:	f7fd fdcf 	bl	8001bf8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);	// Axis 1 - End 1 PA10
 800405a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800405e:	f7fd fdcb 	bl	8001bf8 <HAL_GPIO_EXTI_IRQHandler>
}
 8004062:	bd08      	pop	{r3, pc}

08004064 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8004064:	b508      	push	{r3, lr}
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);	// Axis 2 - End 1 PA6
 8004066:	2040      	movs	r0, #64	; 0x40
 8004068:	f7fd fdc6 	bl	8001bf8 <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);	// Axis 2 - End 2 PA8
 800406c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004070:	f7fd fdc2 	bl	8001bf8 <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);	// Axis 2 - End 1 PA9
 8004074:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004078:	f7fd fdbe 	bl	8001bf8 <HAL_GPIO_EXTI_IRQHandler>
}
 800407c:	bd08      	pop	{r3, pc}
	...

08004080 <__libc_init_array>:
 8004080:	b570      	push	{r4, r5, r6, lr}
 8004082:	4d0d      	ldr	r5, [pc, #52]	; (80040b8 <__libc_init_array+0x38>)
 8004084:	4c0d      	ldr	r4, [pc, #52]	; (80040bc <__libc_init_array+0x3c>)
 8004086:	1b64      	subs	r4, r4, r5
 8004088:	10a4      	asrs	r4, r4, #2
 800408a:	2600      	movs	r6, #0
 800408c:	42a6      	cmp	r6, r4
 800408e:	d109      	bne.n	80040a4 <__libc_init_array+0x24>
 8004090:	4d0b      	ldr	r5, [pc, #44]	; (80040c0 <__libc_init_array+0x40>)
 8004092:	4c0c      	ldr	r4, [pc, #48]	; (80040c4 <__libc_init_array+0x44>)
 8004094:	f000 f818 	bl	80040c8 <_init>
 8004098:	1b64      	subs	r4, r4, r5
 800409a:	10a4      	asrs	r4, r4, #2
 800409c:	2600      	movs	r6, #0
 800409e:	42a6      	cmp	r6, r4
 80040a0:	d105      	bne.n	80040ae <__libc_init_array+0x2e>
 80040a2:	bd70      	pop	{r4, r5, r6, pc}
 80040a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80040a8:	4798      	blx	r3
 80040aa:	3601      	adds	r6, #1
 80040ac:	e7ee      	b.n	800408c <__libc_init_array+0xc>
 80040ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80040b2:	4798      	blx	r3
 80040b4:	3601      	adds	r6, #1
 80040b6:	e7f2      	b.n	800409e <__libc_init_array+0x1e>
 80040b8:	08004b34 	.word	0x08004b34
 80040bc:	08004b34 	.word	0x08004b34
 80040c0:	08004b34 	.word	0x08004b34
 80040c4:	08004b38 	.word	0x08004b38

080040c8 <_init>:
 80040c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ca:	bf00      	nop
 80040cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040ce:	bc08      	pop	{r3}
 80040d0:	469e      	mov	lr, r3
 80040d2:	4770      	bx	lr

080040d4 <_fini>:
 80040d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040d6:	bf00      	nop
 80040d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040da:	bc08      	pop	{r3}
 80040dc:	469e      	mov	lr, r3
 80040de:	4770      	bx	lr
