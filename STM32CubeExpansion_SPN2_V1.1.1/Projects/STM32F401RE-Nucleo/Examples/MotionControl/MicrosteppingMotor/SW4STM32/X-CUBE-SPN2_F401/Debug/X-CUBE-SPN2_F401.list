
X-CUBE-SPN2_F401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d14  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000065c  08001ea8  08001ea8  00011ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002504  08002504  00012504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002508  08002508  00012508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  0800250c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000228  20000010  0800251c  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000238  0800251c  00020238  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000dbdc  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002257  00000000  00000000  0002dc1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00006432  00000000  00000000  0002fe73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000788  00000000  00000000  000362a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000758  00000000  00000000  00036a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00002c72  00000000  00000000  00037188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000f03c  00000000  00000000  00039dfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0005f9f1  00000000  00000000  00048e36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  000a8827  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001430  00000000  00000000  000a8878  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001e90 	.word	0x08001e90

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	08001e90 	.word	0x08001e90

080001d4 <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	b087      	sub	sp, #28
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80001d8:	4602      	mov	r2, r0
 80001da:	b948      	cbnz	r0, 80001f0 <BSP_LED_Init+0x1c>
 80001dc:	4b0f      	ldr	r3, [pc, #60]	; (800021c <BSP_LED_Init+0x48>)
 80001de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80001e0:	f041 0101 	orr.w	r1, r1, #1
 80001e4:	6319      	str	r1, [r3, #48]	; 0x30
 80001e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001e8:	f003 0301 	and.w	r3, r3, #1
 80001ec:	9300      	str	r3, [sp, #0]
 80001ee:	9b00      	ldr	r3, [sp, #0]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80001f0:	2520      	movs	r5, #32
 80001f2:	9501      	str	r5, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001f4:	2301      	movs	r3, #1
 80001f6:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80001f8:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80001fa:	2302      	movs	r3, #2
 80001fc:	9304      	str	r3, [sp, #16]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80001fe:	4c08      	ldr	r4, [pc, #32]	; (8000220 <BSP_LED_Init+0x4c>)
 8000200:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8000204:	a901      	add	r1, sp, #4
 8000206:	6860      	ldr	r0, [r4, #4]
 8000208:	f000 fa36 	bl	8000678 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 800020c:	2200      	movs	r2, #0
 800020e:	4629      	mov	r1, r5
 8000210:	6860      	ldr	r0, [r4, #4]
 8000212:	f000 fb71 	bl	80008f8 <HAL_GPIO_WritePin>
}
 8000216:	b007      	add	sp, #28
 8000218:	bd30      	pop	{r4, r5, pc}
 800021a:	bf00      	nop
 800021c:	40023800 	.word	0x40023800
 8000220:	20000000 	.word	0x20000000

08000224 <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8000224:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8000226:	4b04      	ldr	r3, [pc, #16]	; (8000238 <BSP_LED_On+0x14>)
 8000228:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800022c:	2201      	movs	r2, #1
 800022e:	2120      	movs	r1, #32
 8000230:	6840      	ldr	r0, [r0, #4]
 8000232:	f000 fb61 	bl	80008f8 <HAL_GPIO_WritePin>
}
 8000236:	bd08      	pop	{r3, pc}
 8000238:	20000000 	.word	0x20000000

0800023c <BSP_LED_Off>:
  *   This parameter can be one of following parameters:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 800023c:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 800023e:	4b04      	ldr	r3, [pc, #16]	; (8000250 <BSP_LED_Off+0x14>)
 8000240:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8000244:	2200      	movs	r2, #0
 8000246:	2120      	movs	r1, #32
 8000248:	6840      	ldr	r0, [r0, #4]
 800024a:	f000 fb55 	bl	80008f8 <HAL_GPIO_WritePin>
}
 800024e:	bd08      	pop	{r3, pc}
 8000250:	20000000 	.word	0x20000000

08000254 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000254:	b510      	push	{r4, lr}
 8000256:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8000258:	4684      	mov	ip, r0
 800025a:	b948      	cbnz	r0, 8000270 <BSP_PB_Init+0x1c>
 800025c:	4b1b      	ldr	r3, [pc, #108]	; (80002cc <BSP_PB_Init+0x78>)
 800025e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000260:	f042 0204 	orr.w	r2, r2, #4
 8000264:	631a      	str	r2, [r3, #48]	; 0x30
 8000266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000268:	f003 0304 	and.w	r3, r3, #4
 800026c:	9300      	str	r3, [sp, #0]
 800026e:	9b00      	ldr	r3, [sp, #0]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8000270:	b119      	cbz	r1, 800027a <BSP_PB_Init+0x26>
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8000272:	2901      	cmp	r1, #1
 8000274:	d012      	beq.n	800029c <BSP_PB_Init+0x48>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
  }
}
 8000276:	b006      	add	sp, #24
 8000278:	bd10      	pop	{r4, pc}
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 800027a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800027e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000280:	2300      	movs	r3, #0
 8000282:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000284:	2302      	movs	r3, #2
 8000286:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000288:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800028a:	4b11      	ldr	r3, [pc, #68]	; (80002d0 <BSP_PB_Init+0x7c>)
 800028c:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8000290:	a901      	add	r1, sp, #4
 8000292:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8000296:	f000 f9ef 	bl	8000678 <HAL_GPIO_Init>
  if(ButtonMode == BUTTON_MODE_EXTI)
 800029a:	e7ec      	b.n	8000276 <BSP_PB_Init+0x22>
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 800029c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002a0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002a2:	2400      	movs	r4, #0
 80002a4:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; 
 80002a6:	4b0b      	ldr	r3, [pc, #44]	; (80002d4 <BSP_PB_Init+0x80>)
 80002a8:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80002aa:	4b09      	ldr	r3, [pc, #36]	; (80002d0 <BSP_PB_Init+0x7c>)
 80002ac:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 80002b0:	a901      	add	r1, sp, #4
 80002b2:	f8dc 0008 	ldr.w	r0, [ip, #8]
 80002b6:	f000 f9df 	bl	8000678 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 80002ba:	4622      	mov	r2, r4
 80002bc:	210f      	movs	r1, #15
 80002be:	2028      	movs	r0, #40	; 0x28
 80002c0:	f000 f966 	bl	8000590 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 80002c4:	2028      	movs	r0, #40	; 0x28
 80002c6:	f000 f9a7 	bl	8000618 <HAL_NVIC_EnableIRQ>
}
 80002ca:	e7d4      	b.n	8000276 <BSP_PB_Init+0x22>
 80002cc:	40023800 	.word	0x40023800
 80002d0:	20000000 	.word	0x20000000
 80002d4:	10210000 	.word	0x10210000

080002d8 <SystemClock_Config>:
  *         - APB1 Timer Clocks: 84 MHz
  *         - APB2 Peripheral Clocks: 84 MHz
  *         - APB2 Timer Clocks: 84 MHz
  */
void SystemClock_Config(void)
{
 80002d8:	b530      	push	{r4, r5, lr}
 80002da:	b095      	sub	sp, #84	; 0x54

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __PWR_CLK_ENABLE();
 80002dc:	4b1b      	ldr	r3, [pc, #108]	; (800034c <SystemClock_Config+0x74>)
 80002de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80002e0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80002e4:	641a      	str	r2, [r3, #64]	; 0x40
 80002e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002ec:	9301      	str	r3, [sp, #4]
 80002ee:	9b01      	ldr	r3, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80002f0:	4a17      	ldr	r2, [pc, #92]	; (8000350 <SystemClock_Config+0x78>)
 80002f2:	6813      	ldr	r3, [r2, #0]
 80002f4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80002f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80002fc:	6013      	str	r3, [r2, #0]
 80002fe:	6813      	ldr	r3, [r2, #0]
 8000300:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000304:	9302      	str	r3, [sp, #8]
 8000306:	9b02      	ldr	r3, [sp, #8]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000308:	2402      	movs	r4, #2
 800030a:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800030c:	2301      	movs	r3, #1
 800030e:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000310:	2310      	movs	r3, #16
 8000312:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000314:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000316:	2500      	movs	r5, #0
 8000318:	950f      	str	r5, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800031a:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800031c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000320:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000322:	2304      	movs	r3, #4
 8000324:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000326:	2307      	movs	r3, #7
 8000328:	9313      	str	r3, [sp, #76]	; 0x4c
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800032a:	a808      	add	r0, sp, #32
 800032c:	f000 fb0c 	bl	8000948 <HAL_RCC_OscConfig>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1;
 8000330:	2305      	movs	r3, #5
 8000332:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000334:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000336:	9505      	str	r5, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000338:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800033c:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800033e:	9507      	str	r5, [sp, #28]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 8000340:	4621      	mov	r1, r4
 8000342:	a803      	add	r0, sp, #12
 8000344:	f000 fd46 	bl	8000dd4 <HAL_RCC_ClockConfig>

}
 8000348:	b015      	add	sp, #84	; 0x54
 800034a:	bd30      	pop	{r4, r5, pc}
 800034c:	40023800 	.word	0x40023800
 8000350:	40007000 	.word	0x40007000

08000354 <MX_GPIO_Init>:

/**
  * @brief  This function initializes the GPIO MX.
  */
void MX_GPIO_Init(void)
{
 8000354:	b508      	push	{r3, lr}
#ifdef NUCLEO_USE_USER_BUTTON
  /* Configures Button GPIO and EXTI Line */
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8000356:	2101      	movs	r1, #1
 8000358:	2000      	movs	r0, #0
 800035a:	f7ff ff7b 	bl	8000254 <BSP_PB_Init>
#endif

#ifdef NUCLEO_USE_USER_LED
  /* Configures LED GPIO */
  BSP_LED_Init(LED2);
 800035e:	2000      	movs	r0, #0
 8000360:	f7ff ff38 	bl	80001d4 <BSP_LED_Init>
#endif
}
 8000364:	bd08      	pop	{r3, pc}
	...

08000368 <MX_SPI1_Init>:
  *         - CPOL High
  *         - CPHA 2nd Edge
  *         - Baud Rate lower than 5 MBits/s
  */
void MX_SPI1_Init(void)
{
 8000368:	b508      	push	{r3, lr}
  #define MAX_BAUDRATE  5000000
  uint32_t freq;
  uint16_t freq_div;
  uint32_t spi_baudrateprescaler;
  
  hspi1.Instance = SPI1;
 800036a:	4b1f      	ldr	r3, [pc, #124]	; (80003e8 <MX_SPI1_Init+0x80>)
 800036c:	4a1f      	ldr	r2, [pc, #124]	; (80003ec <MX_SPI1_Init+0x84>)
 800036e:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000370:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000374:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000376:	2200      	movs	r2, #0
 8000378:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800037a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800037c:	2102      	movs	r1, #2
 800037e:	6119      	str	r1, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000380:	2101      	movs	r1, #1
 8000382:	6159      	str	r1, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000384:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000388:	6199      	str	r1, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800038a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLED;
 800038c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800038e:	629a      	str	r2, [r3, #40]	; 0x28
  
  freq = HAL_RCC_GetPCLK2Freq();
 8000390:	f000 ff34 	bl	80011fc <HAL_RCC_GetPCLK2Freq>
  freq_div = (freq / MAX_BAUDRATE);
 8000394:	4b16      	ldr	r3, [pc, #88]	; (80003f0 <MX_SPI1_Init+0x88>)
 8000396:	fba3 3000 	umull	r3, r0, r3, r0
  
  if (freq_div < 2)
 800039a:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
 800039e:	d30f      	bcc.n	80003c0 <MX_SPI1_Init+0x58>
 80003a0:	0d43      	lsrs	r3, r0, #21
  {
    spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_2;
  }
  else
  {
    if (freq_div < 4)
 80003a2:	2b03      	cmp	r3, #3
 80003a4:	d90e      	bls.n	80003c4 <MX_SPI1_Init+0x5c>
    {
      spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_4;
    }
    else
    {
      if (freq_div < 8)
 80003a6:	2b07      	cmp	r3, #7
 80003a8:	d912      	bls.n	80003d0 <MX_SPI1_Init+0x68>
      {
        spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_8;
      }
      else
      {
        if (freq_div < 16)
 80003aa:	2b0f      	cmp	r3, #15
 80003ac:	d912      	bls.n	80003d4 <MX_SPI1_Init+0x6c>
        {
          spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_16;
        }
        else
        {
          if (freq_div < 32)
 80003ae:	2b1f      	cmp	r3, #31
 80003b0:	d912      	bls.n	80003d8 <MX_SPI1_Init+0x70>
          {
            spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_32;
          }
          else
          {
            if (freq_div < 64)
 80003b2:	2b3f      	cmp	r3, #63	; 0x3f
 80003b4:	d912      	bls.n	80003dc <MX_SPI1_Init+0x74>
            {
              spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_64;
            }
            else
            {
              if (freq_div < 128)
 80003b6:	2b7f      	cmp	r3, #127	; 0x7f
 80003b8:	d912      	bls.n	80003e0 <MX_SPI1_Init+0x78>
              {
                spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_128;
              }
              else
              {
                if (freq_div < 256)
 80003ba:	2bff      	cmp	r3, #255	; 0xff
 80003bc:	d912      	bls.n	80003e4 <MX_SPI1_Init+0x7c>
                  spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_256;
                }
                else
                {
                  /* the condition is not possible, you should reduce the CPU frequency */
                  while(1);
 80003be:	e7fe      	b.n	80003be <MX_SPI1_Init+0x56>
    spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_2;
 80003c0:	2300      	movs	r3, #0
 80003c2:	e000      	b.n	80003c6 <MX_SPI1_Init+0x5e>
      spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_4;
 80003c4:	2308      	movs	r3, #8
        }
      }
    }
  }
  
  hspi1.Init.BaudRatePrescaler = spi_baudrateprescaler;  // the baudrate will be lower than MAX_BAUDRATE (5 MBits/s)
 80003c6:	4808      	ldr	r0, [pc, #32]	; (80003e8 <MX_SPI1_Init+0x80>)
 80003c8:	61c3      	str	r3, [r0, #28]
  HAL_SPI_Init(&hspi1);
 80003ca:	f000 ff2d 	bl	8001228 <HAL_SPI_Init>
}
 80003ce:	bd08      	pop	{r3, pc}
        spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_8;
 80003d0:	2310      	movs	r3, #16
 80003d2:	e7f8      	b.n	80003c6 <MX_SPI1_Init+0x5e>
          spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_16;
 80003d4:	2318      	movs	r3, #24
 80003d6:	e7f6      	b.n	80003c6 <MX_SPI1_Init+0x5e>
            spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_32;
 80003d8:	2320      	movs	r3, #32
 80003da:	e7f4      	b.n	80003c6 <MX_SPI1_Init+0x5e>
              spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_64;
 80003dc:	2328      	movs	r3, #40	; 0x28
 80003de:	e7f2      	b.n	80003c6 <MX_SPI1_Init+0x5e>
                spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_128;
 80003e0:	2330      	movs	r3, #48	; 0x30
 80003e2:	e7f0      	b.n	80003c6 <MX_SPI1_Init+0x5e>
                  spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_256;
 80003e4:	2338      	movs	r3, #56	; 0x38
 80003e6:	e7ee      	b.n	80003c6 <MX_SPI1_Init+0x5e>
 80003e8:	2000002c 	.word	0x2000002c
 80003ec:	40013000 	.word	0x40013000
 80003f0:	6b5fca6b 	.word	0x6b5fca6b

080003f4 <MX_USART2_Init>:
  *         - Stop Bit:   1
  *         - Parity:     None
  *         - Mode:       TX/RX
  */
void MX_USART2_Init(void)
{
 80003f4:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 80003f6:	4808      	ldr	r0, [pc, #32]	; (8000418 <MX_USART2_Init+0x24>)
 80003f8:	4b08      	ldr	r3, [pc, #32]	; (800041c <MX_USART2_Init+0x28>)
 80003fa:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 80003fc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000400:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000402:	2300      	movs	r3, #0
 8000404:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000406:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000408:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800040a:	220c      	movs	r2, #12
 800040c:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800040e:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000410:	61c3      	str	r3, [r0, #28]
  HAL_UART_Init(&huart2);
 8000412:	f001 f955 	bl	80016c0 <HAL_UART_Init>
}
 8000416:	bd08      	pop	{r3, pc}
 8000418:	20000124 	.word	0x20000124
 800041c:	40004400 	.word	0x40004400

08000420 <User_LED_Blinking>:
  uint8_t r;
  uint16_t half_period_ms;
  
  half_period_ms = period_ms >> 1;
  
  for (r=0; r<repetitions; r++)
 8000420:	b1a8      	cbz	r0, 800044e <User_LED_Blinking+0x2e>
{
 8000422:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000424:	084d      	lsrs	r5, r1, #1
 8000426:	4607      	mov	r7, r0
  for (r=0; r<repetitions; r++)
 8000428:	2400      	movs	r4, #0
  {
    /* Switch on the user LED */
    BSP_LED_On(LED2);
 800042a:	4626      	mov	r6, r4
 800042c:	4630      	mov	r0, r6
 800042e:	f7ff fef9 	bl	8000224 <BSP_LED_On>
    /* ms delay */
    HAL_Delay(half_period_ms);
 8000432:	4628      	mov	r0, r5
 8000434:	f000 f880 	bl	8000538 <HAL_Delay>
    /* Switch off the user LED */
    BSP_LED_Off(LED2);
 8000438:	4630      	mov	r0, r6
 800043a:	f7ff feff 	bl	800023c <BSP_LED_Off>
    /* ms delay */
    HAL_Delay(half_period_ms);
 800043e:	4628      	mov	r0, r5
 8000440:	f000 f87a 	bl	8000538 <HAL_Delay>
  for (r=0; r<repetitions; r++)
 8000444:	3401      	adds	r4, #1
 8000446:	b2e4      	uxtb	r4, r4
 8000448:	42a7      	cmp	r7, r4
 800044a:	d1ef      	bne.n	800042c <User_LED_Blinking+0xc>
  }
}
 800044c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800044e:	4770      	bx	lr

08000450 <NUCLEO_Board_Init>:
{
 8000450:	b508      	push	{r3, lr}
  HAL_Init();
 8000452:	f000 f849 	bl	80004e8 <HAL_Init>
  SystemClock_Config();
 8000456:	f7ff ff3f 	bl	80002d8 <SystemClock_Config>
  MX_GPIO_Init();
 800045a:	f7ff ff7b 	bl	8000354 <MX_GPIO_Init>
  MX_SPI1_Init();
 800045e:	f7ff ff83 	bl	8000368 <MX_SPI1_Init>
  MX_USART2_Init();
 8000462:	f7ff ffc7 	bl	80003f4 <MX_USART2_Init>
  User_LED_Blinking(3, 750);
 8000466:	f240 21ee 	movw	r1, #750	; 0x2ee
 800046a:	2003      	movs	r0, #3
 800046c:	f7ff ffd8 	bl	8000420 <User_LED_Blinking>
}
 8000470:	bd08      	pop	{r3, pc}
	...

08000474 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000474:	490f      	ldr	r1, [pc, #60]	; (80004b4 <SystemInit+0x40>)
 8000476:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800047a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800047e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000482:	4b0d      	ldr	r3, [pc, #52]	; (80004b8 <SystemInit+0x44>)
 8000484:	681a      	ldr	r2, [r3, #0]
 8000486:	f042 0201 	orr.w	r2, r2, #1
 800048a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800048c:	2000      	movs	r0, #0
 800048e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000490:	681a      	ldr	r2, [r3, #0]
 8000492:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000496:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800049a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800049c:	4a07      	ldr	r2, [pc, #28]	; (80004bc <SystemInit+0x48>)
 800049e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80004a0:	681a      	ldr	r2, [r3, #0]
 80004a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80004a6:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80004a8:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80004aa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80004ae:	608b      	str	r3, [r1, #8]
#endif
}
 80004b0:	4770      	bx	lr
 80004b2:	bf00      	nop
 80004b4:	e000ed00 	.word	0xe000ed00
 80004b8:	40023800 	.word	0x40023800
 80004bc:	24003010 	.word	0x24003010

080004c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004c0:	b510      	push	{r4, lr}
 80004c2:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80004c4:	f000 fe6a 	bl	800119c <HAL_RCC_GetHCLKFreq>
 80004c8:	4b06      	ldr	r3, [pc, #24]	; (80004e4 <HAL_InitTick+0x24>)
 80004ca:	fba3 3000 	umull	r3, r0, r3, r0
 80004ce:	0980      	lsrs	r0, r0, #6
 80004d0:	f000 f8b8 	bl	8000644 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80004d4:	2200      	movs	r2, #0
 80004d6:	4621      	mov	r1, r4
 80004d8:	f04f 30ff 	mov.w	r0, #4294967295
 80004dc:	f000 f858 	bl	8000590 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 80004e0:	2000      	movs	r0, #0
 80004e2:	bd10      	pop	{r4, pc}
 80004e4:	10624dd3 	.word	0x10624dd3

080004e8 <HAL_Init>:
{
 80004e8:	b508      	push	{r3, lr}
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004ea:	4b0b      	ldr	r3, [pc, #44]	; (8000518 <HAL_Init+0x30>)
 80004ec:	681a      	ldr	r2, [r3, #0]
 80004ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80004f2:	601a      	str	r2, [r3, #0]
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80004f4:	681a      	ldr	r2, [r3, #0]
 80004f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80004fa:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004fc:	681a      	ldr	r2, [r3, #0]
 80004fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000502:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000504:	2003      	movs	r0, #3
 8000506:	f000 f825 	bl	8000554 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800050a:	2000      	movs	r0, #0
 800050c:	f7ff ffd8 	bl	80004c0 <HAL_InitTick>
  HAL_MspInit();
 8000510:	f001 fbc7 	bl	8001ca2 <HAL_MspInit>
}
 8000514:	2000      	movs	r0, #0
 8000516:	bd08      	pop	{r3, pc}
 8000518:	40023c00 	.word	0x40023c00

0800051c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800051c:	4a02      	ldr	r2, [pc, #8]	; (8000528 <HAL_IncTick+0xc>)
 800051e:	6813      	ldr	r3, [r2, #0]
 8000520:	3301      	adds	r3, #1
 8000522:	6013      	str	r3, [r2, #0]
}
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	20000120 	.word	0x20000120

0800052c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800052c:	4b01      	ldr	r3, [pc, #4]	; (8000534 <HAL_GetTick+0x8>)
 800052e:	6818      	ldr	r0, [r3, #0]
}
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	20000120 	.word	0x20000120

08000538 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000538:	b510      	push	{r4, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 800053e:	f7ff fff5 	bl	800052c <HAL_GetTick>
 8000542:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8000544:	f7ff fff2 	bl	800052c <HAL_GetTick>
 8000548:	9b01      	ldr	r3, [sp, #4]
 800054a:	1b00      	subs	r0, r0, r4
 800054c:	4298      	cmp	r0, r3
 800054e:	d3f9      	bcc.n	8000544 <HAL_Delay+0xc>
  {
  }
}
 8000550:	b002      	add	sp, #8
 8000552:	bd10      	pop	{r4, pc}

08000554 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000554:	b510      	push	{r4, lr}
 8000556:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000558:	1ec3      	subs	r3, r0, #3
 800055a:	2b04      	cmp	r3, #4
 800055c:	d80e      	bhi.n	800057c <HAL_NVIC_SetPriorityGrouping+0x28>
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800055e:	490a      	ldr	r1, [pc, #40]	; (8000588 <HAL_NVIC_SetPriorityGrouping+0x34>)
 8000560:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8)                       );              /* Insert write key and priorty group */
 8000562:	0223      	lsls	r3, r4, #8
 8000564:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
 8000568:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 800056c:	4014      	ands	r4, r2
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800056e:	4323      	orrs	r3, r4
  reg_value  =  (reg_value                                   |
 8000570:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000574:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000578:	60cb      	str	r3, [r1, #12]
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800057a:	bd10      	pop	{r4, pc}
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800057c:	21a4      	movs	r1, #164	; 0xa4
 800057e:	4803      	ldr	r0, [pc, #12]	; (800058c <HAL_NVIC_SetPriorityGrouping+0x38>)
 8000580:	f001 fb8e 	bl	8001ca0 <assert_failed>
 8000584:	e7eb      	b.n	800055e <HAL_NVIC_SetPriorityGrouping+0xa>
 8000586:	bf00      	nop
 8000588:	e000ed00 	.word	0xe000ed00
 800058c:	08001eb8 	.word	0x08001eb8

08000590 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	4605      	mov	r5, r0
 8000594:	460c      	mov	r4, r1
 8000596:	4616      	mov	r6, r2
  uint32_t prioritygroup = 0x00;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000598:	2a0f      	cmp	r2, #15
 800059a:	d826      	bhi.n	80005ea <HAL_NVIC_SetPriority+0x5a>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800059c:	2c0f      	cmp	r4, #15
 800059e:	d829      	bhi.n	80005f4 <HAL_NVIC_SetPriority+0x64>

    \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005a0:	4b1a      	ldr	r3, [pc, #104]	; (800060c <HAL_NVIC_SetPriority+0x7c>)
 80005a2:	68db      	ldr	r3, [r3, #12]
 80005a4:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005a8:	f1c3 0207 	rsb	r2, r3, #7
 80005ac:	2a04      	cmp	r2, #4
 80005ae:	bf28      	it	cs
 80005b0:	2204      	movcs	r2, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005b2:	1d19      	adds	r1, r3, #4
 80005b4:	2906      	cmp	r1, #6
 80005b6:	bf8c      	ite	hi
 80005b8:	3b03      	subhi	r3, #3
 80005ba:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005bc:	f04f 31ff 	mov.w	r1, #4294967295
 80005c0:	fa01 f202 	lsl.w	r2, r1, r2
 80005c4:	ea24 0402 	bic.w	r4, r4, r2
 80005c8:	409c      	lsls	r4, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005ca:	fa01 f303 	lsl.w	r3, r1, r3
 80005ce:	ea26 0603 	bic.w	r6, r6, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005d2:	4334      	orrs	r4, r6
  if((int32_t)IRQn < 0) {
 80005d4:	2d00      	cmp	r5, #0
 80005d6:	db12      	blt.n	80005fe <HAL_NVIC_SetPriority+0x6e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d8:	0124      	lsls	r4, r4, #4
 80005da:	b2e4      	uxtb	r4, r4
 80005dc:	f105 4560 	add.w	r5, r5, #3758096384	; 0xe0000000
 80005e0:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
 80005e4:	f885 4300 	strb.w	r4, [r5, #768]	; 0x300
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80005e8:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80005ea:	21bc      	movs	r1, #188	; 0xbc
 80005ec:	4808      	ldr	r0, [pc, #32]	; (8000610 <HAL_NVIC_SetPriority+0x80>)
 80005ee:	f001 fb57 	bl	8001ca0 <assert_failed>
 80005f2:	e7d3      	b.n	800059c <HAL_NVIC_SetPriority+0xc>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80005f4:	21bd      	movs	r1, #189	; 0xbd
 80005f6:	4806      	ldr	r0, [pc, #24]	; (8000610 <HAL_NVIC_SetPriority+0x80>)
 80005f8:	f001 fb52 	bl	8001ca0 <assert_failed>
 80005fc:	e7d0      	b.n	80005a0 <HAL_NVIC_SetPriority+0x10>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005fe:	f005 050f 	and.w	r5, r5, #15
 8000602:	0124      	lsls	r4, r4, #4
 8000604:	b2e4      	uxtb	r4, r4
 8000606:	4b03      	ldr	r3, [pc, #12]	; (8000614 <HAL_NVIC_SetPriority+0x84>)
 8000608:	555c      	strb	r4, [r3, r5]
 800060a:	e7ed      	b.n	80005e8 <HAL_NVIC_SetPriority+0x58>
 800060c:	e000ed00 	.word	0xe000ed00
 8000610:	08001eb8 	.word	0x08001eb8
 8000614:	e000ed14 	.word	0xe000ed14

08000618 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000618:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800061a:	1e04      	subs	r4, r0, #0
 800061c:	db09      	blt.n	8000632 <HAL_NVIC_EnableIRQ+0x1a>
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800061e:	0962      	lsrs	r2, r4, #5
 8000620:	f004 041f 	and.w	r4, r4, #31
 8000624:	2001      	movs	r0, #1
 8000626:	fa00 f404 	lsl.w	r4, r0, r4
 800062a:	4b04      	ldr	r3, [pc, #16]	; (800063c <HAL_NVIC_EnableIRQ+0x24>)
 800062c:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000630:	bd10      	pop	{r4, pc}
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8000632:	21d0      	movs	r1, #208	; 0xd0
 8000634:	4802      	ldr	r0, [pc, #8]	; (8000640 <HAL_NVIC_EnableIRQ+0x28>)
 8000636:	f001 fb33 	bl	8001ca0 <assert_failed>
 800063a:	e7f0      	b.n	800061e <HAL_NVIC_EnableIRQ+0x6>
 800063c:	e000e100 	.word	0xe000e100
 8000640:	08001eb8 	.word	0x08001eb8

08000644 <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 8000644:	3801      	subs	r0, #1
 8000646:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800064a:	d20b      	bcs.n	8000664 <HAL_SYSTICK_Config+0x20>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800064c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000650:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000652:	4a05      	ldr	r2, [pc, #20]	; (8000668 <HAL_SYSTICK_Config+0x24>)
 8000654:	21f0      	movs	r1, #240	; 0xf0
 8000656:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800065a:	2000      	movs	r0, #0
 800065c:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800065e:	2207      	movs	r2, #7
 8000660:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000662:	4770      	bx	lr
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 8000664:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000666:	4770      	bx	lr
 8000668:	e000ed00 	.word	0xe000ed00

0800066c <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800066c:	4770      	bx	lr

0800066e <HAL_SYSTICK_IRQHandler>:
{
 800066e:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000670:	f7ff fffc 	bl	800066c <HAL_SYSTICK_Callback>
}
 8000674:	bd08      	pop	{r3, pc}
	...

08000678 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800067c:	b083      	sub	sp, #12
 800067e:	4607      	mov	r7, r0
 8000680:	460e      	mov	r6, r1
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000682:	4b8d      	ldr	r3, [pc, #564]	; (80008b8 <HAL_GPIO_Init+0x240>)
 8000684:	4298      	cmp	r0, r3
 8000686:	d017      	beq.n	80006b8 <HAL_GPIO_Init+0x40>
 8000688:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800068c:	4298      	cmp	r0, r3
 800068e:	d013      	beq.n	80006b8 <HAL_GPIO_Init+0x40>
 8000690:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000694:	4298      	cmp	r0, r3
 8000696:	d00f      	beq.n	80006b8 <HAL_GPIO_Init+0x40>
 8000698:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800069c:	4298      	cmp	r0, r3
 800069e:	d00b      	beq.n	80006b8 <HAL_GPIO_Init+0x40>
 80006a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80006a4:	4298      	cmp	r0, r3
 80006a6:	d007      	beq.n	80006b8 <HAL_GPIO_Init+0x40>
 80006a8:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80006ac:	4298      	cmp	r0, r3
 80006ae:	d003      	beq.n	80006b8 <HAL_GPIO_Init+0x40>
 80006b0:	21c5      	movs	r1, #197	; 0xc5
 80006b2:	4882      	ldr	r0, [pc, #520]	; (80008bc <HAL_GPIO_Init+0x244>)
 80006b4:	f001 faf4 	bl	8001ca0 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80006b8:	8833      	ldrh	r3, [r6, #0]
 80006ba:	b30b      	cbz	r3, 8000700 <HAL_GPIO_Init+0x88>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80006bc:	6873      	ldr	r3, [r6, #4]
 80006be:	2b03      	cmp	r3, #3
 80006c0:	d917      	bls.n	80006f2 <HAL_GPIO_Init+0x7a>
 80006c2:	f1a3 0211 	sub.w	r2, r3, #17
 80006c6:	2a01      	cmp	r2, #1
 80006c8:	d913      	bls.n	80006f2 <HAL_GPIO_Init+0x7a>
 80006ca:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80006ce:	497c      	ldr	r1, [pc, #496]	; (80008c0 <HAL_GPIO_Init+0x248>)
 80006d0:	428a      	cmp	r2, r1
 80006d2:	d00e      	beq.n	80006f2 <HAL_GPIO_Init+0x7a>
 80006d4:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 80006d8:	428b      	cmp	r3, r1
 80006da:	d00a      	beq.n	80006f2 <HAL_GPIO_Init+0x7a>
 80006dc:	f5a1 2170 	sub.w	r1, r1, #983040	; 0xf0000
 80006e0:	428a      	cmp	r2, r1
 80006e2:	d006      	beq.n	80006f2 <HAL_GPIO_Init+0x7a>
 80006e4:	4a77      	ldr	r2, [pc, #476]	; (80008c4 <HAL_GPIO_Init+0x24c>)
 80006e6:	4293      	cmp	r3, r2
 80006e8:	d003      	beq.n	80006f2 <HAL_GPIO_Init+0x7a>
 80006ea:	21c7      	movs	r1, #199	; 0xc7
 80006ec:	4873      	ldr	r0, [pc, #460]	; (80008bc <HAL_GPIO_Init+0x244>)
 80006ee:	f001 fad7 	bl	8001ca0 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80006f2:	68b3      	ldr	r3, [r6, #8]
 80006f4:	2b02      	cmp	r3, #2
 80006f6:	d808      	bhi.n	800070a <HAL_GPIO_Init+0x92>
{
 80006f8:	2400      	movs	r4, #0
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80006fa:	f8df b1d4 	ldr.w	fp, [pc, #468]	; 80008d0 <HAL_GPIO_Init+0x258>
 80006fe:	e05f      	b.n	80007c0 <HAL_GPIO_Init+0x148>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8000700:	21c6      	movs	r1, #198	; 0xc6
 8000702:	486e      	ldr	r0, [pc, #440]	; (80008bc <HAL_GPIO_Init+0x244>)
 8000704:	f001 facc 	bl	8001ca0 <assert_failed>
 8000708:	e7d8      	b.n	80006bc <HAL_GPIO_Init+0x44>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800070a:	21c8      	movs	r1, #200	; 0xc8
 800070c:	486b      	ldr	r0, [pc, #428]	; (80008bc <HAL_GPIO_Init+0x244>)
 800070e:	f001 fac7 	bl	8001ca0 <assert_failed>
 8000712:	e7f1      	b.n	80006f8 <HAL_GPIO_Init+0x80>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8000714:	6933      	ldr	r3, [r6, #16]
 8000716:	2b0f      	cmp	r3, #15
 8000718:	d816      	bhi.n	8000748 <HAL_GPIO_Init+0xd0>
 800071a:	f249 72f7 	movw	r2, #38903	; 0x97f7
 800071e:	fa22 f303 	lsr.w	r3, r2, r3
 8000722:	f013 0f01 	tst.w	r3, #1
 8000726:	d00f      	beq.n	8000748 <HAL_GPIO_Init+0xd0>
        temp = GPIOx->AFR[position >> 3];
 8000728:	08e2      	lsrs	r2, r4, #3
 800072a:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 800072e:	6a10      	ldr	r0, [r2, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000730:	f004 0307 	and.w	r3, r4, #7
 8000734:	0099      	lsls	r1, r3, #2
 8000736:	230f      	movs	r3, #15
 8000738:	408b      	lsls	r3, r1
 800073a:	ea20 0003 	bic.w	r0, r0, r3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800073e:	6933      	ldr	r3, [r6, #16]
 8000740:	408b      	lsls	r3, r1
 8000742:	4303      	orrs	r3, r0
        GPIOx->AFR[position >> 3] = temp;
 8000744:	6213      	str	r3, [r2, #32]
 8000746:	e048      	b.n	80007da <HAL_GPIO_Init+0x162>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8000748:	21d9      	movs	r1, #217	; 0xd9
 800074a:	485c      	ldr	r0, [pc, #368]	; (80008bc <HAL_GPIO_Init+0x244>)
 800074c:	f001 faa8 	bl	8001ca0 <assert_failed>
 8000750:	e7ea      	b.n	8000728 <HAL_GPIO_Init+0xb0>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000752:	21ec      	movs	r1, #236	; 0xec
 8000754:	4859      	ldr	r0, [pc, #356]	; (80008bc <HAL_GPIO_Init+0x244>)
 8000756:	f001 faa3 	bl	8001ca0 <assert_failed>
 800075a:	e058      	b.n	800080e <HAL_GPIO_Init+0x196>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800075c:	2200      	movs	r2, #0
 800075e:	408a      	lsls	r2, r1
 8000760:	4302      	orrs	r2, r0
        SYSCFG->EXTICR[position >> 2] = temp;
 8000762:	609a      	str	r2, [r3, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000764:	4b58      	ldr	r3, [pc, #352]	; (80008c8 <HAL_GPIO_Init+0x250>)
 8000766:	681a      	ldr	r2, [r3, #0]
        temp &= ~((uint32_t)iocurrent);
 8000768:	ea6f 010a 	mvn.w	r1, sl
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800076c:	6873      	ldr	r3, [r6, #4]
 800076e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000772:	bf0c      	ite	eq
 8000774:	400a      	andeq	r2, r1
        {
          temp |= iocurrent;
 8000776:	ea4a 0202 	orrne.w	r2, sl, r2
        }
        EXTI->IMR = temp;
 800077a:	4b53      	ldr	r3, [pc, #332]	; (80008c8 <HAL_GPIO_Init+0x250>)
 800077c:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800077e:	685a      	ldr	r2, [r3, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000780:	6873      	ldr	r3, [r6, #4]
 8000782:	f413 3f00 	tst.w	r3, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000786:	bf0c      	ite	eq
 8000788:	400a      	andeq	r2, r1
        {
          temp |= iocurrent;
 800078a:	ea4a 0202 	orrne.w	r2, sl, r2
        }
        EXTI->EMR = temp;
 800078e:	4b4e      	ldr	r3, [pc, #312]	; (80008c8 <HAL_GPIO_Init+0x250>)
 8000790:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000792:	689a      	ldr	r2, [r3, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000794:	6873      	ldr	r3, [r6, #4]
 8000796:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800079a:	bf0c      	ite	eq
 800079c:	400a      	andeq	r2, r1
        {
          temp |= iocurrent;
 800079e:	ea4a 0202 	orrne.w	r2, sl, r2
        }
        EXTI->RTSR = temp;
 80007a2:	4b49      	ldr	r3, [pc, #292]	; (80008c8 <HAL_GPIO_Init+0x250>)
 80007a4:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80007a6:	68db      	ldr	r3, [r3, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007a8:	6872      	ldr	r2, [r6, #4]
 80007aa:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 80007ae:	bf0c      	ite	eq
 80007b0:	400b      	andeq	r3, r1
        {
          temp |= iocurrent;
 80007b2:	ea4a 0303 	orrne.w	r3, sl, r3
        }
        EXTI->FTSR = temp;
 80007b6:	4a44      	ldr	r2, [pc, #272]	; (80008c8 <HAL_GPIO_Init+0x250>)
 80007b8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80007ba:	3401      	adds	r4, #1
 80007bc:	2c10      	cmp	r4, #16
 80007be:	d077      	beq.n	80008b0 <HAL_GPIO_Init+0x238>
    ioposition = ((uint32_t)0x01) << position;
 80007c0:	2501      	movs	r5, #1
 80007c2:	40a5      	lsls	r5, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007c4:	6833      	ldr	r3, [r6, #0]
 80007c6:	ea05 0a03 	and.w	sl, r5, r3
    if(iocurrent == ioposition)
 80007ca:	ea35 0303 	bics.w	r3, r5, r3
 80007ce:	d1f4      	bne.n	80007ba <HAL_GPIO_Init+0x142>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007d0:	6873      	ldr	r3, [r6, #4]
 80007d2:	f023 0310 	bic.w	r3, r3, #16
 80007d6:	2b02      	cmp	r3, #2
 80007d8:	d09c      	beq.n	8000714 <HAL_GPIO_Init+0x9c>
      temp = GPIOx->MODER;
 80007da:	683a      	ldr	r2, [r7, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80007dc:	ea4f 0944 	mov.w	r9, r4, lsl #1
 80007e0:	2303      	movs	r3, #3
 80007e2:	fa03 f309 	lsl.w	r3, r3, r9
 80007e6:	ea6f 0803 	mvn.w	r8, r3
 80007ea:	ea22 0203 	bic.w	r2, r2, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80007ee:	6873      	ldr	r3, [r6, #4]
 80007f0:	f003 0303 	and.w	r3, r3, #3
 80007f4:	fa03 f309 	lsl.w	r3, r3, r9
 80007f8:	4313      	orrs	r3, r2
      GPIOx->MODER = temp;
 80007fa:	603b      	str	r3, [r7, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007fc:	6873      	ldr	r3, [r6, #4]
 80007fe:	f023 0310 	bic.w	r3, r3, #16
 8000802:	3b01      	subs	r3, #1
 8000804:	2b01      	cmp	r3, #1
 8000806:	d813      	bhi.n	8000830 <HAL_GPIO_Init+0x1b8>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000808:	68f3      	ldr	r3, [r6, #12]
 800080a:	2b03      	cmp	r3, #3
 800080c:	d8a1      	bhi.n	8000752 <HAL_GPIO_Init+0xda>
        temp = GPIOx->OSPEEDR; 
 800080e:	68ba      	ldr	r2, [r7, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000810:	ea08 0202 	and.w	r2, r8, r2
        temp |= (GPIO_Init->Speed << (position * 2));
 8000814:	68f3      	ldr	r3, [r6, #12]
 8000816:	fa03 f309 	lsl.w	r3, r3, r9
 800081a:	4313      	orrs	r3, r2
        GPIOx->OSPEEDR = temp;
 800081c:	60bb      	str	r3, [r7, #8]
        temp = GPIOx->OTYPER;
 800081e:	687a      	ldr	r2, [r7, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000820:	ea22 0205 	bic.w	r2, r2, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000824:	6873      	ldr	r3, [r6, #4]
 8000826:	f3c3 1500 	ubfx	r5, r3, #4, #1
 800082a:	40a5      	lsls	r5, r4
 800082c:	4315      	orrs	r5, r2
        GPIOx->OTYPER = temp;
 800082e:	607d      	str	r5, [r7, #4]
      temp = GPIOx->PUPDR;
 8000830:	68fb      	ldr	r3, [r7, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000832:	ea08 0803 	and.w	r8, r8, r3
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000836:	68b3      	ldr	r3, [r6, #8]
 8000838:	fa03 f309 	lsl.w	r3, r3, r9
 800083c:	ea43 0308 	orr.w	r3, r3, r8
      GPIOx->PUPDR = temp;
 8000840:	60fb      	str	r3, [r7, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000842:	6873      	ldr	r3, [r6, #4]
 8000844:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000848:	d0b7      	beq.n	80007ba <HAL_GPIO_Init+0x142>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800084a:	4b20      	ldr	r3, [pc, #128]	; (80008cc <HAL_GPIO_Init+0x254>)
 800084c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800084e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000852:	645a      	str	r2, [r3, #68]	; 0x44
 8000854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000856:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800085a:	9301      	str	r3, [sp, #4]
 800085c:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 800085e:	f024 0303 	bic.w	r3, r4, #3
 8000862:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000866:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 800086a:	6898      	ldr	r0, [r3, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800086c:	f004 0203 	and.w	r2, r4, #3
 8000870:	0091      	lsls	r1, r2, #2
 8000872:	220f      	movs	r2, #15
 8000874:	408a      	lsls	r2, r1
 8000876:	ea20 0002 	bic.w	r0, r0, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800087a:	4a0f      	ldr	r2, [pc, #60]	; (80008b8 <HAL_GPIO_Init+0x240>)
 800087c:	4297      	cmp	r7, r2
 800087e:	f43f af6d 	beq.w	800075c <HAL_GPIO_Init+0xe4>
 8000882:	455f      	cmp	r7, fp
 8000884:	d00e      	beq.n	80008a4 <HAL_GPIO_Init+0x22c>
 8000886:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800088a:	4297      	cmp	r7, r2
 800088c:	d00c      	beq.n	80008a8 <HAL_GPIO_Init+0x230>
 800088e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000892:	4297      	cmp	r7, r2
 8000894:	d00a      	beq.n	80008ac <HAL_GPIO_Init+0x234>
 8000896:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800089a:	4297      	cmp	r7, r2
 800089c:	bf0c      	ite	eq
 800089e:	2204      	moveq	r2, #4
 80008a0:	2205      	movne	r2, #5
 80008a2:	e75c      	b.n	800075e <HAL_GPIO_Init+0xe6>
 80008a4:	2201      	movs	r2, #1
 80008a6:	e75a      	b.n	800075e <HAL_GPIO_Init+0xe6>
 80008a8:	2202      	movs	r2, #2
 80008aa:	e758      	b.n	800075e <HAL_GPIO_Init+0xe6>
 80008ac:	2203      	movs	r2, #3
 80008ae:	e756      	b.n	800075e <HAL_GPIO_Init+0xe6>
      }
    }
  }
}
 80008b0:	b003      	add	sp, #12
 80008b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80008b6:	bf00      	nop
 80008b8:	40020000 	.word	0x40020000
 80008bc:	08001f38 	.word	0x08001f38
 80008c0:	10110000 	.word	0x10110000
 80008c4:	10220000 	.word	0x10220000
 80008c8:	40013c00 	.word	0x40013c00
 80008cc:	40023800 	.word	0x40023800
 80008d0:	40020400 	.word	0x40020400

080008d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80008d4:	b538      	push	{r3, r4, r5, lr}
 80008d6:	4604      	mov	r4, r0
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80008d8:	460d      	mov	r5, r1
 80008da:	b129      	cbz	r1, 80008e8 <HAL_GPIO_ReadPin+0x14>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80008dc:	6923      	ldr	r3, [r4, #16]
 80008de:	421d      	tst	r5, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80008e0:	bf14      	ite	ne
 80008e2:	2001      	movne	r0, #1
 80008e4:	2000      	moveq	r0, #0
 80008e6:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80008e8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80008ec:	4801      	ldr	r0, [pc, #4]	; (80008f4 <HAL_GPIO_ReadPin+0x20>)
 80008ee:	f001 f9d7 	bl	8001ca0 <assert_failed>
 80008f2:	e7f3      	b.n	80008dc <HAL_GPIO_ReadPin+0x8>
 80008f4:	08001f38 	.word	0x08001f38

080008f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80008f8:	b570      	push	{r4, r5, r6, lr}
 80008fa:	4605      	mov	r5, r0
 80008fc:	4614      	mov	r4, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80008fe:	460e      	mov	r6, r1
 8000900:	b129      	cbz	r1, 800090e <HAL_GPIO_WritePin+0x16>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8000902:	2c01      	cmp	r4, #1
 8000904:	d809      	bhi.n	800091a <HAL_GPIO_WritePin+0x22>

  if(PinState != GPIO_PIN_RESET)
 8000906:	b96c      	cbnz	r4, 8000924 <HAL_GPIO_WritePin+0x2c>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000908:	0436      	lsls	r6, r6, #16
 800090a:	61ae      	str	r6, [r5, #24]
  }
}
 800090c:	e00b      	b.n	8000926 <HAL_GPIO_WritePin+0x2e>
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800090e:	f240 11b1 	movw	r1, #433	; 0x1b1
 8000912:	4805      	ldr	r0, [pc, #20]	; (8000928 <HAL_GPIO_WritePin+0x30>)
 8000914:	f001 f9c4 	bl	8001ca0 <assert_failed>
 8000918:	e7f3      	b.n	8000902 <HAL_GPIO_WritePin+0xa>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800091a:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
 800091e:	4802      	ldr	r0, [pc, #8]	; (8000928 <HAL_GPIO_WritePin+0x30>)
 8000920:	f001 f9be 	bl	8001ca0 <assert_failed>
    GPIOx->BSRR = GPIO_Pin;
 8000924:	61ae      	str	r6, [r5, #24]
}
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	08001f38 	.word	0x08001f38

0800092c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800092c:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800092e:	4b05      	ldr	r3, [pc, #20]	; (8000944 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8000930:	695b      	ldr	r3, [r3, #20]
 8000932:	4203      	tst	r3, r0
 8000934:	d100      	bne.n	8000938 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8000936:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000938:	4b02      	ldr	r3, [pc, #8]	; (8000944 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800093a:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800093c:	f001 f930 	bl	8001ba0 <HAL_GPIO_EXTI_Callback>
}
 8000940:	e7f9      	b.n	8000936 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8000942:	bf00      	nop
 8000944:	40013c00 	.word	0x40013c00

08000948 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800094a:	b083      	sub	sp, #12
 800094c:	4604      	mov	r4, r0
 uint32_t tickstart = 0;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800094e:	6803      	ldr	r3, [r0, #0]
 8000950:	2b0f      	cmp	r3, #15
 8000952:	d84f      	bhi.n	80009f4 <HAL_RCC_OscConfig+0xac>
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000954:	6823      	ldr	r3, [r4, #0]
 8000956:	f013 0f01 	tst.w	r3, #1
 800095a:	d01e      	beq.n	800099a <HAL_RCC_OscConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800095c:	6863      	ldr	r3, [r4, #4]
 800095e:	2b01      	cmp	r3, #1
 8000960:	d901      	bls.n	8000966 <HAL_RCC_OscConfig+0x1e>
 8000962:	2b05      	cmp	r3, #5
 8000964:	d14c      	bne.n	8000a00 <HAL_RCC_OscConfig+0xb8>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000966:	4ba6      	ldr	r3, [pc, #664]	; (8000c00 <HAL_RCC_OscConfig+0x2b8>)
 8000968:	689b      	ldr	r3, [r3, #8]
 800096a:	f003 030c 	and.w	r3, r3, #12
 800096e:	2b04      	cmp	r3, #4
 8000970:	d00a      	beq.n	8000988 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000972:	4ba3      	ldr	r3, [pc, #652]	; (8000c00 <HAL_RCC_OscConfig+0x2b8>)
 8000974:	689b      	ldr	r3, [r3, #8]
 8000976:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800097a:	2b08      	cmp	r3, #8
 800097c:	d146      	bne.n	8000a0c <HAL_RCC_OscConfig+0xc4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800097e:	4ba0      	ldr	r3, [pc, #640]	; (8000c00 <HAL_RCC_OscConfig+0x2b8>)
 8000980:	685b      	ldr	r3, [r3, #4]
 8000982:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000986:	d041      	beq.n	8000a0c <HAL_RCC_OscConfig+0xc4>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000988:	4b9d      	ldr	r3, [pc, #628]	; (8000c00 <HAL_RCC_OscConfig+0x2b8>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000990:	d003      	beq.n	800099a <HAL_RCC_OscConfig+0x52>
 8000992:	6863      	ldr	r3, [r4, #4]
 8000994:	2b00      	cmp	r3, #0
 8000996:	f000 820d 	beq.w	8000db4 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800099a:	6823      	ldr	r3, [r4, #0]
 800099c:	f013 0f02 	tst.w	r3, #2
 80009a0:	f000 8096 	beq.w	8000ad0 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80009a4:	68e3      	ldr	r3, [r4, #12]
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d86b      	bhi.n	8000a82 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80009aa:	6923      	ldr	r3, [r4, #16]
 80009ac:	2b1f      	cmp	r3, #31
 80009ae:	d86e      	bhi.n	8000a8e <HAL_RCC_OscConfig+0x146>
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80009b0:	4b93      	ldr	r3, [pc, #588]	; (8000c00 <HAL_RCC_OscConfig+0x2b8>)
 80009b2:	689b      	ldr	r3, [r3, #8]
 80009b4:	f013 0f0c 	tst.w	r3, #12
 80009b8:	d074      	beq.n	8000aa4 <HAL_RCC_OscConfig+0x15c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80009ba:	4b91      	ldr	r3, [pc, #580]	; (8000c00 <HAL_RCC_OscConfig+0x2b8>)
 80009bc:	689b      	ldr	r3, [r3, #8]
 80009be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80009c2:	2b08      	cmp	r3, #8
 80009c4:	d069      	beq.n	8000a9a <HAL_RCC_OscConfig+0x152>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80009c6:	68e3      	ldr	r3, [r4, #12]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	f000 80ac 	beq.w	8000b26 <HAL_RCC_OscConfig+0x1de>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80009ce:	4b8d      	ldr	r3, [pc, #564]	; (8000c04 <HAL_RCC_OscConfig+0x2bc>)
 80009d0:	2201      	movs	r2, #1
 80009d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80009d4:	f7ff fdaa 	bl	800052c <HAL_GetTick>
 80009d8:	4605      	mov	r5, r0

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009da:	4e89      	ldr	r6, [pc, #548]	; (8000c00 <HAL_RCC_OscConfig+0x2b8>)
 80009dc:	6833      	ldr	r3, [r6, #0]
 80009de:	f013 0f02 	tst.w	r3, #2
 80009e2:	f040 8092 	bne.w	8000b0a <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009e6:	f7ff fda1 	bl	800052c <HAL_GetTick>
 80009ea:	1b40      	subs	r0, r0, r5
 80009ec:	2864      	cmp	r0, #100	; 0x64
 80009ee:	d9f5      	bls.n	80009dc <HAL_RCC_OscConfig+0x94>
          {
            return HAL_TIMEOUT;
 80009f0:	2003      	movs	r0, #3
 80009f2:	e1e4      	b.n	8000dbe <HAL_RCC_OscConfig+0x476>
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80009f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009f8:	4883      	ldr	r0, [pc, #524]	; (8000c08 <HAL_RCC_OscConfig+0x2c0>)
 80009fa:	f001 f951 	bl	8001ca0 <assert_failed>
 80009fe:	e7a9      	b.n	8000954 <HAL_RCC_OscConfig+0xc>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8000a00:	f240 1105 	movw	r1, #261	; 0x105
 8000a04:	4880      	ldr	r0, [pc, #512]	; (8000c08 <HAL_RCC_OscConfig+0x2c0>)
 8000a06:	f001 f94b 	bl	8001ca0 <assert_failed>
 8000a0a:	e7ac      	b.n	8000966 <HAL_RCC_OscConfig+0x1e>
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8000a0c:	4b7c      	ldr	r3, [pc, #496]	; (8000c00 <HAL_RCC_OscConfig+0x2b8>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	709a      	strb	r2, [r3, #2]
      tickstart = HAL_GetTick();
 8000a12:	f7ff fd8b 	bl	800052c <HAL_GetTick>
 8000a16:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a18:	4e79      	ldr	r6, [pc, #484]	; (8000c00 <HAL_RCC_OscConfig+0x2b8>)
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a1a:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a1e:	6833      	ldr	r3, [r6, #0]
 8000a20:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000a24:	d006      	beq.n	8000a34 <HAL_RCC_OscConfig+0xec>
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a26:	f7ff fd81 	bl	800052c <HAL_GetTick>
 8000a2a:	1b40      	subs	r0, r0, r5
 8000a2c:	42b8      	cmp	r0, r7
 8000a2e:	d9f6      	bls.n	8000a1e <HAL_RCC_OscConfig+0xd6>
          return HAL_TIMEOUT;
 8000a30:	2003      	movs	r0, #3
 8000a32:	e1c4      	b.n	8000dbe <HAL_RCC_OscConfig+0x476>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a34:	7922      	ldrb	r2, [r4, #4]
 8000a36:	4b72      	ldr	r3, [pc, #456]	; (8000c00 <HAL_RCC_OscConfig+0x2b8>)
 8000a38:	709a      	strb	r2, [r3, #2]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000a3a:	6863      	ldr	r3, [r4, #4]
 8000a3c:	b183      	cbz	r3, 8000a60 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 8000a3e:	f7ff fd75 	bl	800052c <HAL_GetTick>
 8000a42:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a44:	4e6e      	ldr	r6, [pc, #440]	; (8000c00 <HAL_RCC_OscConfig+0x2b8>)
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a46:	f241 3788 	movw	r7, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a4a:	6833      	ldr	r3, [r6, #0]
 8000a4c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000a50:	d1a3      	bne.n	800099a <HAL_RCC_OscConfig+0x52>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a52:	f7ff fd6b 	bl	800052c <HAL_GetTick>
 8000a56:	1b40      	subs	r0, r0, r5
 8000a58:	42b8      	cmp	r0, r7
 8000a5a:	d9f6      	bls.n	8000a4a <HAL_RCC_OscConfig+0x102>
            return HAL_TIMEOUT;
 8000a5c:	2003      	movs	r0, #3
 8000a5e:	e1ae      	b.n	8000dbe <HAL_RCC_OscConfig+0x476>
        tickstart = HAL_GetTick();
 8000a60:	f7ff fd64 	bl	800052c <HAL_GetTick>
 8000a64:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a66:	4e66      	ldr	r6, [pc, #408]	; (8000c00 <HAL_RCC_OscConfig+0x2b8>)
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a68:	f241 3788 	movw	r7, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a6c:	6833      	ldr	r3, [r6, #0]
 8000a6e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000a72:	d092      	beq.n	800099a <HAL_RCC_OscConfig+0x52>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a74:	f7ff fd5a 	bl	800052c <HAL_GetTick>
 8000a78:	1b40      	subs	r0, r0, r5
 8000a7a:	42b8      	cmp	r0, r7
 8000a7c:	d9f6      	bls.n	8000a6c <HAL_RCC_OscConfig+0x124>
            return HAL_TIMEOUT;
 8000a7e:	2003      	movs	r0, #3
 8000a80:	e19d      	b.n	8000dbe <HAL_RCC_OscConfig+0x476>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8000a82:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8000a86:	4860      	ldr	r0, [pc, #384]	; (8000c08 <HAL_RCC_OscConfig+0x2c0>)
 8000a88:	f001 f90a 	bl	8001ca0 <assert_failed>
 8000a8c:	e78d      	b.n	80009aa <HAL_RCC_OscConfig+0x62>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8000a8e:	f240 1147 	movw	r1, #327	; 0x147
 8000a92:	485d      	ldr	r0, [pc, #372]	; (8000c08 <HAL_RCC_OscConfig+0x2c0>)
 8000a94:	f001 f904 	bl	8001ca0 <assert_failed>
 8000a98:	e78a      	b.n	80009b0 <HAL_RCC_OscConfig+0x68>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000a9a:	4b59      	ldr	r3, [pc, #356]	; (8000c00 <HAL_RCC_OscConfig+0x2b8>)
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000aa2:	d190      	bne.n	80009c6 <HAL_RCC_OscConfig+0x7e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000aa4:	4b56      	ldr	r3, [pc, #344]	; (8000c00 <HAL_RCC_OscConfig+0x2b8>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f013 0f02 	tst.w	r3, #2
 8000aac:	d003      	beq.n	8000ab6 <HAL_RCC_OscConfig+0x16e>
 8000aae:	68e3      	ldr	r3, [r4, #12]
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	f040 8181 	bne.w	8000db8 <HAL_RCC_OscConfig+0x470>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ab6:	4852      	ldr	r0, [pc, #328]	; (8000c00 <HAL_RCC_OscConfig+0x2b8>)
 8000ab8:	6801      	ldr	r1, [r0, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000aba:	23f8      	movs	r3, #248	; 0xf8
 8000abc:	fa93 f3a3 	rbit	r3, r3
 8000ac0:	fab3 f283 	clz	r2, r3
 8000ac4:	6923      	ldr	r3, [r4, #16]
 8000ac6:	4093      	lsls	r3, r2
 8000ac8:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8000acc:	4313      	orrs	r3, r2
 8000ace:	6003      	str	r3, [r0, #0]
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ad0:	6823      	ldr	r3, [r4, #0]
 8000ad2:	f013 0f08 	tst.w	r3, #8
 8000ad6:	d051      	beq.n	8000b7c <HAL_RCC_OscConfig+0x234>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8000ad8:	6963      	ldr	r3, [r4, #20]
 8000ada:	2b01      	cmp	r3, #1
 8000adc:	d835      	bhi.n	8000b4a <HAL_RCC_OscConfig+0x202>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000ade:	6963      	ldr	r3, [r4, #20]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d038      	beq.n	8000b56 <HAL_RCC_OscConfig+0x20e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ae4:	4b47      	ldr	r3, [pc, #284]	; (8000c04 <HAL_RCC_OscConfig+0x2bc>)
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000aec:	f7ff fd1e 	bl	800052c <HAL_GetTick>
 8000af0:	4605      	mov	r5, r0
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000af2:	4e43      	ldr	r6, [pc, #268]	; (8000c00 <HAL_RCC_OscConfig+0x2b8>)
 8000af4:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8000af6:	f013 0f02 	tst.w	r3, #2
 8000afa:	d13f      	bne.n	8000b7c <HAL_RCC_OscConfig+0x234>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000afc:	f7ff fd16 	bl	800052c <HAL_GetTick>
 8000b00:	1b40      	subs	r0, r0, r5
 8000b02:	2864      	cmp	r0, #100	; 0x64
 8000b04:	d9f6      	bls.n	8000af4 <HAL_RCC_OscConfig+0x1ac>
        {
          return HAL_TIMEOUT;
 8000b06:	2003      	movs	r0, #3
 8000b08:	e159      	b.n	8000dbe <HAL_RCC_OscConfig+0x476>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b0a:	483d      	ldr	r0, [pc, #244]	; (8000c00 <HAL_RCC_OscConfig+0x2b8>)
 8000b0c:	6801      	ldr	r1, [r0, #0]
 8000b0e:	23f8      	movs	r3, #248	; 0xf8
 8000b10:	fa93 f3a3 	rbit	r3, r3
 8000b14:	fab3 f283 	clz	r2, r3
 8000b18:	6923      	ldr	r3, [r4, #16]
 8000b1a:	4093      	lsls	r3, r2
 8000b1c:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8000b20:	4313      	orrs	r3, r2
 8000b22:	6003      	str	r3, [r0, #0]
 8000b24:	e7d4      	b.n	8000ad0 <HAL_RCC_OscConfig+0x188>
        __HAL_RCC_HSI_DISABLE();
 8000b26:	4b37      	ldr	r3, [pc, #220]	; (8000c04 <HAL_RCC_OscConfig+0x2bc>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000b2c:	f7ff fcfe 	bl	800052c <HAL_GetTick>
 8000b30:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b32:	4e33      	ldr	r6, [pc, #204]	; (8000c00 <HAL_RCC_OscConfig+0x2b8>)
 8000b34:	6833      	ldr	r3, [r6, #0]
 8000b36:	f013 0f02 	tst.w	r3, #2
 8000b3a:	d0c9      	beq.n	8000ad0 <HAL_RCC_OscConfig+0x188>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b3c:	f7ff fcf6 	bl	800052c <HAL_GetTick>
 8000b40:	1b40      	subs	r0, r0, r5
 8000b42:	2864      	cmp	r0, #100	; 0x64
 8000b44:	d9f6      	bls.n	8000b34 <HAL_RCC_OscConfig+0x1ec>
            return HAL_TIMEOUT;
 8000b46:	2003      	movs	r0, #3
 8000b48:	e139      	b.n	8000dbe <HAL_RCC_OscConfig+0x476>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8000b4a:	f240 1187 	movw	r1, #391	; 0x187
 8000b4e:	482e      	ldr	r0, [pc, #184]	; (8000c08 <HAL_RCC_OscConfig+0x2c0>)
 8000b50:	f001 f8a6 	bl	8001ca0 <assert_failed>
 8000b54:	e7c3      	b.n	8000ade <HAL_RCC_OscConfig+0x196>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000b56:	4b2b      	ldr	r3, [pc, #172]	; (8000c04 <HAL_RCC_OscConfig+0x2bc>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000b5e:	f7ff fce5 	bl	800052c <HAL_GetTick>
 8000b62:	4605      	mov	r5, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b64:	4e26      	ldr	r6, [pc, #152]	; (8000c00 <HAL_RCC_OscConfig+0x2b8>)
 8000b66:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8000b68:	f013 0f02 	tst.w	r3, #2
 8000b6c:	d006      	beq.n	8000b7c <HAL_RCC_OscConfig+0x234>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b6e:	f7ff fcdd 	bl	800052c <HAL_GetTick>
 8000b72:	1b40      	subs	r0, r0, r5
 8000b74:	2864      	cmp	r0, #100	; 0x64
 8000b76:	d9f6      	bls.n	8000b66 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8000b78:	2003      	movs	r0, #3
 8000b7a:	e120      	b.n	8000dbe <HAL_RCC_OscConfig+0x476>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000b7c:	6823      	ldr	r3, [r4, #0]
 8000b7e:	f013 0f04 	tst.w	r3, #4
 8000b82:	d06d      	beq.n	8000c60 <HAL_RCC_OscConfig+0x318>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8000b84:	68a3      	ldr	r3, [r4, #8]
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d901      	bls.n	8000b8e <HAL_RCC_OscConfig+0x246>
 8000b8a:	2b05      	cmp	r3, #5
 8000b8c:	d11d      	bne.n	8000bca <HAL_RCC_OscConfig+0x282>
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8000b8e:	4b1c      	ldr	r3, [pc, #112]	; (8000c00 <HAL_RCC_OscConfig+0x2b8>)
 8000b90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b92:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000b96:	641a      	str	r2, [r3, #64]	; 0x40
 8000b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b9e:	9301      	str	r3, [sp, #4]
 8000ba0:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8000ba2:	4a1a      	ldr	r2, [pc, #104]	; (8000c0c <HAL_RCC_OscConfig+0x2c4>)
 8000ba4:	6813      	ldr	r3, [r2, #0]
 8000ba6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000baa:	6013      	str	r3, [r2, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8000bac:	f7ff fcbe 	bl	800052c <HAL_GetTick>
 8000bb0:	4605      	mov	r5, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000bb2:	4e16      	ldr	r6, [pc, #88]	; (8000c0c <HAL_RCC_OscConfig+0x2c4>)
 8000bb4:	6833      	ldr	r3, [r6, #0]
 8000bb6:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000bba:	d10c      	bne.n	8000bd6 <HAL_RCC_OscConfig+0x28e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000bbc:	f7ff fcb6 	bl	800052c <HAL_GetTick>
 8000bc0:	1b40      	subs	r0, r0, r5
 8000bc2:	2864      	cmp	r0, #100	; 0x64
 8000bc4:	d9f6      	bls.n	8000bb4 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_TIMEOUT;
 8000bc6:	2003      	movs	r0, #3
 8000bc8:	e0f9      	b.n	8000dbe <HAL_RCC_OscConfig+0x476>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8000bca:	f240 11b1 	movw	r1, #433	; 0x1b1
 8000bce:	480e      	ldr	r0, [pc, #56]	; (8000c08 <HAL_RCC_OscConfig+0x2c0>)
 8000bd0:	f001 f866 	bl	8001ca0 <assert_failed>
 8000bd4:	e7db      	b.n	8000b8e <HAL_RCC_OscConfig+0x246>
      }      
    }
    
    /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8000bd6:	4b0a      	ldr	r3, [pc, #40]	; (8000c00 <HAL_RCC_OscConfig+0x2b8>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8000bde:	f7ff fca5 	bl	800052c <HAL_GetTick>
 8000be2:	4605      	mov	r5, r0
    
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000be4:	4e06      	ldr	r6, [pc, #24]	; (8000c00 <HAL_RCC_OscConfig+0x2b8>)
    {
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000be6:	f241 3788 	movw	r7, #5000	; 0x1388
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000bea:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8000bec:	f013 0f02 	tst.w	r3, #2
 8000bf0:	d00e      	beq.n	8000c10 <HAL_RCC_OscConfig+0x2c8>
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000bf2:	f7ff fc9b 	bl	800052c <HAL_GetTick>
 8000bf6:	1b40      	subs	r0, r0, r5
 8000bf8:	42b8      	cmp	r0, r7
 8000bfa:	d9f6      	bls.n	8000bea <HAL_RCC_OscConfig+0x2a2>
      {
        return HAL_TIMEOUT;
 8000bfc:	2003      	movs	r0, #3
 8000bfe:	e0de      	b.n	8000dbe <HAL_RCC_OscConfig+0x476>
 8000c00:	40023800 	.word	0x40023800
 8000c04:	42470000 	.word	0x42470000
 8000c08:	08001fb8 	.word	0x08001fb8
 8000c0c:	40007000 	.word	0x40007000
      }    
    } 
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c10:	7a22      	ldrb	r2, [r4, #8]
 8000c12:	4b6d      	ldr	r3, [pc, #436]	; (8000dc8 <HAL_RCC_OscConfig+0x480>)
 8000c14:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000c18:	68a3      	ldr	r3, [r4, #8]
 8000c1a:	b183      	cbz	r3, 8000c3e <HAL_RCC_OscConfig+0x2f6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000c1c:	f7ff fc86 	bl	800052c <HAL_GetTick>
 8000c20:	4605      	mov	r5, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c22:	4e69      	ldr	r6, [pc, #420]	; (8000dc8 <HAL_RCC_OscConfig+0x480>)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c24:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c28:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8000c2a:	f013 0f02 	tst.w	r3, #2
 8000c2e:	d117      	bne.n	8000c60 <HAL_RCC_OscConfig+0x318>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c30:	f7ff fc7c 	bl	800052c <HAL_GetTick>
 8000c34:	1b40      	subs	r0, r0, r5
 8000c36:	42b8      	cmp	r0, r7
 8000c38:	d9f6      	bls.n	8000c28 <HAL_RCC_OscConfig+0x2e0>
        {
          return HAL_TIMEOUT;
 8000c3a:	2003      	movs	r0, #3
 8000c3c:	e0bf      	b.n	8000dbe <HAL_RCC_OscConfig+0x476>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000c3e:	f7ff fc75 	bl	800052c <HAL_GetTick>
 8000c42:	4605      	mov	r5, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c44:	4e60      	ldr	r6, [pc, #384]	; (8000dc8 <HAL_RCC_OscConfig+0x480>)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c46:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c4a:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8000c4c:	f013 0f02 	tst.w	r3, #2
 8000c50:	d006      	beq.n	8000c60 <HAL_RCC_OscConfig+0x318>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c52:	f7ff fc6b 	bl	800052c <HAL_GetTick>
 8000c56:	1b40      	subs	r0, r0, r5
 8000c58:	42b8      	cmp	r0, r7
 8000c5a:	d9f6      	bls.n	8000c4a <HAL_RCC_OscConfig+0x302>
        {
          return HAL_TIMEOUT;
 8000c5c:	2003      	movs	r0, #3
 8000c5e:	e0ae      	b.n	8000dbe <HAL_RCC_OscConfig+0x476>
      }
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8000c60:	69a3      	ldr	r3, [r4, #24]
 8000c62:	2b02      	cmp	r3, #2
 8000c64:	d83d      	bhi.n	8000ce2 <HAL_RCC_OscConfig+0x39a>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000c66:	69a3      	ldr	r3, [r4, #24]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	f000 80a7 	beq.w	8000dbc <HAL_RCC_OscConfig+0x474>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000c6e:	4a56      	ldr	r2, [pc, #344]	; (8000dc8 <HAL_RCC_OscConfig+0x480>)
 8000c70:	6892      	ldr	r2, [r2, #8]
 8000c72:	f002 020c 	and.w	r2, r2, #12
 8000c76:	2a08      	cmp	r2, #8
 8000c78:	f000 80a3 	beq.w	8000dc2 <HAL_RCC_OscConfig+0x47a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c7c:	2b02      	cmp	r3, #2
 8000c7e:	f040 8085 	bne.w	8000d8c <HAL_RCC_OscConfig+0x444>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8000c82:	69e3      	ldr	r3, [r4, #28]
 8000c84:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 8000c88:	d004      	beq.n	8000c94 <HAL_RCC_OscConfig+0x34c>
 8000c8a:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 8000c8e:	484f      	ldr	r0, [pc, #316]	; (8000dcc <HAL_RCC_OscConfig+0x484>)
 8000c90:	f001 f806 	bl	8001ca0 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8000c94:	6a23      	ldr	r3, [r4, #32]
 8000c96:	2b3f      	cmp	r3, #63	; 0x3f
 8000c98:	d829      	bhi.n	8000cee <HAL_RCC_OscConfig+0x3a6>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8000c9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000c9c:	3bc0      	subs	r3, #192	; 0xc0
 8000c9e:	2bf0      	cmp	r3, #240	; 0xf0
 8000ca0:	d82b      	bhi.n	8000cfa <HAL_RCC_OscConfig+0x3b2>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8000ca2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000ca4:	2b08      	cmp	r3, #8
 8000ca6:	d82e      	bhi.n	8000d06 <HAL_RCC_OscConfig+0x3be>
 8000ca8:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8000cac:	fa22 f303 	lsr.w	r3, r2, r3
 8000cb0:	f013 0f01 	tst.w	r3, #1
 8000cb4:	d027      	beq.n	8000d06 <HAL_RCC_OscConfig+0x3be>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8000cb6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000cb8:	3b04      	subs	r3, #4
 8000cba:	2b0b      	cmp	r3, #11
 8000cbc:	d829      	bhi.n	8000d12 <HAL_RCC_OscConfig+0x3ca>
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000cbe:	4b44      	ldr	r3, [pc, #272]	; (8000dd0 <HAL_RCC_OscConfig+0x488>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	661a      	str	r2, [r3, #96]	; 0x60
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cc4:	f7ff fc32 	bl	800052c <HAL_GetTick>
 8000cc8:	4605      	mov	r5, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000cca:	4e3f      	ldr	r6, [pc, #252]	; (8000dc8 <HAL_RCC_OscConfig+0x480>)
 8000ccc:	6833      	ldr	r3, [r6, #0]
 8000cce:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000cd2:	d024      	beq.n	8000d1e <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000cd4:	f7ff fc2a 	bl	800052c <HAL_GetTick>
 8000cd8:	1b40      	subs	r0, r0, r5
 8000cda:	2864      	cmp	r0, #100	; 0x64
 8000cdc:	d9f6      	bls.n	8000ccc <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8000cde:	2003      	movs	r0, #3
 8000ce0:	e06d      	b.n	8000dbe <HAL_RCC_OscConfig+0x476>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8000ce2:	f240 11f5 	movw	r1, #501	; 0x1f5
 8000ce6:	4839      	ldr	r0, [pc, #228]	; (8000dcc <HAL_RCC_OscConfig+0x484>)
 8000ce8:	f000 ffda 	bl	8001ca0 <assert_failed>
 8000cec:	e7bb      	b.n	8000c66 <HAL_RCC_OscConfig+0x31e>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8000cee:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000cf2:	4836      	ldr	r0, [pc, #216]	; (8000dcc <HAL_RCC_OscConfig+0x484>)
 8000cf4:	f000 ffd4 	bl	8001ca0 <assert_failed>
 8000cf8:	e7cf      	b.n	8000c9a <HAL_RCC_OscConfig+0x352>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8000cfa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cfe:	4833      	ldr	r0, [pc, #204]	; (8000dcc <HAL_RCC_OscConfig+0x484>)
 8000d00:	f000 ffce 	bl	8001ca0 <assert_failed>
 8000d04:	e7cd      	b.n	8000ca2 <HAL_RCC_OscConfig+0x35a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8000d06:	f240 2101 	movw	r1, #513	; 0x201
 8000d0a:	4830      	ldr	r0, [pc, #192]	; (8000dcc <HAL_RCC_OscConfig+0x484>)
 8000d0c:	f000 ffc8 	bl	8001ca0 <assert_failed>
 8000d10:	e7d1      	b.n	8000cb6 <HAL_RCC_OscConfig+0x36e>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8000d12:	f240 2102 	movw	r1, #514	; 0x202
 8000d16:	482d      	ldr	r0, [pc, #180]	; (8000dcc <HAL_RCC_OscConfig+0x484>)
 8000d18:	f000 ffc2 	bl	8001ca0 <assert_failed>
 8000d1c:	e7cf      	b.n	8000cbe <HAL_RCC_OscConfig+0x376>
 8000d1e:	f647 75c0 	movw	r5, #32704	; 0x7fc0
 8000d22:	fa95 f5a5 	rbit	r5, r5
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000d26:	fab5 f585 	clz	r5, r5
 8000d2a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d2e:	fa92 f2a2 	rbit	r2, r2
 8000d32:	fab2 f082 	clz	r0, r2
 8000d36:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8000d3a:	fa91 f1a1 	rbit	r1, r1
 8000d3e:	fab1 f181 	clz	r1, r1
 8000d42:	69e3      	ldr	r3, [r4, #28]
 8000d44:	6a22      	ldr	r2, [r4, #32]
 8000d46:	4313      	orrs	r3, r2
 8000d48:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000d4a:	40aa      	lsls	r2, r5
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000d50:	0852      	lsrs	r2, r2, #1
 8000d52:	3a01      	subs	r2, #1
 8000d54:	4082      	lsls	r2, r0
 8000d56:	4313      	orrs	r3, r2
 8000d58:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000d5a:	fa02 f101 	lsl.w	r1, r2, r1
 8000d5e:	430b      	orrs	r3, r1
 8000d60:	4a19      	ldr	r2, [pc, #100]	; (8000dc8 <HAL_RCC_OscConfig+0x480>)
 8000d62:	6053      	str	r3, [r2, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1) -1) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000d64:	4b1a      	ldr	r3, [pc, #104]	; (8000dd0 <HAL_RCC_OscConfig+0x488>)
 8000d66:	2201      	movs	r2, #1
 8000d68:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d6a:	f7ff fbdf 	bl	800052c <HAL_GetTick>
 8000d6e:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d70:	4d15      	ldr	r5, [pc, #84]	; (8000dc8 <HAL_RCC_OscConfig+0x480>)
 8000d72:	682b      	ldr	r3, [r5, #0]
 8000d74:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000d78:	d106      	bne.n	8000d88 <HAL_RCC_OscConfig+0x440>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d7a:	f7ff fbd7 	bl	800052c <HAL_GetTick>
 8000d7e:	1b00      	subs	r0, r0, r4
 8000d80:	2864      	cmp	r0, #100	; 0x64
 8000d82:	d9f6      	bls.n	8000d72 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8000d84:	2003      	movs	r0, #3
 8000d86:	e01a      	b.n	8000dbe <HAL_RCC_OscConfig+0x476>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8000d88:	2000      	movs	r0, #0
 8000d8a:	e018      	b.n	8000dbe <HAL_RCC_OscConfig+0x476>
        __HAL_RCC_PLL_DISABLE();
 8000d8c:	4b10      	ldr	r3, [pc, #64]	; (8000dd0 <HAL_RCC_OscConfig+0x488>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8000d92:	f7ff fbcb 	bl	800052c <HAL_GetTick>
 8000d96:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000d98:	4d0b      	ldr	r5, [pc, #44]	; (8000dc8 <HAL_RCC_OscConfig+0x480>)
 8000d9a:	682b      	ldr	r3, [r5, #0]
 8000d9c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000da0:	d006      	beq.n	8000db0 <HAL_RCC_OscConfig+0x468>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000da2:	f7ff fbc3 	bl	800052c <HAL_GetTick>
 8000da6:	1b00      	subs	r0, r0, r4
 8000da8:	2864      	cmp	r0, #100	; 0x64
 8000daa:	d9f6      	bls.n	8000d9a <HAL_RCC_OscConfig+0x452>
            return HAL_TIMEOUT;
 8000dac:	2003      	movs	r0, #3
 8000dae:	e006      	b.n	8000dbe <HAL_RCC_OscConfig+0x476>
  return HAL_OK;
 8000db0:	2000      	movs	r0, #0
 8000db2:	e004      	b.n	8000dbe <HAL_RCC_OscConfig+0x476>
        return HAL_ERROR;
 8000db4:	2001      	movs	r0, #1
 8000db6:	e002      	b.n	8000dbe <HAL_RCC_OscConfig+0x476>
        return HAL_ERROR;
 8000db8:	2001      	movs	r0, #1
 8000dba:	e000      	b.n	8000dbe <HAL_RCC_OscConfig+0x476>
  return HAL_OK;
 8000dbc:	2000      	movs	r0, #0
}
 8000dbe:	b003      	add	sp, #12
 8000dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	e7fb      	b.n	8000dbe <HAL_RCC_OscConfig+0x476>
 8000dc6:	bf00      	nop
 8000dc8:	40023800 	.word	0x40023800
 8000dcc:	08001fb8 	.word	0x08001fb8
 8000dd0:	42470000 	.word	0x42470000

08000dd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000dd8:	4604      	mov	r4, r0
 8000dda:	460d      	mov	r5, r1
  uint32_t tickstart = 0;   
 
  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8000ddc:	6803      	ldr	r3, [r0, #0]
 8000dde:	3b01      	subs	r3, #1
 8000de0:	2b0e      	cmp	r3, #14
 8000de2:	d861      	bhi.n	8000ea8 <HAL_RCC_ClockConfig+0xd4>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8000de4:	2d07      	cmp	r5, #7
 8000de6:	d865      	bhi.n	8000eb4 <HAL_RCC_ClockConfig+0xe0>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000de8:	4ba0      	ldr	r3, [pc, #640]	; (800106c <HAL_RCC_ClockConfig+0x298>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f003 030f 	and.w	r3, r3, #15
 8000df0:	42ab      	cmp	r3, r5
 8000df2:	f080 80aa 	bcs.w	8000f4a <HAL_RCC_ClockConfig+0x176>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000df6:	b2ea      	uxtb	r2, r5
 8000df8:	4b9c      	ldr	r3, [pc, #624]	; (800106c <HAL_RCC_ClockConfig+0x298>)
 8000dfa:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f003 030f 	and.w	r3, r3, #15
 8000e02:	42ab      	cmp	r3, r5
 8000e04:	f040 817f 	bne.w	8001106 <HAL_RCC_ClockConfig+0x332>
    {
      return HAL_ERROR;
    }

    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000e08:	6823      	ldr	r3, [r4, #0]
 8000e0a:	f013 0f02 	tst.w	r3, #2
 8000e0e:	d018      	beq.n	8000e42 <HAL_RCC_ClockConfig+0x6e>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8000e10:	68a3      	ldr	r3, [r4, #8]
 8000e12:	f033 0280 	bics.w	r2, r3, #128	; 0x80
 8000e16:	d00d      	beq.n	8000e34 <HAL_RCC_ClockConfig+0x60>
 8000e18:	f023 0220 	bic.w	r2, r3, #32
 8000e1c:	2a90      	cmp	r2, #144	; 0x90
 8000e1e:	d009      	beq.n	8000e34 <HAL_RCC_ClockConfig+0x60>
 8000e20:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000e24:	2aa0      	cmp	r2, #160	; 0xa0
 8000e26:	d005      	beq.n	8000e34 <HAL_RCC_ClockConfig+0x60>
 8000e28:	f023 0210 	bic.w	r2, r3, #16
 8000e2c:	2ac0      	cmp	r2, #192	; 0xc0
 8000e2e:	d001      	beq.n	8000e34 <HAL_RCC_ClockConfig+0x60>
 8000e30:	2bf0      	cmp	r3, #240	; 0xf0
 8000e32:	d145      	bne.n	8000ec0 <HAL_RCC_ClockConfig+0xec>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000e34:	4a8e      	ldr	r2, [pc, #568]	; (8001070 <HAL_RCC_ClockConfig+0x29c>)
 8000e36:	6893      	ldr	r3, [r2, #8]
 8000e38:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000e3c:	68a1      	ldr	r1, [r4, #8]
 8000e3e:	430b      	orrs	r3, r1
 8000e40:	6093      	str	r3, [r2, #8]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/ 
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000e42:	6823      	ldr	r3, [r4, #0]
 8000e44:	f013 0f01 	tst.w	r3, #1
 8000e48:	f000 811e 	beq.w	8001088 <HAL_RCC_ClockConfig+0x2b4>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8000e4c:	6863      	ldr	r3, [r4, #4]
 8000e4e:	2b03      	cmp	r3, #3
 8000e50:	d83c      	bhi.n	8000ecc <HAL_RCC_ClockConfig+0xf8>
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e52:	6862      	ldr	r2, [r4, #4]
 8000e54:	2a01      	cmp	r2, #1
 8000e56:	d03f      	beq.n	8000ed8 <HAL_RCC_ClockConfig+0x104>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8000e58:	1e93      	subs	r3, r2, #2
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d943      	bls.n	8000ee6 <HAL_RCC_ClockConfig+0x112>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e5e:	4b84      	ldr	r3, [pc, #528]	; (8001070 <HAL_RCC_ClockConfig+0x29c>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f013 0f02 	tst.w	r3, #2
 8000e66:	f000 8150 	beq.w	800110a <HAL_RCC_ClockConfig+0x336>
        {
          return HAL_ERROR;
        }
      }

      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e6a:	4981      	ldr	r1, [pc, #516]	; (8001070 <HAL_RCC_ClockConfig+0x29c>)
 8000e6c:	688b      	ldr	r3, [r1, #8]
 8000e6e:	f023 0303 	bic.w	r3, r3, #3
 8000e72:	4313      	orrs	r3, r2
 8000e74:	608b      	str	r3, [r1, #8]
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e76:	f7ff fb59 	bl	800052c <HAL_GetTick>
 8000e7a:	4605      	mov	r5, r0
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e7c:	6863      	ldr	r3, [r4, #4]
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d038      	beq.n	8000ef4 <HAL_RCC_ClockConfig+0x120>
          {
            return HAL_TIMEOUT;
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e82:	2b02      	cmp	r3, #2
 8000e84:	d046      	beq.n	8000f14 <HAL_RCC_ClockConfig+0x140>
          {
            return HAL_TIMEOUT;
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8000e86:	2b03      	cmp	r3, #3
 8000e88:	d054      	beq.n	8000f34 <HAL_RCC_ClockConfig+0x160>
          }
        }
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e8a:	4e79      	ldr	r6, [pc, #484]	; (8001070 <HAL_RCC_ClockConfig+0x29c>)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e8c:	f241 3788 	movw	r7, #5000	; 0x1388
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e90:	68b3      	ldr	r3, [r6, #8]
 8000e92:	f013 0f0c 	tst.w	r3, #12
 8000e96:	f000 80f7 	beq.w	8001088 <HAL_RCC_ClockConfig+0x2b4>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e9a:	f7ff fb47 	bl	800052c <HAL_GetTick>
 8000e9e:	1b43      	subs	r3, r0, r5
 8000ea0:	42bb      	cmp	r3, r7
 8000ea2:	d9f5      	bls.n	8000e90 <HAL_RCC_ClockConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8000ea4:	2003      	movs	r0, #3
 8000ea6:	e12c      	b.n	8001102 <HAL_RCC_ClockConfig+0x32e>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8000ea8:	f44f 7118 	mov.w	r1, #608	; 0x260
 8000eac:	4871      	ldr	r0, [pc, #452]	; (8001074 <HAL_RCC_ClockConfig+0x2a0>)
 8000eae:	f000 fef7 	bl	8001ca0 <assert_failed>
 8000eb2:	e797      	b.n	8000de4 <HAL_RCC_ClockConfig+0x10>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8000eb4:	f240 2161 	movw	r1, #609	; 0x261
 8000eb8:	486e      	ldr	r0, [pc, #440]	; (8001074 <HAL_RCC_ClockConfig+0x2a0>)
 8000eba:	f000 fef1 	bl	8001ca0 <assert_failed>
 8000ebe:	e793      	b.n	8000de8 <HAL_RCC_ClockConfig+0x14>
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8000ec0:	f240 2177 	movw	r1, #631	; 0x277
 8000ec4:	486b      	ldr	r0, [pc, #428]	; (8001074 <HAL_RCC_ClockConfig+0x2a0>)
 8000ec6:	f000 feeb 	bl	8001ca0 <assert_failed>
 8000eca:	e7b3      	b.n	8000e34 <HAL_RCC_ClockConfig+0x60>
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8000ecc:	f240 217e 	movw	r1, #638	; 0x27e
 8000ed0:	4868      	ldr	r0, [pc, #416]	; (8001074 <HAL_RCC_ClockConfig+0x2a0>)
 8000ed2:	f000 fee5 	bl	8001ca0 <assert_failed>
 8000ed6:	e7bc      	b.n	8000e52 <HAL_RCC_ClockConfig+0x7e>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ed8:	4b65      	ldr	r3, [pc, #404]	; (8001070 <HAL_RCC_ClockConfig+0x29c>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000ee0:	d1c3      	bne.n	8000e6a <HAL_RCC_ClockConfig+0x96>
          return HAL_ERROR;
 8000ee2:	2001      	movs	r0, #1
 8000ee4:	e10d      	b.n	8001102 <HAL_RCC_ClockConfig+0x32e>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ee6:	4b62      	ldr	r3, [pc, #392]	; (8001070 <HAL_RCC_ClockConfig+0x29c>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000eee:	d1bc      	bne.n	8000e6a <HAL_RCC_ClockConfig+0x96>
          return HAL_ERROR;
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	e106      	b.n	8001102 <HAL_RCC_ClockConfig+0x32e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ef4:	4e5e      	ldr	r6, [pc, #376]	; (8001070 <HAL_RCC_ClockConfig+0x29c>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ef6:	f241 3788 	movw	r7, #5000	; 0x1388
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000efa:	68b3      	ldr	r3, [r6, #8]
 8000efc:	f003 030c 	and.w	r3, r3, #12
 8000f00:	2b04      	cmp	r3, #4
 8000f02:	f000 80c1 	beq.w	8001088 <HAL_RCC_ClockConfig+0x2b4>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f06:	f7ff fb11 	bl	800052c <HAL_GetTick>
 8000f0a:	1b43      	subs	r3, r0, r5
 8000f0c:	42bb      	cmp	r3, r7
 8000f0e:	d9f4      	bls.n	8000efa <HAL_RCC_ClockConfig+0x126>
            return HAL_TIMEOUT;
 8000f10:	2003      	movs	r0, #3
 8000f12:	e0f6      	b.n	8001102 <HAL_RCC_ClockConfig+0x32e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f14:	4e56      	ldr	r6, [pc, #344]	; (8001070 <HAL_RCC_ClockConfig+0x29c>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f16:	f241 3788 	movw	r7, #5000	; 0x1388
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f1a:	68b3      	ldr	r3, [r6, #8]
 8000f1c:	f003 030c 	and.w	r3, r3, #12
 8000f20:	2b08      	cmp	r3, #8
 8000f22:	f000 80b1 	beq.w	8001088 <HAL_RCC_ClockConfig+0x2b4>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f26:	f7ff fb01 	bl	800052c <HAL_GetTick>
 8000f2a:	1b40      	subs	r0, r0, r5
 8000f2c:	42b8      	cmp	r0, r7
 8000f2e:	d9f4      	bls.n	8000f1a <HAL_RCC_ClockConfig+0x146>
            return HAL_TIMEOUT;
 8000f30:	2003      	movs	r0, #3
 8000f32:	e0e6      	b.n	8001102 <HAL_RCC_ClockConfig+0x32e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8000f34:	4e4e      	ldr	r6, [pc, #312]	; (8001070 <HAL_RCC_ClockConfig+0x29c>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f36:	f241 3488 	movw	r4, #5000	; 0x1388
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8000f3a:	68b3      	ldr	r3, [r6, #8]
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f3c:	f7ff faf6 	bl	800052c <HAL_GetTick>
 8000f40:	1b40      	subs	r0, r0, r5
 8000f42:	42a0      	cmp	r0, r4
 8000f44:	d9f9      	bls.n	8000f3a <HAL_RCC_ClockConfig+0x166>
            return HAL_TIMEOUT;
 8000f46:	2003      	movs	r0, #3
 8000f48:	e0db      	b.n	8001102 <HAL_RCC_ClockConfig+0x32e>
  }
  /* Decreasing the CPU frequency */
  else
  {
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f4a:	6823      	ldr	r3, [r4, #0]
 8000f4c:	f013 0f02 	tst.w	r3, #2
 8000f50:	d018      	beq.n	8000f84 <HAL_RCC_ClockConfig+0x1b0>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8000f52:	68a3      	ldr	r3, [r4, #8]
 8000f54:	f033 0280 	bics.w	r2, r3, #128	; 0x80
 8000f58:	d00d      	beq.n	8000f76 <HAL_RCC_ClockConfig+0x1a2>
 8000f5a:	f023 0220 	bic.w	r2, r3, #32
 8000f5e:	2a90      	cmp	r2, #144	; 0x90
 8000f60:	d009      	beq.n	8000f76 <HAL_RCC_ClockConfig+0x1a2>
 8000f62:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000f66:	2aa0      	cmp	r2, #160	; 0xa0
 8000f68:	d005      	beq.n	8000f76 <HAL_RCC_ClockConfig+0x1a2>
 8000f6a:	f023 0210 	bic.w	r2, r3, #16
 8000f6e:	2ac0      	cmp	r2, #192	; 0xc0
 8000f70:	d001      	beq.n	8000f76 <HAL_RCC_ClockConfig+0x1a2>
 8000f72:	2bf0      	cmp	r3, #240	; 0xf0
 8000f74:	d137      	bne.n	8000fe6 <HAL_RCC_ClockConfig+0x212>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f76:	4a3e      	ldr	r2, [pc, #248]	; (8001070 <HAL_RCC_ClockConfig+0x29c>)
 8000f78:	6893      	ldr	r3, [r2, #8]
 8000f7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000f7e:	68a1      	ldr	r1, [r4, #8]
 8000f80:	430b      	orrs	r3, r1
 8000f82:	6093      	str	r3, [r2, #8]
    }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f84:	6823      	ldr	r3, [r4, #0]
 8000f86:	f013 0f01 	tst.w	r3, #1
 8000f8a:	d075      	beq.n	8001078 <HAL_RCC_ClockConfig+0x2a4>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8000f8c:	6863      	ldr	r3, [r4, #4]
 8000f8e:	2b03      	cmp	r3, #3
 8000f90:	d82f      	bhi.n	8000ff2 <HAL_RCC_ClockConfig+0x21e>
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f92:	6862      	ldr	r2, [r4, #4]
 8000f94:	2a01      	cmp	r2, #1
 8000f96:	d032      	beq.n	8000ffe <HAL_RCC_ClockConfig+0x22a>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) || 
 8000f98:	1e93      	subs	r3, r2, #2
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d936      	bls.n	800100c <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f9e:	4b34      	ldr	r3, [pc, #208]	; (8001070 <HAL_RCC_ClockConfig+0x29c>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f013 0f02 	tst.w	r3, #2
 8000fa6:	f000 80b2 	beq.w	800110e <HAL_RCC_ClockConfig+0x33a>
        {
          return HAL_ERROR;
        }
      }
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000faa:	4931      	ldr	r1, [pc, #196]	; (8001070 <HAL_RCC_ClockConfig+0x29c>)
 8000fac:	688b      	ldr	r3, [r1, #8]
 8000fae:	f023 0303 	bic.w	r3, r3, #3
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	608b      	str	r3, [r1, #8]
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fb6:	f7ff fab9 	bl	800052c <HAL_GetTick>
 8000fba:	4606      	mov	r6, r0
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fbc:	6863      	ldr	r3, [r4, #4]
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d02b      	beq.n	800101a <HAL_RCC_ClockConfig+0x246>
          {
            return HAL_TIMEOUT;
          } 
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000fc2:	2b02      	cmp	r3, #2
 8000fc4:	d038      	beq.n	8001038 <HAL_RCC_ClockConfig+0x264>
          {
            return HAL_TIMEOUT;
          } 
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8000fc6:	2b03      	cmp	r3, #3
 8000fc8:	d045      	beq.n	8001056 <HAL_RCC_ClockConfig+0x282>
          } 
        }
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fca:	4f29      	ldr	r7, [pc, #164]	; (8001070 <HAL_RCC_ClockConfig+0x29c>)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fcc:	f241 3888 	movw	r8, #5000	; 0x1388
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	f013 0f0c 	tst.w	r3, #12
 8000fd6:	d04f      	beq.n	8001078 <HAL_RCC_ClockConfig+0x2a4>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fd8:	f7ff faa8 	bl	800052c <HAL_GetTick>
 8000fdc:	1b83      	subs	r3, r0, r6
 8000fde:	4543      	cmp	r3, r8
 8000fe0:	d9f6      	bls.n	8000fd0 <HAL_RCC_ClockConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8000fe2:	2003      	movs	r0, #3
 8000fe4:	e08d      	b.n	8001102 <HAL_RCC_ClockConfig+0x32e>
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8000fe6:	f240 21d1 	movw	r1, #721	; 0x2d1
 8000fea:	4822      	ldr	r0, [pc, #136]	; (8001074 <HAL_RCC_ClockConfig+0x2a0>)
 8000fec:	f000 fe58 	bl	8001ca0 <assert_failed>
 8000ff0:	e7c1      	b.n	8000f76 <HAL_RCC_ClockConfig+0x1a2>
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8000ff2:	f44f 7136 	mov.w	r1, #728	; 0x2d8
 8000ff6:	481f      	ldr	r0, [pc, #124]	; (8001074 <HAL_RCC_ClockConfig+0x2a0>)
 8000ff8:	f000 fe52 	bl	8001ca0 <assert_failed>
 8000ffc:	e7c9      	b.n	8000f92 <HAL_RCC_ClockConfig+0x1be>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ffe:	4b1c      	ldr	r3, [pc, #112]	; (8001070 <HAL_RCC_ClockConfig+0x29c>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001006:	d1d0      	bne.n	8000faa <HAL_RCC_ClockConfig+0x1d6>
          return HAL_ERROR;
 8001008:	2001      	movs	r0, #1
 800100a:	e07a      	b.n	8001102 <HAL_RCC_ClockConfig+0x32e>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800100c:	4b18      	ldr	r3, [pc, #96]	; (8001070 <HAL_RCC_ClockConfig+0x29c>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001014:	d1c9      	bne.n	8000faa <HAL_RCC_ClockConfig+0x1d6>
          return HAL_ERROR;
 8001016:	2001      	movs	r0, #1
 8001018:	e073      	b.n	8001102 <HAL_RCC_ClockConfig+0x32e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800101a:	4f15      	ldr	r7, [pc, #84]	; (8001070 <HAL_RCC_ClockConfig+0x29c>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800101c:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	f003 030c 	and.w	r3, r3, #12
 8001026:	2b04      	cmp	r3, #4
 8001028:	d026      	beq.n	8001078 <HAL_RCC_ClockConfig+0x2a4>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800102a:	f7ff fa7f 	bl	800052c <HAL_GetTick>
 800102e:	1b83      	subs	r3, r0, r6
 8001030:	4543      	cmp	r3, r8
 8001032:	d9f5      	bls.n	8001020 <HAL_RCC_ClockConfig+0x24c>
            return HAL_TIMEOUT;
 8001034:	2003      	movs	r0, #3
 8001036:	e064      	b.n	8001102 <HAL_RCC_ClockConfig+0x32e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001038:	4f0d      	ldr	r7, [pc, #52]	; (8001070 <HAL_RCC_ClockConfig+0x29c>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800103a:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	f003 030c 	and.w	r3, r3, #12
 8001044:	2b08      	cmp	r3, #8
 8001046:	d017      	beq.n	8001078 <HAL_RCC_ClockConfig+0x2a4>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001048:	f7ff fa70 	bl	800052c <HAL_GetTick>
 800104c:	1b80      	subs	r0, r0, r6
 800104e:	4540      	cmp	r0, r8
 8001050:	d9f5      	bls.n	800103e <HAL_RCC_ClockConfig+0x26a>
            return HAL_TIMEOUT;
 8001052:	2003      	movs	r0, #3
 8001054:	e055      	b.n	8001102 <HAL_RCC_ClockConfig+0x32e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8001056:	4d06      	ldr	r5, [pc, #24]	; (8001070 <HAL_RCC_ClockConfig+0x29c>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001058:	f241 3488 	movw	r4, #5000	; 0x1388
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 800105c:	68ab      	ldr	r3, [r5, #8]
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800105e:	f7ff fa65 	bl	800052c <HAL_GetTick>
 8001062:	1b80      	subs	r0, r0, r6
 8001064:	42a0      	cmp	r0, r4
 8001066:	d9f9      	bls.n	800105c <HAL_RCC_ClockConfig+0x288>
            return HAL_TIMEOUT;
 8001068:	2003      	movs	r0, #3
 800106a:	e04a      	b.n	8001102 <HAL_RCC_ClockConfig+0x32e>
 800106c:	40023c00 	.word	0x40023c00
 8001070:	40023800 	.word	0x40023800
 8001074:	08001fb8 	.word	0x08001fb8
        }
      }
    }
    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001078:	b2ea      	uxtb	r2, r5
 800107a:	4b27      	ldr	r3, [pc, #156]	; (8001118 <HAL_RCC_ClockConfig+0x344>)
 800107c:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f003 030f 	and.w	r3, r3, #15
 8001084:	42ab      	cmp	r3, r5
 8001086:	d144      	bne.n	8001112 <HAL_RCC_ClockConfig+0x33e>
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001088:	6823      	ldr	r3, [r4, #0]
 800108a:	f013 0f04 	tst.w	r3, #4
 800108e:	d017      	beq.n	80010c0 <HAL_RCC_ClockConfig+0x2ec>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8001090:	68e3      	ldr	r3, [r4, #12]
 8001092:	f433 5280 	bics.w	r2, r3, #4096	; 0x1000
 8001096:	d00c      	beq.n	80010b2 <HAL_RCC_ClockConfig+0x2de>
 8001098:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800109c:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 80010a0:	d007      	beq.n	80010b2 <HAL_RCC_ClockConfig+0x2de>
 80010a2:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80010a6:	d004      	beq.n	80010b2 <HAL_RCC_ClockConfig+0x2de>
 80010a8:	f240 3132 	movw	r1, #818	; 0x332
 80010ac:	481b      	ldr	r0, [pc, #108]	; (800111c <HAL_RCC_ClockConfig+0x348>)
 80010ae:	f000 fdf7 	bl	8001ca0 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80010b2:	4a1b      	ldr	r2, [pc, #108]	; (8001120 <HAL_RCC_ClockConfig+0x34c>)
 80010b4:	6893      	ldr	r3, [r2, #8]
 80010b6:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80010ba:	68e1      	ldr	r1, [r4, #12]
 80010bc:	430b      	orrs	r3, r1
 80010be:	6093      	str	r3, [r2, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010c0:	6823      	ldr	r3, [r4, #0]
 80010c2:	f013 0f08 	tst.w	r3, #8
 80010c6:	d018      	beq.n	80010fa <HAL_RCC_ClockConfig+0x326>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80010c8:	6923      	ldr	r3, [r4, #16]
 80010ca:	f433 5280 	bics.w	r2, r3, #4096	; 0x1000
 80010ce:	d00c      	beq.n	80010ea <HAL_RCC_ClockConfig+0x316>
 80010d0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80010d4:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 80010d8:	d007      	beq.n	80010ea <HAL_RCC_ClockConfig+0x316>
 80010da:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80010de:	d004      	beq.n	80010ea <HAL_RCC_ClockConfig+0x316>
 80010e0:	f240 3139 	movw	r1, #825	; 0x339
 80010e4:	480d      	ldr	r0, [pc, #52]	; (800111c <HAL_RCC_ClockConfig+0x348>)
 80010e6:	f000 fddb 	bl	8001ca0 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80010ea:	4a0d      	ldr	r2, [pc, #52]	; (8001120 <HAL_RCC_ClockConfig+0x34c>)
 80010ec:	6893      	ldr	r3, [r2, #8]
 80010ee:	6921      	ldr	r1, [r4, #16]
 80010f0:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80010f4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80010f8:	6093      	str	r3, [r2, #8]
  }

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80010fa:	2000      	movs	r0, #0
 80010fc:	f7ff f9e0 	bl	80004c0 <HAL_InitTick>
  
  return HAL_OK;
 8001100:	2000      	movs	r0, #0
}
 8001102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_ERROR;
 8001106:	2001      	movs	r0, #1
 8001108:	e7fb      	b.n	8001102 <HAL_RCC_ClockConfig+0x32e>
          return HAL_ERROR;
 800110a:	2001      	movs	r0, #1
 800110c:	e7f9      	b.n	8001102 <HAL_RCC_ClockConfig+0x32e>
          return HAL_ERROR;
 800110e:	2001      	movs	r0, #1
 8001110:	e7f7      	b.n	8001102 <HAL_RCC_ClockConfig+0x32e>
      return HAL_ERROR;
 8001112:	2001      	movs	r0, #1
 8001114:	e7f5      	b.n	8001102 <HAL_RCC_ClockConfig+0x32e>
 8001116:	bf00      	nop
 8001118:	40023c00 	.word	0x40023c00
 800111c:	08001fb8 	.word	0x08001fb8
 8001120:	40023800 	.word	0x40023800

08001124 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001124:	4b1a      	ldr	r3, [pc, #104]	; (8001190 <HAL_RCC_GetSysClockFreq+0x6c>)
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	f003 030c 	and.w	r3, r3, #12
 800112c:	2b04      	cmp	r3, #4
 800112e:	d02b      	beq.n	8001188 <HAL_RCC_GetSysClockFreq+0x64>
 8001130:	2b08      	cmp	r3, #8
 8001132:	d12b      	bne.n	800118c <HAL_RCC_GetSysClockFreq+0x68>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001134:	4b16      	ldr	r3, [pc, #88]	; (8001190 <HAL_RCC_GetSysClockFreq+0x6c>)
 8001136:	685a      	ldr	r2, [r3, #4]
 8001138:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8001142:	4b13      	ldr	r3, [pc, #76]	; (8001190 <HAL_RCC_GetSysClockFreq+0x6c>)
 8001144:	6858      	ldr	r0, [r3, #4]
 8001146:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 800114a:	fa91 f3a1 	rbit	r3, r1
 800114e:	fab3 f383 	clz	r3, r3
 8001152:	ea00 0001 	and.w	r0, r0, r1
 8001156:	fa20 f003 	lsr.w	r0, r0, r3
 800115a:	bf14      	ite	ne
 800115c:	4b0d      	ldrne	r3, [pc, #52]	; (8001194 <HAL_RCC_GetSysClockFreq+0x70>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 800115e:	4b0e      	ldreq	r3, [pc, #56]	; (8001198 <HAL_RCC_GetSysClockFreq+0x74>)
 8001160:	fbb3 f2f2 	udiv	r2, r3, r2
 8001164:	fb02 f000 	mul.w	r0, r2, r0
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 8001168:	4b09      	ldr	r3, [pc, #36]	; (8001190 <HAL_RCC_GetSysClockFreq+0x6c>)
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001170:	fa92 f2a2 	rbit	r2, r2
 8001174:	fab2 f282 	clz	r2, r2
 8001178:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800117c:	40d3      	lsrs	r3, r2
 800117e:	3301      	adds	r3, #1
 8001180:	005b      	lsls	r3, r3, #1
      
      sysclockfreq = pllvco/pllp;
 8001182:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001186:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001188:	4802      	ldr	r0, [pc, #8]	; (8001194 <HAL_RCC_GetSysClockFreq+0x70>)
 800118a:	4770      	bx	lr
      sysclockfreq = HSI_VALUE;
 800118c:	4802      	ldr	r0, [pc, #8]	; (8001198 <HAL_RCC_GetSysClockFreq+0x74>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800118e:	4770      	bx	lr
 8001190:	40023800 	.word	0x40023800
 8001194:	007a1200 	.word	0x007a1200
 8001198:	00f42400 	.word	0x00f42400

0800119c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800119c:	b508      	push	{r3, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800119e:	f7ff ffc1 	bl	8001124 <HAL_RCC_GetSysClockFreq>
 80011a2:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <HAL_RCC_GetHCLKFreq+0x28>)
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	22f0      	movs	r2, #240	; 0xf0
 80011a8:	fa92 f2a2 	rbit	r2, r2
 80011ac:	fab2 f282 	clz	r2, r2
 80011b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80011b4:	40d3      	lsrs	r3, r2
 80011b6:	4a04      	ldr	r2, [pc, #16]	; (80011c8 <HAL_RCC_GetHCLKFreq+0x2c>)
 80011b8:	5cd3      	ldrb	r3, [r2, r3]
 80011ba:	40d8      	lsrs	r0, r3
 80011bc:	4b03      	ldr	r3, [pc, #12]	; (80011cc <HAL_RCC_GetHCLKFreq+0x30>)
 80011be:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 80011c0:	bd08      	pop	{r3, pc}
 80011c2:	bf00      	nop
 80011c4:	40023800 	.word	0x40023800
 80011c8:	08001ea8 	.word	0x08001ea8
 80011cc:	2000000c 	.word	0x2000000c

080011d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
 80011d0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 80011d2:	f7ff ffe3 	bl	800119c <HAL_RCC_GetHCLKFreq>
 80011d6:	4b07      	ldr	r3, [pc, #28]	; (80011f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 80011de:	fa92 f2a2 	rbit	r2, r2
 80011e2:	fab2 f282 	clz	r2, r2
 80011e6:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80011ea:	40d3      	lsrs	r3, r2
 80011ec:	4a02      	ldr	r2, [pc, #8]	; (80011f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80011ee:	5cd3      	ldrb	r3, [r2, r3]
}
 80011f0:	40d8      	lsrs	r0, r3
 80011f2:	bd08      	pop	{r3, pc}
 80011f4:	40023800 	.word	0x40023800
 80011f8:	08001ea8 	.word	0x08001ea8

080011fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80011fc:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 80011fe:	f7ff ffcd 	bl	800119c <HAL_RCC_GetHCLKFreq>
 8001202:	4b07      	ldr	r3, [pc, #28]	; (8001220 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 800120a:	fa92 f2a2 	rbit	r2, r2
 800120e:	fab2 f282 	clz	r2, r2
 8001212:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001216:	40d3      	lsrs	r3, r2
 8001218:	4a02      	ldr	r2, [pc, #8]	; (8001224 <HAL_RCC_GetPCLK2Freq+0x28>)
 800121a:	5cd3      	ldrb	r3, [r2, r3]
} 
 800121c:	40d8      	lsrs	r0, r3
 800121e:	bd08      	pop	{r3, pc}
 8001220:	40023800 	.word	0x40023800
 8001224:	08001ea8 	.word	0x08001ea8

08001228 <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8001228:	2800      	cmp	r0, #0
 800122a:	f000 80aa 	beq.w	8001382 <HAL_SPI_Init+0x15a>
{
 800122e:	b510      	push	{r4, lr}
 8001230:	4604      	mov	r4, r0
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8001232:	6843      	ldr	r3, [r0, #4]
 8001234:	b113      	cbz	r3, 800123c <HAL_SPI_Init+0x14>
 8001236:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800123a:	d17e      	bne.n	800133a <HAL_SPI_Init+0x112>
  assert_param(IS_SPI_DIRECTION_MODE(hspi->Init.Direction));
 800123c:	68a3      	ldr	r3, [r4, #8]
 800123e:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 8001242:	d002      	beq.n	800124a <HAL_SPI_Init+0x22>
 8001244:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001248:	d17c      	bne.n	8001344 <HAL_SPI_Init+0x11c>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800124a:	68e3      	ldr	r3, [r4, #12]
 800124c:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 8001250:	d17d      	bne.n	800134e <HAL_SPI_Init+0x126>
  assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8001252:	6923      	ldr	r3, [r4, #16]
 8001254:	f033 0302 	bics.w	r3, r3, #2
 8001258:	d003      	beq.n	8001262 <HAL_SPI_Init+0x3a>
 800125a:	21bb      	movs	r1, #187	; 0xbb
 800125c:	484a      	ldr	r0, [pc, #296]	; (8001388 <HAL_SPI_Init+0x160>)
 800125e:	f000 fd1f 	bl	8001ca0 <assert_failed>
  assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8001262:	6963      	ldr	r3, [r4, #20]
 8001264:	2b01      	cmp	r3, #1
 8001266:	d877      	bhi.n	8001358 <HAL_SPI_Init+0x130>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8001268:	69a3      	ldr	r3, [r4, #24]
 800126a:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 800126e:	d002      	beq.n	8001276 <HAL_SPI_Init+0x4e>
 8001270:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001274:	d175      	bne.n	8001362 <HAL_SPI_Init+0x13a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8001276:	69e3      	ldr	r3, [r4, #28]
 8001278:	f033 0308 	bics.w	r3, r3, #8
 800127c:	d009      	beq.n	8001292 <HAL_SPI_Init+0x6a>
 800127e:	2b10      	cmp	r3, #16
 8001280:	d007      	beq.n	8001292 <HAL_SPI_Init+0x6a>
 8001282:	2b20      	cmp	r3, #32
 8001284:	d005      	beq.n	8001292 <HAL_SPI_Init+0x6a>
 8001286:	2b30      	cmp	r3, #48	; 0x30
 8001288:	d003      	beq.n	8001292 <HAL_SPI_Init+0x6a>
 800128a:	21be      	movs	r1, #190	; 0xbe
 800128c:	483e      	ldr	r0, [pc, #248]	; (8001388 <HAL_SPI_Init+0x160>)
 800128e:	f000 fd07 	bl	8001ca0 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8001292:	6a23      	ldr	r3, [r4, #32]
 8001294:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8001298:	d003      	beq.n	80012a2 <HAL_SPI_Init+0x7a>
 800129a:	21bf      	movs	r1, #191	; 0xbf
 800129c:	483a      	ldr	r0, [pc, #232]	; (8001388 <HAL_SPI_Init+0x160>)
 800129e:	f000 fcff 	bl	8001ca0 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 80012a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80012a4:	f033 0310 	bics.w	r3, r3, #16
 80012a8:	d003      	beq.n	80012b2 <HAL_SPI_Init+0x8a>
 80012aa:	21c0      	movs	r1, #192	; 0xc0
 80012ac:	4836      	ldr	r0, [pc, #216]	; (8001388 <HAL_SPI_Init+0x160>)
 80012ae:	f000 fcf7 	bl	8001ca0 <assert_failed>
  assert_param(IS_SPI_CRC_CALCULATION(hspi->Init.CRCCalculation));
 80012b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80012b4:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 80012b8:	d003      	beq.n	80012c2 <HAL_SPI_Init+0x9a>
 80012ba:	21c1      	movs	r1, #193	; 0xc1
 80012bc:	4832      	ldr	r0, [pc, #200]	; (8001388 <HAL_SPI_Init+0x160>)
 80012be:	f000 fcef 	bl	8001ca0 <assert_failed>
  assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
 80012c2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80012c4:	3b01      	subs	r3, #1
 80012c6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d84e      	bhi.n	800136c <HAL_SPI_Init+0x144>

  if(hspi->State == HAL_SPI_STATE_RESET)
 80012ce:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d04f      	beq.n	8001376 <HAL_SPI_Init+0x14e>
    hspi->Lock = HAL_UNLOCKED;
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 80012d6:	2302      	movs	r3, #2
 80012d8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80012dc:	6822      	ldr	r2, [r4, #0]
 80012de:	6813      	ldr	r3, [r2, #0]
 80012e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80012e4:	6013      	str	r3, [r2, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  hspi->Instance->CR1 = (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80012e6:	6822      	ldr	r2, [r4, #0]
                         hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 80012e8:	6863      	ldr	r3, [r4, #4]
 80012ea:	68a1      	ldr	r1, [r4, #8]
 80012ec:	430b      	orrs	r3, r1
 80012ee:	68e1      	ldr	r1, [r4, #12]
 80012f0:	430b      	orrs	r3, r1
 80012f2:	6921      	ldr	r1, [r4, #16]
 80012f4:	430b      	orrs	r3, r1
 80012f6:	6961      	ldr	r1, [r4, #20]
 80012f8:	430b      	orrs	r3, r1
 80012fa:	69e1      	ldr	r1, [r4, #28]
 80012fc:	430b      	orrs	r3, r1
 80012fe:	6a21      	ldr	r1, [r4, #32]
 8001300:	430b      	orrs	r3, r1
 8001302:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001304:	430b      	orrs	r3, r1
                         hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
 8001306:	69a1      	ldr	r1, [r4, #24]
 8001308:	f401 7100 	and.w	r1, r1, #512	; 0x200
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 800130c:	430b      	orrs	r3, r1
  hspi->Instance->CR1 = (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800130e:	6013      	str	r3, [r2, #0]

  /* Configure : NSS management */
  hspi->Instance->CR2 = (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode);
 8001310:	6822      	ldr	r2, [r4, #0]
 8001312:	8b63      	ldrh	r3, [r4, #26]
 8001314:	f003 0304 	and.w	r3, r3, #4
 8001318:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800131a:	430b      	orrs	r3, r1
 800131c:	6053      	str	r3, [r2, #4]

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  hspi->Instance->CRCPR = hspi->Init.CRCPolynomial;
 800131e:	6823      	ldr	r3, [r4, #0]
 8001320:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001322:	611a      	str	r2, [r3, #16]

  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  hspi->Instance->I2SCFGR &= (uint32_t)(~SPI_I2SCFGR_I2SMOD);
 8001324:	6822      	ldr	r2, [r4, #0]
 8001326:	69d3      	ldr	r3, [r2, #28]
 8001328:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800132c:	61d3      	str	r3, [r2, #28]

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800132e:	2000      	movs	r0, #0
 8001330:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8001332:	2301      	movs	r3, #1
 8001334:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  
  return HAL_OK;
}
 8001338:	bd10      	pop	{r4, pc}
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800133a:	21b8      	movs	r1, #184	; 0xb8
 800133c:	4812      	ldr	r0, [pc, #72]	; (8001388 <HAL_SPI_Init+0x160>)
 800133e:	f000 fcaf 	bl	8001ca0 <assert_failed>
 8001342:	e77b      	b.n	800123c <HAL_SPI_Init+0x14>
  assert_param(IS_SPI_DIRECTION_MODE(hspi->Init.Direction));
 8001344:	21b9      	movs	r1, #185	; 0xb9
 8001346:	4810      	ldr	r0, [pc, #64]	; (8001388 <HAL_SPI_Init+0x160>)
 8001348:	f000 fcaa 	bl	8001ca0 <assert_failed>
 800134c:	e77d      	b.n	800124a <HAL_SPI_Init+0x22>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800134e:	21ba      	movs	r1, #186	; 0xba
 8001350:	480d      	ldr	r0, [pc, #52]	; (8001388 <HAL_SPI_Init+0x160>)
 8001352:	f000 fca5 	bl	8001ca0 <assert_failed>
 8001356:	e77c      	b.n	8001252 <HAL_SPI_Init+0x2a>
  assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8001358:	21bc      	movs	r1, #188	; 0xbc
 800135a:	480b      	ldr	r0, [pc, #44]	; (8001388 <HAL_SPI_Init+0x160>)
 800135c:	f000 fca0 	bl	8001ca0 <assert_failed>
 8001360:	e782      	b.n	8001268 <HAL_SPI_Init+0x40>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8001362:	21bd      	movs	r1, #189	; 0xbd
 8001364:	4808      	ldr	r0, [pc, #32]	; (8001388 <HAL_SPI_Init+0x160>)
 8001366:	f000 fc9b 	bl	8001ca0 <assert_failed>
 800136a:	e784      	b.n	8001276 <HAL_SPI_Init+0x4e>
  assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
 800136c:	21c2      	movs	r1, #194	; 0xc2
 800136e:	4806      	ldr	r0, [pc, #24]	; (8001388 <HAL_SPI_Init+0x160>)
 8001370:	f000 fc96 	bl	8001ca0 <assert_failed>
 8001374:	e7ab      	b.n	80012ce <HAL_SPI_Init+0xa6>
    hspi->Lock = HAL_UNLOCKED;
 8001376:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 800137a:	4620      	mov	r0, r4
 800137c:	f000 fc9c 	bl	8001cb8 <HAL_SPI_MspInit>
 8001380:	e7a9      	b.n	80012d6 <HAL_SPI_Init+0xae>
    return HAL_ERROR;
 8001382:	2001      	movs	r0, #1
}
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	08002038 	.word	0x08002038

0800138c <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800138c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800138e:	4604      	mov	r4, r0
  uint32_t tmpreg = 0x00;
  
  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));  
 8001390:	6842      	ldr	r2, [r0, #4]
 8001392:	4b94      	ldr	r3, [pc, #592]	; (80015e4 <UART_SetConfig+0x258>)
 8001394:	429a      	cmp	r2, r3
 8001396:	d878      	bhi.n	800148a <UART_SetConfig+0xfe>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8001398:	68e3      	ldr	r3, [r4, #12]
 800139a:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 800139e:	d004      	beq.n	80013aa <UART_SetConfig+0x1e>
 80013a0:	f240 7137 	movw	r1, #1847	; 0x737
 80013a4:	4890      	ldr	r0, [pc, #576]	; (80015e8 <UART_SetConfig+0x25c>)
 80013a6:	f000 fc7b 	bl	8001ca0 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80013aa:	6923      	ldr	r3, [r4, #16]
 80013ac:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 80013b0:	d002      	beq.n	80013b8 <UART_SetConfig+0x2c>
 80013b2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80013b6:	d16e      	bne.n	8001496 <UART_SetConfig+0x10a>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80013b8:	6963      	ldr	r3, [r4, #20]
 80013ba:	f64f 72f3 	movw	r2, #65523	; 0xfff3
 80013be:	4213      	tst	r3, r2
 80013c0:	d100      	bne.n	80013c4 <UART_SetConfig+0x38>
 80013c2:	b923      	cbnz	r3, 80013ce <UART_SetConfig+0x42>
 80013c4:	f240 7139 	movw	r1, #1849	; 0x739
 80013c8:	4887      	ldr	r0, [pc, #540]	; (80015e8 <UART_SetConfig+0x25c>)
 80013ca:	f000 fc69 	bl	8001ca0 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 80013ce:	6822      	ldr	r2, [r4, #0]
 80013d0:	6913      	ldr	r3, [r2, #16]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80013d2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80013d6:	68e1      	ldr	r1, [r4, #12]
 80013d8:	430b      	orrs	r3, r1
  
  /* Write to USART CR2 */
  huart->Instance->CR2 = (uint32_t)tmpreg;
 80013da:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 80013dc:	6821      	ldr	r1, [r4, #0]
 80013de:	68ca      	ldr	r2, [r1, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80013e0:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
 80013e4:	f022 020c 	bic.w	r2, r2, #12
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80013e8:	68a3      	ldr	r3, [r4, #8]
 80013ea:	6920      	ldr	r0, [r4, #16]
 80013ec:	4303      	orrs	r3, r0
 80013ee:	6960      	ldr	r0, [r4, #20]
 80013f0:	4303      	orrs	r3, r0
 80013f2:	69e0      	ldr	r0, [r4, #28]
 80013f4:	4303      	orrs	r3, r0
 80013f6:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  huart->Instance->CR1 = (uint32_t)tmpreg;
 80013f8:	60cb      	str	r3, [r1, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 80013fa:	6822      	ldr	r2, [r4, #0]
 80013fc:	6953      	ldr	r3, [r2, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 80013fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8001402:	69a1      	ldr	r1, [r4, #24]
 8001404:	430b      	orrs	r3, r1
  
  /* Write to USART CR3 */
  huart->Instance->CR3 = (uint32_t)tmpreg;
 8001406:	6153      	str	r3, [r2, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001408:	69e3      	ldr	r3, [r4, #28]
 800140a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800140e:	d048      	beq.n	80014a2 <UART_SetConfig+0x116>
    }
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001410:	6823      	ldr	r3, [r4, #0]
 8001412:	4a76      	ldr	r2, [pc, #472]	; (80015ec <UART_SetConfig+0x260>)
 8001414:	4293      	cmp	r3, r2
 8001416:	f000 80b2 	beq.w	800157e <UART_SetConfig+0x1f2>
 800141a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800141e:	4293      	cmp	r3, r2
 8001420:	f000 80ad 	beq.w	800157e <UART_SetConfig+0x1f2>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001424:	f7ff fed4 	bl	80011d0 <HAL_RCC_GetPCLK1Freq>
 8001428:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800142c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001430:	6863      	ldr	r3, [r4, #4]
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	fbb0 f3f3 	udiv	r3, r0, r3
 8001438:	4f6d      	ldr	r7, [pc, #436]	; (80015f0 <UART_SetConfig+0x264>)
 800143a:	fba7 2303 	umull	r2, r3, r7, r3
 800143e:	095b      	lsrs	r3, r3, #5
 8001440:	011e      	lsls	r6, r3, #4
 8001442:	f7ff fec5 	bl	80011d0 <HAL_RCC_GetPCLK1Freq>
 8001446:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800144a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800144e:	6865      	ldr	r5, [r4, #4]
 8001450:	00ad      	lsls	r5, r5, #2
 8001452:	fbb0 f5f5 	udiv	r5, r0, r5
 8001456:	f7ff febb 	bl	80011d0 <HAL_RCC_GetPCLK1Freq>
 800145a:	6822      	ldr	r2, [r4, #0]
 800145c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001460:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001464:	6863      	ldr	r3, [r4, #4]
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	fbb0 f3f3 	udiv	r3, r0, r3
 800146c:	fba7 1303 	umull	r1, r3, r7, r3
 8001470:	095b      	lsrs	r3, r3, #5
 8001472:	2164      	movs	r1, #100	; 0x64
 8001474:	fb01 5313 	mls	r3, r1, r3, r5
 8001478:	011b      	lsls	r3, r3, #4
 800147a:	3332      	adds	r3, #50	; 0x32
 800147c:	fba7 1303 	umull	r1, r3, r7, r3
 8001480:	f3c3 1343 	ubfx	r3, r3, #5, #4
 8001484:	4333      	orrs	r3, r6
 8001486:	6093      	str	r3, [r2, #8]
    }
  }
}
 8001488:	e0ab      	b.n	80015e2 <UART_SetConfig+0x256>
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));  
 800148a:	f240 7136 	movw	r1, #1846	; 0x736
 800148e:	4856      	ldr	r0, [pc, #344]	; (80015e8 <UART_SetConfig+0x25c>)
 8001490:	f000 fc06 	bl	8001ca0 <assert_failed>
 8001494:	e780      	b.n	8001398 <UART_SetConfig+0xc>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8001496:	f44f 61e7 	mov.w	r1, #1848	; 0x738
 800149a:	4853      	ldr	r0, [pc, #332]	; (80015e8 <UART_SetConfig+0x25c>)
 800149c:	f000 fc00 	bl	8001ca0 <assert_failed>
 80014a0:	e78a      	b.n	80013b8 <UART_SetConfig+0x2c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80014a2:	6823      	ldr	r3, [r4, #0]
 80014a4:	4a51      	ldr	r2, [pc, #324]	; (80015ec <UART_SetConfig+0x260>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d036      	beq.n	8001518 <UART_SetConfig+0x18c>
 80014aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d032      	beq.n	8001518 <UART_SetConfig+0x18c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80014b2:	f7ff fe8d 	bl	80011d0 <HAL_RCC_GetPCLK1Freq>
 80014b6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80014ba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80014be:	6863      	ldr	r3, [r4, #4]
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80014c6:	4f4a      	ldr	r7, [pc, #296]	; (80015f0 <UART_SetConfig+0x264>)
 80014c8:	fba7 2303 	umull	r2, r3, r7, r3
 80014cc:	095b      	lsrs	r3, r3, #5
 80014ce:	011e      	lsls	r6, r3, #4
 80014d0:	f7ff fe7e 	bl	80011d0 <HAL_RCC_GetPCLK1Freq>
 80014d4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80014d8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80014dc:	6865      	ldr	r5, [r4, #4]
 80014de:	006d      	lsls	r5, r5, #1
 80014e0:	fbb0 f5f5 	udiv	r5, r0, r5
 80014e4:	f7ff fe74 	bl	80011d0 <HAL_RCC_GetPCLK1Freq>
 80014e8:	6822      	ldr	r2, [r4, #0]
 80014ea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80014ee:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80014f2:	6863      	ldr	r3, [r4, #4]
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80014fa:	fba7 1303 	umull	r1, r3, r7, r3
 80014fe:	095b      	lsrs	r3, r3, #5
 8001500:	2164      	movs	r1, #100	; 0x64
 8001502:	fb01 5313 	mls	r3, r1, r3, r5
 8001506:	011b      	lsls	r3, r3, #4
 8001508:	3332      	adds	r3, #50	; 0x32
 800150a:	fba7 1303 	umull	r1, r3, r7, r3
 800150e:	f3c3 1343 	ubfx	r3, r3, #5, #4
 8001512:	4333      	orrs	r3, r6
 8001514:	6093      	str	r3, [r2, #8]
 8001516:	e064      	b.n	80015e2 <UART_SetConfig+0x256>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001518:	f7ff fe70 	bl	80011fc <HAL_RCC_GetPCLK2Freq>
 800151c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001520:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001524:	6863      	ldr	r3, [r4, #4]
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	fbb0 f3f3 	udiv	r3, r0, r3
 800152c:	4f30      	ldr	r7, [pc, #192]	; (80015f0 <UART_SetConfig+0x264>)
 800152e:	fba7 2303 	umull	r2, r3, r7, r3
 8001532:	095b      	lsrs	r3, r3, #5
 8001534:	011e      	lsls	r6, r3, #4
 8001536:	f7ff fe61 	bl	80011fc <HAL_RCC_GetPCLK2Freq>
 800153a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800153e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001542:	6865      	ldr	r5, [r4, #4]
 8001544:	006d      	lsls	r5, r5, #1
 8001546:	fbb0 f5f5 	udiv	r5, r0, r5
 800154a:	f7ff fe57 	bl	80011fc <HAL_RCC_GetPCLK2Freq>
 800154e:	6822      	ldr	r2, [r4, #0]
 8001550:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001554:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001558:	6863      	ldr	r3, [r4, #4]
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001560:	fba7 1303 	umull	r1, r3, r7, r3
 8001564:	095b      	lsrs	r3, r3, #5
 8001566:	2164      	movs	r1, #100	; 0x64
 8001568:	fb01 5313 	mls	r3, r1, r3, r5
 800156c:	011b      	lsls	r3, r3, #4
 800156e:	3332      	adds	r3, #50	; 0x32
 8001570:	fba7 1303 	umull	r1, r3, r7, r3
 8001574:	f3c3 1343 	ubfx	r3, r3, #5, #4
 8001578:	4333      	orrs	r3, r6
 800157a:	6093      	str	r3, [r2, #8]
 800157c:	e031      	b.n	80015e2 <UART_SetConfig+0x256>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800157e:	f7ff fe3d 	bl	80011fc <HAL_RCC_GetPCLK2Freq>
 8001582:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001586:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800158a:	6863      	ldr	r3, [r4, #4]
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001592:	4f17      	ldr	r7, [pc, #92]	; (80015f0 <UART_SetConfig+0x264>)
 8001594:	fba7 2303 	umull	r2, r3, r7, r3
 8001598:	095b      	lsrs	r3, r3, #5
 800159a:	011e      	lsls	r6, r3, #4
 800159c:	f7ff fe2e 	bl	80011fc <HAL_RCC_GetPCLK2Freq>
 80015a0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80015a4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80015a8:	6865      	ldr	r5, [r4, #4]
 80015aa:	00ad      	lsls	r5, r5, #2
 80015ac:	fbb0 f5f5 	udiv	r5, r0, r5
 80015b0:	f7ff fe24 	bl	80011fc <HAL_RCC_GetPCLK2Freq>
 80015b4:	6822      	ldr	r2, [r4, #0]
 80015b6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80015ba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80015be:	6863      	ldr	r3, [r4, #4]
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80015c6:	fba7 1303 	umull	r1, r3, r7, r3
 80015ca:	095b      	lsrs	r3, r3, #5
 80015cc:	2164      	movs	r1, #100	; 0x64
 80015ce:	fb01 5313 	mls	r3, r1, r3, r5
 80015d2:	011b      	lsls	r3, r3, #4
 80015d4:	3332      	adds	r3, #50	; 0x32
 80015d6:	fba7 1303 	umull	r1, r3, r7, r3
 80015da:	f3c3 1343 	ubfx	r3, r3, #5, #4
 80015de:	4333      	orrs	r3, r6
 80015e0:	6093      	str	r3, [r2, #8]
}
 80015e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80015e4:	00a037a0 	.word	0x00a037a0
 80015e8:	080020b8 	.word	0x080020b8
 80015ec:	40011000 	.word	0x40011000
 80015f0:	51eb851f 	.word	0x51eb851f

080015f4 <UART_WaitOnFlagUntilTimeout>:
{
 80015f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015f8:	4606      	mov	r6, r0
 80015fa:	460d      	mov	r5, r1
 80015fc:	4690      	mov	r8, r2
 80015fe:	461c      	mov	r4, r3
  tickstart = HAL_GetTick();
 8001600:	f7fe ff94 	bl	800052c <HAL_GetTick>
 8001604:	4607      	mov	r7, r0
  if(Status == RESET)
 8001606:	f1b8 0f00 	cmp.w	r8, #0
 800160a:	d029      	beq.n	8001660 <UART_WaitOnFlagUntilTimeout+0x6c>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 800160c:	6832      	ldr	r2, [r6, #0]
 800160e:	6813      	ldr	r3, [r2, #0]
 8001610:	ea35 0303 	bics.w	r3, r5, r3
 8001614:	d151      	bne.n	80016ba <UART_WaitOnFlagUntilTimeout+0xc6>
      if(Timeout != HAL_MAX_DELAY)
 8001616:	f1b4 3fff 	cmp.w	r4, #4294967295
 800161a:	d0f8      	beq.n	800160e <UART_WaitOnFlagUntilTimeout+0x1a>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800161c:	b124      	cbz	r4, 8001628 <UART_WaitOnFlagUntilTimeout+0x34>
 800161e:	f7fe ff85 	bl	800052c <HAL_GetTick>
 8001622:	1bc0      	subs	r0, r0, r7
 8001624:	42a0      	cmp	r0, r4
 8001626:	d9f1      	bls.n	800160c <UART_WaitOnFlagUntilTimeout+0x18>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001628:	6832      	ldr	r2, [r6, #0]
 800162a:	68d3      	ldr	r3, [r2, #12]
 800162c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001630:	60d3      	str	r3, [r2, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001632:	6832      	ldr	r2, [r6, #0]
 8001634:	68d3      	ldr	r3, [r2, #12]
 8001636:	f023 0320 	bic.w	r3, r3, #32
 800163a:	60d3      	str	r3, [r2, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800163c:	6832      	ldr	r2, [r6, #0]
 800163e:	68d3      	ldr	r3, [r2, #12]
 8001640:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001644:	60d3      	str	r3, [r2, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001646:	6832      	ldr	r2, [r6, #0]
 8001648:	6953      	ldr	r3, [r2, #20]
 800164a:	f023 0301 	bic.w	r3, r3, #1
 800164e:	6153      	str	r3, [r2, #20]
          huart->State= HAL_UART_STATE_READY;
 8001650:	2301      	movs	r3, #1
 8001652:	f886 3039 	strb.w	r3, [r6, #57]	; 0x39
          __HAL_UNLOCK(huart);
 8001656:	2300      	movs	r3, #0
 8001658:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38
          return HAL_TIMEOUT;
 800165c:	2003      	movs	r0, #3
 800165e:	e02a      	b.n	80016b6 <UART_WaitOnFlagUntilTimeout+0xc2>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8001660:	6831      	ldr	r1, [r6, #0]
 8001662:	680b      	ldr	r3, [r1, #0]
 8001664:	ea35 0303 	bics.w	r3, r5, r3
 8001668:	d024      	beq.n	80016b4 <UART_WaitOnFlagUntilTimeout+0xc0>
      if(Timeout != HAL_MAX_DELAY)
 800166a:	f1b4 3fff 	cmp.w	r4, #4294967295
 800166e:	d0f8      	beq.n	8001662 <UART_WaitOnFlagUntilTimeout+0x6e>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001670:	b124      	cbz	r4, 800167c <UART_WaitOnFlagUntilTimeout+0x88>
 8001672:	f7fe ff5b 	bl	800052c <HAL_GetTick>
 8001676:	1bc0      	subs	r0, r0, r7
 8001678:	42a0      	cmp	r0, r4
 800167a:	d9f1      	bls.n	8001660 <UART_WaitOnFlagUntilTimeout+0x6c>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800167c:	6832      	ldr	r2, [r6, #0]
 800167e:	68d3      	ldr	r3, [r2, #12]
 8001680:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001684:	60d3      	str	r3, [r2, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001686:	6832      	ldr	r2, [r6, #0]
 8001688:	68d3      	ldr	r3, [r2, #12]
 800168a:	f023 0320 	bic.w	r3, r3, #32
 800168e:	60d3      	str	r3, [r2, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001690:	6832      	ldr	r2, [r6, #0]
 8001692:	68d3      	ldr	r3, [r2, #12]
 8001694:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001698:	60d3      	str	r3, [r2, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800169a:	6832      	ldr	r2, [r6, #0]
 800169c:	6953      	ldr	r3, [r2, #20]
 800169e:	f023 0301 	bic.w	r3, r3, #1
 80016a2:	6153      	str	r3, [r2, #20]
          huart->State= HAL_UART_STATE_READY;
 80016a4:	2301      	movs	r3, #1
 80016a6:	f886 3039 	strb.w	r3, [r6, #57]	; 0x39
          __HAL_UNLOCK(huart);
 80016aa:	2300      	movs	r3, #0
 80016ac:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38
          return HAL_TIMEOUT;
 80016b0:	2003      	movs	r0, #3
 80016b2:	e000      	b.n	80016b6 <UART_WaitOnFlagUntilTimeout+0xc2>
  return HAL_OK;
 80016b4:	4640      	mov	r0, r8
}
 80016b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 80016ba:	2000      	movs	r0, #0
 80016bc:	e7fb      	b.n	80016b6 <UART_WaitOnFlagUntilTimeout+0xc2>
	...

080016c0 <HAL_UART_Init>:
  if(huart == NULL)
 80016c0:	2800      	cmp	r0, #0
 80016c2:	d072      	beq.n	80017aa <HAL_UART_Init+0xea>
{
 80016c4:	b510      	push	{r4, lr}
 80016c6:	4604      	mov	r4, r0
  if(huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80016c8:	6983      	ldr	r3, [r0, #24]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d055      	beq.n	800177a <HAL_UART_Init+0xba>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80016ce:	6802      	ldr	r2, [r0, #0]
 80016d0:	4937      	ldr	r1, [pc, #220]	; (80017b0 <HAL_UART_Init+0xf0>)
 80016d2:	428a      	cmp	r2, r1
 80016d4:	d044      	beq.n	8001760 <HAL_UART_Init+0xa0>
 80016d6:	f5a1 414c 	sub.w	r1, r1, #52224	; 0xcc00
 80016da:	428a      	cmp	r2, r1
 80016dc:	d040      	beq.n	8001760 <HAL_UART_Init+0xa0>
 80016de:	f501 4150 	add.w	r1, r1, #53248	; 0xd000
 80016e2:	428a      	cmp	r2, r1
 80016e4:	d03c      	beq.n	8001760 <HAL_UART_Init+0xa0>
 80016e6:	21fc      	movs	r1, #252	; 0xfc
 80016e8:	4832      	ldr	r0, [pc, #200]	; (80017b4 <HAL_UART_Init+0xf4>)
 80016ea:	f000 fad9 	bl	8001ca0 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80016ee:	69a3      	ldr	r3, [r4, #24]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d135      	bne.n	8001760 <HAL_UART_Init+0xa0>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80016f4:	68a3      	ldr	r3, [r4, #8]
 80016f6:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 80016fa:	d004      	beq.n	8001706 <HAL_UART_Init+0x46>
 80016fc:	f240 1103 	movw	r1, #259	; 0x103
 8001700:	482c      	ldr	r0, [pc, #176]	; (80017b4 <HAL_UART_Init+0xf4>)
 8001702:	f000 facd 	bl	8001ca0 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8001706:	69e3      	ldr	r3, [r4, #28]
 8001708:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 800170c:	d004      	beq.n	8001718 <HAL_UART_Init+0x58>
 800170e:	f44f 7182 	mov.w	r1, #260	; 0x104
 8001712:	4828      	ldr	r0, [pc, #160]	; (80017b4 <HAL_UART_Init+0xf4>)
 8001714:	f000 fac4 	bl	8001ca0 <assert_failed>
  if(huart->State == HAL_UART_STATE_RESET)
 8001718:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 800171c:	2b00      	cmp	r3, #0
 800171e:	d03e      	beq.n	800179e <HAL_UART_Init+0xde>
  huart->State = HAL_UART_STATE_BUSY;
 8001720:	2302      	movs	r3, #2
 8001722:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001726:	6822      	ldr	r2, [r4, #0]
 8001728:	68d3      	ldr	r3, [r2, #12]
 800172a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800172e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001730:	4620      	mov	r0, r4
 8001732:	f7ff fe2b 	bl	800138c <UART_SetConfig>
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8001736:	6822      	ldr	r2, [r4, #0]
 8001738:	6913      	ldr	r3, [r2, #16]
 800173a:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800173e:	6113      	str	r3, [r2, #16]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8001740:	6822      	ldr	r2, [r4, #0]
 8001742:	6953      	ldr	r3, [r2, #20]
 8001744:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8001748:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 800174a:	6822      	ldr	r2, [r4, #0]
 800174c:	68d3      	ldr	r3, [r2, #12]
 800174e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001752:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001754:	2000      	movs	r0, #0
 8001756:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->State= HAL_UART_STATE_READY;
 8001758:	2301      	movs	r3, #1
 800175a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 800175e:	bd10      	pop	{r4, pc}
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8001760:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001764:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8001768:	d0c4      	beq.n	80016f4 <HAL_UART_Init+0x34>
 800176a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800176e:	d0c1      	beq.n	80016f4 <HAL_UART_Init+0x34>
 8001770:	21fd      	movs	r1, #253	; 0xfd
 8001772:	4810      	ldr	r0, [pc, #64]	; (80017b4 <HAL_UART_Init+0xf4>)
 8001774:	f000 fa94 	bl	8001ca0 <assert_failed>
 8001778:	e7bc      	b.n	80016f4 <HAL_UART_Init+0x34>
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800177a:	6803      	ldr	r3, [r0, #0]
 800177c:	4a0c      	ldr	r2, [pc, #48]	; (80017b0 <HAL_UART_Init+0xf0>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d0b8      	beq.n	80016f4 <HAL_UART_Init+0x34>
 8001782:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 8001786:	4293      	cmp	r3, r2
 8001788:	d0b4      	beq.n	80016f4 <HAL_UART_Init+0x34>
 800178a:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
 800178e:	4293      	cmp	r3, r2
 8001790:	d0b0      	beq.n	80016f4 <HAL_UART_Init+0x34>
 8001792:	f240 1101 	movw	r1, #257	; 0x101
 8001796:	4807      	ldr	r0, [pc, #28]	; (80017b4 <HAL_UART_Init+0xf4>)
 8001798:	f000 fa82 	bl	8001ca0 <assert_failed>
 800179c:	e7aa      	b.n	80016f4 <HAL_UART_Init+0x34>
    huart->Lock = HAL_UNLOCKED;
 800179e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80017a2:	4620      	mov	r0, r4
 80017a4:	f000 faf6 	bl	8001d94 <HAL_UART_MspInit>
 80017a8:	e7ba      	b.n	8001720 <HAL_UART_Init+0x60>
    return HAL_ERROR;
 80017aa:	2001      	movs	r0, #1
}
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	40011000 	.word	0x40011000
 80017b4:	080020b8 	.word	0x080020b8

080017b8 <HAL_UART_Transmit>:
{
 80017b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017bc:	4604      	mov	r4, r0
 80017be:	4688      	mov	r8, r1
 80017c0:	461d      	mov	r5, r3
  tmp1 = huart->State;
 80017c2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80017c6:	b2db      	uxtb	r3, r3
  if((tmp1 == HAL_UART_STATE_READY) || (tmp1 == HAL_UART_STATE_BUSY_RX))
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d001      	beq.n	80017d0 <HAL_UART_Transmit+0x18>
 80017cc:	2b22      	cmp	r3, #34	; 0x22
 80017ce:	d15b      	bne.n	8001888 <HAL_UART_Transmit+0xd0>
    if((pData == NULL ) || (Size == 0)) 
 80017d0:	f1b8 0f00 	cmp.w	r8, #0
 80017d4:	d05b      	beq.n	800188e <HAL_UART_Transmit+0xd6>
 80017d6:	2a00      	cmp	r2, #0
 80017d8:	d05b      	beq.n	8001892 <HAL_UART_Transmit+0xda>
    __HAL_LOCK(huart);
 80017da:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d059      	beq.n	8001896 <HAL_UART_Transmit+0xde>
 80017e2:	2301      	movs	r3, #1
 80017e4:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80017e8:	2300      	movs	r3, #0
 80017ea:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 80017ec:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	2b22      	cmp	r3, #34	; 0x22
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80017f4:	bf0c      	ite	eq
 80017f6:	2332      	moveq	r3, #50	; 0x32
      huart->State = HAL_UART_STATE_BUSY_TX;
 80017f8:	2312      	movne	r3, #18
 80017fa:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    huart->TxXferSize = Size;
 80017fe:	84a2      	strh	r2, [r4, #36]	; 0x24
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8001800:	2700      	movs	r7, #0
 8001802:	2680      	movs	r6, #128	; 0x80
 8001804:	e01d      	b.n	8001842 <HAL_UART_Transmit+0x8a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8001806:	462b      	mov	r3, r5
 8001808:	463a      	mov	r2, r7
 800180a:	4631      	mov	r1, r6
 800180c:	4620      	mov	r0, r4
 800180e:	f7ff fef1 	bl	80015f4 <UART_WaitOnFlagUntilTimeout>
 8001812:	2800      	cmp	r0, #0
 8001814:	d141      	bne.n	800189a <HAL_UART_Transmit+0xe2>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001816:	6822      	ldr	r2, [r4, #0]
 8001818:	f8b8 3000 	ldrh.w	r3, [r8]
 800181c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001820:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001822:	6923      	ldr	r3, [r4, #16]
 8001824:	b913      	cbnz	r3, 800182c <HAL_UART_Transmit+0x74>
          pData +=2;
 8001826:	f108 0802 	add.w	r8, r8, #2
 800182a:	e008      	b.n	800183e <HAL_UART_Transmit+0x86>
          pData +=1;
 800182c:	f108 0801 	add.w	r8, r8, #1
 8001830:	e005      	b.n	800183e <HAL_UART_Transmit+0x86>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001832:	4641      	mov	r1, r8
 8001834:	6823      	ldr	r3, [r4, #0]
 8001836:	f811 2b01 	ldrb.w	r2, [r1], #1
 800183a:	605a      	str	r2, [r3, #4]
 800183c:	4688      	mov	r8, r1
    while(huart->TxXferCount > 0)
 800183e:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8001840:	b17a      	cbz	r2, 8001862 <HAL_UART_Transmit+0xaa>
      huart->TxXferCount--;
 8001842:	3a01      	subs	r2, #1
 8001844:	84e2      	strh	r2, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001846:	68a2      	ldr	r2, [r4, #8]
 8001848:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800184c:	d0db      	beq.n	8001806 <HAL_UART_Transmit+0x4e>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 800184e:	462b      	mov	r3, r5
 8001850:	463a      	mov	r2, r7
 8001852:	4631      	mov	r1, r6
 8001854:	4620      	mov	r0, r4
 8001856:	f7ff fecd 	bl	80015f4 <UART_WaitOnFlagUntilTimeout>
 800185a:	2800      	cmp	r0, #0
 800185c:	d0e9      	beq.n	8001832 <HAL_UART_Transmit+0x7a>
          return HAL_TIMEOUT;
 800185e:	2003      	movs	r0, #3
 8001860:	e013      	b.n	800188a <HAL_UART_Transmit+0xd2>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 8001862:	462b      	mov	r3, r5
 8001864:	2140      	movs	r1, #64	; 0x40
 8001866:	4620      	mov	r0, r4
 8001868:	f7ff fec4 	bl	80015f4 <UART_WaitOnFlagUntilTimeout>
 800186c:	b9b8      	cbnz	r0, 800189e <HAL_UART_Transmit+0xe6>
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 800186e:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8001872:	b2db      	uxtb	r3, r3
 8001874:	2b32      	cmp	r3, #50	; 0x32
      huart->State = HAL_UART_STATE_BUSY_RX;
 8001876:	bf0c      	ite	eq
 8001878:	2322      	moveq	r3, #34	; 0x22
      huart->State = HAL_UART_STATE_READY;
 800187a:	2301      	movne	r3, #1
 800187c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8001880:	2300      	movs	r3, #0
 8001882:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    return HAL_OK;
 8001886:	e000      	b.n	800188a <HAL_UART_Transmit+0xd2>
    return HAL_BUSY;   
 8001888:	2002      	movs	r0, #2
}
 800188a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 800188e:	2001      	movs	r0, #1
 8001890:	e7fb      	b.n	800188a <HAL_UART_Transmit+0xd2>
 8001892:	2001      	movs	r0, #1
 8001894:	e7f9      	b.n	800188a <HAL_UART_Transmit+0xd2>
    __HAL_LOCK(huart);
 8001896:	2002      	movs	r0, #2
 8001898:	e7f7      	b.n	800188a <HAL_UART_Transmit+0xd2>
          return HAL_TIMEOUT;
 800189a:	2003      	movs	r0, #3
 800189c:	e7f5      	b.n	800188a <HAL_UART_Transmit+0xd2>
      return HAL_TIMEOUT;
 800189e:	2003      	movs	r0, #3
 80018a0:	e7f3      	b.n	800188a <HAL_UART_Transmit+0xd2>

080018a2 <HAL_UART_TxCpltCallback>:
}
 80018a2:	4770      	bx	lr

080018a4 <HAL_UART_RxCpltCallback>:
}
 80018a4:	4770      	bx	lr

080018a6 <HAL_UART_ErrorCallback>:
}
 80018a6:	4770      	bx	lr

080018a8 <HAL_UART_IRQHandler>:
{
 80018a8:	b510      	push	{r4, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	4604      	mov	r4, r0
  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
 80018ae:	6803      	ldr	r3, [r0, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE);  
 80018b2:	68d9      	ldr	r1, [r3, #12]
  if((tmp1 != RESET) && (tmp2 != RESET))
 80018b4:	f012 0f01 	tst.w	r2, #1
 80018b8:	d00b      	beq.n	80018d2 <HAL_UART_IRQHandler+0x2a>
 80018ba:	f411 7f80 	tst.w	r1, #256	; 0x100
 80018be:	d008      	beq.n	80018d2 <HAL_UART_IRQHandler+0x2a>
    __HAL_UART_CLEAR_PEFLAG(huart);
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	9200      	str	r2, [sp, #0]
 80018c4:	685a      	ldr	r2, [r3, #4]
 80018c6:	9200      	str	r2, [sp, #0]
 80018c8:	9a00      	ldr	r2, [sp, #0]
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 80018ca:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80018cc:	f042 0201 	orr.w	r2, r2, #1
 80018d0:	63c2      	str	r2, [r0, #60]	; 0x3c
  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_FE);
 80018d2:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 80018d4:	6959      	ldr	r1, [r3, #20]
  if((tmp1 != RESET) && (tmp2 != RESET))
 80018d6:	f012 0f02 	tst.w	r2, #2
 80018da:	d00b      	beq.n	80018f4 <HAL_UART_IRQHandler+0x4c>
 80018dc:	f011 0f01 	tst.w	r1, #1
 80018e0:	d008      	beq.n	80018f4 <HAL_UART_IRQHandler+0x4c>
    __HAL_UART_CLEAR_FEFLAG(huart);
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	9201      	str	r2, [sp, #4]
 80018e6:	685a      	ldr	r2, [r3, #4]
 80018e8:	9201      	str	r2, [sp, #4]
 80018ea:	9a01      	ldr	r2, [sp, #4]
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 80018ec:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80018ee:	f042 0204 	orr.w	r2, r2, #4
 80018f2:	63e2      	str	r2, [r4, #60]	; 0x3c
  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_NE);
 80018f4:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 80018f6:	6959      	ldr	r1, [r3, #20]
  if((tmp1 != RESET) && (tmp2 != RESET))
 80018f8:	f012 0f04 	tst.w	r2, #4
 80018fc:	d00b      	beq.n	8001916 <HAL_UART_IRQHandler+0x6e>
 80018fe:	f011 0f01 	tst.w	r1, #1
 8001902:	d008      	beq.n	8001916 <HAL_UART_IRQHandler+0x6e>
    __HAL_UART_CLEAR_NEFLAG(huart);
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	9202      	str	r2, [sp, #8]
 8001908:	685a      	ldr	r2, [r3, #4]
 800190a:	9202      	str	r2, [sp, #8]
 800190c:	9a02      	ldr	r2, [sp, #8]
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 800190e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001910:	f042 0202 	orr.w	r2, r2, #2
 8001914:	63e2      	str	r2, [r4, #60]	; 0x3c
  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_ORE);
 8001916:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 8001918:	6959      	ldr	r1, [r3, #20]
  if((tmp1 != RESET) && (tmp2 != RESET))
 800191a:	f012 0f08 	tst.w	r2, #8
 800191e:	d00b      	beq.n	8001938 <HAL_UART_IRQHandler+0x90>
 8001920:	f011 0f01 	tst.w	r1, #1
 8001924:	d008      	beq.n	8001938 <HAL_UART_IRQHandler+0x90>
    __HAL_UART_CLEAR_OREFLAG(huart);
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	9203      	str	r2, [sp, #12]
 800192a:	685a      	ldr	r2, [r3, #4]
 800192c:	9203      	str	r2, [sp, #12]
 800192e:	9a03      	ldr	r2, [sp, #12]
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001930:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001932:	f042 0208 	orr.w	r2, r2, #8
 8001936:	63e2      	str	r2, [r4, #60]	; 0x3c
  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE);
 8001938:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE);
 800193a:	68d9      	ldr	r1, [r3, #12]
  if((tmp1 != RESET) && (tmp2 != RESET))
 800193c:	f012 0f20 	tst.w	r2, #32
 8001940:	d002      	beq.n	8001948 <HAL_UART_IRQHandler+0xa0>
 8001942:	f011 0f20 	tst.w	r1, #32
 8001946:	d118      	bne.n	800197a <HAL_UART_IRQHandler+0xd2>
  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_TXE);
 8001948:	6823      	ldr	r3, [r4, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE);
 800194c:	68d9      	ldr	r1, [r3, #12]
  if((tmp1 != RESET) && (tmp2 != RESET))
 800194e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001952:	d002      	beq.n	800195a <HAL_UART_IRQHandler+0xb2>
 8001954:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001958:	d160      	bne.n	8001a1c <HAL_UART_IRQHandler+0x174>
  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_TC);
 800195a:	6823      	ldr	r3, [r4, #0]
 800195c:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC);
 800195e:	68d9      	ldr	r1, [r3, #12]
  if((tmp1 != RESET) && (tmp2 != RESET))
 8001960:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001964:	d003      	beq.n	800196e <HAL_UART_IRQHandler+0xc6>
 8001966:	f011 0f40 	tst.w	r1, #64	; 0x40
 800196a:	f040 8086 	bne.w	8001a7a <HAL_UART_IRQHandler+0x1d2>
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800196e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001970:	2b00      	cmp	r3, #0
 8001972:	f040 80a0 	bne.w	8001ab6 <HAL_UART_IRQHandler+0x20e>
}
 8001976:	b004      	add	sp, #16
 8001978:	bd10      	pop	{r4, pc}
  tmp1 = huart->State; 
 800197a:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
  if((tmp1 == HAL_UART_STATE_BUSY_RX) || (tmp1 == HAL_UART_STATE_BUSY_TX_RX))
 800197e:	f002 02ef 	and.w	r2, r2, #239	; 0xef
 8001982:	2a22      	cmp	r2, #34	; 0x22
 8001984:	d1e0      	bne.n	8001948 <HAL_UART_IRQHandler+0xa0>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001986:	68a2      	ldr	r2, [r4, #8]
 8001988:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800198c:	d028      	beq.n	80019e0 <HAL_UART_IRQHandler+0x138>
      if(huart->Init.Parity == UART_PARITY_NONE)
 800198e:	6922      	ldr	r2, [r4, #16]
 8001990:	2a00      	cmp	r2, #0
 8001992:	d137      	bne.n	8001a04 <HAL_UART_IRQHandler+0x15c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001994:	685a      	ldr	r2, [r3, #4]
 8001996:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001998:	1c59      	adds	r1, r3, #1
 800199a:	62a1      	str	r1, [r4, #40]	; 0x28
 800199c:	701a      	strb	r2, [r3, #0]
    if(--huart->RxXferCount == 0)
 800199e:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80019a0:	3b01      	subs	r3, #1
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	85e3      	strh	r3, [r4, #46]	; 0x2e
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d1ce      	bne.n	8001948 <HAL_UART_IRQHandler+0xa0>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80019aa:	6822      	ldr	r2, [r4, #0]
 80019ac:	68d3      	ldr	r3, [r2, #12]
 80019ae:	f023 0320 	bic.w	r3, r3, #32
 80019b2:	60d3      	str	r3, [r2, #12]
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 80019b4:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	2b32      	cmp	r3, #50	; 0x32
 80019bc:	d02a      	beq.n	8001a14 <HAL_UART_IRQHandler+0x16c>
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80019be:	6822      	ldr	r2, [r4, #0]
 80019c0:	68d3      	ldr	r3, [r2, #12]
 80019c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019c6:	60d3      	str	r3, [r2, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80019c8:	6822      	ldr	r2, [r4, #0]
 80019ca:	6953      	ldr	r3, [r2, #20]
 80019cc:	f023 0301 	bic.w	r3, r3, #1
 80019d0:	6153      	str	r3, [r2, #20]
        huart->State = HAL_UART_STATE_READY;
 80019d2:	2301      	movs	r3, #1
 80019d4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      HAL_UART_RxCpltCallback(huart);
 80019d8:	4620      	mov	r0, r4
 80019da:	f7ff ff63 	bl	80018a4 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 80019de:	e7b3      	b.n	8001948 <HAL_UART_IRQHandler+0xa0>
      tmp = (uint16_t*) huart->pRxBuffPtr;
 80019e0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
      if(huart->Init.Parity == UART_PARITY_NONE)
 80019e2:	6922      	ldr	r2, [r4, #16]
 80019e4:	b93a      	cbnz	r2, 80019f6 <HAL_UART_IRQHandler+0x14e>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019ec:	800b      	strh	r3, [r1, #0]
        huart->pRxBuffPtr += 2;
 80019ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80019f0:	3302      	adds	r3, #2
 80019f2:	62a3      	str	r3, [r4, #40]	; 0x28
 80019f4:	e7d3      	b.n	800199e <HAL_UART_IRQHandler+0xf6>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	800b      	strh	r3, [r1, #0]
        huart->pRxBuffPtr += 1;
 80019fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80019fe:	3301      	adds	r3, #1
 8001a00:	62a3      	str	r3, [r4, #40]	; 0x28
 8001a02:	e7cc      	b.n	800199e <HAL_UART_IRQHandler+0xf6>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001a08:	1c51      	adds	r1, r2, #1
 8001a0a:	62a1      	str	r1, [r4, #40]	; 0x28
 8001a0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a10:	7013      	strb	r3, [r2, #0]
 8001a12:	e7c4      	b.n	800199e <HAL_UART_IRQHandler+0xf6>
        huart->State = HAL_UART_STATE_BUSY_TX;
 8001a14:	2312      	movs	r3, #18
 8001a16:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 8001a1a:	e7dd      	b.n	80019d8 <HAL_UART_IRQHandler+0x130>
  tmp1 = huart->State;
 8001a1c:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
  if((tmp1 == HAL_UART_STATE_BUSY_TX) || (tmp1 == HAL_UART_STATE_BUSY_TX_RX))
 8001a20:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8001a24:	2a12      	cmp	r2, #18
 8001a26:	d198      	bne.n	800195a <HAL_UART_IRQHandler+0xb2>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001a28:	68a2      	ldr	r2, [r4, #8]
 8001a2a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001a2e:	d015      	beq.n	8001a5c <HAL_UART_IRQHandler+0x1b4>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001a30:	6a22      	ldr	r2, [r4, #32]
 8001a32:	1c51      	adds	r1, r2, #1
 8001a34:	6221      	str	r1, [r4, #32]
 8001a36:	7812      	ldrb	r2, [r2, #0]
 8001a38:	605a      	str	r2, [r3, #4]
    if(--huart->TxXferCount == 0)
 8001a3a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001a3c:	3b01      	subs	r3, #1
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	84e3      	strh	r3, [r4, #38]	; 0x26
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d189      	bne.n	800195a <HAL_UART_IRQHandler+0xb2>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001a46:	6822      	ldr	r2, [r4, #0]
 8001a48:	68d3      	ldr	r3, [r2, #12]
 8001a4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a4e:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001a50:	6822      	ldr	r2, [r4, #0]
 8001a52:	68d3      	ldr	r3, [r2, #12]
 8001a54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a58:	60d3      	str	r3, [r2, #12]
 8001a5a:	e77e      	b.n	800195a <HAL_UART_IRQHandler+0xb2>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001a5c:	6a22      	ldr	r2, [r4, #32]
 8001a5e:	8812      	ldrh	r2, [r2, #0]
 8001a60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001a64:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001a66:	6923      	ldr	r3, [r4, #16]
 8001a68:	b91b      	cbnz	r3, 8001a72 <HAL_UART_IRQHandler+0x1ca>
        huart->pTxBuffPtr += 2;
 8001a6a:	6a23      	ldr	r3, [r4, #32]
 8001a6c:	3302      	adds	r3, #2
 8001a6e:	6223      	str	r3, [r4, #32]
 8001a70:	e7e3      	b.n	8001a3a <HAL_UART_IRQHandler+0x192>
        huart->pTxBuffPtr += 1;
 8001a72:	6a23      	ldr	r3, [r4, #32]
 8001a74:	3301      	adds	r3, #1
 8001a76:	6223      	str	r3, [r4, #32]
 8001a78:	e7df      	b.n	8001a3a <HAL_UART_IRQHandler+0x192>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001a7a:	68da      	ldr	r2, [r3, #12]
 8001a7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a80:	60da      	str	r2, [r3, #12]
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8001a82:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	2b32      	cmp	r3, #50	; 0x32
 8001a8a:	d010      	beq.n	8001aae <HAL_UART_IRQHandler+0x206>
    __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001a8c:	6822      	ldr	r2, [r4, #0]
 8001a8e:	68d3      	ldr	r3, [r2, #12]
 8001a90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a94:	60d3      	str	r3, [r2, #12]
    __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001a96:	6822      	ldr	r2, [r4, #0]
 8001a98:	6953      	ldr	r3, [r2, #20]
 8001a9a:	f023 0301 	bic.w	r3, r3, #1
 8001a9e:	6153      	str	r3, [r2, #20]
    huart->State = HAL_UART_STATE_READY;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8001aa6:	4620      	mov	r0, r4
 8001aa8:	f7ff fefb 	bl	80018a2 <HAL_UART_TxCpltCallback>
  return HAL_OK;
 8001aac:	e75f      	b.n	800196e <HAL_UART_IRQHandler+0xc6>
    huart->State = HAL_UART_STATE_BUSY_RX;
 8001aae:	2322      	movs	r3, #34	; 0x22
 8001ab0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 8001ab4:	e7f7      	b.n	8001aa6 <HAL_UART_IRQHandler+0x1fe>
    huart->State = HAL_UART_STATE_READY;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    HAL_UART_ErrorCallback(huart);
 8001abc:	4620      	mov	r0, r4
 8001abe:	f7ff fef2 	bl	80018a6 <HAL_UART_ErrorCallback>
}
 8001ac2:	e758      	b.n	8001976 <HAL_UART_IRQHandler+0xce>

08001ac4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ac4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001afc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001ac8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001aca:	e003      	b.n	8001ad4 <LoopCopyDataInit>

08001acc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001acc:	4b0c      	ldr	r3, [pc, #48]	; (8001b00 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001ace:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001ad0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001ad2:	3104      	adds	r1, #4

08001ad4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ad4:	480b      	ldr	r0, [pc, #44]	; (8001b04 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001ad6:	4b0c      	ldr	r3, [pc, #48]	; (8001b08 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001ad8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001ada:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001adc:	d3f6      	bcc.n	8001acc <CopyDataInit>
  ldr  r2, =_sbss
 8001ade:	4a0b      	ldr	r2, [pc, #44]	; (8001b0c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001ae0:	e002      	b.n	8001ae8 <LoopFillZerobss>

08001ae2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001ae2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001ae4:	f842 3b04 	str.w	r3, [r2], #4

08001ae8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001ae8:	4b09      	ldr	r3, [pc, #36]	; (8001b10 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001aea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001aec:	d3f9      	bcc.n	8001ae2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001aee:	f7fe fcc1 	bl	8000474 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001af2:	f000 f9a9 	bl	8001e48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001af6:	f000 f875 	bl	8001be4 <main>
  bx  lr    
 8001afa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001afc:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001b00:	0800250c 	.word	0x0800250c
  ldr  r0, =_sdata
 8001b04:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001b08:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8001b0c:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8001b10:	20000238 	.word	0x20000238

08001b14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b14:	e7fe      	b.n	8001b14 <ADC_IRQHandler>

08001b16 <USART_Transmit>:
 * @param  huart       pointer to a UART_HandleTypeDef structure that contains
 *                     the configuration information for the specified UART module.
 * @param  TextString  The text string to be sent.
 * @note It use the HAL_UART_Transmit function.
 */
void USART_Transmit(UART_HandleTypeDef* huart, uint8_t* TextString) {
 8001b16:	b510      	push	{r4, lr}
	uint8_t TextStringLength;

	/* Calculate the length of the text string to be sent */
	TextStringLength = 0;
	while (TextString[TextStringLength++] != '\0')
 8001b18:	2300      	movs	r3, #0
 8001b1a:	b2da      	uxtb	r2, r3
 8001b1c:	5c8c      	ldrb	r4, [r1, r2]
 8001b1e:	3301      	adds	r3, #1
 8001b20:	2c00      	cmp	r4, #0
 8001b22:	d1fa      	bne.n	8001b1a <USART_Transmit+0x4>
		;
	TextStringLength--;

	/* Use the HAL function to send the text string via USART */
	HAL_UART_Transmit(huart, TextString, TextStringLength, 10);
 8001b24:	230a      	movs	r3, #10
 8001b26:	f7ff fe47 	bl	80017b8 <HAL_UART_Transmit>
}
 8001b2a:	bd10      	pop	{r4, pc}

08001b2c <USART_ITCharManager>:
 * @brief  Handle text character just received.
 * @param  huart pointer to a UART_HandleTypeDef structure that contains
 *               the configuration information for the specified UART module.
 * @note To use inside USART2_IRQHandler function.
 */
void USART_ITCharManager(UART_HandleTypeDef* huart) {
 8001b2c:	b510      	push	{r4, lr}
 8001b2e:	4604      	mov	r4, r0
	uint8_t UART_Receive_IT_Char;

	UART_Receive_IT_Char = (uint8_t) (huart->Instance->USART_DATA_REGISTER);
 8001b30:	6803      	ldr	r3, [r0, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
	/* Checks the buffer full or retur carriage  */
	if ((huart->RxXferCount == 1) || (UART_Receive_IT_Char == '\r')) {
 8001b34:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
 8001b36:	2a01      	cmp	r2, #1
 8001b38:	d003      	beq.n	8001b42 <USART_ITCharManager+0x16>
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	2b0d      	cmp	r3, #13
 8001b3e:	d000      	beq.n	8001b42 <USART_ITCharManager+0x16>
			__HAL_UART_DISABLE_IT(huart, UART_IT_ERR);

			huart->State = HAL_UART_STATE_READY;
		}
	}
}
 8001b40:	bd10      	pop	{r4, pc}
		huart->RxXferCount += 1;
 8001b42:	3201      	adds	r2, #1
 8001b44:	85e2      	strh	r2, [r4, #46]	; 0x2e
		huart->pRxBuffPtr -= 1;
 8001b46:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001b48:	1e5a      	subs	r2, r3, #1
 8001b4a:	62a2      	str	r2, [r4, #40]	; 0x28
		*(huart->pRxBuffPtr) = '\0';
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f803 2c01 	strb.w	r2, [r3, #-1]
		USART_Transmit(huart, (uint8_t *)"\r\n");
 8001b52:	4912      	ldr	r1, [pc, #72]	; (8001b9c <USART_ITCharManager+0x70>)
 8001b54:	4620      	mov	r0, r4
 8001b56:	f7ff ffde 	bl	8001b16 <USART_Transmit>
		while (HAL_IS_BIT_SET(huart->Instance->USART_STATUS_REGISTER,
 8001b5a:	6822      	ldr	r2, [r4, #0]
 8001b5c:	6813      	ldr	r3, [r2, #0]
 8001b5e:	f013 0f20 	tst.w	r3, #32
 8001b62:	d1fb      	bne.n	8001b5c <USART_ITCharManager+0x30>
		__HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001b64:	68d3      	ldr	r3, [r2, #12]
 8001b66:	f023 0320 	bic.w	r3, r3, #32
 8001b6a:	60d3      	str	r3, [r2, #12]
		if (huart->State == HAL_UART_STATE_BUSY_TX_RX) {
 8001b6c:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	2b32      	cmp	r3, #50	; 0x32
 8001b74:	d00d      	beq.n	8001b92 <USART_ITCharManager+0x66>
			__HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001b76:	6822      	ldr	r2, [r4, #0]
 8001b78:	68d3      	ldr	r3, [r2, #12]
 8001b7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b7e:	60d3      	str	r3, [r2, #12]
			__HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001b80:	6822      	ldr	r2, [r4, #0]
 8001b82:	6953      	ldr	r3, [r2, #20]
 8001b84:	f023 0301 	bic.w	r3, r3, #1
 8001b88:	6153      	str	r3, [r2, #20]
			huart->State = HAL_UART_STATE_READY;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 8001b90:	e7d6      	b.n	8001b40 <USART_ITCharManager+0x14>
			huart->State = HAL_UART_STATE_BUSY_TX;
 8001b92:	2312      	movs	r3, #18
 8001b94:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 8001b98:	e7d2      	b.n	8001b40 <USART_ITCharManager+0x14>
 8001b9a:	bf00      	nop
 8001b9c:	0800220c 	.word	0x0800220c

08001ba0 <HAL_GPIO_EXTI_Callback>:
#endif


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	if (GPIO_Pin == GPIO_PIN_13)
 8001ba0:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8001ba4:	d000      	beq.n	8001ba8 <HAL_GPIO_EXTI_Callback+0x8>
 8001ba6:	4770      	bx	lr
{
 8001ba8:	b508      	push	{r3, lr}
	{
		static bool prev_val;
		if (prev_val == false)
 8001baa:	4b0c      	ldr	r3, [pc, #48]	; (8001bdc <HAL_GPIO_EXTI_Callback+0x3c>)
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	b95b      	cbnz	r3, 8001bc8 <HAL_GPIO_EXTI_Callback+0x28>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	2120      	movs	r1, #32
 8001bb4:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8001bb8:	f500 30f2 	add.w	r0, r0, #123904	; 0x1e400
 8001bbc:	f7fe fe9c 	bl	80008f8 <HAL_GPIO_WritePin>
			prev_val = true;
 8001bc0:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <HAL_GPIO_EXTI_Callback+0x3c>)
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	701a      	strb	r2, [r3, #0]
  {
  case GPIO_PIN_13:
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
    break;
  }*/
}
 8001bc6:	bd08      	pop	{r3, pc}
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001bc8:	2200      	movs	r2, #0
 8001bca:	2120      	movs	r1, #32
 8001bcc:	4804      	ldr	r0, [pc, #16]	; (8001be0 <HAL_GPIO_EXTI_Callback+0x40>)
 8001bce:	f7fe fe93 	bl	80008f8 <HAL_GPIO_WritePin>
			prev_val = false;
 8001bd2:	4b02      	ldr	r3, [pc, #8]	; (8001bdc <HAL_GPIO_EXTI_Callback+0x3c>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	701a      	strb	r2, [r3, #0]
}
 8001bd8:	e7f5      	b.n	8001bc6 <HAL_GPIO_EXTI_Callback+0x26>
 8001bda:	bf00      	nop
 8001bdc:	20000234 	.word	0x20000234
 8001be0:	40020400 	.word	0x40020400

08001be4 <main>:

/**
  * @brief The FW main module
  */
int main(void)
{
 8001be4:	b570      	push	{r4, r5, r6, lr}
 8001be6:	b08e      	sub	sp, #56	; 0x38
  /* NUCLEO board initialization */
  NUCLEO_Board_Init();
 8001be8:	f7fe fc32 	bl	8000450 <NUCLEO_Board_Init>
  
  /* X-NUCLEO-IHM02A1 initialization */
  //BSP_Init();
  
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bec:	4b28      	ldr	r3, [pc, #160]	; (8001c90 <main+0xac>)
 8001bee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bf0:	f042 0204 	orr.w	r2, r2, #4
 8001bf4:	631a      	str	r2, [r3, #48]	; 0x30
 8001bf6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bf8:	f002 0204 	and.w	r2, r2, #4
 8001bfc:	9200      	str	r2, [sp, #0]
 8001bfe:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c02:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c06:	631a      	str	r2, [r3, #48]	; 0x30
 8001c08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c0a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001c0e:	9201      	str	r2, [sp, #4]
 8001c10:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c14:	f042 0201 	orr.w	r2, r2, #1
 8001c18:	631a      	str	r2, [r3, #48]	; 0x30
 8001c1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c1c:	f002 0201 	and.w	r2, r2, #1
 8001c20:	9202      	str	r2, [sp, #8]
 8001c22:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c26:	f042 0202 	orr.w	r2, r2, #2
 8001c2a:	631a      	str	r2, [r3, #48]	; 0x30
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	9303      	str	r3, [sp, #12]
 8001c34:	9b03      	ldr	r3, [sp, #12]

  // Configure PC13 as input (onboard blue button)
  GPIO_InitTypeDef PC13_InitStruct;
  PC13_InitStruct.Pin = GPIO_PIN_13;
 8001c36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c3a:	9309      	str	r3, [sp, #36]	; 0x24
  PC13_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c3c:	4b15      	ldr	r3, [pc, #84]	; (8001c94 <main+0xb0>)
 8001c3e:	930a      	str	r3, [sp, #40]	; 0x28
  PC13_InitStruct.Pull = GPIO_NOPULL;
 8001c40:	2400      	movs	r4, #0
 8001c42:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &PC13_InitStruct);
 8001c44:	a909      	add	r1, sp, #36	; 0x24
 8001c46:	4814      	ldr	r0, [pc, #80]	; (8001c98 <main+0xb4>)
 8001c48:	f7fe fd16 	bl	8000678 <HAL_GPIO_Init>

  // configure PB5 as output (for LED)
  GPIO_InitTypeDef PB5_InitStruct;
  PB5_InitStruct.Pin = GPIO_PIN_5;
 8001c4c:	2620      	movs	r6, #32
 8001c4e:	9604      	str	r6, [sp, #16]
  PB5_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c50:	2301      	movs	r3, #1
 8001c52:	9305      	str	r3, [sp, #20]
  PB5_InitStruct.Pull = GPIO_NOPULL;
 8001c54:	9406      	str	r4, [sp, #24]
  PB5_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c56:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &PB5_InitStruct);
 8001c58:	4d10      	ldr	r5, [pc, #64]	; (8001c9c <main+0xb8>)
 8001c5a:	a904      	add	r1, sp, #16
 8001c5c:	4628      	mov	r0, r5
 8001c5e:	f7fe fd0b 	bl	8000678 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001c62:	4622      	mov	r2, r4
 8001c64:	4631      	mov	r1, r6
 8001c66:	4628      	mov	r0, r5
 8001c68:	f7fe fe46 	bl	80008f8 <HAL_GPIO_WritePin>
#if defined (GPIO_POLLING_EXAMPLE)
  /* Perform a batch commands for X-NUCLEO-IHM02A1 */
  
  /* Infinite loop */
  while (1){
      uint8_t buttonState = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8001c6c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001c70:	f44f 5400 	mov.w	r4, #8192	; 0x2000
      if(buttonState == GPIO_PIN_RESET) {
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001c74:	4e09      	ldr	r6, [pc, #36]	; (8001c9c <main+0xb8>)
      uint8_t buttonState = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8001c76:	4621      	mov	r1, r4
 8001c78:	4628      	mov	r0, r5
 8001c7a:	f7fe fe2b 	bl	80008d4 <HAL_GPIO_ReadPin>
      if(buttonState == GPIO_PIN_RESET) {
 8001c7e:	2800      	cmp	r0, #0
 8001c80:	d1f9      	bne.n	8001c76 <main+0x92>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001c82:	2200      	movs	r2, #0
 8001c84:	2120      	movs	r1, #32
 8001c86:	4630      	mov	r0, r6
 8001c88:	f7fe fe36 	bl	80008f8 <HAL_GPIO_WritePin>
 8001c8c:	e7f3      	b.n	8001c76 <main+0x92>
 8001c8e:	bf00      	nop
 8001c90:	40023800 	.word	0x40023800
 8001c94:	10110000 	.word	0x10110000
 8001c98:	40020800 	.word	0x40020800
 8001c9c:	40020400 	.word	0x40020400

08001ca0 <assert_failed>:
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
    ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */

}
 8001ca0:	4770      	bx	lr

08001ca2 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ca2:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ca4:	2007      	movs	r0, #7
 8001ca6:	f7fe fc55 	bl	8000554 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001caa:	2200      	movs	r2, #0
 8001cac:	4611      	mov	r1, r2
 8001cae:	f04f 30ff 	mov.w	r0, #4294967295
 8001cb2:	f7fe fc6d 	bl	8000590 <HAL_NVIC_SetPriority>
}
 8001cb6:	bd08      	pop	{r3, pc}

08001cb8 <HAL_SPI_MspInit>:
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_0);
  }
}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cba:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 8001cbc:	6803      	ldr	r3, [r0, #0]
 8001cbe:	4a30      	ldr	r2, [pc, #192]	; (8001d80 <HAL_SPI_MspInit+0xc8>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d004      	beq.n	8001cce <HAL_SPI_MspInit+0x16>
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
#elif defined (USE_PA5_AS_SCK)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
#endif
  }
  else if(hspi->Instance==SPI2)
 8001cc4:	4a2f      	ldr	r2, [pc, #188]	; (8001d84 <HAL_SPI_MspInit+0xcc>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d036      	beq.n	8001d38 <HAL_SPI_MspInit+0x80>
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
  }
}
 8001cca:	b00b      	add	sp, #44	; 0x2c
 8001ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __GPIOA_CLK_ENABLE();
 8001cce:	4b2e      	ldr	r3, [pc, #184]	; (8001d88 <HAL_SPI_MspInit+0xd0>)
 8001cd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cd2:	f042 0201 	orr.w	r2, r2, #1
 8001cd6:	631a      	str	r2, [r3, #48]	; 0x30
 8001cd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cda:	f002 0201 	and.w	r2, r2, #1
 8001cde:	9200      	str	r2, [sp, #0]
 8001ce0:	9a00      	ldr	r2, [sp, #0]
    __GPIOB_CLK_ENABLE();
 8001ce2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ce4:	f042 0202 	orr.w	r2, r2, #2
 8001ce8:	631a      	str	r2, [r3, #48]	; 0x30
 8001cea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cec:	f002 0202 	and.w	r2, r2, #2
 8001cf0:	9201      	str	r2, [sp, #4]
 8001cf2:	9a01      	ldr	r2, [sp, #4]
    __SPI1_CLK_ENABLE();
 8001cf4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001cf6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001cfa:	645a      	str	r2, [r3, #68]	; 0x44
 8001cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d02:	9302      	str	r3, [sp, #8]
 8001d04:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d06:	23c0      	movs	r3, #192	; 0xc0
 8001d08:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0a:	2702      	movs	r7, #2
 8001d0c:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0e:	2600      	movs	r6, #0
 8001d10:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8001d12:	2503      	movs	r5, #3
 8001d14:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d16:	2405      	movs	r4, #5
 8001d18:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d1a:	a905      	add	r1, sp, #20
 8001d1c:	481b      	ldr	r0, [pc, #108]	; (8001d8c <HAL_SPI_MspInit+0xd4>)
 8001d1e:	f7fe fcab 	bl	8000678 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d22:	2308      	movs	r3, #8
 8001d24:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d26:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d28:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8001d2a:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d2c:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d2e:	a905      	add	r1, sp, #20
 8001d30:	4817      	ldr	r0, [pc, #92]	; (8001d90 <HAL_SPI_MspInit+0xd8>)
 8001d32:	f7fe fca1 	bl	8000678 <HAL_GPIO_Init>
 8001d36:	e7c8      	b.n	8001cca <HAL_SPI_MspInit+0x12>
    __GPIOB_CLK_ENABLE();
 8001d38:	4b13      	ldr	r3, [pc, #76]	; (8001d88 <HAL_SPI_MspInit+0xd0>)
 8001d3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d3c:	f042 0202 	orr.w	r2, r2, #2
 8001d40:	631a      	str	r2, [r3, #48]	; 0x30
 8001d42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d44:	f002 0202 	and.w	r2, r2, #2
 8001d48:	9203      	str	r2, [sp, #12]
 8001d4a:	9a03      	ldr	r2, [sp, #12]
    __SPI2_CLK_ENABLE();
 8001d4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d52:	641a      	str	r2, [r3, #64]	; 0x40
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d5a:	9304      	str	r3, [sp, #16]
 8001d5c:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001d5e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001d62:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d64:	2302      	movs	r3, #2
 8001d66:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d70:	2305      	movs	r3, #5
 8001d72:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d74:	a905      	add	r1, sp, #20
 8001d76:	4806      	ldr	r0, [pc, #24]	; (8001d90 <HAL_SPI_MspInit+0xd8>)
 8001d78:	f7fe fc7e 	bl	8000678 <HAL_GPIO_Init>
}
 8001d7c:	e7a5      	b.n	8001cca <HAL_SPI_MspInit+0x12>
 8001d7e:	bf00      	nop
 8001d80:	40013000 	.word	0x40013000
 8001d84:	40003800 	.word	0x40003800
 8001d88:	40023800 	.word	0x40023800
 8001d8c:	40020000 	.word	0x40020000
 8001d90:	40020400 	.word	0x40020400

08001d94 <HAL_UART_MspInit>:
}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 8001d94:	6802      	ldr	r2, [r0, #0]
 8001d96:	4b19      	ldr	r3, [pc, #100]	; (8001dfc <HAL_UART_MspInit+0x68>)
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d000      	beq.n	8001d9e <HAL_UART_MspInit+0xa>
 8001d9c:	4770      	bx	lr
{
 8001d9e:	b510      	push	{r4, lr}
 8001da0:	b088      	sub	sp, #32
  {
    /* GPIO clocks enable */
    __GPIOA_CLK_ENABLE();
 8001da2:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8001da6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001da8:	f042 0201 	orr.w	r2, r2, #1
 8001dac:	631a      	str	r2, [r3, #48]	; 0x30
 8001dae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001db0:	f002 0201 	and.w	r2, r2, #1
 8001db4:	9201      	str	r2, [sp, #4]
 8001db6:	9a01      	ldr	r2, [sp, #4]
    
    /* Peripheral clock enable */
    __USART2_CLK_ENABLE();
 8001db8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001dba:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001dbe:	641a      	str	r2, [r3, #64]	; 0x40
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc6:	9302      	str	r3, [sp, #8]
 8001dc8:	9b02      	ldr	r3, [sp, #8]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001dca:	230c      	movs	r3, #12
 8001dcc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dce:	2302      	movs	r3, #2
 8001dd0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd2:	2400      	movs	r4, #0
 8001dd4:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001dda:	2307      	movs	r3, #7
 8001ddc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dde:	a903      	add	r1, sp, #12
 8001de0:	4807      	ldr	r0, [pc, #28]	; (8001e00 <HAL_UART_MspInit+0x6c>)
 8001de2:	f7fe fc49 	bl	8000678 <HAL_GPIO_Init>

  /* System interrupt init*/
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001de6:	4622      	mov	r2, r4
 8001de8:	4621      	mov	r1, r4
 8001dea:	2026      	movs	r0, #38	; 0x26
 8001dec:	f7fe fbd0 	bl	8000590 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001df0:	2026      	movs	r0, #38	; 0x26
 8001df2:	f7fe fc11 	bl	8000618 <HAL_NVIC_EnableIRQ>
  }
}
 8001df6:	b008      	add	sp, #32
 8001df8:	bd10      	pop	{r4, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40004400 	.word	0x40004400
 8001e00:	40020000 	.word	0x40020000

08001e04 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001e04:	b508      	push	{r3, lr}
  HAL_IncTick();
 8001e06:	f7fe fb89 	bl	800051c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8001e0a:	f7fe fc30 	bl	800066e <HAL_SYSTICK_IRQHandler>
}
 8001e0e:	bd08      	pop	{r3, pc}

08001e10 <EXTI1_IRQHandler>:

/**
* @brief This function handles EXTI Line1 interrupt.
*/
void EXTI1_IRQHandler(void)
{
 8001e10:	b508      	push	{r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001e12:	2002      	movs	r0, #2
 8001e14:	f7fe fd8a 	bl	800092c <HAL_GPIO_EXTI_IRQHandler>
}
 8001e18:	bd08      	pop	{r3, pc}

08001e1a <EXTI0_IRQHandler>:

/**
* @brief This function handles EXTI Line0 interrupt.
*/
void EXTI0_IRQHandler(void)
{
 8001e1a:	b508      	push	{r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001e1c:	2001      	movs	r0, #1
 8001e1e:	f7fe fd85 	bl	800092c <HAL_GPIO_EXTI_IRQHandler>
}
 8001e22:	bd08      	pop	{r3, pc}

08001e24 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt.
*/
void USART2_IRQHandler(void)
{
 8001e24:	b510      	push	{r4, lr}
  HAL_UART_IRQHandler(&huart2);
 8001e26:	4c04      	ldr	r4, [pc, #16]	; (8001e38 <USART2_IRQHandler+0x14>)
 8001e28:	4620      	mov	r0, r4
 8001e2a:	f7ff fd3d 	bl	80018a8 <HAL_UART_IRQHandler>
  USART_ITCharManager(&huart2);
 8001e2e:	4620      	mov	r0, r4
 8001e30:	f7ff fe7c 	bl	8001b2c <USART_ITCharManager>
}
 8001e34:	bd10      	pop	{r4, pc}
 8001e36:	bf00      	nop
 8001e38:	20000124 	.word	0x20000124

08001e3c <EXTI15_10_IRQHandler>:

/**
* @brief This function handles EXTI Line[15:10] interrupts.
*/
void EXTI15_10_IRQHandler(void)
{
 8001e3c:	b508      	push	{r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001e3e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001e42:	f7fe fd73 	bl	800092c <HAL_GPIO_EXTI_IRQHandler>
}
 8001e46:	bd08      	pop	{r3, pc}

08001e48 <__libc_init_array>:
 8001e48:	b570      	push	{r4, r5, r6, lr}
 8001e4a:	4d0d      	ldr	r5, [pc, #52]	; (8001e80 <__libc_init_array+0x38>)
 8001e4c:	4c0d      	ldr	r4, [pc, #52]	; (8001e84 <__libc_init_array+0x3c>)
 8001e4e:	1b64      	subs	r4, r4, r5
 8001e50:	10a4      	asrs	r4, r4, #2
 8001e52:	2600      	movs	r6, #0
 8001e54:	42a6      	cmp	r6, r4
 8001e56:	d109      	bne.n	8001e6c <__libc_init_array+0x24>
 8001e58:	4d0b      	ldr	r5, [pc, #44]	; (8001e88 <__libc_init_array+0x40>)
 8001e5a:	4c0c      	ldr	r4, [pc, #48]	; (8001e8c <__libc_init_array+0x44>)
 8001e5c:	f000 f818 	bl	8001e90 <_init>
 8001e60:	1b64      	subs	r4, r4, r5
 8001e62:	10a4      	asrs	r4, r4, #2
 8001e64:	2600      	movs	r6, #0
 8001e66:	42a6      	cmp	r6, r4
 8001e68:	d105      	bne.n	8001e76 <__libc_init_array+0x2e>
 8001e6a:	bd70      	pop	{r4, r5, r6, pc}
 8001e6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e70:	4798      	blx	r3
 8001e72:	3601      	adds	r6, #1
 8001e74:	e7ee      	b.n	8001e54 <__libc_init_array+0xc>
 8001e76:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e7a:	4798      	blx	r3
 8001e7c:	3601      	adds	r6, #1
 8001e7e:	e7f2      	b.n	8001e66 <__libc_init_array+0x1e>
 8001e80:	08002504 	.word	0x08002504
 8001e84:	08002504 	.word	0x08002504
 8001e88:	08002504 	.word	0x08002504
 8001e8c:	08002508 	.word	0x08002508

08001e90 <_init>:
 8001e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e92:	bf00      	nop
 8001e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e96:	bc08      	pop	{r3}
 8001e98:	469e      	mov	lr, r3
 8001e9a:	4770      	bx	lr

08001e9c <_fini>:
 8001e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e9e:	bf00      	nop
 8001ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ea2:	bc08      	pop	{r3}
 8001ea4:	469e      	mov	lr, r3
 8001ea6:	4770      	bx	lr
