
X-CUBE-SPN2_F401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003be8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000adc  08003d7c  08003d7c  00013d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004858  08004858  00014858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800485c  0800485c  0001485c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000368  20000000  08004860  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000270  20000368  08004bc8  00020368  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200005d8  08004bc8  000205d8  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020368  2**0
                  CONTENTS, READONLY
  9 .debug_info   000166fd  00000000  00000000  00020398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002fe7  00000000  00000000  00036a95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00009645  00000000  00000000  00039a7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000c88  00000000  00000000  000430c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000c48  00000000  00000000  00043d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000110a7  00000000  00000000  00044998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001475d  00000000  00000000  00055a3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00060ba6  00000000  00000000  0006a19c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  000cad42  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002300  00000000  00000000  000cad94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000368 	.word	0x20000368
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003d64 	.word	0x08003d64

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000036c 	.word	0x2000036c
 80001d0:	08003d64 	.word	0x08003d64

080001d4 <L6470_ResetAppCmdPkg>:
{
  uint8_t id;
  
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
  {
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 80001d4:	2300      	movs	r3, #0
 80001d6:	7003      	strb	r3, [r0, #0]
    (pL6470_AppCmdPkg+id)->p1=0;
 80001d8:	6043      	str	r3, [r0, #4]
    (pL6470_AppCmdPkg+id)->p2=0;
 80001da:	6083      	str	r3, [r0, #8]
    (pL6470_AppCmdPkg+id)->p3=0;
 80001dc:	60c3      	str	r3, [r0, #12]
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 80001de:	7403      	strb	r3, [r0, #16]
    (pL6470_AppCmdPkg+id)->p1=0;
 80001e0:	6143      	str	r3, [r0, #20]
    (pL6470_AppCmdPkg+id)->p2=0;
 80001e2:	6183      	str	r3, [r0, #24]
    (pL6470_AppCmdPkg+id)->p3=0;
 80001e4:	61c3      	str	r3, [r0, #28]
  }
}
 80001e6:	4770      	bx	lr

080001e8 <L6470_PrepareAppCmdPkg>:
  * @param  p1                The 1st parameter (if it is not needed it will be not considered).
  * @param  p2                The 2nd parameter (if it is not needed it will be not considered).
  * @param  p3                The 3rd parameter (if it is not needed it will be not considered).
  */
void L6470_PrepareAppCmdPkg(uint8_t L6470_Id, sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
{
 80001e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80001ea:	4604      	mov	r4, r0
 80001ec:	460d      	mov	r5, r1
 80001ee:	4617      	mov	r7, r2
 80001f0:	461e      	mov	r6, r3
  if(!L6470_DaisyChain_HalfPrepared)
 80001f2:	4b0a      	ldr	r3, [pc, #40]	; (800021c <L6470_PrepareAppCmdPkg+0x34>)
 80001f4:	781b      	ldrb	r3, [r3, #0]
 80001f6:	b14b      	cbz	r3, 800020c <L6470_PrepareAppCmdPkg+0x24>
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 80001f8:	0123      	lsls	r3, r4, #4
 80001fa:	eb05 1004 	add.w	r0, r5, r4, lsl #4
 80001fe:	54ef      	strb	r7, [r5, r3]
  (pL6470_AppCmdPkg+L6470_Id)->p1 = p1;
 8000200:	6046      	str	r6, [r0, #4]
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 8000202:	9b06      	ldr	r3, [sp, #24]
 8000204:	6083      	str	r3, [r0, #8]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 8000206:	9b07      	ldr	r3, [sp, #28]
 8000208:	60c3      	str	r3, [r0, #12]
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
    L6470_ResetAppCmdPkg(pL6470_AppCmdPkg);
  }
  
  L6470_FillAppCmdPkg(L6470_Id, pL6470_AppCmdPkg, L6470_AppCmdId, p1, p2, p3);
}
 800020a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 800020c:	4b03      	ldr	r3, [pc, #12]	; (800021c <L6470_PrepareAppCmdPkg+0x34>)
 800020e:	2201      	movs	r2, #1
 8000210:	701a      	strb	r2, [r3, #0]
    L6470_ResetAppCmdPkg(pL6470_AppCmdPkg);
 8000212:	4608      	mov	r0, r1
 8000214:	f7ff ffde 	bl	80001d4 <L6470_ResetAppCmdPkg>
 8000218:	e7ee      	b.n	80001f8 <L6470_PrepareAppCmdPkg+0x10>
 800021a:	bf00      	nop
 800021c:	20000384 	.word	0x20000384

08000220 <L6470_PrepareSetParam>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareSetParam(uint8_t L6470_Id, eL6470_RegId_t L6470_RegId, uint32_t Value)
{
 8000220:	b500      	push	{lr}
 8000222:	b083      	sub	sp, #12
 8000224:	460b      	mov	r3, r1
    L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 8000226:	2100      	movs	r1, #0
 8000228:	9101      	str	r1, [sp, #4]
 800022a:	9200      	str	r2, [sp, #0]
 800022c:	2201      	movs	r2, #1
 800022e:	4903      	ldr	r1, [pc, #12]	; (800023c <L6470_PrepareSetParam+0x1c>)
 8000230:	f7ff ffda 	bl	80001e8 <L6470_PrepareAppCmdPkg>
}
 8000234:	b003      	add	sp, #12
 8000236:	f85d fb04 	ldr.w	pc, [sp], #4
 800023a:	bf00      	nop
 800023c:	20000388 	.word	0x20000388

08000240 <L6470_PrepareGetParam>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareGetParam(uint8_t L6470_Id, eL6470_RegId_t L6470_RegId)
{
 8000240:	b500      	push	{lr}
 8000242:	b083      	sub	sp, #12
 8000244:	460b      	mov	r3, r1
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 8000246:	2200      	movs	r2, #0
 8000248:	9201      	str	r2, [sp, #4]
 800024a:	9200      	str	r2, [sp, #0]
 800024c:	2202      	movs	r2, #2
 800024e:	4903      	ldr	r1, [pc, #12]	; (800025c <L6470_PrepareGetParam+0x1c>)
 8000250:	f7ff ffca 	bl	80001e8 <L6470_PrepareAppCmdPkg>
}
 8000254:	b003      	add	sp, #12
 8000256:	f85d fb04 	ldr.w	pc, [sp], #4
 800025a:	bf00      	nop
 800025c:	20000388 	.word	0x20000388

08000260 <L6470_PrepareRun>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareRun(uint8_t L6470_Id, eL6470_DirId_t L6470_DirId, uint32_t Speed)
{
 8000260:	b500      	push	{lr}
 8000262:	b083      	sub	sp, #12
 8000264:	460b      	mov	r3, r1
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 8000266:	2100      	movs	r1, #0
 8000268:	9101      	str	r1, [sp, #4]
 800026a:	9200      	str	r2, [sp, #0]
 800026c:	2203      	movs	r2, #3
 800026e:	4903      	ldr	r1, [pc, #12]	; (800027c <L6470_PrepareRun+0x1c>)
 8000270:	f7ff ffba 	bl	80001e8 <L6470_PrepareAppCmdPkg>
}
 8000274:	b003      	add	sp, #12
 8000276:	f85d fb04 	ldr.w	pc, [sp], #4
 800027a:	bf00      	nop
 800027c:	20000388 	.word	0x20000388

08000280 <L6470_PrepareStepClock>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareStepClock(uint8_t L6470_Id, eL6470_DirId_t L6470_DirId)
{
 8000280:	b500      	push	{lr}
 8000282:	b083      	sub	sp, #12
 8000284:	460b      	mov	r3, r1
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 8000286:	2200      	movs	r2, #0
 8000288:	9201      	str	r2, [sp, #4]
 800028a:	9200      	str	r2, [sp, #0]
 800028c:	2204      	movs	r2, #4
 800028e:	4903      	ldr	r1, [pc, #12]	; (800029c <L6470_PrepareStepClock+0x1c>)
 8000290:	f7ff ffaa 	bl	80001e8 <L6470_PrepareAppCmdPkg>
}
 8000294:	b003      	add	sp, #12
 8000296:	f85d fb04 	ldr.w	pc, [sp], #4
 800029a:	bf00      	nop
 800029c:	20000388 	.word	0x20000388

080002a0 <L6470_PrepareMove>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareMove(uint8_t L6470_Id, eL6470_DirId_t L6470_DirId, uint32_t N_Step)
{
 80002a0:	b500      	push	{lr}
 80002a2:	b083      	sub	sp, #12
 80002a4:	460b      	mov	r3, r1
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 80002a6:	2100      	movs	r1, #0
 80002a8:	9101      	str	r1, [sp, #4]
 80002aa:	9200      	str	r2, [sp, #0]
 80002ac:	2205      	movs	r2, #5
 80002ae:	4903      	ldr	r1, [pc, #12]	; (80002bc <L6470_PrepareMove+0x1c>)
 80002b0:	f7ff ff9a 	bl	80001e8 <L6470_PrepareAppCmdPkg>
}
 80002b4:	b003      	add	sp, #12
 80002b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80002ba:	bf00      	nop
 80002bc:	20000388 	.word	0x20000388

080002c0 <L6470_PrepareGoTo>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareGoTo(uint8_t L6470_Id, uint32_t AbsPos)
{
 80002c0:	b500      	push	{lr}
 80002c2:	b083      	sub	sp, #12
 80002c4:	460b      	mov	r3, r1
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 80002c6:	2200      	movs	r2, #0
 80002c8:	9201      	str	r2, [sp, #4]
 80002ca:	9200      	str	r2, [sp, #0]
 80002cc:	2206      	movs	r2, #6
 80002ce:	4903      	ldr	r1, [pc, #12]	; (80002dc <L6470_PrepareGoTo+0x1c>)
 80002d0:	f7ff ff8a 	bl	80001e8 <L6470_PrepareAppCmdPkg>
}
 80002d4:	b003      	add	sp, #12
 80002d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80002da:	bf00      	nop
 80002dc:	20000388 	.word	0x20000388

080002e0 <L6470_PrepareGoToDir>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareGoToDir(uint8_t L6470_Id, eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
{
 80002e0:	b500      	push	{lr}
 80002e2:	b083      	sub	sp, #12
 80002e4:	460b      	mov	r3, r1
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 80002e6:	2100      	movs	r1, #0
 80002e8:	9101      	str	r1, [sp, #4]
 80002ea:	9200      	str	r2, [sp, #0]
 80002ec:	2207      	movs	r2, #7
 80002ee:	4903      	ldr	r1, [pc, #12]	; (80002fc <L6470_PrepareGoToDir+0x1c>)
 80002f0:	f7ff ff7a 	bl	80001e8 <L6470_PrepareAppCmdPkg>
}
 80002f4:	b003      	add	sp, #12
 80002f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80002fa:	bf00      	nop
 80002fc:	20000388 	.word	0x20000388

08000300 <L6470_PrepareGoUntil>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareGoUntil(uint8_t L6470_Id, eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
{
 8000300:	b500      	push	{lr}
 8000302:	b083      	sub	sp, #12
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 8000304:	9301      	str	r3, [sp, #4]
 8000306:	9200      	str	r2, [sp, #0]
 8000308:	460b      	mov	r3, r1
 800030a:	2208      	movs	r2, #8
 800030c:	4902      	ldr	r1, [pc, #8]	; (8000318 <L6470_PrepareGoUntil+0x18>)
 800030e:	f7ff ff6b 	bl	80001e8 <L6470_PrepareAppCmdPkg>
}
 8000312:	b003      	add	sp, #12
 8000314:	f85d fb04 	ldr.w	pc, [sp], #4
 8000318:	20000388 	.word	0x20000388

0800031c <L6470_PrepareReleaseSW>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareReleaseSW(uint8_t L6470_Id, eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
{
 800031c:	b500      	push	{lr}
 800031e:	b083      	sub	sp, #12
 8000320:	460b      	mov	r3, r1
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 8000322:	2100      	movs	r1, #0
 8000324:	9101      	str	r1, [sp, #4]
 8000326:	9200      	str	r2, [sp, #0]
 8000328:	2209      	movs	r2, #9
 800032a:	4903      	ldr	r1, [pc, #12]	; (8000338 <L6470_PrepareReleaseSW+0x1c>)
 800032c:	f7ff ff5c 	bl	80001e8 <L6470_PrepareAppCmdPkg>
}
 8000330:	b003      	add	sp, #12
 8000332:	f85d fb04 	ldr.w	pc, [sp], #4
 8000336:	bf00      	nop
 8000338:	20000388 	.word	0x20000388

0800033c <L6470_PrepareGoHome>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareGoHome(uint8_t L6470_Id)
{
 800033c:	b500      	push	{lr}
 800033e:	b083      	sub	sp, #12
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 8000340:	2300      	movs	r3, #0
 8000342:	9301      	str	r3, [sp, #4]
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	220a      	movs	r2, #10
 8000348:	4902      	ldr	r1, [pc, #8]	; (8000354 <L6470_PrepareGoHome+0x18>)
 800034a:	f7ff ff4d 	bl	80001e8 <L6470_PrepareAppCmdPkg>
}
 800034e:	b003      	add	sp, #12
 8000350:	f85d fb04 	ldr.w	pc, [sp], #4
 8000354:	20000388 	.word	0x20000388

08000358 <L6470_PrepareGoMark>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareGoMark(uint8_t L6470_Id)
{
 8000358:	b500      	push	{lr}
 800035a:	b083      	sub	sp, #12
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 800035c:	2300      	movs	r3, #0
 800035e:	9301      	str	r3, [sp, #4]
 8000360:	9300      	str	r3, [sp, #0]
 8000362:	220b      	movs	r2, #11
 8000364:	4902      	ldr	r1, [pc, #8]	; (8000370 <L6470_PrepareGoMark+0x18>)
 8000366:	f7ff ff3f 	bl	80001e8 <L6470_PrepareAppCmdPkg>
}
 800036a:	b003      	add	sp, #12
 800036c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000370:	20000388 	.word	0x20000388

08000374 <L6470_PrepareResetPos>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareResetPos(uint8_t L6470_Id)
{
 8000374:	b500      	push	{lr}
 8000376:	b083      	sub	sp, #12
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 8000378:	2300      	movs	r3, #0
 800037a:	9301      	str	r3, [sp, #4]
 800037c:	9300      	str	r3, [sp, #0]
 800037e:	220c      	movs	r2, #12
 8000380:	4902      	ldr	r1, [pc, #8]	; (800038c <L6470_PrepareResetPos+0x18>)
 8000382:	f7ff ff31 	bl	80001e8 <L6470_PrepareAppCmdPkg>
}
 8000386:	b003      	add	sp, #12
 8000388:	f85d fb04 	ldr.w	pc, [sp], #4
 800038c:	20000388 	.word	0x20000388

08000390 <L6470_PrepareResetDevice>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareResetDevice(uint8_t L6470_Id)
{
 8000390:	b500      	push	{lr}
 8000392:	b083      	sub	sp, #12
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 8000394:	2300      	movs	r3, #0
 8000396:	9301      	str	r3, [sp, #4]
 8000398:	9300      	str	r3, [sp, #0]
 800039a:	220d      	movs	r2, #13
 800039c:	4902      	ldr	r1, [pc, #8]	; (80003a8 <L6470_PrepareResetDevice+0x18>)
 800039e:	f7ff ff23 	bl	80001e8 <L6470_PrepareAppCmdPkg>
}
 80003a2:	b003      	add	sp, #12
 80003a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80003a8:	20000388 	.word	0x20000388

080003ac <L6470_PrepareSoftStop>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareSoftStop(uint8_t L6470_Id)
{
 80003ac:	b500      	push	{lr}
 80003ae:	b083      	sub	sp, #12
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 80003b0:	2300      	movs	r3, #0
 80003b2:	9301      	str	r3, [sp, #4]
 80003b4:	9300      	str	r3, [sp, #0]
 80003b6:	220e      	movs	r2, #14
 80003b8:	4902      	ldr	r1, [pc, #8]	; (80003c4 <L6470_PrepareSoftStop+0x18>)
 80003ba:	f7ff ff15 	bl	80001e8 <L6470_PrepareAppCmdPkg>
}
 80003be:	b003      	add	sp, #12
 80003c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80003c4:	20000388 	.word	0x20000388

080003c8 <L6470_PrepareHardStop>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareHardStop(uint8_t L6470_Id)
{
 80003c8:	b500      	push	{lr}
 80003ca:	b083      	sub	sp, #12
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 80003cc:	2300      	movs	r3, #0
 80003ce:	9301      	str	r3, [sp, #4]
 80003d0:	9300      	str	r3, [sp, #0]
 80003d2:	220f      	movs	r2, #15
 80003d4:	4902      	ldr	r1, [pc, #8]	; (80003e0 <L6470_PrepareHardStop+0x18>)
 80003d6:	f7ff ff07 	bl	80001e8 <L6470_PrepareAppCmdPkg>
}
 80003da:	b003      	add	sp, #12
 80003dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80003e0:	20000388 	.word	0x20000388

080003e4 <L6470_PrepareSoftHiZ>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareSoftHiZ(uint8_t L6470_Id)
{
 80003e4:	b500      	push	{lr}
 80003e6:	b083      	sub	sp, #12
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 80003e8:	2300      	movs	r3, #0
 80003ea:	9301      	str	r3, [sp, #4]
 80003ec:	9300      	str	r3, [sp, #0]
 80003ee:	2210      	movs	r2, #16
 80003f0:	4902      	ldr	r1, [pc, #8]	; (80003fc <L6470_PrepareSoftHiZ+0x18>)
 80003f2:	f7ff fef9 	bl	80001e8 <L6470_PrepareAppCmdPkg>
}
 80003f6:	b003      	add	sp, #12
 80003f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80003fc:	20000388 	.word	0x20000388

08000400 <L6470_PrepareHardHiZ>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareHardHiZ(uint8_t L6470_Id)
{
 8000400:	b500      	push	{lr}
 8000402:	b083      	sub	sp, #12
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 8000404:	2300      	movs	r3, #0
 8000406:	9301      	str	r3, [sp, #4]
 8000408:	9300      	str	r3, [sp, #0]
 800040a:	2211      	movs	r2, #17
 800040c:	4902      	ldr	r1, [pc, #8]	; (8000418 <L6470_PrepareHardHiZ+0x18>)
 800040e:	f7ff feeb 	bl	80001e8 <L6470_PrepareAppCmdPkg>
}
 8000412:	b003      	add	sp, #12
 8000414:	f85d fb04 	ldr.w	pc, [sp], #4
 8000418:	20000388 	.word	0x20000388

0800041c <L6470_PrepareGetStatus>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareGetStatus(uint8_t L6470_Id)
{
 800041c:	b500      	push	{lr}
 800041e:	b083      	sub	sp, #12
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 8000420:	2300      	movs	r3, #0
 8000422:	9301      	str	r3, [sp, #4]
 8000424:	9300      	str	r3, [sp, #0]
 8000426:	2212      	movs	r2, #18
 8000428:	4902      	ldr	r1, [pc, #8]	; (8000434 <L6470_PrepareGetStatus+0x18>)
 800042a:	f7ff fedd 	bl	80001e8 <L6470_PrepareAppCmdPkg>
}
 800042e:	b003      	add	sp, #12
 8000430:	f85d fb04 	ldr.w	pc, [sp], #4
 8000434:	20000388 	.word	0x20000388

08000438 <L6470_PrepareDaisyChainCommand>:
{
 8000438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      *(pL6470_DaisyChainSpiTxStruct+(i++)) = 0x00;
 800043c:	2300      	movs	r3, #0
 800043e:	700b      	strb	r3, [r1, #0]
 8000440:	704b      	strb	r3, [r1, #1]
 8000442:	708b      	strb	r3, [r1, #2]
 8000444:	70cb      	strb	r3, [r1, #3]
 8000446:	710b      	strb	r3, [r1, #4]
 8000448:	714b      	strb	r3, [r1, #5]
 800044a:	718b      	strb	r3, [r1, #6]
 800044c:	71cb      	strb	r3, [r1, #7]
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 800044e:	f101 3cff 	add.w	ip, r1, #4294967295
      *(pL6470_DaisyChainSpiTxStruct+(i++)) = 0x00;
 8000452:	461a      	mov	r2, r3
    *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) = (L6470_ApplicationCommand[(pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId].BinaryCode);
 8000454:	4c73      	ldr	r4, [pc, #460]	; (8000624 <L6470_PrepareDaisyChainCommand+0x1ec>)
 8000456:	e032      	b.n	80004be <L6470_PrepareDaisyChainCommand+0x86>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 8000458:	6846      	ldr	r6, [r0, #4]
 800045a:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 800045e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8000462:	f896 610c 	ldrb.w	r6, [r6, #268]	; 0x10c
 8000466:	ea4e 0e06 	orr.w	lr, lr, r6
 800046a:	f88c e000 	strb.w	lr, [ip]
      PARAMLengthBytes = L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].LengthByte;
 800046e:	6846      	ldr	r6, [r0, #4]
 8000470:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8000474:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8000478:	f896 611a 	ldrb.w	r6, [r6, #282]	; 0x11a
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 800047c:	b1d6      	cbz	r6, 80004b4 <L6470_PrepareDaisyChainCommand+0x7c>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(PARAMLengthBytes-spibyte)));
 800047e:	eb01 0843 	add.w	r8, r1, r3, lsl #1
 8000482:	eba6 0e03 	sub.w	lr, r6, r3
 8000486:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 800048a:	68af      	ldr	r7, [r5, #8]
 800048c:	fa27 fe0e 	lsr.w	lr, r7, lr
 8000490:	f808 e002 	strb.w	lr, [r8, r2]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 8000494:	3301      	adds	r3, #1
 8000496:	b2db      	uxtb	r3, r3
 8000498:	429e      	cmp	r6, r3
 800049a:	d2f0      	bcs.n	800047e <L6470_PrepareDaisyChainCommand+0x46>
 800049c:	e00a      	b.n	80004b4 <L6470_PrepareDaisyChainCommand+0x7c>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 800049e:	6843      	ldr	r3, [r0, #4]
 80004a0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80004a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80004a8:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80004ac:	ea4e 0e03 	orr.w	lr, lr, r3
 80004b0:	f88c e000 	strb.w	lr, [ip]
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 80004b4:	3201      	adds	r2, #1
 80004b6:	3010      	adds	r0, #16
 80004b8:	2a02      	cmp	r2, #2
 80004ba:	f000 80b0 	beq.w	800061e <L6470_PrepareDaisyChainCommand+0x1e6>
    *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) = (L6470_ApplicationCommand[(pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId].BinaryCode);
 80004be:	4605      	mov	r5, r0
 80004c0:	7803      	ldrb	r3, [r0, #0]
 80004c2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80004c6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80004ca:	f893 e00c 	ldrb.w	lr, [r3, #12]
 80004ce:	f80c ef01 	strb.w	lr, [ip, #1]!
    switch((pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId)
 80004d2:	7803      	ldrb	r3, [r0, #0]
 80004d4:	1e5e      	subs	r6, r3, #1
 80004d6:	2e08      	cmp	r6, #8
 80004d8:	d8ec      	bhi.n	80004b4 <L6470_PrepareDaisyChainCommand+0x7c>
 80004da:	a701      	add	r7, pc, #4	; (adr r7, 80004e0 <L6470_PrepareDaisyChainCommand+0xa8>)
 80004dc:	f857 f026 	ldr.w	pc, [r7, r6, lsl #2]
 80004e0:	08000459 	.word	0x08000459
 80004e4:	0800049f 	.word	0x0800049f
 80004e8:	08000505 	.word	0x08000505
 80004ec:	0800052f 	.word	0x0800052f
 80004f0:	08000545 	.word	0x08000545
 80004f4:	0800056f 	.word	0x0800056f
 80004f8:	08000585 	.word	0x08000585
 80004fc:	080005af 	.word	0x080005af
 8000500:	080005f1 	.word	0x080005f1
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8000504:	6843      	ldr	r3, [r0, #4]
 8000506:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800050a:	4423      	add	r3, r4
 800050c:	f893 3308 	ldrb.w	r3, [r3, #776]	; 0x308
 8000510:	ea4e 0e03 	orr.w	lr, lr, r3
 8000514:	f88c e000 	strb.w	lr, [ip]
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8000518:	8943      	ldrh	r3, [r0, #10]
 800051a:	f88c 3002 	strb.w	r3, [ip, #2]
 800051e:	6883      	ldr	r3, [r0, #8]
 8000520:	0a1b      	lsrs	r3, r3, #8
 8000522:	f88c 3004 	strb.w	r3, [ip, #4]
 8000526:	6883      	ldr	r3, [r0, #8]
 8000528:	f88c 3006 	strb.w	r3, [ip, #6]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800052c:	e7c2      	b.n	80004b4 <L6470_PrepareDaisyChainCommand+0x7c>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 800052e:	6843      	ldr	r3, [r0, #4]
 8000530:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8000534:	4423      	add	r3, r4
 8000536:	f893 3308 	ldrb.w	r3, [r3, #776]	; 0x308
 800053a:	ea4e 0e03 	orr.w	lr, lr, r3
 800053e:	f88c e000 	strb.w	lr, [ip]
      break;
 8000542:	e7b7      	b.n	80004b4 <L6470_PrepareDaisyChainCommand+0x7c>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8000544:	6843      	ldr	r3, [r0, #4]
 8000546:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800054a:	4423      	add	r3, r4
 800054c:	f893 3308 	ldrb.w	r3, [r3, #776]	; 0x308
 8000550:	ea4e 0e03 	orr.w	lr, lr, r3
 8000554:	f88c e000 	strb.w	lr, [ip]
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8000558:	8943      	ldrh	r3, [r0, #10]
 800055a:	f88c 3002 	strb.w	r3, [ip, #2]
 800055e:	6883      	ldr	r3, [r0, #8]
 8000560:	0a1b      	lsrs	r3, r3, #8
 8000562:	f88c 3004 	strb.w	r3, [ip, #4]
 8000566:	6883      	ldr	r3, [r0, #8]
 8000568:	f88c 3006 	strb.w	r3, [ip, #6]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800056c:	e7a2      	b.n	80004b4 <L6470_PrepareDaisyChainCommand+0x7c>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p1) >> (8*(3-spibyte)));
 800056e:	88c3      	ldrh	r3, [r0, #6]
 8000570:	f88c 3002 	strb.w	r3, [ip, #2]
 8000574:	6843      	ldr	r3, [r0, #4]
 8000576:	0a1b      	lsrs	r3, r3, #8
 8000578:	f88c 3004 	strb.w	r3, [ip, #4]
 800057c:	6843      	ldr	r3, [r0, #4]
 800057e:	f88c 3006 	strb.w	r3, [ip, #6]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8000582:	e797      	b.n	80004b4 <L6470_PrepareDaisyChainCommand+0x7c>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8000584:	6843      	ldr	r3, [r0, #4]
 8000586:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800058a:	4423      	add	r3, r4
 800058c:	f893 3308 	ldrb.w	r3, [r3, #776]	; 0x308
 8000590:	ea4e 0e03 	orr.w	lr, lr, r3
 8000594:	f88c e000 	strb.w	lr, [ip]
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8000598:	8943      	ldrh	r3, [r0, #10]
 800059a:	f88c 3002 	strb.w	r3, [ip, #2]
 800059e:	6883      	ldr	r3, [r0, #8]
 80005a0:	0a1b      	lsrs	r3, r3, #8
 80005a2:	f88c 3004 	strb.w	r3, [ip, #4]
 80005a6:	6883      	ldr	r3, [r0, #8]
 80005a8:	f88c 3006 	strb.w	r3, [ip, #6]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 80005ac:	e782      	b.n	80004b4 <L6470_PrepareDaisyChainCommand+0x7c>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 80005ae:	6843      	ldr	r3, [r0, #4]
 80005b0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80005b4:	4423      	add	r3, r4
 80005b6:	f893 3318 	ldrb.w	r3, [r3, #792]	; 0x318
 80005ba:	ea4e 0ec3 	orr.w	lr, lr, r3, lsl #3
 80005be:	fa5f fe8e 	uxtb.w	lr, lr
 80005c2:	f88c e000 	strb.w	lr, [ip]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 80005c6:	6883      	ldr	r3, [r0, #8]
 80005c8:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 80005cc:	4423      	add	r3, r4
 80005ce:	f893 3308 	ldrb.w	r3, [r3, #776]	; 0x308
 80005d2:	ea4e 0e03 	orr.w	lr, lr, r3
 80005d6:	f88c e000 	strb.w	lr, [ip]
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p3) >> (8*(3-spibyte)));
 80005da:	89c3      	ldrh	r3, [r0, #14]
 80005dc:	f88c 3002 	strb.w	r3, [ip, #2]
 80005e0:	68c3      	ldr	r3, [r0, #12]
 80005e2:	0a1b      	lsrs	r3, r3, #8
 80005e4:	f88c 3004 	strb.w	r3, [ip, #4]
 80005e8:	68c3      	ldr	r3, [r0, #12]
 80005ea:	f88c 3006 	strb.w	r3, [ip, #6]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 80005ee:	e761      	b.n	80004b4 <L6470_PrepareDaisyChainCommand+0x7c>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 80005f0:	6843      	ldr	r3, [r0, #4]
 80005f2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80005f6:	4423      	add	r3, r4
 80005f8:	f893 3318 	ldrb.w	r3, [r3, #792]	; 0x318
 80005fc:	ea4e 0ec3 	orr.w	lr, lr, r3, lsl #3
 8000600:	fa5f fe8e 	uxtb.w	lr, lr
 8000604:	f88c e000 	strb.w	lr, [ip]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 8000608:	6883      	ldr	r3, [r0, #8]
 800060a:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800060e:	4423      	add	r3, r4
 8000610:	f893 3308 	ldrb.w	r3, [r3, #776]	; 0x308
 8000614:	ea4e 0e03 	orr.w	lr, lr, r3
 8000618:	f88c e000 	strb.w	lr, [ip]
      break;
 800061c:	e74a      	b.n	80004b4 <L6470_PrepareDaisyChainCommand+0x7c>
}
 800061e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000622:	bf00      	nop
 8000624:	08003d7c 	.word	0x08003d7c

08000628 <Step_s2_2_Acc>:
  if (Step_s2 <= (L6470_MAX_ACC * ((float)1.4552e1)))
 8000628:	eddf 7a09 	vldr	s15, [pc, #36]	; 8000650 <Step_s2_2_Acc+0x28>
 800062c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000634:	d809      	bhi.n	800064a <Step_s2_2_Acc+0x22>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 8000636:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000654 <Step_s2_2_Acc+0x2c>
 800063a:	eec0 7a07 	vdiv.f32	s15, s0, s14
 800063e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000642:	ee17 3a90 	vmov	r3, s15
 8000646:	b298      	uxth	r0, r3
 8000648:	4770      	bx	lr
    return 0;   // Warning
 800064a:	2000      	movs	r0, #0
}
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	4768c671 	.word	0x4768c671
 8000654:	4168d4fe 	.word	0x4168d4fe

08000658 <Step_s2_2_Dec>:
  if (Step_s2 <= (L6470_MAX_DEC * ((float)1.4552e1)))
 8000658:	eddf 7a09 	vldr	s15, [pc, #36]	; 8000680 <Step_s2_2_Dec+0x28>
 800065c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000664:	d809      	bhi.n	800067a <Step_s2_2_Dec+0x22>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 8000666:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000684 <Step_s2_2_Dec+0x2c>
 800066a:	eec0 7a07 	vdiv.f32	s15, s0, s14
 800066e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000672:	ee17 3a90 	vmov	r3, s15
 8000676:	b298      	uxth	r0, r3
 8000678:	4770      	bx	lr
    return 0;   // Warning
 800067a:	2000      	movs	r0, #0
}
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	4768c671 	.word	0x4768c671
 8000684:	4168d4fe 	.word	0x4168d4fe

08000688 <Step_s_2_MaxSpeed>:
  if (Step_s <= (L6470_MAX_MAX_SPEED * ((float)15.2588)))
 8000688:	eddf 7a09 	vldr	s15, [pc, #36]	; 80006b0 <Step_s_2_MaxSpeed+0x28>
 800068c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000694:	d809      	bhi.n	80006aa <Step_s_2_MaxSpeed+0x22>
    return (uint16_t)(Step_s / ((float)15.2588));
 8000696:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80006b4 <Step_s_2_MaxSpeed+0x2c>
 800069a:	eec0 7a07 	vdiv.f32	s15, s0, s14
 800069e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006a2:	ee17 3a90 	vmov	r3, s15
 80006a6:	b298      	uxth	r0, r3
 80006a8:	4770      	bx	lr
    return 0;   // Warning
 80006aa:	2000      	movs	r0, #0
}
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	4673e702 	.word	0x4673e702
 80006b4:	4174240b 	.word	0x4174240b

080006b8 <Step_s_2_MinSpeed>:
  if (Step_s <= (L6470_MAX_MIN_SPEED * ((float)238.4186e-3)))
 80006b8:	eddf 7a09 	vldr	s15, [pc, #36]	; 80006e0 <Step_s_2_MinSpeed+0x28>
 80006bc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80006c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006c4:	d809      	bhi.n	80006da <Step_s_2_MinSpeed+0x22>
    return (uint16_t)(Step_s / ((float)238.4186e-3));
 80006c6:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80006e4 <Step_s_2_MinSpeed+0x2c>
 80006ca:	eec0 7a07 	vdiv.f32	s15, s0, s14
 80006ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006d2:	ee17 3a90 	vmov	r3, s15
 80006d6:	b298      	uxth	r0, r3
 80006d8:	4770      	bx	lr
    return 0;   // Warning
 80006da:	2000      	movs	r0, #0
}
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	447414bf 	.word	0x447414bf
 80006e4:	3e742401 	.word	0x3e742401

080006e8 <Step_s_2_FsSpd>:
  if (Step_s <= ((L6470_MAX_FS_SPD+0.5) * ((float)15.25)))
 80006e8:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8000718 <Step_s_2_FsSpd+0x30>
 80006ec:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80006f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006f4:	d80d      	bhi.n	8000712 <Step_s_2_FsSpd+0x2a>
    return (uint16_t)((float)(Step_s / ((float)15.25)) - (float)0.5);
 80006f6:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800071c <Step_s_2_FsSpd+0x34>
 80006fa:	eec0 7a07 	vdiv.f32	s15, s0, s14
 80006fe:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000702:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000706:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800070a:	ee17 3a90 	vmov	r3, s15
 800070e:	b298      	uxth	r0, r3
 8000710:	4770      	bx	lr
    return 0;   // Warning
 8000712:	2000      	movs	r0, #0
}
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	4673e180 	.word	0x4673e180
 800071c:	41740000 	.word	0x41740000

08000720 <Step_s_2_IntSpeed>:
  if (Step_s <= (L6470_MAX_INT_SPEED * ((float)59.6046e-3)))
 8000720:	eddf 7a09 	vldr	s15, [pc, #36]	; 8000748 <Step_s_2_IntSpeed+0x28>
 8000724:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800072c:	d809      	bhi.n	8000742 <Step_s_2_IntSpeed+0x22>
    return (uint16_t)(Step_s / ((float)59.6046e-3));
 800072e:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800074c <Step_s_2_IntSpeed+0x2c>
 8000732:	eec0 7a07 	vdiv.f32	s15, s0, s14
 8000736:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800073a:	ee17 3a90 	vmov	r3, s15
 800073e:	b298      	uxth	r0, r3
 8000740:	4770      	bx	lr
    return 0;   // Warning
 8000742:	2000      	movs	r0, #0
}
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	44742023 	.word	0x44742023
 800074c:	3d7423f4 	.word	0x3d7423f4

08000750 <s_Step_2_StSlp>:
  if (s_Step <= (L6470_MAX_ST_SLP * ((float)1.5686e-5)))
 8000750:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800077c <s_Step_2_StSlp+0x2c>
 8000754:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800075c:	d80c      	bhi.n	8000778 <s_Step_2_StSlp+0x28>
{
 800075e:	b082      	sub	sp, #8
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 8000760:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000780 <s_Step_2_StSlp+0x30>
 8000764:	eec0 7a07 	vdiv.f32	s15, s0, s14
 8000768:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800076c:	edcd 7a01 	vstr	s15, [sp, #4]
 8000770:	f89d 0004 	ldrb.w	r0, [sp, #4]
}
 8000774:	b002      	add	sp, #8
 8000776:	4770      	bx	lr
    return 0;   // Warning
 8000778:	2000      	movs	r0, #0
}
 800077a:	4770      	bx	lr
 800077c:	3b8311d9 	.word	0x3b8311d9
 8000780:	3783956e 	.word	0x3783956e

08000784 <s_Step_2_FnSlpAcc>:
  if (s_Step <= (L6470_MAX_FN_SLP_ACC * ((float)1.5686e-5)))
 8000784:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80007b0 <s_Step_2_FnSlpAcc+0x2c>
 8000788:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800078c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000790:	d80c      	bhi.n	80007ac <s_Step_2_FnSlpAcc+0x28>
{
 8000792:	b082      	sub	sp, #8
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 8000794:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80007b4 <s_Step_2_FnSlpAcc+0x30>
 8000798:	eec0 7a07 	vdiv.f32	s15, s0, s14
 800079c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007a0:	edcd 7a01 	vstr	s15, [sp, #4]
 80007a4:	f89d 0004 	ldrb.w	r0, [sp, #4]
}
 80007a8:	b002      	add	sp, #8
 80007aa:	4770      	bx	lr
    return 0;   // Warning
 80007ac:	2000      	movs	r0, #0
}
 80007ae:	4770      	bx	lr
 80007b0:	3b8311d9 	.word	0x3b8311d9
 80007b4:	3783956e 	.word	0x3783956e

080007b8 <s_Step_2_FnSlpDec>:
  if (s_Step <= (L6470_MAX_FN_SLP_DEC * ((float)1.5686e-5)))
 80007b8:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80007e4 <s_Step_2_FnSlpDec+0x2c>
 80007bc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80007c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007c4:	d80c      	bhi.n	80007e0 <s_Step_2_FnSlpDec+0x28>
{
 80007c6:	b082      	sub	sp, #8
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 80007c8:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80007e8 <s_Step_2_FnSlpDec+0x30>
 80007cc:	eec0 7a07 	vdiv.f32	s15, s0, s14
 80007d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007d4:	edcd 7a01 	vstr	s15, [sp, #4]
 80007d8:	f89d 0004 	ldrb.w	r0, [sp, #4]
}
 80007dc:	b002      	add	sp, #8
 80007de:	4770      	bx	lr
    return 0;   // Warning
 80007e0:	2000      	movs	r0, #0
}
 80007e2:	4770      	bx	lr
 80007e4:	3b8311d9 	.word	0x3b8311d9
 80007e8:	3783956e 	.word	0x3783956e

080007ec <mA_2_OcdTh>:
  if (mA <= ((L6470_MAX_OCD_TH+1) * ((float)375)))
 80007ec:	eddf 7a12 	vldr	s15, [pc, #72]	; 8000838 <mA_2_OcdTh+0x4c>
 80007f0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80007f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007f8:	d81b      	bhi.n	8000832 <mA_2_OcdTh+0x46>
{
 80007fa:	b082      	sub	sp, #8
    result = (mA / ((float)375));
 80007fc:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800083c <mA_2_OcdTh+0x50>
 8000800:	eec0 7a07 	vdiv.f32	s15, s0, s14
    decimal = result - (uint8_t)result;
 8000804:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8000808:	ed8d 7a01 	vstr	s14, [sp, #4]
 800080c:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8000810:	ee07 0a10 	vmov	s14, r0
 8000814:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000818:	ee77 7ac7 	vsub.f32	s15, s15, s14
    if (decimal < (float)0.5)
 800081c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000820:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000828:	d501      	bpl.n	800082e <mA_2_OcdTh+0x42>
      return ((uint8_t)result - 1);
 800082a:	3801      	subs	r0, #1
 800082c:	b2c0      	uxtb	r0, r0
}
 800082e:	b002      	add	sp, #8
 8000830:	4770      	bx	lr
    return 0;   // Warning
 8000832:	2000      	movs	r0, #0
}
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	45bb8000 	.word	0x45bb8000
 800083c:	43bb8000 	.word	0x43bb8000

08000840 <mA_2_StallTh>:
  if (mA <= ((L6470_MAX_STALL_TH+1) * ((float)31.25)))
 8000840:	eddf 7a12 	vldr	s15, [pc, #72]	; 800088c <mA_2_StallTh+0x4c>
 8000844:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800084c:	d81b      	bhi.n	8000886 <mA_2_StallTh+0x46>
{
 800084e:	b082      	sub	sp, #8
    result = (mA / ((float)31.25));
 8000850:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000890 <mA_2_StallTh+0x50>
 8000854:	eec0 7a07 	vdiv.f32	s15, s0, s14
    decimal = result - (uint8_t)result;
 8000858:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800085c:	ed8d 7a01 	vstr	s14, [sp, #4]
 8000860:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8000864:	ee07 0a10 	vmov	s14, r0
 8000868:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800086c:	ee77 7ac7 	vsub.f32	s15, s15, s14
    if (decimal < (float)0.5)
 8000870:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000874:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800087c:	d501      	bpl.n	8000882 <mA_2_StallTh+0x42>
      return ((uint8_t)result - 1);
 800087e:	3801      	subs	r0, #1
 8000880:	b2c0      	uxtb	r0, r0
}
 8000882:	b002      	add	sp, #8
 8000884:	4770      	bx	lr
    return 0;   // Warning
 8000886:	2000      	movs	r0, #0
}
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	457a0000 	.word	0x457a0000
 8000890:	41fa0000 	.word	0x41fa0000

08000894 <L6470_ID>:
  {
    return (position);
  }
  else
  {
    return 0xFF;
 8000894:	2802      	cmp	r0, #2
  }
}
 8000896:	bf28      	it	cs
 8000898:	20ff      	movcs	r0, #255	; 0xff
 800089a:	4770      	bx	lr

0800089c <L6470_DaisyChainCommand>:
  * @brief  Send command to the L6470 daisy chain via SPI
  * @param  pL6470_DaisyChainSpiTxStruct  Pointer to the matrix array of bytes to be sent to the daisy chain L6470
  * @param  pL6470_DaisyChainSpiRxStruct  Pointer to the matrix array of bytes to be received from the daisy chain L6470
  */
void L6470_DaisyChainCommand(uint8_t* pL6470_DaisyChainSpiTxStruct, uint8_t* pL6470_DaisyChainSpiRxStruct)
{
 800089c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80008a0:	b083      	sub	sp, #12
 80008a2:	4681      	mov	r9, r0
 80008a4:	4688      	mov	r8, r1
  uint8_t spibyte;
  
  L6470_DaisyChain_HalfPrepared = ZERO_F;
 80008a6:	2500      	movs	r5, #0
 80008a8:	4b14      	ldr	r3, [pc, #80]	; (80008fc <L6470_DaisyChainCommand+0x60>)
 80008aa:	701d      	strb	r5, [r3, #0]
  
  /* Send all command bytes via SPI */
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
  {
    /* Enable SPI communication for L6470 */
    L6470_nCS_LOW();
 80008ac:	4e14      	ldr	r6, [pc, #80]	; (8000900 <L6470_DaisyChainCommand+0x64>)
 80008ae:	462f      	mov	r7, r5
    L6470_SPI_Communication(&HSPI, (pL6470_DaisyChainSpiTxStruct+(spibyte * L6470DAISYCHAINSIZE)), (pL6470_DaisyChainSpiRxStruct+(spibyte * L6470DAISYCHAINSIZE)), L6470DAISYCHAINSIZE, 10);
    
    /* Allow the device to decode the received command */
    L6470_nCS_HIGH();
    
    _DELAY(TDISCS);
 80008b0:	461c      	mov	r4, r3
    L6470_nCS_LOW();
 80008b2:	463a      	mov	r2, r7
 80008b4:	8931      	ldrh	r1, [r6, #8]
 80008b6:	6870      	ldr	r0, [r6, #4]
 80008b8:	f001 fc82 	bl	80021c0 <HAL_GPIO_WritePin>
    L6470_SPI_Communication(&HSPI, (pL6470_DaisyChainSpiTxStruct+(spibyte * L6470DAISYCHAINSIZE)), (pL6470_DaisyChainSpiRxStruct+(spibyte * L6470DAISYCHAINSIZE)), L6470DAISYCHAINSIZE, 10);
 80008bc:	230a      	movs	r3, #10
 80008be:	9300      	str	r3, [sp, #0]
 80008c0:	2302      	movs	r3, #2
 80008c2:	eb08 0205 	add.w	r2, r8, r5
 80008c6:	eb09 0105 	add.w	r1, r9, r5
 80008ca:	480e      	ldr	r0, [pc, #56]	; (8000904 <L6470_DaisyChainCommand+0x68>)
 80008cc:	f002 fa32 	bl	8002d34 <HAL_SPI_TransmitReceive>
    L6470_nCS_HIGH();
 80008d0:	2201      	movs	r2, #1
 80008d2:	8931      	ldrh	r1, [r6, #8]
 80008d4:	6870      	ldr	r0, [r6, #4]
 80008d6:	f001 fc73 	bl	80021c0 <HAL_GPIO_WritePin>
    _DELAY(TDISCS);
 80008da:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80008de:	bf00      	nop
 80008e0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80008e4:	3301      	adds	r3, #1
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80008ec:	2b13      	cmp	r3, #19
 80008ee:	d9f6      	bls.n	80008de <L6470_DaisyChainCommand+0x42>
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 80008f0:	3502      	adds	r5, #2
 80008f2:	2d08      	cmp	r5, #8
 80008f4:	d1dd      	bne.n	80008b2 <L6470_DaisyChainCommand+0x16>
  }
}
 80008f6:	b003      	add	sp, #12
 80008f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80008fc:	20000384 	.word	0x20000384
 8000900:	200003c0 	.word	0x200003c0
 8000904:	200003d0 	.word	0x200003d0

08000908 <L6470_SetParam>:
{
 8000908:	b570      	push	{r4, r5, r6, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	460b      	mov	r3, r1
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 800090e:	4c0b      	ldr	r4, [pc, #44]	; (800093c <L6470_SetParam+0x34>)
 8000910:	1d26      	adds	r6, r4, #4
 8000912:	2100      	movs	r1, #0
 8000914:	9101      	str	r1, [sp, #4]
 8000916:	9200      	str	r2, [sp, #0]
 8000918:	2201      	movs	r2, #1
 800091a:	4631      	mov	r1, r6
 800091c:	f7ff fc64 	bl	80001e8 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000920:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8000924:	4629      	mov	r1, r5
 8000926:	4630      	mov	r0, r6
 8000928:	f7ff fd86 	bl	8000438 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800092c:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8000930:	4628      	mov	r0, r5
 8000932:	f7ff ffb3 	bl	800089c <L6470_DaisyChainCommand>
}
 8000936:	b002      	add	sp, #8
 8000938:	bd70      	pop	{r4, r5, r6, pc}
 800093a:	bf00      	nop
 800093c:	20000384 	.word	0x20000384

08000940 <L6470_Run>:
{
 8000940:	b570      	push	{r4, r5, r6, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	460b      	mov	r3, r1
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 8000946:	4c0b      	ldr	r4, [pc, #44]	; (8000974 <L6470_Run+0x34>)
 8000948:	1d26      	adds	r6, r4, #4
 800094a:	2100      	movs	r1, #0
 800094c:	9101      	str	r1, [sp, #4]
 800094e:	9200      	str	r2, [sp, #0]
 8000950:	2203      	movs	r2, #3
 8000952:	4631      	mov	r1, r6
 8000954:	f7ff fc48 	bl	80001e8 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000958:	f104 0528 	add.w	r5, r4, #40	; 0x28
 800095c:	4629      	mov	r1, r5
 800095e:	4630      	mov	r0, r6
 8000960:	f7ff fd6a 	bl	8000438 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000964:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8000968:	4628      	mov	r0, r5
 800096a:	f7ff ff97 	bl	800089c <L6470_DaisyChainCommand>
}
 800096e:	b002      	add	sp, #8
 8000970:	bd70      	pop	{r4, r5, r6, pc}
 8000972:	bf00      	nop
 8000974:	20000384 	.word	0x20000384

08000978 <L6470_StepClock>:
{
 8000978:	b570      	push	{r4, r5, r6, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	460b      	mov	r3, r1
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 800097e:	4c0b      	ldr	r4, [pc, #44]	; (80009ac <L6470_StepClock+0x34>)
 8000980:	1d26      	adds	r6, r4, #4
 8000982:	2200      	movs	r2, #0
 8000984:	9201      	str	r2, [sp, #4]
 8000986:	9200      	str	r2, [sp, #0]
 8000988:	2204      	movs	r2, #4
 800098a:	4631      	mov	r1, r6
 800098c:	f7ff fc2c 	bl	80001e8 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000990:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8000994:	4629      	mov	r1, r5
 8000996:	4630      	mov	r0, r6
 8000998:	f7ff fd4e 	bl	8000438 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800099c:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80009a0:	4628      	mov	r0, r5
 80009a2:	f7ff ff7b 	bl	800089c <L6470_DaisyChainCommand>
}
 80009a6:	b002      	add	sp, #8
 80009a8:	bd70      	pop	{r4, r5, r6, pc}
 80009aa:	bf00      	nop
 80009ac:	20000384 	.word	0x20000384

080009b0 <L6470_Move>:
{
 80009b0:	b570      	push	{r4, r5, r6, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	460b      	mov	r3, r1
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 80009b6:	4c0b      	ldr	r4, [pc, #44]	; (80009e4 <L6470_Move+0x34>)
 80009b8:	1d26      	adds	r6, r4, #4
 80009ba:	2100      	movs	r1, #0
 80009bc:	9101      	str	r1, [sp, #4]
 80009be:	9200      	str	r2, [sp, #0]
 80009c0:	2205      	movs	r2, #5
 80009c2:	4631      	mov	r1, r6
 80009c4:	f7ff fc10 	bl	80001e8 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80009c8:	f104 0528 	add.w	r5, r4, #40	; 0x28
 80009cc:	4629      	mov	r1, r5
 80009ce:	4630      	mov	r0, r6
 80009d0:	f7ff fd32 	bl	8000438 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80009d4:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80009d8:	4628      	mov	r0, r5
 80009da:	f7ff ff5f 	bl	800089c <L6470_DaisyChainCommand>
}
 80009de:	b002      	add	sp, #8
 80009e0:	bd70      	pop	{r4, r5, r6, pc}
 80009e2:	bf00      	nop
 80009e4:	20000384 	.word	0x20000384

080009e8 <L6470_GoTo>:
  if (AbsPos <= L6470_POSITION_RANGE)
 80009e8:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 80009ec:	d300      	bcc.n	80009f0 <L6470_GoTo+0x8>
 80009ee:	4770      	bx	lr
{
 80009f0:	b570      	push	{r4, r5, r6, lr}
 80009f2:	b082      	sub	sp, #8
    L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 80009f4:	4c0b      	ldr	r4, [pc, #44]	; (8000a24 <L6470_GoTo+0x3c>)
 80009f6:	1d26      	adds	r6, r4, #4
 80009f8:	2200      	movs	r2, #0
 80009fa:	9201      	str	r2, [sp, #4]
 80009fc:	9200      	str	r2, [sp, #0]
 80009fe:	460b      	mov	r3, r1
 8000a00:	2206      	movs	r2, #6
 8000a02:	4631      	mov	r1, r6
 8000a04:	f7ff fbf0 	bl	80001e8 <L6470_PrepareAppCmdPkg>
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000a08:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8000a0c:	4629      	mov	r1, r5
 8000a0e:	4630      	mov	r0, r6
 8000a10:	f7ff fd12 	bl	8000438 <L6470_PrepareDaisyChainCommand>
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000a14:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8000a18:	4628      	mov	r0, r5
 8000a1a:	f7ff ff3f 	bl	800089c <L6470_DaisyChainCommand>
}
 8000a1e:	b002      	add	sp, #8
 8000a20:	bd70      	pop	{r4, r5, r6, pc}
 8000a22:	bf00      	nop
 8000a24:	20000384 	.word	0x20000384

08000a28 <L6470_GoToDir>:
  if (AbsPos <= L6470_POSITION_RANGE)
 8000a28:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8000a2c:	d300      	bcc.n	8000a30 <L6470_GoToDir+0x8>
 8000a2e:	4770      	bx	lr
{
 8000a30:	b570      	push	{r4, r5, r6, lr}
 8000a32:	b082      	sub	sp, #8
    L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 8000a34:	4c0b      	ldr	r4, [pc, #44]	; (8000a64 <L6470_GoToDir+0x3c>)
 8000a36:	1d26      	adds	r6, r4, #4
 8000a38:	2300      	movs	r3, #0
 8000a3a:	9301      	str	r3, [sp, #4]
 8000a3c:	9200      	str	r2, [sp, #0]
 8000a3e:	460b      	mov	r3, r1
 8000a40:	2207      	movs	r2, #7
 8000a42:	4631      	mov	r1, r6
 8000a44:	f7ff fbd0 	bl	80001e8 <L6470_PrepareAppCmdPkg>
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000a48:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8000a4c:	4629      	mov	r1, r5
 8000a4e:	4630      	mov	r0, r6
 8000a50:	f7ff fcf2 	bl	8000438 <L6470_PrepareDaisyChainCommand>
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000a54:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8000a58:	4628      	mov	r0, r5
 8000a5a:	f7ff ff1f 	bl	800089c <L6470_DaisyChainCommand>
}
 8000a5e:	b002      	add	sp, #8
 8000a60:	bd70      	pop	{r4, r5, r6, pc}
 8000a62:	bf00      	nop
 8000a64:	20000384 	.word	0x20000384

08000a68 <L6470_GoUntil>:
{
 8000a68:	b570      	push	{r4, r5, r6, lr}
 8000a6a:	b082      	sub	sp, #8
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 8000a6c:	4c0a      	ldr	r4, [pc, #40]	; (8000a98 <L6470_GoUntil+0x30>)
 8000a6e:	1d26      	adds	r6, r4, #4
 8000a70:	9301      	str	r3, [sp, #4]
 8000a72:	9200      	str	r2, [sp, #0]
 8000a74:	460b      	mov	r3, r1
 8000a76:	2208      	movs	r2, #8
 8000a78:	4631      	mov	r1, r6
 8000a7a:	f7ff fbb5 	bl	80001e8 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000a7e:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8000a82:	4629      	mov	r1, r5
 8000a84:	4630      	mov	r0, r6
 8000a86:	f7ff fcd7 	bl	8000438 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000a8a:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8000a8e:	4628      	mov	r0, r5
 8000a90:	f7ff ff04 	bl	800089c <L6470_DaisyChainCommand>
}
 8000a94:	b002      	add	sp, #8
 8000a96:	bd70      	pop	{r4, r5, r6, pc}
 8000a98:	20000384 	.word	0x20000384

08000a9c <L6470_ReleaseSW>:
{
 8000a9c:	b570      	push	{r4, r5, r6, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	460b      	mov	r3, r1
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 8000aa2:	4c0b      	ldr	r4, [pc, #44]	; (8000ad0 <L6470_ReleaseSW+0x34>)
 8000aa4:	1d26      	adds	r6, r4, #4
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	9101      	str	r1, [sp, #4]
 8000aaa:	9200      	str	r2, [sp, #0]
 8000aac:	2209      	movs	r2, #9
 8000aae:	4631      	mov	r1, r6
 8000ab0:	f7ff fb9a 	bl	80001e8 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000ab4:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8000ab8:	4629      	mov	r1, r5
 8000aba:	4630      	mov	r0, r6
 8000abc:	f7ff fcbc 	bl	8000438 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000ac0:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8000ac4:	4628      	mov	r0, r5
 8000ac6:	f7ff fee9 	bl	800089c <L6470_DaisyChainCommand>
}
 8000aca:	b002      	add	sp, #8
 8000acc:	bd70      	pop	{r4, r5, r6, pc}
 8000ace:	bf00      	nop
 8000ad0:	20000384 	.word	0x20000384

08000ad4 <L6470_GoHome>:
{
 8000ad4:	b570      	push	{r4, r5, r6, lr}
 8000ad6:	b082      	sub	sp, #8
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 8000ad8:	4c0a      	ldr	r4, [pc, #40]	; (8000b04 <L6470_GoHome+0x30>)
 8000ada:	1d26      	adds	r6, r4, #4
 8000adc:	2300      	movs	r3, #0
 8000ade:	9301      	str	r3, [sp, #4]
 8000ae0:	9300      	str	r3, [sp, #0]
 8000ae2:	220a      	movs	r2, #10
 8000ae4:	4631      	mov	r1, r6
 8000ae6:	f7ff fb7f 	bl	80001e8 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000aea:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8000aee:	4629      	mov	r1, r5
 8000af0:	4630      	mov	r0, r6
 8000af2:	f7ff fca1 	bl	8000438 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000af6:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8000afa:	4628      	mov	r0, r5
 8000afc:	f7ff fece 	bl	800089c <L6470_DaisyChainCommand>
}
 8000b00:	b002      	add	sp, #8
 8000b02:	bd70      	pop	{r4, r5, r6, pc}
 8000b04:	20000384 	.word	0x20000384

08000b08 <L6470_GoMark>:
{
 8000b08:	b570      	push	{r4, r5, r6, lr}
 8000b0a:	b082      	sub	sp, #8
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 8000b0c:	4c0a      	ldr	r4, [pc, #40]	; (8000b38 <L6470_GoMark+0x30>)
 8000b0e:	1d26      	adds	r6, r4, #4
 8000b10:	2300      	movs	r3, #0
 8000b12:	9301      	str	r3, [sp, #4]
 8000b14:	9300      	str	r3, [sp, #0]
 8000b16:	220b      	movs	r2, #11
 8000b18:	4631      	mov	r1, r6
 8000b1a:	f7ff fb65 	bl	80001e8 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000b1e:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8000b22:	4629      	mov	r1, r5
 8000b24:	4630      	mov	r0, r6
 8000b26:	f7ff fc87 	bl	8000438 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000b2a:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8000b2e:	4628      	mov	r0, r5
 8000b30:	f7ff feb4 	bl	800089c <L6470_DaisyChainCommand>
}
 8000b34:	b002      	add	sp, #8
 8000b36:	bd70      	pop	{r4, r5, r6, pc}
 8000b38:	20000384 	.word	0x20000384

08000b3c <L6470_ResetPos>:
{
 8000b3c:	b570      	push	{r4, r5, r6, lr}
 8000b3e:	b082      	sub	sp, #8
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 8000b40:	4c0a      	ldr	r4, [pc, #40]	; (8000b6c <L6470_ResetPos+0x30>)
 8000b42:	1d26      	adds	r6, r4, #4
 8000b44:	2300      	movs	r3, #0
 8000b46:	9301      	str	r3, [sp, #4]
 8000b48:	9300      	str	r3, [sp, #0]
 8000b4a:	220c      	movs	r2, #12
 8000b4c:	4631      	mov	r1, r6
 8000b4e:	f7ff fb4b 	bl	80001e8 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000b52:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8000b56:	4629      	mov	r1, r5
 8000b58:	4630      	mov	r0, r6
 8000b5a:	f7ff fc6d 	bl	8000438 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000b5e:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8000b62:	4628      	mov	r0, r5
 8000b64:	f7ff fe9a 	bl	800089c <L6470_DaisyChainCommand>
}
 8000b68:	b002      	add	sp, #8
 8000b6a:	bd70      	pop	{r4, r5, r6, pc}
 8000b6c:	20000384 	.word	0x20000384

08000b70 <L6470_ResetDevice>:
{
 8000b70:	b570      	push	{r4, r5, r6, lr}
 8000b72:	b082      	sub	sp, #8
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 8000b74:	4c0a      	ldr	r4, [pc, #40]	; (8000ba0 <L6470_ResetDevice+0x30>)
 8000b76:	1d26      	adds	r6, r4, #4
 8000b78:	2300      	movs	r3, #0
 8000b7a:	9301      	str	r3, [sp, #4]
 8000b7c:	9300      	str	r3, [sp, #0]
 8000b7e:	220d      	movs	r2, #13
 8000b80:	4631      	mov	r1, r6
 8000b82:	f7ff fb31 	bl	80001e8 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000b86:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8000b8a:	4629      	mov	r1, r5
 8000b8c:	4630      	mov	r0, r6
 8000b8e:	f7ff fc53 	bl	8000438 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000b92:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8000b96:	4628      	mov	r0, r5
 8000b98:	f7ff fe80 	bl	800089c <L6470_DaisyChainCommand>
}
 8000b9c:	b002      	add	sp, #8
 8000b9e:	bd70      	pop	{r4, r5, r6, pc}
 8000ba0:	20000384 	.word	0x20000384

08000ba4 <L6470_SoftStop>:
{
 8000ba4:	b570      	push	{r4, r5, r6, lr}
 8000ba6:	b082      	sub	sp, #8
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 8000ba8:	4c0a      	ldr	r4, [pc, #40]	; (8000bd4 <L6470_SoftStop+0x30>)
 8000baa:	1d26      	adds	r6, r4, #4
 8000bac:	2300      	movs	r3, #0
 8000bae:	9301      	str	r3, [sp, #4]
 8000bb0:	9300      	str	r3, [sp, #0]
 8000bb2:	220e      	movs	r2, #14
 8000bb4:	4631      	mov	r1, r6
 8000bb6:	f7ff fb17 	bl	80001e8 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000bba:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8000bbe:	4629      	mov	r1, r5
 8000bc0:	4630      	mov	r0, r6
 8000bc2:	f7ff fc39 	bl	8000438 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000bc6:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8000bca:	4628      	mov	r0, r5
 8000bcc:	f7ff fe66 	bl	800089c <L6470_DaisyChainCommand>
}
 8000bd0:	b002      	add	sp, #8
 8000bd2:	bd70      	pop	{r4, r5, r6, pc}
 8000bd4:	20000384 	.word	0x20000384

08000bd8 <L6470_HardStop>:
{
 8000bd8:	b570      	push	{r4, r5, r6, lr}
 8000bda:	b082      	sub	sp, #8
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 8000bdc:	4c0a      	ldr	r4, [pc, #40]	; (8000c08 <L6470_HardStop+0x30>)
 8000bde:	1d26      	adds	r6, r4, #4
 8000be0:	2300      	movs	r3, #0
 8000be2:	9301      	str	r3, [sp, #4]
 8000be4:	9300      	str	r3, [sp, #0]
 8000be6:	220f      	movs	r2, #15
 8000be8:	4631      	mov	r1, r6
 8000bea:	f7ff fafd 	bl	80001e8 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000bee:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8000bf2:	4629      	mov	r1, r5
 8000bf4:	4630      	mov	r0, r6
 8000bf6:	f7ff fc1f 	bl	8000438 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000bfa:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8000bfe:	4628      	mov	r0, r5
 8000c00:	f7ff fe4c 	bl	800089c <L6470_DaisyChainCommand>
}
 8000c04:	b002      	add	sp, #8
 8000c06:	bd70      	pop	{r4, r5, r6, pc}
 8000c08:	20000384 	.word	0x20000384

08000c0c <L6470_SoftHiZ>:
{
 8000c0c:	b570      	push	{r4, r5, r6, lr}
 8000c0e:	b082      	sub	sp, #8
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 8000c10:	4c0a      	ldr	r4, [pc, #40]	; (8000c3c <L6470_SoftHiZ+0x30>)
 8000c12:	1d26      	adds	r6, r4, #4
 8000c14:	2300      	movs	r3, #0
 8000c16:	9301      	str	r3, [sp, #4]
 8000c18:	9300      	str	r3, [sp, #0]
 8000c1a:	2210      	movs	r2, #16
 8000c1c:	4631      	mov	r1, r6
 8000c1e:	f7ff fae3 	bl	80001e8 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000c22:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8000c26:	4629      	mov	r1, r5
 8000c28:	4630      	mov	r0, r6
 8000c2a:	f7ff fc05 	bl	8000438 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000c2e:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8000c32:	4628      	mov	r0, r5
 8000c34:	f7ff fe32 	bl	800089c <L6470_DaisyChainCommand>
}
 8000c38:	b002      	add	sp, #8
 8000c3a:	bd70      	pop	{r4, r5, r6, pc}
 8000c3c:	20000384 	.word	0x20000384

08000c40 <L6470_HardHiZ>:
{
 8000c40:	b570      	push	{r4, r5, r6, lr}
 8000c42:	b082      	sub	sp, #8
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 8000c44:	4c0a      	ldr	r4, [pc, #40]	; (8000c70 <L6470_HardHiZ+0x30>)
 8000c46:	1d26      	adds	r6, r4, #4
 8000c48:	2300      	movs	r3, #0
 8000c4a:	9301      	str	r3, [sp, #4]
 8000c4c:	9300      	str	r3, [sp, #0]
 8000c4e:	2211      	movs	r2, #17
 8000c50:	4631      	mov	r1, r6
 8000c52:	f7ff fac9 	bl	80001e8 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000c56:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8000c5a:	4629      	mov	r1, r5
 8000c5c:	4630      	mov	r0, r6
 8000c5e:	f7ff fbeb 	bl	8000438 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000c62:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8000c66:	4628      	mov	r0, r5
 8000c68:	f7ff fe18 	bl	800089c <L6470_DaisyChainCommand>
}
 8000c6c:	b002      	add	sp, #8
 8000c6e:	bd70      	pop	{r4, r5, r6, pc}
 8000c70:	20000384 	.word	0x20000384

08000c74 <L6470_PerformPreparedApplicationCommand>:
{
 8000c74:	b538      	push	{r3, r4, r5, lr}
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000c76:	4c07      	ldr	r4, [pc, #28]	; (8000c94 <L6470_PerformPreparedApplicationCommand+0x20>)
 8000c78:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8000c7c:	4629      	mov	r1, r5
 8000c7e:	1d20      	adds	r0, r4, #4
 8000c80:	f7ff fbda 	bl	8000438 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000c84:	3430      	adds	r4, #48	; 0x30
 8000c86:	4621      	mov	r1, r4
 8000c88:	4628      	mov	r0, r5
 8000c8a:	f7ff fe07 	bl	800089c <L6470_DaisyChainCommand>
}
 8000c8e:	4620      	mov	r0, r4
 8000c90:	bd38      	pop	{r3, r4, r5, pc}
 8000c92:	bf00      	nop
 8000c94:	20000384 	.word	0x20000384

08000c98 <L6470_ExtractReturnedData>:
{
  uint32_t value;
  uint8_t i;
  
  value = 0x000000;
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 8000c98:	4401      	add	r1, r0
 8000c9a:	1e53      	subs	r3, r2, #1
 8000c9c:	00db      	lsls	r3, r3, #3
 8000c9e:	f102 5200 	add.w	r2, r2, #536870912	; 0x20000000
 8000ca2:	3a04      	subs	r2, #4
 8000ca4:	00d2      	lsls	r2, r2, #3
  value = 0x000000;
 8000ca6:	2000      	movs	r0, #0
  {
    value |= (*(pL6470_DaisyChainSpiRxStruct+(i*L6470DAISYCHAINSIZE)+L6470_Id))<<((LengthByte-i)*8);
 8000ca8:	f811 cf02 	ldrb.w	ip, [r1, #2]!
 8000cac:	fa0c fc03 	lsl.w	ip, ip, r3
 8000cb0:	ea40 000c 	orr.w	r0, r0, ip
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 8000cb4:	3b08      	subs	r3, #8
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d1f6      	bne.n	8000ca8 <L6470_ExtractReturnedData+0x10>
  }
  
  return value;
}
 8000cba:	4770      	bx	lr

08000cbc <L6470_GetParam>:
{
 8000cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000cc0:	b082      	sub	sp, #8
 8000cc2:	4606      	mov	r6, r0
 8000cc4:	460c      	mov	r4, r1
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 8000cc6:	4d12      	ldr	r5, [pc, #72]	; (8000d10 <L6470_GetParam+0x54>)
 8000cc8:	f105 0804 	add.w	r8, r5, #4
 8000ccc:	2300      	movs	r3, #0
 8000cce:	9301      	str	r3, [sp, #4]
 8000cd0:	9300      	str	r3, [sp, #0]
 8000cd2:	460b      	mov	r3, r1
 8000cd4:	2202      	movs	r2, #2
 8000cd6:	4641      	mov	r1, r8
 8000cd8:	f7ff fa86 	bl	80001e8 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000cdc:	f105 0728 	add.w	r7, r5, #40	; 0x28
 8000ce0:	4639      	mov	r1, r7
 8000ce2:	4640      	mov	r0, r8
 8000ce4:	f7ff fba8 	bl	8000438 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000ce8:	3530      	adds	r5, #48	; 0x30
 8000cea:	4629      	mov	r1, r5
 8000cec:	4638      	mov	r0, r7
 8000cee:	f7ff fdd5 	bl	800089c <L6470_DaisyChainCommand>
  ValueLengthByte = L6470_Register[L6470_RegId].LengthByte;
 8000cf2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8000cf6:	4907      	ldr	r1, [pc, #28]	; (8000d14 <L6470_GetParam+0x58>)
 8000cf8:	eb01 0484 	add.w	r4, r1, r4, lsl #2
  ReceivedValue = L6470_ExtractReturnedData(L6470_Id, (uint8_t*)L6470_DaisyChainSpiRxStruct, ValueLengthByte);
 8000cfc:	f894 211a 	ldrb.w	r2, [r4, #282]	; 0x11a
 8000d00:	4629      	mov	r1, r5
 8000d02:	4630      	mov	r0, r6
 8000d04:	f7ff ffc8 	bl	8000c98 <L6470_ExtractReturnedData>
}
 8000d08:	b002      	add	sp, #8
 8000d0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d0e:	bf00      	nop
 8000d10:	20000384 	.word	0x20000384
 8000d14:	08003d7c 	.word	0x08003d7c

08000d18 <L6470_CheckStatusRegisterFlag>:
  *
  * @retval state The flag state.
  */

uint8_t L6470_CheckStatusRegisterFlag(uint8_t L6470_Id, uint8_t L6470_StatusRegisterFlagId)
{
 8000d18:	b510      	push	{r4, lr}
 8000d1a:	460c      	mov	r4, r1
  uint8_t state = 0;
  
  *((uint16_t*)pL6470_StatusRegister) = L6470_GetParam(L6470_Id, L6470_STATUS_ID);
 8000d1c:	2118      	movs	r1, #24
 8000d1e:	f7ff ffcd 	bl	8000cbc <L6470_GetParam>
 8000d22:	4b34      	ldr	r3, [pc, #208]	; (8000df4 <L6470_CheckStatusRegisterFlag+0xdc>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	8018      	strh	r0, [r3, #0]
  
  switch(L6470_StatusRegisterFlagId)
 8000d28:	2c0e      	cmp	r4, #14
 8000d2a:	d861      	bhi.n	8000df0 <L6470_CheckStatusRegisterFlag+0xd8>
 8000d2c:	e8df f004 	tbb	[pc, r4]
 8000d30:	1a140e08 	.word	0x1a140e08
 8000d34:	312c2620 	.word	0x312c2620
 8000d38:	49433d37 	.word	0x49433d37
 8000d3c:	554f      	.short	0x554f
 8000d3e:	5b          	.byte	0x5b
 8000d3f:	00          	.byte	0x00
  {
  case HiZ_ID:
    state = pL6470_StatusRegister->HiZ;
 8000d40:	4b2c      	ldr	r3, [pc, #176]	; (8000df4 <L6470_CheckStatusRegisterFlag+0xdc>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	7818      	ldrb	r0, [r3, #0]
 8000d46:	f000 0001 	and.w	r0, r0, #1
    state = pL6470_StatusRegister->SCK_MOD;
    break;
  }
  
  return state;
}
 8000d4a:	bd10      	pop	{r4, pc}
    state = pL6470_StatusRegister->BUSY;
 8000d4c:	4b29      	ldr	r3, [pc, #164]	; (8000df4 <L6470_CheckStatusRegisterFlag+0xdc>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	7818      	ldrb	r0, [r3, #0]
 8000d52:	f3c0 0040 	ubfx	r0, r0, #1, #1
    break;
 8000d56:	e7f8      	b.n	8000d4a <L6470_CheckStatusRegisterFlag+0x32>
    state = pL6470_StatusRegister->SW_F;
 8000d58:	4b26      	ldr	r3, [pc, #152]	; (8000df4 <L6470_CheckStatusRegisterFlag+0xdc>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	7818      	ldrb	r0, [r3, #0]
 8000d5e:	f3c0 0080 	ubfx	r0, r0, #2, #1
    break;
 8000d62:	e7f2      	b.n	8000d4a <L6470_CheckStatusRegisterFlag+0x32>
    state = pL6470_StatusRegister->SW_EVN;
 8000d64:	4b23      	ldr	r3, [pc, #140]	; (8000df4 <L6470_CheckStatusRegisterFlag+0xdc>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	7818      	ldrb	r0, [r3, #0]
 8000d6a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    break;
 8000d6e:	e7ec      	b.n	8000d4a <L6470_CheckStatusRegisterFlag+0x32>
    state = pL6470_StatusRegister->DIR;
 8000d70:	4b20      	ldr	r3, [pc, #128]	; (8000df4 <L6470_CheckStatusRegisterFlag+0xdc>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	7818      	ldrb	r0, [r3, #0]
 8000d76:	f3c0 1000 	ubfx	r0, r0, #4, #1
    break;
 8000d7a:	e7e6      	b.n	8000d4a <L6470_CheckStatusRegisterFlag+0x32>
    state = pL6470_StatusRegister->MOT_STATUS;
 8000d7c:	4b1d      	ldr	r3, [pc, #116]	; (8000df4 <L6470_CheckStatusRegisterFlag+0xdc>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	7818      	ldrb	r0, [r3, #0]
 8000d82:	f3c0 1041 	ubfx	r0, r0, #5, #2
    break;
 8000d86:	e7e0      	b.n	8000d4a <L6470_CheckStatusRegisterFlag+0x32>
    state = pL6470_StatusRegister->NOTPERF_CMD;
 8000d88:	4b1a      	ldr	r3, [pc, #104]	; (8000df4 <L6470_CheckStatusRegisterFlag+0xdc>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	7818      	ldrb	r0, [r3, #0]
 8000d8e:	09c0      	lsrs	r0, r0, #7
    break;
 8000d90:	e7db      	b.n	8000d4a <L6470_CheckStatusRegisterFlag+0x32>
    state = pL6470_StatusRegister->WRONG_CMD;
 8000d92:	4b18      	ldr	r3, [pc, #96]	; (8000df4 <L6470_CheckStatusRegisterFlag+0xdc>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	7858      	ldrb	r0, [r3, #1]
 8000d98:	f000 0001 	and.w	r0, r0, #1
    break;
 8000d9c:	e7d5      	b.n	8000d4a <L6470_CheckStatusRegisterFlag+0x32>
    state = pL6470_StatusRegister->UVLO;
 8000d9e:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <L6470_CheckStatusRegisterFlag+0xdc>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	7858      	ldrb	r0, [r3, #1]
 8000da4:	f3c0 0040 	ubfx	r0, r0, #1, #1
    break;
 8000da8:	e7cf      	b.n	8000d4a <L6470_CheckStatusRegisterFlag+0x32>
    state = pL6470_StatusRegister->TH_WRN;
 8000daa:	4b12      	ldr	r3, [pc, #72]	; (8000df4 <L6470_CheckStatusRegisterFlag+0xdc>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	7858      	ldrb	r0, [r3, #1]
 8000db0:	f3c0 0080 	ubfx	r0, r0, #2, #1
    break;
 8000db4:	e7c9      	b.n	8000d4a <L6470_CheckStatusRegisterFlag+0x32>
    state = pL6470_StatusRegister->TH_SD;
 8000db6:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <L6470_CheckStatusRegisterFlag+0xdc>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	7858      	ldrb	r0, [r3, #1]
 8000dbc:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    break;
 8000dc0:	e7c3      	b.n	8000d4a <L6470_CheckStatusRegisterFlag+0x32>
    state = pL6470_StatusRegister->OCD;
 8000dc2:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <L6470_CheckStatusRegisterFlag+0xdc>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	7858      	ldrb	r0, [r3, #1]
 8000dc8:	f3c0 1000 	ubfx	r0, r0, #4, #1
    break;
 8000dcc:	e7bd      	b.n	8000d4a <L6470_CheckStatusRegisterFlag+0x32>
    state = pL6470_StatusRegister->STEP_LOSS_A;
 8000dce:	4b09      	ldr	r3, [pc, #36]	; (8000df4 <L6470_CheckStatusRegisterFlag+0xdc>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	7858      	ldrb	r0, [r3, #1]
 8000dd4:	f3c0 1040 	ubfx	r0, r0, #5, #1
    break;
 8000dd8:	e7b7      	b.n	8000d4a <L6470_CheckStatusRegisterFlag+0x32>
    state = pL6470_StatusRegister->STEP_LOSS_B;
 8000dda:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <L6470_CheckStatusRegisterFlag+0xdc>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	7858      	ldrb	r0, [r3, #1]
 8000de0:	f3c0 1080 	ubfx	r0, r0, #6, #1
    break;
 8000de4:	e7b1      	b.n	8000d4a <L6470_CheckStatusRegisterFlag+0x32>
    state = pL6470_StatusRegister->SCK_MOD;
 8000de6:	4b03      	ldr	r3, [pc, #12]	; (8000df4 <L6470_CheckStatusRegisterFlag+0xdc>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	7858      	ldrb	r0, [r3, #1]
 8000dec:	09c0      	lsrs	r0, r0, #7
    break;
 8000dee:	e7ac      	b.n	8000d4a <L6470_CheckStatusRegisterFlag+0x32>
  switch(L6470_StatusRegisterFlagId)
 8000df0:	2000      	movs	r0, #0
 8000df2:	e7aa      	b.n	8000d4a <L6470_CheckStatusRegisterFlag+0x32>
 8000df4:	20000000 	.word	0x20000000

08000df8 <L6470_GetStatus>:
{
 8000df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	4605      	mov	r5, r0
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 8000dfe:	4c0e      	ldr	r4, [pc, #56]	; (8000e38 <L6470_GetStatus+0x40>)
 8000e00:	1d27      	adds	r7, r4, #4
 8000e02:	2300      	movs	r3, #0
 8000e04:	9301      	str	r3, [sp, #4]
 8000e06:	9300      	str	r3, [sp, #0]
 8000e08:	2212      	movs	r2, #18
 8000e0a:	4639      	mov	r1, r7
 8000e0c:	f7ff f9ec 	bl	80001e8 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000e10:	f104 0628 	add.w	r6, r4, #40	; 0x28
 8000e14:	4631      	mov	r1, r6
 8000e16:	4638      	mov	r0, r7
 8000e18:	f7ff fb0e 	bl	8000438 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000e1c:	3430      	adds	r4, #48	; 0x30
 8000e1e:	4621      	mov	r1, r4
 8000e20:	4630      	mov	r0, r6
 8000e22:	f7ff fd3b 	bl	800089c <L6470_DaisyChainCommand>
  ReceivedValue = (uint16_t)L6470_ExtractReturnedData(L6470_Id, (uint8_t*)L6470_DaisyChainSpiRxStruct, 2);
 8000e26:	2202      	movs	r2, #2
 8000e28:	4621      	mov	r1, r4
 8000e2a:	4628      	mov	r0, r5
 8000e2c:	f7ff ff34 	bl	8000c98 <L6470_ExtractReturnedData>
}
 8000e30:	b280      	uxth	r0, r0
 8000e32:	b003      	add	sp, #12
 8000e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20000384 	.word	0x20000384

08000e3c <L6470_Config>:
  * @brief  Configures the L6470 registers.
  * @param  StepperMotorDriverHandle_t* The pointer to the stepper motor driver handle structure.
  * @param  MotorParameterData_t* The pointer to the related parameter data structure.
  */
void L6470_Config(StepperMotorDriverHandle_t *StepperMotorDriverHandle, MotorParameterData_t *MotorParameterData)
{
 8000e3c:	b570      	push	{r4, r5, r6, lr}
 8000e3e:	4604      	mov	r4, r0
 8000e40:	460d      	mov	r5, r1
  /* Prepare the 'Register' field of StepperMotorDriverHandle */
  StepperMotorDriverHandle->Register.ACC = Step_s2_2_Acc(MotorParameterData->acc);
 8000e42:	ed91 0a05 	vldr	s0, [r1, #20]
 8000e46:	f7ff fbef 	bl	8000628 <Step_s2_2_Acc>
 8000e4a:	4606      	mov	r6, r0
 8000e4c:	83a0      	strh	r0, [r4, #28]
  StepperMotorDriverHandle->Register.DEC = Step_s2_2_Dec(MotorParameterData->dec);
 8000e4e:	ed95 0a06 	vldr	s0, [r5, #24]
 8000e52:	f7ff fc01 	bl	8000658 <Step_s2_2_Dec>
 8000e56:	83e0      	strh	r0, [r4, #30]
  StepperMotorDriverHandle->Register.MAX_SPEED = Step_s_2_MaxSpeed(MotorParameterData->maxspeed);
 8000e58:	ed95 0a07 	vldr	s0, [r5, #28]
 8000e5c:	f7ff fc14 	bl	8000688 <Step_s_2_MaxSpeed>
 8000e60:	8420      	strh	r0, [r4, #32]
  StepperMotorDriverHandle->Register.MIN_SPEED = Step_s_2_MinSpeed(MotorParameterData->minspeed);
 8000e62:	ed95 0a08 	vldr	s0, [r5, #32]
 8000e66:	f7ff fc27 	bl	80006b8 <Step_s_2_MinSpeed>
 8000e6a:	8460      	strh	r0, [r4, #34]	; 0x22
  StepperMotorDriverHandle->Register.FS_SPD = Step_s_2_FsSpd(MotorParameterData->fsspd);
 8000e6c:	ed95 0a09 	vldr	s0, [r5, #36]	; 0x24
 8000e70:	f7ff fc3a 	bl	80006e8 <Step_s_2_FsSpd>
 8000e74:	84a0      	strh	r0, [r4, #36]	; 0x24
  StepperMotorDriverHandle->Register.KVAL_HOLD = (uint8_t)((float)((float)(MotorParameterData->kvalhold * 256) / (MotorParameterData->motorvoltage)));
 8000e76:	edd5 6a0a 	vldr	s13, [r5, #40]	; 0x28
 8000e7a:	eddf 7a74 	vldr	s15, [pc, #464]	; 800104c <L6470_Config+0x210>
 8000e7e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000e82:	ed95 6a00 	vldr	s12, [r5]
 8000e86:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8000e8a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8000e8e:	ee17 3a10 	vmov	r3, s14
 8000e92:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
  StepperMotorDriverHandle->Register.KVAL_RUN = (uint8_t)((float)((float)(MotorParameterData->kvalrun * 256) / (MotorParameterData->motorvoltage)));
 8000e96:	edd5 6a0b 	vldr	s13, [r5, #44]	; 0x2c
 8000e9a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000e9e:	ed95 6a00 	vldr	s12, [r5]
 8000ea2:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8000ea6:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8000eaa:	ee17 3a10 	vmov	r3, s14
 8000eae:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
  StepperMotorDriverHandle->Register.KVAL_ACC = (uint8_t)((float)((float)(MotorParameterData->kvalacc * 256) / (MotorParameterData->motorvoltage)));
 8000eb2:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8000eb6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000eba:	ed95 6a00 	vldr	s12, [r5]
 8000ebe:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8000ec2:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8000ec6:	ee17 3a10 	vmov	r3, s14
 8000eca:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  StepperMotorDriverHandle->Register.KVAL_DEC = (uint8_t)((float)((float)(MotorParameterData->kvaldec * 256) / (MotorParameterData->motorvoltage)));
 8000ece:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
 8000ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ed6:	edd5 6a00 	vldr	s13, [r5]
 8000eda:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000ede:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8000ee2:	ee17 3a90 	vmov	r3, s15
 8000ee6:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
  StepperMotorDriverHandle->Register.INT_SPEED = Step_s_2_IntSpeed(MotorParameterData->intspeed);
 8000eea:	ed95 0a0e 	vldr	s0, [r5, #56]	; 0x38
 8000eee:	f7ff fc17 	bl	8000720 <Step_s_2_IntSpeed>
 8000ef2:	8560      	strh	r0, [r4, #42]	; 0x2a
  StepperMotorDriverHandle->Register.ST_SLP = s_Step_2_StSlp(MotorParameterData->stslp);
 8000ef4:	ed95 0a0f 	vldr	s0, [r5, #60]	; 0x3c
 8000ef8:	f7ff fc2a 	bl	8000750 <s_Step_2_StSlp>
 8000efc:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
  StepperMotorDriverHandle->Register.FN_SLP_ACC = s_Step_2_FnSlpAcc(MotorParameterData->fnslpacc);
 8000f00:	ed95 0a10 	vldr	s0, [r5, #64]	; 0x40
 8000f04:	f7ff fc3e 	bl	8000784 <s_Step_2_FnSlpAcc>
 8000f08:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
  StepperMotorDriverHandle->Register.FN_SLP_DEC = s_Step_2_FnSlpDec(MotorParameterData->fnslpdec);
 8000f0c:	ed95 0a11 	vldr	s0, [r5, #68]	; 0x44
 8000f10:	f7ff fc52 	bl	80007b8 <s_Step_2_FnSlpDec>
 8000f14:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
  StepperMotorDriverHandle->Register.K_THERM = MotorParameterData->kterm;
 8000f18:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
 8000f1c:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
  StepperMotorDriverHandle->Register.OCD_TH = mA_2_OcdTh(MotorParameterData->ocdth);
 8000f20:	ed95 0a13 	vldr	s0, [r5, #76]	; 0x4c
 8000f24:	f7ff fc62 	bl	80007ec <mA_2_OcdTh>
 8000f28:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
  StepperMotorDriverHandle->Register.STALL_TH = mA_2_StallTh(MotorParameterData->stallth);
 8000f2c:	ed95 0a14 	vldr	s0, [r5, #80]	; 0x50
 8000f30:	f7ff fc86 	bl	8000840 <mA_2_StallTh>
 8000f34:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
  StepperMotorDriverHandle->Register.STEP_MODE = MotorParameterData->step_sel;
 8000f38:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
 8000f3c:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  StepperMotorDriverHandle->Register.ALARM_EN = MotorParameterData->alarmen;
 8000f40:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 8000f44:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  StepperMotorDriverHandle->Register.CONFIG = MotorParameterData->config;
 8000f48:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
 8000f4c:	86e3      	strh	r3, [r4, #54]	; 0x36
  
  /* Write the L6470 registers with the prepared data */
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_ACC_ID, StepperMotorDriverHandle->Register.ACC);
 8000f4e:	68a3      	ldr	r3, [r4, #8]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4632      	mov	r2, r6
 8000f54:	2104      	movs	r1, #4
 8000f56:	7820      	ldrb	r0, [r4, #0]
 8000f58:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_DEC_ID, StepperMotorDriverHandle->Register.DEC);
 8000f5a:	68a3      	ldr	r3, [r4, #8]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	8be2      	ldrh	r2, [r4, #30]
 8000f60:	2105      	movs	r1, #5
 8000f62:	7820      	ldrb	r0, [r4, #0]
 8000f64:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_MAX_SPEED_ID, StepperMotorDriverHandle->Register.MAX_SPEED);
 8000f66:	68a3      	ldr	r3, [r4, #8]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	8c22      	ldrh	r2, [r4, #32]
 8000f6c:	2106      	movs	r1, #6
 8000f6e:	7820      	ldrb	r0, [r4, #0]
 8000f70:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_MIN_SPEED_ID, StepperMotorDriverHandle->Register.MIN_SPEED);
 8000f72:	68a3      	ldr	r3, [r4, #8]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 8000f78:	2107      	movs	r1, #7
 8000f7a:	7820      	ldrb	r0, [r4, #0]
 8000f7c:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_FS_SPD_ID, StepperMotorDriverHandle->Register.FS_SPD);
 8000f7e:	68a3      	ldr	r3, [r4, #8]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
 8000f84:	2108      	movs	r1, #8
 8000f86:	7820      	ldrb	r0, [r4, #0]
 8000f88:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_KVAL_HOLD_ID, StepperMotorDriverHandle->Register.KVAL_HOLD);
 8000f8a:	68a3      	ldr	r3, [r4, #8]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 8000f92:	2109      	movs	r1, #9
 8000f94:	7820      	ldrb	r0, [r4, #0]
 8000f96:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_KVAL_RUN_ID, StepperMotorDriverHandle->Register.KVAL_RUN);
 8000f98:	68a3      	ldr	r3, [r4, #8]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
 8000fa0:	210a      	movs	r1, #10
 8000fa2:	7820      	ldrb	r0, [r4, #0]
 8000fa4:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_KVAL_ACC_ID, StepperMotorDriverHandle->Register.KVAL_ACC);
 8000fa6:	68a3      	ldr	r3, [r4, #8]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8000fae:	210b      	movs	r1, #11
 8000fb0:	7820      	ldrb	r0, [r4, #0]
 8000fb2:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_KVAL_DEC_ID, StepperMotorDriverHandle->Register.KVAL_DEC);
 8000fb4:	68a3      	ldr	r3, [r4, #8]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 8000fbc:	210c      	movs	r1, #12
 8000fbe:	7820      	ldrb	r0, [r4, #0]
 8000fc0:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_INT_SPEED_ID, StepperMotorDriverHandle->Register.INT_SPEED);
 8000fc2:	68a3      	ldr	r3, [r4, #8]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8000fc8:	210d      	movs	r1, #13
 8000fca:	7820      	ldrb	r0, [r4, #0]
 8000fcc:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_ST_SLP_ID, StepperMotorDriverHandle->Register.ST_SLP);
 8000fce:	68a3      	ldr	r3, [r4, #8]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8000fd6:	210e      	movs	r1, #14
 8000fd8:	7820      	ldrb	r0, [r4, #0]
 8000fda:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_FN_SLP_ACC_ID, StepperMotorDriverHandle->Register.FN_SLP_ACC);
 8000fdc:	68a3      	ldr	r3, [r4, #8]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8000fe4:	210f      	movs	r1, #15
 8000fe6:	7820      	ldrb	r0, [r4, #0]
 8000fe8:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_FN_SLP_DEC_ID, StepperMotorDriverHandle->Register.FN_SLP_DEC);
 8000fea:	68a3      	ldr	r3, [r4, #8]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
 8000ff2:	2110      	movs	r1, #16
 8000ff4:	7820      	ldrb	r0, [r4, #0]
 8000ff6:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_K_THERM_ID, StepperMotorDriverHandle->Register.K_THERM);
 8000ff8:	68a3      	ldr	r3, [r4, #8]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
 8001000:	2111      	movs	r1, #17
 8001002:	7820      	ldrb	r0, [r4, #0]
 8001004:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_OCD_TH_ID, StepperMotorDriverHandle->Register.OCD_TH);
 8001006:	68a3      	ldr	r3, [r4, #8]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 800100e:	2113      	movs	r1, #19
 8001010:	7820      	ldrb	r0, [r4, #0]
 8001012:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_STALL_TH_ID, StepperMotorDriverHandle->Register.STALL_TH);
 8001014:	68a3      	ldr	r3, [r4, #8]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
 800101c:	2114      	movs	r1, #20
 800101e:	7820      	ldrb	r0, [r4, #0]
 8001020:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_STEP_MODE_ID, StepperMotorDriverHandle->Register.STEP_MODE);
 8001022:	68a3      	ldr	r3, [r4, #8]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
 800102a:	2115      	movs	r1, #21
 800102c:	7820      	ldrb	r0, [r4, #0]
 800102e:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_ALARM_EN_ID, StepperMotorDriverHandle->Register.ALARM_EN);
 8001030:	68a3      	ldr	r3, [r4, #8]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8001038:	2116      	movs	r1, #22
 800103a:	7820      	ldrb	r0, [r4, #0]
 800103c:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_CONFIG_ID, StepperMotorDriverHandle->Register.CONFIG);
 800103e:	68a3      	ldr	r3, [r4, #8]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001044:	2117      	movs	r1, #23
 8001046:	7820      	ldrb	r0, [r4, #0]
 8001048:	4798      	blx	r3
}
 800104a:	bd70      	pop	{r4, r5, r6, pc}
 800104c:	43800000 	.word	0x43800000

08001050 <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8001050:	b530      	push	{r4, r5, lr}
 8001052:	b087      	sub	sp, #28
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8001054:	4602      	mov	r2, r0
 8001056:	b948      	cbnz	r0, 800106c <BSP_LED_Init+0x1c>
 8001058:	4b0f      	ldr	r3, [pc, #60]	; (8001098 <BSP_LED_Init+0x48>)
 800105a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800105c:	f041 0101 	orr.w	r1, r1, #1
 8001060:	6319      	str	r1, [r3, #48]	; 0x30
 8001062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001064:	f003 0301 	and.w	r3, r3, #1
 8001068:	9300      	str	r3, [sp, #0]
 800106a:	9b00      	ldr	r3, [sp, #0]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 800106c:	2520      	movs	r5, #32
 800106e:	9501      	str	r5, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001070:	2301      	movs	r3, #1
 8001072:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001074:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001076:	2302      	movs	r3, #2
 8001078:	9304      	str	r3, [sp, #16]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 800107a:	4c08      	ldr	r4, [pc, #32]	; (800109c <BSP_LED_Init+0x4c>)
 800107c:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8001080:	a901      	add	r1, sp, #4
 8001082:	6860      	ldr	r0, [r4, #4]
 8001084:	f000 ff6e 	bl	8001f64 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8001088:	2200      	movs	r2, #0
 800108a:	4629      	mov	r1, r5
 800108c:	6860      	ldr	r0, [r4, #4]
 800108e:	f001 f897 	bl	80021c0 <HAL_GPIO_WritePin>
}
 8001092:	b007      	add	sp, #28
 8001094:	bd30      	pop	{r4, r5, pc}
 8001096:	bf00      	nop
 8001098:	40023800 	.word	0x40023800
 800109c:	20000098 	.word	0x20000098

080010a0 <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80010a0:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 80010a2:	4b04      	ldr	r3, [pc, #16]	; (80010b4 <BSP_LED_On+0x14>)
 80010a4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80010a8:	2201      	movs	r2, #1
 80010aa:	2120      	movs	r1, #32
 80010ac:	6840      	ldr	r0, [r0, #4]
 80010ae:	f001 f887 	bl	80021c0 <HAL_GPIO_WritePin>
}
 80010b2:	bd08      	pop	{r3, pc}
 80010b4:	20000098 	.word	0x20000098

080010b8 <BSP_LED_Off>:
  *   This parameter can be one of following parameters:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 80010b8:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80010ba:	4b04      	ldr	r3, [pc, #16]	; (80010cc <BSP_LED_Off+0x14>)
 80010bc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80010c0:	2200      	movs	r2, #0
 80010c2:	2120      	movs	r1, #32
 80010c4:	6840      	ldr	r0, [r0, #4]
 80010c6:	f001 f87b 	bl	80021c0 <HAL_GPIO_WritePin>
}
 80010ca:	bd08      	pop	{r3, pc}
 80010cc:	20000098 	.word	0x20000098

080010d0 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80010d0:	b510      	push	{r4, lr}
 80010d2:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80010d4:	4684      	mov	ip, r0
 80010d6:	b948      	cbnz	r0, 80010ec <BSP_PB_Init+0x1c>
 80010d8:	4b1b      	ldr	r3, [pc, #108]	; (8001148 <BSP_PB_Init+0x78>)
 80010da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010dc:	f042 0204 	orr.w	r2, r2, #4
 80010e0:	631a      	str	r2, [r3, #48]	; 0x30
 80010e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e4:	f003 0304 	and.w	r3, r3, #4
 80010e8:	9300      	str	r3, [sp, #0]
 80010ea:	9b00      	ldr	r3, [sp, #0]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 80010ec:	b119      	cbz	r1, 80010f6 <BSP_PB_Init+0x26>
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 80010ee:	2901      	cmp	r1, #1
 80010f0:	d012      	beq.n	8001118 <BSP_PB_Init+0x48>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
  }
}
 80010f2:	b006      	add	sp, #24
 80010f4:	bd10      	pop	{r4, pc}
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 80010f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010fa:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010fc:	2300      	movs	r3, #0
 80010fe:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001100:	2302      	movs	r3, #2
 8001102:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001104:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8001106:	4b11      	ldr	r3, [pc, #68]	; (800114c <BSP_PB_Init+0x7c>)
 8001108:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800110c:	a901      	add	r1, sp, #4
 800110e:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8001112:	f000 ff27 	bl	8001f64 <HAL_GPIO_Init>
  if(ButtonMode == BUTTON_MODE_EXTI)
 8001116:	e7ec      	b.n	80010f2 <BSP_PB_Init+0x22>
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8001118:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800111c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2400      	movs	r4, #0
 8001120:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; 
 8001122:	4b0b      	ldr	r3, [pc, #44]	; (8001150 <BSP_PB_Init+0x80>)
 8001124:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8001126:	4b09      	ldr	r3, [pc, #36]	; (800114c <BSP_PB_Init+0x7c>)
 8001128:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800112c:	a901      	add	r1, sp, #4
 800112e:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8001132:	f000 ff17 	bl	8001f64 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8001136:	4622      	mov	r2, r4
 8001138:	210f      	movs	r1, #15
 800113a:	2028      	movs	r0, #40	; 0x28
 800113c:	f000 fe86 	bl	8001e4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8001140:	2028      	movs	r0, #40	; 0x28
 8001142:	f000 fec7 	bl	8001ed4 <HAL_NVIC_EnableIRQ>
}
 8001146:	e7d4      	b.n	80010f2 <BSP_PB_Init+0x22>
 8001148:	40023800 	.word	0x40023800
 800114c:	20000098 	.word	0x20000098
 8001150:	10210000 	.word	0x10210000

08001154 <BSP_Select>:
  * @param  ExpBrd_Id   The identifier of the Expansion Board to be addressed.
  * @retval FlagStatus  SET or RESET related to the result.
  */
uint8_t BSP_Select(uint8_t ExpBrd_Id)
{
  if (ExpBrd_Id < EXPBRD_MOUNTED_NR)
 8001154:	b948      	cbnz	r0, 800116a <BSP_Select+0x16>
  {
    L6470_nCS_GPIO.gpio_clk_enable = L6470_nCS_GPIO_Array[ExpBrd_Id].gpio_clk_enable;
 8001156:	4b06      	ldr	r3, [pc, #24]	; (8001170 <BSP_Select+0x1c>)
 8001158:	4a06      	ldr	r2, [pc, #24]	; (8001174 <BSP_Select+0x20>)
 800115a:	6811      	ldr	r1, [r2, #0]
 800115c:	6019      	str	r1, [r3, #0]
    L6470_nCS_GPIO.port = L6470_nCS_GPIO_Array[ExpBrd_Id].port;
 800115e:	6851      	ldr	r1, [r2, #4]
 8001160:	6059      	str	r1, [r3, #4]
    L6470_nCS_GPIO.pin = L6470_nCS_GPIO_Array[ExpBrd_Id].pin;
 8001162:	8912      	ldrh	r2, [r2, #8]
 8001164:	811a      	strh	r2, [r3, #8]
    return SET;
 8001166:	2001      	movs	r0, #1
 8001168:	4770      	bx	lr
  }
  else
    return RESET;
 800116a:	2000      	movs	r0, #0
}
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	200003c0 	.word	0x200003c0
 8001174:	200000a4 	.word	0x200000a4

08001178 <BSP_L6470_ResetDevice>:
{
 8001178:	b510      	push	{r4, lr}
 800117a:	460c      	mov	r4, r1
  if (BSP_Select(ExpBrd_Id))
 800117c:	f7ff ffea 	bl	8001154 <BSP_Select>
 8001180:	b900      	cbnz	r0, 8001184 <BSP_L6470_ResetDevice+0xc>
}
 8001182:	bd10      	pop	{r4, pc}
    L6470_ResetDevice(L6470_Id);
 8001184:	4620      	mov	r0, r4
 8001186:	f7ff fcf3 	bl	8000b70 <L6470_ResetDevice>
}
 800118a:	e7fa      	b.n	8001182 <BSP_L6470_ResetDevice+0xa>

0800118c <BSP_L6470_GetStatus>:
{
 800118c:	b510      	push	{r4, lr}
 800118e:	460c      	mov	r4, r1
  if (BSP_Select(ExpBrd_Id))
 8001190:	f7ff ffe0 	bl	8001154 <BSP_Select>
 8001194:	b908      	cbnz	r0, 800119a <BSP_L6470_GetStatus+0xe>
    return 0;
 8001196:	2000      	movs	r0, #0
}
 8001198:	bd10      	pop	{r4, pc}
    return L6470_GetStatus(L6470_Id);
 800119a:	4620      	mov	r0, r4
 800119c:	f7ff fe2c 	bl	8000df8 <L6470_GetStatus>
 80011a0:	e7fa      	b.n	8001198 <BSP_L6470_GetStatus+0xc>

080011a2 <BSP_L6470_SetParam>:
{
 80011a2:	b570      	push	{r4, r5, r6, lr}
 80011a4:	460c      	mov	r4, r1
 80011a6:	4615      	mov	r5, r2
 80011a8:	461e      	mov	r6, r3
  if (BSP_Select(ExpBrd_Id))
 80011aa:	f7ff ffd3 	bl	8001154 <BSP_Select>
 80011ae:	b900      	cbnz	r0, 80011b2 <BSP_L6470_SetParam+0x10>
}
 80011b0:	bd70      	pop	{r4, r5, r6, pc}
    L6470_SetParam(L6470_Id, L6470_RegId, Value);
 80011b2:	4632      	mov	r2, r6
 80011b4:	4629      	mov	r1, r5
 80011b6:	4620      	mov	r0, r4
 80011b8:	f7ff fba6 	bl	8000908 <L6470_SetParam>
}
 80011bc:	e7f8      	b.n	80011b0 <BSP_L6470_SetParam+0xe>

080011be <BSP_L6470_GetParam>:
{
 80011be:	b538      	push	{r3, r4, r5, lr}
 80011c0:	460c      	mov	r4, r1
 80011c2:	4615      	mov	r5, r2
  if (BSP_Select(ExpBrd_Id))
 80011c4:	f7ff ffc6 	bl	8001154 <BSP_Select>
 80011c8:	b908      	cbnz	r0, 80011ce <BSP_L6470_GetParam+0x10>
    return 0xFF;
 80011ca:	20ff      	movs	r0, #255	; 0xff
}
 80011cc:	bd38      	pop	{r3, r4, r5, pc}
    return L6470_GetParam(L6470_Id, L6470_RegId);
 80011ce:	4629      	mov	r1, r5
 80011d0:	4620      	mov	r0, r4
 80011d2:	f7ff fd73 	bl	8000cbc <L6470_GetParam>
 80011d6:	e7f9      	b.n	80011cc <BSP_L6470_GetParam+0xe>

080011d8 <BSP_L6470_Run>:
{
 80011d8:	b570      	push	{r4, r5, r6, lr}
 80011da:	460c      	mov	r4, r1
 80011dc:	4615      	mov	r5, r2
 80011de:	461e      	mov	r6, r3
  if (BSP_Select(ExpBrd_Id))
 80011e0:	f7ff ffb8 	bl	8001154 <BSP_Select>
 80011e4:	b900      	cbnz	r0, 80011e8 <BSP_L6470_Run+0x10>
}
 80011e6:	bd70      	pop	{r4, r5, r6, pc}
    L6470_Run(L6470_Id, L6470_DirId, Speed);
 80011e8:	4632      	mov	r2, r6
 80011ea:	4629      	mov	r1, r5
 80011ec:	4620      	mov	r0, r4
 80011ee:	f7ff fba7 	bl	8000940 <L6470_Run>
}
 80011f2:	e7f8      	b.n	80011e6 <BSP_L6470_Run+0xe>

080011f4 <BSP_L6470_StepClock>:
{
 80011f4:	b538      	push	{r3, r4, r5, lr}
 80011f6:	460c      	mov	r4, r1
 80011f8:	4615      	mov	r5, r2
  if (BSP_Select(ExpBrd_Id))
 80011fa:	f7ff ffab 	bl	8001154 <BSP_Select>
 80011fe:	b900      	cbnz	r0, 8001202 <BSP_L6470_StepClock+0xe>
}
 8001200:	bd38      	pop	{r3, r4, r5, pc}
    L6470_StepClock(L6470_Id, L6470_DirId);
 8001202:	4629      	mov	r1, r5
 8001204:	4620      	mov	r0, r4
 8001206:	f7ff fbb7 	bl	8000978 <L6470_StepClock>
}
 800120a:	e7f9      	b.n	8001200 <BSP_L6470_StepClock+0xc>

0800120c <BSP_L6470_Move>:
{
 800120c:	b570      	push	{r4, r5, r6, lr}
 800120e:	460c      	mov	r4, r1
 8001210:	4615      	mov	r5, r2
 8001212:	461e      	mov	r6, r3
  if (BSP_Select(ExpBrd_Id))
 8001214:	f7ff ff9e 	bl	8001154 <BSP_Select>
 8001218:	b900      	cbnz	r0, 800121c <BSP_L6470_Move+0x10>
}
 800121a:	bd70      	pop	{r4, r5, r6, pc}
    L6470_Move(L6470_Id, L6470_DirId, N_Step);
 800121c:	4632      	mov	r2, r6
 800121e:	4629      	mov	r1, r5
 8001220:	4620      	mov	r0, r4
 8001222:	f7ff fbc5 	bl	80009b0 <L6470_Move>
}
 8001226:	e7f8      	b.n	800121a <BSP_L6470_Move+0xe>

08001228 <BSP_L6470_GoTo>:
{
 8001228:	b538      	push	{r3, r4, r5, lr}
 800122a:	460c      	mov	r4, r1
 800122c:	4615      	mov	r5, r2
  if (BSP_Select(ExpBrd_Id))
 800122e:	f7ff ff91 	bl	8001154 <BSP_Select>
 8001232:	b900      	cbnz	r0, 8001236 <BSP_L6470_GoTo+0xe>
}
 8001234:	bd38      	pop	{r3, r4, r5, pc}
    L6470_GoTo(L6470_Id, AbsPos);
 8001236:	4629      	mov	r1, r5
 8001238:	4620      	mov	r0, r4
 800123a:	f7ff fbd5 	bl	80009e8 <L6470_GoTo>
}
 800123e:	e7f9      	b.n	8001234 <BSP_L6470_GoTo+0xc>

08001240 <BSP_L6470_GoToDir>:
{
 8001240:	b570      	push	{r4, r5, r6, lr}
 8001242:	460c      	mov	r4, r1
 8001244:	4615      	mov	r5, r2
 8001246:	461e      	mov	r6, r3
  if (BSP_Select(ExpBrd_Id))
 8001248:	f7ff ff84 	bl	8001154 <BSP_Select>
 800124c:	b900      	cbnz	r0, 8001250 <BSP_L6470_GoToDir+0x10>
}
 800124e:	bd70      	pop	{r4, r5, r6, pc}
    L6470_GoToDir(L6470_Id, L6470_DirId, AbsPos);
 8001250:	4632      	mov	r2, r6
 8001252:	4629      	mov	r1, r5
 8001254:	4620      	mov	r0, r4
 8001256:	f7ff fbe7 	bl	8000a28 <L6470_GoToDir>
}
 800125a:	e7f8      	b.n	800124e <BSP_L6470_GoToDir+0xe>

0800125c <BSP_L6470_GoUntil>:
{
 800125c:	b570      	push	{r4, r5, r6, lr}
 800125e:	460c      	mov	r4, r1
 8001260:	4615      	mov	r5, r2
 8001262:	461e      	mov	r6, r3
  if (BSP_Select(ExpBrd_Id))
 8001264:	f7ff ff76 	bl	8001154 <BSP_Select>
 8001268:	b900      	cbnz	r0, 800126c <BSP_L6470_GoUntil+0x10>
}
 800126a:	bd70      	pop	{r4, r5, r6, pc}
    L6470_GoUntil(L6470_Id, L6470_ActId, L6470_DirId, Speed);
 800126c:	9b04      	ldr	r3, [sp, #16]
 800126e:	4632      	mov	r2, r6
 8001270:	4629      	mov	r1, r5
 8001272:	4620      	mov	r0, r4
 8001274:	f7ff fbf8 	bl	8000a68 <L6470_GoUntil>
}
 8001278:	e7f7      	b.n	800126a <BSP_L6470_GoUntil+0xe>

0800127a <BSP_L6470_ReleaseSW>:
{
 800127a:	b570      	push	{r4, r5, r6, lr}
 800127c:	460c      	mov	r4, r1
 800127e:	4615      	mov	r5, r2
 8001280:	461e      	mov	r6, r3
  if (BSP_Select(ExpBrd_Id))
 8001282:	f7ff ff67 	bl	8001154 <BSP_Select>
 8001286:	b900      	cbnz	r0, 800128a <BSP_L6470_ReleaseSW+0x10>
}
 8001288:	bd70      	pop	{r4, r5, r6, pc}
    L6470_ReleaseSW(L6470_Id, L6470_ActId, L6470_DirId);
 800128a:	4632      	mov	r2, r6
 800128c:	4629      	mov	r1, r5
 800128e:	4620      	mov	r0, r4
 8001290:	f7ff fc04 	bl	8000a9c <L6470_ReleaseSW>
}
 8001294:	e7f8      	b.n	8001288 <BSP_L6470_ReleaseSW+0xe>

08001296 <BSP_L6470_GoHome>:
{
 8001296:	b510      	push	{r4, lr}
 8001298:	460c      	mov	r4, r1
  if (BSP_Select(ExpBrd_Id))
 800129a:	f7ff ff5b 	bl	8001154 <BSP_Select>
 800129e:	b900      	cbnz	r0, 80012a2 <BSP_L6470_GoHome+0xc>
}
 80012a0:	bd10      	pop	{r4, pc}
    L6470_GoHome(L6470_Id);
 80012a2:	4620      	mov	r0, r4
 80012a4:	f7ff fc16 	bl	8000ad4 <L6470_GoHome>
}
 80012a8:	e7fa      	b.n	80012a0 <BSP_L6470_GoHome+0xa>

080012aa <BSP_L6470_GoMark>:
{
 80012aa:	b510      	push	{r4, lr}
 80012ac:	460c      	mov	r4, r1
  if (BSP_Select(ExpBrd_Id))
 80012ae:	f7ff ff51 	bl	8001154 <BSP_Select>
 80012b2:	b900      	cbnz	r0, 80012b6 <BSP_L6470_GoMark+0xc>
}
 80012b4:	bd10      	pop	{r4, pc}
    L6470_GoMark(L6470_Id);
 80012b6:	4620      	mov	r0, r4
 80012b8:	f7ff fc26 	bl	8000b08 <L6470_GoMark>
}
 80012bc:	e7fa      	b.n	80012b4 <BSP_L6470_GoMark+0xa>

080012be <BSP_L6470_ResetPos>:
{
 80012be:	b510      	push	{r4, lr}
 80012c0:	460c      	mov	r4, r1
  if (BSP_Select(ExpBrd_Id))
 80012c2:	f7ff ff47 	bl	8001154 <BSP_Select>
 80012c6:	b900      	cbnz	r0, 80012ca <BSP_L6470_ResetPos+0xc>
}
 80012c8:	bd10      	pop	{r4, pc}
    L6470_ResetPos(L6470_Id);
 80012ca:	4620      	mov	r0, r4
 80012cc:	f7ff fc36 	bl	8000b3c <L6470_ResetPos>
}
 80012d0:	e7fa      	b.n	80012c8 <BSP_L6470_ResetPos+0xa>

080012d2 <BSP_L6470_SoftStop>:
{
 80012d2:	b510      	push	{r4, lr}
 80012d4:	460c      	mov	r4, r1
  if (BSP_Select(ExpBrd_Id))
 80012d6:	f7ff ff3d 	bl	8001154 <BSP_Select>
 80012da:	b900      	cbnz	r0, 80012de <BSP_L6470_SoftStop+0xc>
}
 80012dc:	bd10      	pop	{r4, pc}
    L6470_SoftStop(L6470_Id);
 80012de:	4620      	mov	r0, r4
 80012e0:	f7ff fc60 	bl	8000ba4 <L6470_SoftStop>
}
 80012e4:	e7fa      	b.n	80012dc <BSP_L6470_SoftStop+0xa>

080012e6 <BSP_L6470_HardStop>:
{
 80012e6:	b510      	push	{r4, lr}
 80012e8:	460c      	mov	r4, r1
  if (BSP_Select(ExpBrd_Id))
 80012ea:	f7ff ff33 	bl	8001154 <BSP_Select>
 80012ee:	b900      	cbnz	r0, 80012f2 <BSP_L6470_HardStop+0xc>
}
 80012f0:	bd10      	pop	{r4, pc}
    L6470_HardStop(L6470_Id);
 80012f2:	4620      	mov	r0, r4
 80012f4:	f7ff fc70 	bl	8000bd8 <L6470_HardStop>
}
 80012f8:	e7fa      	b.n	80012f0 <BSP_L6470_HardStop+0xa>

080012fa <BSP_L6470_SoftHiZ>:
{
 80012fa:	b510      	push	{r4, lr}
 80012fc:	460c      	mov	r4, r1
  if (BSP_Select(ExpBrd_Id))
 80012fe:	f7ff ff29 	bl	8001154 <BSP_Select>
 8001302:	b900      	cbnz	r0, 8001306 <BSP_L6470_SoftHiZ+0xc>
}
 8001304:	bd10      	pop	{r4, pc}
    L6470_SoftHiZ(L6470_Id);
 8001306:	4620      	mov	r0, r4
 8001308:	f7ff fc80 	bl	8000c0c <L6470_SoftHiZ>
}
 800130c:	e7fa      	b.n	8001304 <BSP_L6470_SoftHiZ+0xa>

0800130e <BSP_L6470_HardHiZ>:
{
 800130e:	b510      	push	{r4, lr}
 8001310:	460c      	mov	r4, r1
  if (BSP_Select(ExpBrd_Id))
 8001312:	f7ff ff1f 	bl	8001154 <BSP_Select>
 8001316:	b900      	cbnz	r0, 800131a <BSP_L6470_HardHiZ+0xc>
}
 8001318:	bd10      	pop	{r4, pc}
    L6470_HardHiZ(L6470_Id);
 800131a:	4620      	mov	r0, r4
 800131c:	f7ff fc90 	bl	8000c40 <L6470_HardHiZ>
}
 8001320:	e7fa      	b.n	8001318 <BSP_L6470_HardHiZ+0xa>

08001322 <BSP_L6470_CheckStatusRegisterFlag>:
{
 8001322:	b538      	push	{r3, r4, r5, lr}
 8001324:	460c      	mov	r4, r1
 8001326:	4615      	mov	r5, r2
  if (BSP_Select(ExpBrd_Id))
 8001328:	f7ff ff14 	bl	8001154 <BSP_Select>
 800132c:	b908      	cbnz	r0, 8001332 <BSP_L6470_CheckStatusRegisterFlag+0x10>
    return 0xFF;
 800132e:	20ff      	movs	r0, #255	; 0xff
}
 8001330:	bd38      	pop	{r3, r4, r5, pc}
    return L6470_CheckStatusRegisterFlag(L6470_Id, L6470_StatusRegisterFlagId);
 8001332:	4629      	mov	r1, r5
 8001334:	4620      	mov	r0, r4
 8001336:	f7ff fcef 	bl	8000d18 <L6470_CheckStatusRegisterFlag>
 800133a:	e7f9      	b.n	8001330 <BSP_L6470_CheckStatusRegisterFlag+0xe>

0800133c <BSP_L6470_0_0_Config>:
 * @brief   Initialize the data structure related to the stepper motor driver #0
 *          of the expansion board #0.
 * @param   MotorParameterData_t* The pointer to the related parameter data structure.
*/
void BSP_L6470_0_0_Config(MotorParameterData_t *MotorParameterData)
{
 800133c:	b508      	push	{r3, lr}
 800133e:	4601      	mov	r1, r0
  StepperMotorDriverHandle_t *StepperMotorDriverHandle;
  
  StepperMotorDriverHandle = &L6470DrvMtx[0][0];
  L6470_Config(StepperMotorDriverHandle, MotorParameterData);
 8001340:	4801      	ldr	r0, [pc, #4]	; (8001348 <BSP_L6470_0_0_Config+0xc>)
 8001342:	f7ff fd7b 	bl	8000e3c <L6470_Config>
}
 8001346:	bd08      	pop	{r3, pc}
 8001348:	200000b0 	.word	0x200000b0

0800134c <BSP_L6470_0_1_Config>:
 * @brief   Initialize the data structure related to the stepper motor driver #1
 *          of the expansion board #0.
 * @param   MotorParameterData_t* The pointer to the related parameter data structure.
 */
void BSP_L6470_0_1_Config(MotorParameterData_t *MotorParameterData)
{
 800134c:	b508      	push	{r3, lr}
 800134e:	4601      	mov	r1, r0
  StepperMotorDriverHandle_t *StepperMotorDriverHandle;
  
  StepperMotorDriverHandle = &L6470DrvMtx[0][1];
  L6470_Config(StepperMotorDriverHandle, MotorParameterData);
 8001350:	4801      	ldr	r0, [pc, #4]	; (8001358 <BSP_L6470_0_1_Config+0xc>)
 8001352:	f7ff fd73 	bl	8000e3c <L6470_Config>
}
 8001356:	bd08      	pop	{r3, pc}
 8001358:	200000ec 	.word	0x200000ec

0800135c <BSP_L6470_1_0_Config>:
 * @brief   Initialize the data structure related to the stepper motor driver #0
 *          of the expansion board #1.
 * @param   MotorParameterData_t* The pointer to the related parameter data structure.
 */
void BSP_L6470_1_0_Config(MotorParameterData_t *MotorParameterData)
{
 800135c:	b508      	push	{r3, lr}
 800135e:	4601      	mov	r1, r0
  StepperMotorDriverHandle_t *StepperMotorDriverHandle;
  
  StepperMotorDriverHandle = &L6470DrvMtx[1][0];
  L6470_Config(StepperMotorDriverHandle, MotorParameterData);
 8001360:	4801      	ldr	r0, [pc, #4]	; (8001368 <BSP_L6470_1_0_Config+0xc>)
 8001362:	f7ff fd6b 	bl	8000e3c <L6470_Config>
}
 8001366:	bd08      	pop	{r3, pc}
 8001368:	20000128 	.word	0x20000128

0800136c <BSP_L6470_1_1_Config>:
 * @brief   Initialize the data structure related to the stepper motor driver #1
 *          of the expansion board #1.
 * @param   MotorParameterData_t* The pointer to the related parameter data structure.
 */
void BSP_L6470_1_1_Config(MotorParameterData_t *MotorParameterData)
{
 800136c:	b508      	push	{r3, lr}
 800136e:	4601      	mov	r1, r0
  StepperMotorDriverHandle_t *StepperMotorDriverHandle;
  
  StepperMotorDriverHandle = &L6470DrvMtx[1][1];
  L6470_Config(StepperMotorDriverHandle, MotorParameterData);
 8001370:	4801      	ldr	r0, [pc, #4]	; (8001378 <BSP_L6470_1_1_Config+0xc>)
 8001372:	f7ff fd63 	bl	8000e3c <L6470_Config>
}
 8001376:	bd08      	pop	{r3, pc}
 8001378:	20000164 	.word	0x20000164

0800137c <BSP_L6470_2_0_Config>:
 * @brief   Initialize the data structure related to the stepper motor driver #0
 *          of the expansion board #2.
 * @param   MotorParameterData_t* The pointer to the related parameter data structure.
 */
void BSP_L6470_2_0_Config(MotorParameterData_t *MotorParameterData)
{
 800137c:	b508      	push	{r3, lr}
 800137e:	4601      	mov	r1, r0
  StepperMotorDriverHandle_t *StepperMotorDriverHandle;
  
  StepperMotorDriverHandle = &L6470DrvMtx[2][0];
  L6470_Config(StepperMotorDriverHandle, MotorParameterData);
 8001380:	4801      	ldr	r0, [pc, #4]	; (8001388 <BSP_L6470_2_0_Config+0xc>)
 8001382:	f7ff fd5b 	bl	8000e3c <L6470_Config>
}
 8001386:	bd08      	pop	{r3, pc}
 8001388:	200001a0 	.word	0x200001a0

0800138c <BSP_L6470_2_1_Config>:
 * @brief   Initialize the data structure related to the stepper motor driver #1
 *          of the expansion board #2.
 * @param   MotorParameterData_t* The pointer to the related parameter data structure.
 */
void BSP_L6470_2_1_Config(MotorParameterData_t *MotorParameterData)
{
 800138c:	b508      	push	{r3, lr}
 800138e:	4601      	mov	r1, r0
  StepperMotorDriverHandle_t *StepperMotorDriverHandle;
  
  StepperMotorDriverHandle = &L6470DrvMtx[2][1];
  L6470_Config(StepperMotorDriverHandle, MotorParameterData);
 8001390:	4801      	ldr	r0, [pc, #4]	; (8001398 <BSP_L6470_2_1_Config+0xc>)
 8001392:	f7ff fd53 	bl	8000e3c <L6470_Config>
}
 8001396:	bd08      	pop	{r3, pc}
 8001398:	200001dc 	.word	0x200001dc

0800139c <BSP_L6470_3_0_Config>:
 * @brief   Initialize the data structure related to the stepper motor driver #0
 *          of the expansion board #3.
 * @param   MotorParameterData_t* The pointer to the related parameter data structure.
 */
void BSP_L6470_3_0_Config(MotorParameterData_t *MotorParameterData)
{
 800139c:	b508      	push	{r3, lr}
 800139e:	4601      	mov	r1, r0
  StepperMotorDriverHandle_t *StepperMotorDriverHandle;
  
  StepperMotorDriverHandle = &L6470DrvMtx[3][0];
  L6470_Config(StepperMotorDriverHandle, MotorParameterData);
 80013a0:	4801      	ldr	r0, [pc, #4]	; (80013a8 <BSP_L6470_3_0_Config+0xc>)
 80013a2:	f7ff fd4b 	bl	8000e3c <L6470_Config>
}
 80013a6:	bd08      	pop	{r3, pc}
 80013a8:	20000218 	.word	0x20000218

080013ac <BSP_L6470_3_1_Config>:
 * @brief   Initialize the data structure related to the stepper motor driver #1
 *          of the expansion board #3.
 * @param   MotorParameterData_t* The pointer to the related parameter data structure.
 */
void BSP_L6470_3_1_Config(MotorParameterData_t *MotorParameterData)
{
 80013ac:	b508      	push	{r3, lr}
 80013ae:	4601      	mov	r1, r0
  StepperMotorDriverHandle_t *StepperMotorDriverHandle;
  
  StepperMotorDriverHandle = &L6470DrvMtx[3][1];
  L6470_Config(StepperMotorDriverHandle, MotorParameterData);
 80013b0:	4801      	ldr	r0, [pc, #4]	; (80013b8 <BSP_L6470_3_1_Config+0xc>)
 80013b2:	f7ff fd43 	bl	8000e3c <L6470_Config>
}
 80013b6:	bd08      	pop	{r3, pc}
 80013b8:	20000254 	.word	0x20000254

080013bc <BSP_NUCLEO_GPIO_Init>:
{
 80013bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013c0:	b086      	sub	sp, #24
  GPIO_CLK_ENABLE(L6470_nSTBY_nRST_GPIO.gpio_clk_enable);
 80013c2:	4e29      	ldr	r6, [pc, #164]	; (8001468 <BSP_NUCLEO_GPIO_Init+0xac>)
 80013c4:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80013c6:	4c29      	ldr	r4, [pc, #164]	; (800146c <BSP_NUCLEO_GPIO_Init+0xb0>)
 80013c8:	f8d4 21ec 	ldr.w	r2, [r4, #492]	; 0x1ec
 80013cc:	4313      	orrs	r3, r2
 80013ce:	6333      	str	r3, [r6, #48]	; 0x30
  GPIO_InitStruct.Pin = L6470_nSTBY_nRST_GPIO.pin;
 80013d0:	f8b4 31f4 	ldrh.w	r3, [r4, #500]	; 0x1f4
 80013d4:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80013d6:	2311      	movs	r3, #17
 80013d8:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013da:	2500      	movs	r5, #0
 80013dc:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80013de:	2703      	movs	r7, #3
 80013e0:	9704      	str	r7, [sp, #16]
  HAL_GPIO_Init(L6470_nSTBY_nRST_GPIO.port, &GPIO_InitStruct);
 80013e2:	a901      	add	r1, sp, #4
 80013e4:	f8d4 01f0 	ldr.w	r0, [r4, #496]	; 0x1f0
 80013e8:	f000 fdbc 	bl	8001f64 <HAL_GPIO_Init>
  GPIO_CLK_ENABLE(L6470_nBUSY_SYNC_GPIO.gpio_clk_enable);
 80013ec:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80013ee:	f8d4 21f8 	ldr.w	r2, [r4, #504]	; 0x1f8
 80013f2:	4313      	orrs	r3, r2
 80013f4:	6333      	str	r3, [r6, #48]	; 0x30
  GPIO_InitStruct.Pin = L6470_nBUSY_SYNC_GPIO.pin;
 80013f6:	f8b4 3200 	ldrh.w	r3, [r4, #512]	; 0x200
 80013fa:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013fc:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8001470 <BSP_NUCLEO_GPIO_Init+0xb4>
 8001400:	f8cd 8008 	str.w	r8, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	9503      	str	r5, [sp, #12]
  HAL_GPIO_Init(L6470_nBUSY_SYNC_GPIO.port, &GPIO_InitStruct);
 8001406:	a901      	add	r1, sp, #4
 8001408:	f8d4 01fc 	ldr.w	r0, [r4, #508]	; 0x1fc
 800140c:	f000 fdaa 	bl	8001f64 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(L6470_nBUSY_SYNC_IRQn, 0, 0);
 8001410:	462a      	mov	r2, r5
 8001412:	4629      	mov	r1, r5
 8001414:	2006      	movs	r0, #6
 8001416:	f000 fd19 	bl	8001e4c <HAL_NVIC_SetPriority>
  GPIO_CLK_ENABLE(L6470_nFLAG_GPIO.gpio_clk_enable);
 800141a:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800141c:	f8d4 2204 	ldr.w	r2, [r4, #516]	; 0x204
 8001420:	4313      	orrs	r3, r2
 8001422:	6333      	str	r3, [r6, #48]	; 0x30
  GPIO_InitStruct.Pin = L6470_nFLAG_GPIO.pin;
 8001424:	f8b4 320c 	ldrh.w	r3, [r4, #524]	; 0x20c
 8001428:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800142a:	f8cd 8008 	str.w	r8, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	9503      	str	r5, [sp, #12]
  HAL_GPIO_Init(L6470_nFLAG_GPIO.port, &GPIO_InitStruct);
 8001430:	a901      	add	r1, sp, #4
 8001432:	f8d4 0208 	ldr.w	r0, [r4, #520]	; 0x208
 8001436:	f000 fd95 	bl	8001f64 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(L6470_nFLAG_IRQn, 0, 0);
 800143a:	462a      	mov	r2, r5
 800143c:	4629      	mov	r1, r5
 800143e:	2007      	movs	r0, #7
 8001440:	f000 fd04 	bl	8001e4c <HAL_NVIC_SetPriority>
    GPIO_CLK_ENABLE(L6470_nCS_GPIO_Array[ExpBrd].gpio_clk_enable);
 8001444:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8001446:	6822      	ldr	r2, [r4, #0]
 8001448:	4313      	orrs	r3, r2
 800144a:	6333      	str	r3, [r6, #48]	; 0x30
    GPIO_InitStruct.Pin = L6470_nCS_GPIO_Array[ExpBrd].pin;
 800144c:	8923      	ldrh	r3, [r4, #8]
 800144e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001450:	2301      	movs	r3, #1
 8001452:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8001456:	9704      	str	r7, [sp, #16]
    HAL_GPIO_Init(L6470_nCS_GPIO_Array[ExpBrd].port, &GPIO_InitStruct);
 8001458:	a901      	add	r1, sp, #4
 800145a:	6860      	ldr	r0, [r4, #4]
 800145c:	f000 fd82 	bl	8001f64 <HAL_GPIO_Init>
}
 8001460:	b006      	add	sp, #24
 8001462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001466:	bf00      	nop
 8001468:	40023800 	.word	0x40023800
 800146c:	200000a4 	.word	0x200000a4
 8001470:	10210000 	.word	0x10210000

08001474 <BSP_L6470_Init>:
{
 8001474:	b538      	push	{r3, r4, r5, lr}
  L6470_DISABLE();
 8001476:	4c17      	ldr	r4, [pc, #92]	; (80014d4 <BSP_L6470_Init+0x60>)
 8001478:	2200      	movs	r2, #0
 800147a:	f8b4 11f4 	ldrh.w	r1, [r4, #500]	; 0x1f4
 800147e:	f8d4 01f0 	ldr.w	r0, [r4, #496]	; 0x1f0
 8001482:	f000 fe9d 	bl	80021c0 <HAL_GPIO_WritePin>
  L6470_ENABLE();
 8001486:	2201      	movs	r2, #1
 8001488:	f8b4 11f4 	ldrh.w	r1, [r4, #500]	; 0x1f4
 800148c:	f8d4 01f0 	ldr.w	r0, [r4, #496]	; 0x1f0
 8001490:	f000 fe96 	bl	80021c0 <HAL_GPIO_WritePin>
    BSP_Select(ExpBrd);
 8001494:	2000      	movs	r0, #0
 8001496:	f7ff fe5d 	bl	8001154 <BSP_Select>
    L6470_nCS_HIGH();
 800149a:	4b0f      	ldr	r3, [pc, #60]	; (80014d8 <BSP_L6470_Init+0x64>)
 800149c:	2201      	movs	r2, #1
 800149e:	8919      	ldrh	r1, [r3, #8]
 80014a0:	6858      	ldr	r0, [r3, #4]
 80014a2:	f000 fe8d 	bl	80021c0 <HAL_GPIO_WritePin>
    for (L6470_Id = L6470_ID(0); L6470_Id<=L6470_ID(L6470DAISYCHAINSIZE-1); L6470_Id++)
 80014a6:	2000      	movs	r0, #0
 80014a8:	f7ff f9f4 	bl	8000894 <L6470_ID>
 80014ac:	4604      	mov	r4, r0
 80014ae:	2501      	movs	r5, #1
 80014b0:	e007      	b.n	80014c2 <BSP_L6470_Init+0x4e>
      L6470_ResetDevice(L6470_Id);
 80014b2:	4620      	mov	r0, r4
 80014b4:	f7ff fb5c 	bl	8000b70 <L6470_ResetDevice>
      L6470_GetStatus(L6470_Id);
 80014b8:	4620      	mov	r0, r4
 80014ba:	f7ff fc9d 	bl	8000df8 <L6470_GetStatus>
    for (L6470_Id = L6470_ID(0); L6470_Id<=L6470_ID(L6470DAISYCHAINSIZE-1); L6470_Id++)
 80014be:	3401      	adds	r4, #1
 80014c0:	b2e4      	uxtb	r4, r4
 80014c2:	4628      	mov	r0, r5
 80014c4:	f7ff f9e6 	bl	8000894 <L6470_ID>
 80014c8:	42a0      	cmp	r0, r4
 80014ca:	d2f2      	bcs.n	80014b2 <BSP_L6470_Init+0x3e>
  BSP_Select(EXPBRD_ID(0));
 80014cc:	2000      	movs	r0, #0
 80014ce:	f7ff fe41 	bl	8001154 <BSP_Select>
}
 80014d2:	bd38      	pop	{r3, r4, r5, pc}
 80014d4:	200000a4 	.word	0x200000a4
 80014d8:	200003c0 	.word	0x200003c0

080014dc <BSP_IRQ>:
{
 80014dc:	b508      	push	{r3, lr}
  if(fs == ENABLE)
 80014de:	2801      	cmp	r0, #1
 80014e0:	d006      	beq.n	80014f0 <BSP_IRQ+0x14>
    HAL_NVIC_DisableIRQ(L6470_nBUSY_SYNC_IRQn);
 80014e2:	2006      	movs	r0, #6
 80014e4:	f000 fd0c 	bl	8001f00 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(L6470_nFLAG_IRQn);
 80014e8:	2007      	movs	r0, #7
 80014ea:	f000 fd09 	bl	8001f00 <HAL_NVIC_DisableIRQ>
}
 80014ee:	bd08      	pop	{r3, pc}
    HAL_NVIC_EnableIRQ(L6470_nBUSY_SYNC_IRQn);
 80014f0:	2006      	movs	r0, #6
 80014f2:	f000 fcef 	bl	8001ed4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(L6470_nFLAG_IRQn);
 80014f6:	2007      	movs	r0, #7
 80014f8:	f000 fcec 	bl	8001ed4 <HAL_NVIC_EnableIRQ>
 80014fc:	e7f7      	b.n	80014ee <BSP_IRQ+0x12>

080014fe <BSP_Init>:
{
 80014fe:	b508      	push	{r3, lr}
  BSP_Select(EXPBRD_ID(0));
 8001500:	2000      	movs	r0, #0
 8001502:	f7ff fe27 	bl	8001154 <BSP_Select>
  BSP_NUCLEO_GPIO_Init();
 8001506:	f7ff ff59 	bl	80013bc <BSP_NUCLEO_GPIO_Init>
  BSP_L6470_Init();
 800150a:	f7ff ffb3 	bl	8001474 <BSP_L6470_Init>
  BSP_IRQ(ENABLE);
 800150e:	2001      	movs	r0, #1
 8001510:	f7ff ffe4 	bl	80014dc <BSP_IRQ>
}
 8001514:	bd08      	pop	{r3, pc}

08001516 <BSP_L6470_BusySynchEventManager>:
 8001516:	bf00      	nop
}
 8001518:	4770      	bx	lr

0800151a <BSP_L6470_FlagEventManager>:
 800151a:	bf00      	nop
}
 800151c:	4770      	bx	lr
	...

08001520 <BSP_EmergencyStop>:
{
 8001520:	b508      	push	{r3, lr}
  L6470_DISABLE();
 8001522:	4b04      	ldr	r3, [pc, #16]	; (8001534 <BSP_EmergencyStop+0x14>)
 8001524:	2200      	movs	r2, #0
 8001526:	f8b3 11f4 	ldrh.w	r1, [r3, #500]	; 0x1f4
 800152a:	f8d3 01f0 	ldr.w	r0, [r3, #496]	; 0x1f0
 800152e:	f000 fe47 	bl	80021c0 <HAL_GPIO_WritePin>
  while(1);
 8001532:	e7fe      	b.n	8001532 <BSP_EmergencyStop+0x12>
 8001534:	200000a4 	.word	0x200000a4

08001538 <BSP_Config>:
  * @brief  Configures each L6470 mounted on the X-NUCLEO-IHM02A1.
  * @param  StepperMotorBoardHandle_t* The pointer to the stepper motor board handle structure.
  * @param  MotorParameterData_t* The pointer to the parameter data structure.
  */
void BSP_Config(StepperMotorBoardHandle_t *StepperMotorBoardHandle, MotorParameterData_t *MotorParameterData)
{
 8001538:	b538      	push	{r3, r4, r5, lr}
 800153a:	4604      	mov	r4, r0
 800153c:	460d      	mov	r5, r1
  StepperMotorBoardHandle->Select(StepperMotorBoardHandle->StackedPosition);
 800153e:	6943      	ldr	r3, [r0, #20]
 8001540:	7800      	ldrb	r0, [r0, #0]
 8001542:	4798      	blx	r3
  
  StepperMotorBoardHandle->StepperMotorDriverHandle[0]->Config(MotorParameterData+0);
 8001544:	68e3      	ldr	r3, [r4, #12]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	4628      	mov	r0, r5
 800154a:	4798      	blx	r3
  StepperMotorBoardHandle->StepperMotorDriverHandle[1]->Config(MotorParameterData+1);
 800154c:	6923      	ldr	r3, [r4, #16]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f105 0058 	add.w	r0, r5, #88	; 0x58
 8001554:	4798      	blx	r3
}
 8001556:	bd38      	pop	{r3, r4, r5, pc}

08001558 <BSP_0_Config>:
{
 8001558:	b508      	push	{r3, lr}
 800155a:	4601      	mov	r1, r0
  BSP_Config(StepperMotorBoardHandle, MotorParameterData);
 800155c:	4801      	ldr	r0, [pc, #4]	; (8001564 <BSP_0_Config+0xc>)
 800155e:	f7ff ffeb 	bl	8001538 <BSP_Config>
}
 8001562:	bd08      	pop	{r3, pc}
 8001564:	200002b4 	.word	0x200002b4

08001568 <BSP_1_Config>:
{
 8001568:	b508      	push	{r3, lr}
 800156a:	4601      	mov	r1, r0
  BSP_Config(StepperMotorBoardHandle, MotorParameterData);
 800156c:	4801      	ldr	r0, [pc, #4]	; (8001574 <BSP_1_Config+0xc>)
 800156e:	f7ff ffe3 	bl	8001538 <BSP_Config>
}
 8001572:	bd08      	pop	{r3, pc}
 8001574:	200002cc 	.word	0x200002cc

08001578 <BSP_2_Config>:
{
 8001578:	b508      	push	{r3, lr}
 800157a:	4601      	mov	r1, r0
  BSP_Config(StepperMotorBoardHandle, MotorParameterData);
 800157c:	4801      	ldr	r0, [pc, #4]	; (8001584 <BSP_2_Config+0xc>)
 800157e:	f7ff ffdb 	bl	8001538 <BSP_Config>
}
 8001582:	bd08      	pop	{r3, pc}
 8001584:	200002e4 	.word	0x200002e4

08001588 <BSP_3_Config>:
{
 8001588:	b508      	push	{r3, lr}
 800158a:	4601      	mov	r1, r0
  BSP_Config(StepperMotorBoardHandle, MotorParameterData);
 800158c:	4801      	ldr	r0, [pc, #4]	; (8001594 <BSP_3_Config+0xc>)
 800158e:	f7ff ffd3 	bl	8001538 <BSP_Config>
}
 8001592:	bd08      	pop	{r3, pc}
 8001594:	200002fc 	.word	0x200002fc

08001598 <SystemClock_Config>:
  *         - APB1 Timer Clocks: 84 MHz
  *         - APB2 Peripheral Clocks: 84 MHz
  *         - APB2 Timer Clocks: 84 MHz
  */
void SystemClock_Config(void)
{
 8001598:	b530      	push	{r4, r5, lr}
 800159a:	b095      	sub	sp, #84	; 0x54

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __PWR_CLK_ENABLE();
 800159c:	4b1b      	ldr	r3, [pc, #108]	; (800160c <SystemClock_Config+0x74>)
 800159e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015a0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80015a4:	641a      	str	r2, [r3, #64]	; 0x40
 80015a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ac:	9301      	str	r3, [sp, #4]
 80015ae:	9b01      	ldr	r3, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80015b0:	4a17      	ldr	r2, [pc, #92]	; (8001610 <SystemClock_Config+0x78>)
 80015b2:	6813      	ldr	r3, [r2, #0]
 80015b4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80015b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015bc:	6013      	str	r3, [r2, #0]
 80015be:	6813      	ldr	r3, [r2, #0]
 80015c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015c4:	9302      	str	r3, [sp, #8]
 80015c6:	9b02      	ldr	r3, [sp, #8]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015c8:	2402      	movs	r4, #2
 80015ca:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015cc:	2301      	movs	r3, #1
 80015ce:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80015d0:	2310      	movs	r3, #16
 80015d2:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015d4:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015d6:	2500      	movs	r5, #0
 80015d8:	950f      	str	r5, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80015da:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80015dc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80015e0:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80015e2:	2304      	movs	r3, #4
 80015e4:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80015e6:	2307      	movs	r3, #7
 80015e8:	9313      	str	r3, [sp, #76]	; 0x4c
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80015ea:	a808      	add	r0, sp, #32
 80015ec:	f000 fe10 	bl	8002210 <HAL_RCC_OscConfig>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1;
 80015f0:	2305      	movs	r3, #5
 80015f2:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015f4:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015f6:	9505      	str	r5, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015fc:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015fe:	9507      	str	r5, [sp, #28]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 8001600:	4621      	mov	r1, r4
 8001602:	a803      	add	r0, sp, #12
 8001604:	f001 f84a 	bl	800269c <HAL_RCC_ClockConfig>

}
 8001608:	b015      	add	sp, #84	; 0x54
 800160a:	bd30      	pop	{r4, r5, pc}
 800160c:	40023800 	.word	0x40023800
 8001610:	40007000 	.word	0x40007000

08001614 <MX_GPIO_Init>:

/**
  * @brief  This function initializes the GPIO MX.
  */
void MX_GPIO_Init(void)
{
 8001614:	b508      	push	{r3, lr}
#ifdef NUCLEO_USE_USER_BUTTON
  /* Configures Button GPIO and EXTI Line */
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8001616:	2101      	movs	r1, #1
 8001618:	2000      	movs	r0, #0
 800161a:	f7ff fd59 	bl	80010d0 <BSP_PB_Init>
#endif

#ifdef NUCLEO_USE_USER_LED
  /* Configures LED GPIO */
  BSP_LED_Init(LED2);
 800161e:	2000      	movs	r0, #0
 8001620:	f7ff fd16 	bl	8001050 <BSP_LED_Init>
#endif
}
 8001624:	bd08      	pop	{r3, pc}
	...

08001628 <MX_SPI1_Init>:
  *         - CPOL High
  *         - CPHA 2nd Edge
  *         - Baud Rate lower than 5 MBits/s
  */
void MX_SPI1_Init(void)
{
 8001628:	b508      	push	{r3, lr}
  #define MAX_BAUDRATE  5000000
  uint32_t freq;
  uint16_t freq_div;
  uint32_t spi_baudrateprescaler;
  
  hspi1.Instance = SPI1;
 800162a:	4b1f      	ldr	r3, [pc, #124]	; (80016a8 <MX_SPI1_Init+0x80>)
 800162c:	4a1f      	ldr	r2, [pc, #124]	; (80016ac <MX_SPI1_Init+0x84>)
 800162e:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001630:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001634:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001636:	2200      	movs	r2, #0
 8001638:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800163a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800163c:	2102      	movs	r1, #2
 800163e:	6119      	str	r1, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001640:	2101      	movs	r1, #1
 8001642:	6159      	str	r1, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001644:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001648:	6199      	str	r1, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800164a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLED;
 800164c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800164e:	629a      	str	r2, [r3, #40]	; 0x28
  
  freq = HAL_RCC_GetPCLK2Freq();
 8001650:	f001 fa38 	bl	8002ac4 <HAL_RCC_GetPCLK2Freq>
  freq_div = (freq / MAX_BAUDRATE);
 8001654:	4b16      	ldr	r3, [pc, #88]	; (80016b0 <MX_SPI1_Init+0x88>)
 8001656:	fba3 3000 	umull	r3, r0, r3, r0
  
  if (freq_div < 2)
 800165a:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
 800165e:	d30f      	bcc.n	8001680 <MX_SPI1_Init+0x58>
 8001660:	0d43      	lsrs	r3, r0, #21
  {
    spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_2;
  }
  else
  {
    if (freq_div < 4)
 8001662:	2b03      	cmp	r3, #3
 8001664:	d90e      	bls.n	8001684 <MX_SPI1_Init+0x5c>
    {
      spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_4;
    }
    else
    {
      if (freq_div < 8)
 8001666:	2b07      	cmp	r3, #7
 8001668:	d912      	bls.n	8001690 <MX_SPI1_Init+0x68>
      {
        spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_8;
      }
      else
      {
        if (freq_div < 16)
 800166a:	2b0f      	cmp	r3, #15
 800166c:	d912      	bls.n	8001694 <MX_SPI1_Init+0x6c>
        {
          spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_16;
        }
        else
        {
          if (freq_div < 32)
 800166e:	2b1f      	cmp	r3, #31
 8001670:	d912      	bls.n	8001698 <MX_SPI1_Init+0x70>
          {
            spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_32;
          }
          else
          {
            if (freq_div < 64)
 8001672:	2b3f      	cmp	r3, #63	; 0x3f
 8001674:	d912      	bls.n	800169c <MX_SPI1_Init+0x74>
            {
              spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_64;
            }
            else
            {
              if (freq_div < 128)
 8001676:	2b7f      	cmp	r3, #127	; 0x7f
 8001678:	d912      	bls.n	80016a0 <MX_SPI1_Init+0x78>
              {
                spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_128;
              }
              else
              {
                if (freq_div < 256)
 800167a:	2bff      	cmp	r3, #255	; 0xff
 800167c:	d912      	bls.n	80016a4 <MX_SPI1_Init+0x7c>
                  spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_256;
                }
                else
                {
                  /* the condition is not possible, you should reduce the CPU frequency */
                  while(1);
 800167e:	e7fe      	b.n	800167e <MX_SPI1_Init+0x56>
    spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_2;
 8001680:	2300      	movs	r3, #0
 8001682:	e000      	b.n	8001686 <MX_SPI1_Init+0x5e>
      spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_4;
 8001684:	2308      	movs	r3, #8
        }
      }
    }
  }
  
  hspi1.Init.BaudRatePrescaler = spi_baudrateprescaler;  // the baudrate will be lower than MAX_BAUDRATE (5 MBits/s)
 8001686:	4808      	ldr	r0, [pc, #32]	; (80016a8 <MX_SPI1_Init+0x80>)
 8001688:	61c3      	str	r3, [r0, #28]
  HAL_SPI_Init(&hspi1);
 800168a:	f001 faa1 	bl	8002bd0 <HAL_SPI_Init>
}
 800168e:	bd08      	pop	{r3, pc}
        spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_8;
 8001690:	2310      	movs	r3, #16
 8001692:	e7f8      	b.n	8001686 <MX_SPI1_Init+0x5e>
          spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_16;
 8001694:	2318      	movs	r3, #24
 8001696:	e7f6      	b.n	8001686 <MX_SPI1_Init+0x5e>
            spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_32;
 8001698:	2320      	movs	r3, #32
 800169a:	e7f4      	b.n	8001686 <MX_SPI1_Init+0x5e>
              spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_64;
 800169c:	2328      	movs	r3, #40	; 0x28
 800169e:	e7f2      	b.n	8001686 <MX_SPI1_Init+0x5e>
                spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_128;
 80016a0:	2330      	movs	r3, #48	; 0x30
 80016a2:	e7f0      	b.n	8001686 <MX_SPI1_Init+0x5e>
                  spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_256;
 80016a4:	2338      	movs	r3, #56	; 0x38
 80016a6:	e7ee      	b.n	8001686 <MX_SPI1_Init+0x5e>
 80016a8:	200003d0 	.word	0x200003d0
 80016ac:	40013000 	.word	0x40013000
 80016b0:	6b5fca6b 	.word	0x6b5fca6b

080016b4 <MX_USART2_Init>:
  *         - Stop Bit:   1
  *         - Parity:     None
  *         - Mode:       TX/RX
  */
void MX_USART2_Init(void)
{
 80016b4:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 80016b6:	4808      	ldr	r0, [pc, #32]	; (80016d8 <MX_USART2_Init+0x24>)
 80016b8:	4b08      	ldr	r3, [pc, #32]	; (80016dc <MX_USART2_Init+0x28>)
 80016ba:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 80016bc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80016c0:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016c2:	2300      	movs	r3, #0
 80016c4:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016c6:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016c8:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016ca:	220c      	movs	r2, #12
 80016cc:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ce:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016d0:	61c3      	str	r3, [r0, #28]
  HAL_UART_Init(&huart2);
 80016d2:	f001 fe87 	bl	80033e4 <HAL_UART_Init>
}
 80016d6:	bd08      	pop	{r3, pc}
 80016d8:	20000484 	.word	0x20000484
 80016dc:	40004400 	.word	0x40004400

080016e0 <User_LED_Blinking>:
  uint8_t r;
  uint16_t half_period_ms;
  
  half_period_ms = period_ms >> 1;
  
  for (r=0; r<repetitions; r++)
 80016e0:	b1a8      	cbz	r0, 800170e <User_LED_Blinking+0x2e>
{
 80016e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016e4:	084d      	lsrs	r5, r1, #1
 80016e6:	4607      	mov	r7, r0
  for (r=0; r<repetitions; r++)
 80016e8:	2400      	movs	r4, #0
  {
    /* Switch on the user LED */
    BSP_LED_On(LED2);
 80016ea:	4626      	mov	r6, r4
 80016ec:	4630      	mov	r0, r6
 80016ee:	f7ff fcd7 	bl	80010a0 <BSP_LED_On>
    /* ms delay */
    HAL_Delay(half_period_ms);
 80016f2:	4628      	mov	r0, r5
 80016f4:	f000 f880 	bl	80017f8 <HAL_Delay>
    /* Switch off the user LED */
    BSP_LED_Off(LED2);
 80016f8:	4630      	mov	r0, r6
 80016fa:	f7ff fcdd 	bl	80010b8 <BSP_LED_Off>
    /* ms delay */
    HAL_Delay(half_period_ms);
 80016fe:	4628      	mov	r0, r5
 8001700:	f000 f87a 	bl	80017f8 <HAL_Delay>
  for (r=0; r<repetitions; r++)
 8001704:	3401      	adds	r4, #1
 8001706:	b2e4      	uxtb	r4, r4
 8001708:	42a7      	cmp	r7, r4
 800170a:	d1ef      	bne.n	80016ec <User_LED_Blinking+0xc>
  }
}
 800170c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800170e:	4770      	bx	lr

08001710 <NUCLEO_Board_Init>:
{
 8001710:	b508      	push	{r3, lr}
  HAL_Init();
 8001712:	f000 f849 	bl	80017a8 <HAL_Init>
  SystemClock_Config();
 8001716:	f7ff ff3f 	bl	8001598 <SystemClock_Config>
  MX_GPIO_Init();
 800171a:	f7ff ff7b 	bl	8001614 <MX_GPIO_Init>
  MX_SPI1_Init();
 800171e:	f7ff ff83 	bl	8001628 <MX_SPI1_Init>
  MX_USART2_Init();
 8001722:	f7ff ffc7 	bl	80016b4 <MX_USART2_Init>
  User_LED_Blinking(3, 750);
 8001726:	f240 21ee 	movw	r1, #750	; 0x2ee
 800172a:	2003      	movs	r0, #3
 800172c:	f7ff ffd8 	bl	80016e0 <User_LED_Blinking>
}
 8001730:	bd08      	pop	{r3, pc}
	...

08001734 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001734:	490f      	ldr	r1, [pc, #60]	; (8001774 <SystemInit+0x40>)
 8001736:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800173a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800173e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001742:	4b0d      	ldr	r3, [pc, #52]	; (8001778 <SystemInit+0x44>)
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	f042 0201 	orr.w	r2, r2, #1
 800174a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800174c:	2000      	movs	r0, #0
 800174e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001756:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800175a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800175c:	4a07      	ldr	r2, [pc, #28]	; (800177c <SystemInit+0x48>)
 800175e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001766:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001768:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800176a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800176e:	608b      	str	r3, [r1, #8]
#endif
}
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	e000ed00 	.word	0xe000ed00
 8001778:	40023800 	.word	0x40023800
 800177c:	24003010 	.word	0x24003010

08001780 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001780:	b510      	push	{r4, lr}
 8001782:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001784:	f001 f96e 	bl	8002a64 <HAL_RCC_GetHCLKFreq>
 8001788:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <HAL_InitTick+0x24>)
 800178a:	fba3 3000 	umull	r3, r0, r3, r0
 800178e:	0980      	lsrs	r0, r0, #6
 8001790:	f000 fbce 	bl	8001f30 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8001794:	2200      	movs	r2, #0
 8001796:	4621      	mov	r1, r4
 8001798:	f04f 30ff 	mov.w	r0, #4294967295
 800179c:	f000 fb56 	bl	8001e4c <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 80017a0:	2000      	movs	r0, #0
 80017a2:	bd10      	pop	{r4, pc}
 80017a4:	10624dd3 	.word	0x10624dd3

080017a8 <HAL_Init>:
{
 80017a8:	b508      	push	{r3, lr}
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017aa:	4b0b      	ldr	r3, [pc, #44]	; (80017d8 <HAL_Init+0x30>)
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017b2:	601a      	str	r2, [r3, #0]
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80017ba:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017c2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017c4:	2003      	movs	r0, #3
 80017c6:	f000 fb23 	bl	8001e10 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80017ca:	2000      	movs	r0, #0
 80017cc:	f7ff ffd8 	bl	8001780 <HAL_InitTick>
  HAL_MspInit();
 80017d0:	f002 f993 	bl	8003afa <HAL_MspInit>
}
 80017d4:	2000      	movs	r0, #0
 80017d6:	bd08      	pop	{r3, pc}
 80017d8:	40023c00 	.word	0x40023c00

080017dc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80017dc:	4a02      	ldr	r2, [pc, #8]	; (80017e8 <HAL_IncTick+0xc>)
 80017de:	6813      	ldr	r3, [r2, #0]
 80017e0:	3301      	adds	r3, #1
 80017e2:	6013      	str	r3, [r2, #0]
}
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	20000480 	.word	0x20000480

080017ec <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80017ec:	4b01      	ldr	r3, [pc, #4]	; (80017f4 <HAL_GetTick+0x8>)
 80017ee:	6818      	ldr	r0, [r3, #0]
}
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	20000480 	.word	0x20000480

080017f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80017f8:	b510      	push	{r4, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 80017fe:	f7ff fff5 	bl	80017ec <HAL_GetTick>
 8001802:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8001804:	f7ff fff2 	bl	80017ec <HAL_GetTick>
 8001808:	9b01      	ldr	r3, [sp, #4]
 800180a:	1b00      	subs	r0, r0, r4
 800180c:	4298      	cmp	r0, r3
 800180e:	d3f9      	bcc.n	8001804 <HAL_Delay+0xc>
  {
  }
}
 8001810:	b002      	add	sp, #8
 8001812:	bd10      	pop	{r4, pc}

08001814 <HAL_ADC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Check ADC handle */
  if(hadc == NULL)
 8001814:	2800      	cmp	r0, #0
 8001816:	f000 815d 	beq.w	8001ad4 <HAL_ADC_Init+0x2c0>
{
 800181a:	b510      	push	{r4, lr}
 800181c:	4604      	mov	r4, r0
  {
     return HAL_ERROR;
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800181e:	6802      	ldr	r2, [r0, #0]
 8001820:	4ba5      	ldr	r3, [pc, #660]	; (8001ab8 <HAL_ADC_Init+0x2a4>)
 8001822:	429a      	cmp	r2, r3
 8001824:	d004      	beq.n	8001830 <HAL_ADC_Init+0x1c>
 8001826:	f240 110b 	movw	r1, #267	; 0x10b
 800182a:	48a4      	ldr	r0, [pc, #656]	; (8001abc <HAL_ADC_Init+0x2a8>)
 800182c:	f002 f964 	bl	8003af8 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8001830:	6863      	ldr	r3, [r4, #4]
 8001832:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 8001836:	d007      	beq.n	8001848 <HAL_ADC_Init+0x34>
 8001838:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800183c:	d004      	beq.n	8001848 <HAL_ADC_Init+0x34>
 800183e:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8001842:	489e      	ldr	r0, [pc, #632]	; (8001abc <HAL_ADC_Init+0x2a8>)
 8001844:	f002 f958 	bl	8003af8 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8001848:	68a3      	ldr	r3, [r4, #8]
 800184a:	f033 7380 	bics.w	r3, r3, #16777216	; 0x1000000
 800184e:	d007      	beq.n	8001860 <HAL_ADC_Init+0x4c>
 8001850:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001854:	d004      	beq.n	8001860 <HAL_ADC_Init+0x4c>
 8001856:	f240 110d 	movw	r1, #269	; 0x10d
 800185a:	4898      	ldr	r0, [pc, #608]	; (8001abc <HAL_ADC_Init+0x2a8>)
 800185c:	f002 f94c 	bl	8003af8 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 8001860:	6923      	ldr	r3, [r4, #16]
 8001862:	2b01      	cmp	r3, #1
 8001864:	f200 80ed 	bhi.w	8001a42 <HAL_ADC_Init+0x22e>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8001868:	69a3      	ldr	r3, [r4, #24]
 800186a:	2b01      	cmp	r3, #1
 800186c:	f200 80ef 	bhi.w	8001a4e <HAL_ADC_Init+0x23a>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 8001870:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001872:	f033 7280 	bics.w	r2, r3, #16777216	; 0x1000000
 8001876:	d01d      	beq.n	80018b4 <HAL_ADC_Init+0xa0>
 8001878:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 800187c:	d01a      	beq.n	80018b4 <HAL_ADC_Init+0xa0>
 800187e:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 8001882:	d017      	beq.n	80018b4 <HAL_ADC_Init+0xa0>
 8001884:	f1b2 6fc0 	cmp.w	r2, #100663296	; 0x6000000
 8001888:	d014      	beq.n	80018b4 <HAL_ADC_Init+0xa0>
 800188a:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
 800188e:	d011      	beq.n	80018b4 <HAL_ADC_Init+0xa0>
 8001890:	f1b2 6f20 	cmp.w	r2, #167772160	; 0xa000000
 8001894:	d00e      	beq.n	80018b4 <HAL_ADC_Init+0xa0>
 8001896:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
 800189a:	d00b      	beq.n	80018b4 <HAL_ADC_Init+0xa0>
 800189c:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 80018a0:	d008      	beq.n	80018b4 <HAL_ADC_Init+0xa0>
 80018a2:	f103 4371 	add.w	r3, r3, #4043309056	; 0xf1000000
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d904      	bls.n	80018b4 <HAL_ADC_Init+0xa0>
 80018aa:	f44f 7188 	mov.w	r1, #272	; 0x110
 80018ae:	4883      	ldr	r0, [pc, #524]	; (8001abc <HAL_ADC_Init+0x2a8>)
 80018b0:	f002 f922 	bl	8003af8 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 80018b4:	68e3      	ldr	r3, [r4, #12]
 80018b6:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 80018ba:	d004      	beq.n	80018c6 <HAL_ADC_Init+0xb2>
 80018bc:	f240 1111 	movw	r1, #273	; 0x111
 80018c0:	487e      	ldr	r0, [pc, #504]	; (8001abc <HAL_ADC_Init+0x2a8>)
 80018c2:	f002 f919 	bl	8003af8 <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 80018c6:	6a23      	ldr	r3, [r4, #32]
 80018c8:	3b01      	subs	r3, #1
 80018ca:	2b0f      	cmp	r3, #15
 80018cc:	f200 80c5 	bhi.w	8001a5a <HAL_ADC_Init+0x246>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 80018d0:	69e3      	ldr	r3, [r4, #28]
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	f200 80c7 	bhi.w	8001a66 <HAL_ADC_Init+0x252>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 80018d8:	6963      	ldr	r3, [r4, #20]
 80018da:	2b02      	cmp	r3, #2
 80018dc:	f200 80c9 	bhi.w	8001a72 <HAL_ADC_Init+0x25e>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 80018e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	f200 80cb 	bhi.w	8001a7e <HAL_ADC_Init+0x26a>
      
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018e8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80018ea:	4b75      	ldr	r3, [pc, #468]	; (8001ac0 <HAL_ADC_Init+0x2ac>)
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d00b      	beq.n	8001908 <HAL_ADC_Init+0xf4>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 80018f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80018f2:	f033 5380 	bics.w	r3, r3, #268435456	; 0x10000000
 80018f6:	d007      	beq.n	8001908 <HAL_ADC_Init+0xf4>
 80018f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80018fc:	d004      	beq.n	8001908 <HAL_ADC_Init+0xf4>
 80018fe:	f240 1119 	movw	r1, #281	; 0x119
 8001902:	486e      	ldr	r0, [pc, #440]	; (8001abc <HAL_ADC_Init+0x2a8>)
 8001904:	f002 f8f8 	bl	8003af8 <assert_failed>
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001908:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800190c:	2b00      	cmp	r3, #0
 800190e:	f000 80bc 	beq.w	8001a8a <HAL_ADC_Init+0x276>
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
  }
  
  /* Initialize the ADC state */
  hadc->State = HAL_ADC_STATE_BUSY;
 8001912:	2302      	movs	r3, #2
 8001914:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001918:	4b6a      	ldr	r3, [pc, #424]	; (8001ac4 <HAL_ADC_Init+0x2b0>)
 800191a:	685a      	ldr	r2, [r3, #4]
 800191c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001920:	605a      	str	r2, [r3, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001922:	685a      	ldr	r2, [r3, #4]
 8001924:	6861      	ldr	r1, [r4, #4]
 8001926:	430a      	orrs	r2, r1
 8001928:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800192a:	6822      	ldr	r2, [r4, #0]
 800192c:	6853      	ldr	r3, [r2, #4]
 800192e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001932:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001934:	6822      	ldr	r2, [r4, #0]
 8001936:	6853      	ldr	r3, [r2, #4]
 8001938:	6921      	ldr	r1, [r4, #16]
 800193a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800193e:	6053      	str	r3, [r2, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001940:	6822      	ldr	r2, [r4, #0]
 8001942:	6853      	ldr	r3, [r2, #4]
 8001944:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001948:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800194a:	6822      	ldr	r2, [r4, #0]
 800194c:	6853      	ldr	r3, [r2, #4]
 800194e:	68a1      	ldr	r1, [r4, #8]
 8001950:	430b      	orrs	r3, r1
 8001952:	6053      	str	r3, [r2, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001954:	6822      	ldr	r2, [r4, #0]
 8001956:	6893      	ldr	r3, [r2, #8]
 8001958:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800195c:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800195e:	6822      	ldr	r2, [r4, #0]
 8001960:	6893      	ldr	r3, [r2, #8]
 8001962:	68e1      	ldr	r1, [r4, #12]
 8001964:	430b      	orrs	r3, r1
 8001966:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001968:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800196a:	4b55      	ldr	r3, [pc, #340]	; (8001ac0 <HAL_ADC_Init+0x2ac>)
 800196c:	429a      	cmp	r2, r3
 800196e:	f000 8092 	beq.w	8001a96 <HAL_ADC_Init+0x282>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001972:	6822      	ldr	r2, [r4, #0]
 8001974:	6893      	ldr	r3, [r2, #8]
 8001976:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800197a:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800197c:	6822      	ldr	r2, [r4, #0]
 800197e:	6893      	ldr	r3, [r2, #8]
 8001980:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001982:	430b      	orrs	r3, r1
 8001984:	6093      	str	r3, [r2, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001986:	6822      	ldr	r2, [r4, #0]
 8001988:	6893      	ldr	r3, [r2, #8]
 800198a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800198e:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001990:	6822      	ldr	r2, [r4, #0]
 8001992:	6893      	ldr	r3, [r2, #8]
 8001994:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001996:	430b      	orrs	r3, r1
 8001998:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800199a:	6822      	ldr	r2, [r4, #0]
 800199c:	6893      	ldr	r3, [r2, #8]
 800199e:	f023 0302 	bic.w	r3, r3, #2
 80019a2:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 80019a4:	6822      	ldr	r2, [r4, #0]
 80019a6:	6893      	ldr	r3, [r2, #8]
 80019a8:	69a1      	ldr	r1, [r4, #24]
 80019aa:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 80019ae:	6093      	str	r3, [r2, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80019b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	f000 8088 	beq.w	8001ac8 <HAL_ADC_Init+0x2b4>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 80019b8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80019ba:	3b01      	subs	r3, #1
 80019bc:	2b07      	cmp	r3, #7
 80019be:	d875      	bhi.n	8001aac <HAL_ADC_Init+0x298>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80019c0:	6822      	ldr	r2, [r4, #0]
 80019c2:	6853      	ldr	r3, [r2, #4]
 80019c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019c8:	6053      	str	r3, [r2, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80019ca:	6822      	ldr	r2, [r4, #0]
 80019cc:	6853      	ldr	r3, [r2, #4]
 80019ce:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80019d2:	6053      	str	r3, [r2, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80019d8:	fa93 f3a3 	rbit	r3, r3
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80019dc:	fab3 f283 	clz	r2, r3
 80019e0:	6821      	ldr	r1, [r4, #0]
 80019e2:	6848      	ldr	r0, [r1, #4]
 80019e4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80019e6:	3b01      	subs	r3, #1
 80019e8:	4093      	lsls	r3, r2
 80019ea:	4303      	orrs	r3, r0
 80019ec:	604b      	str	r3, [r1, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80019ee:	6822      	ldr	r2, [r4, #0]
 80019f0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80019f2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80019f6:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80019f8:	6821      	ldr	r1, [r4, #0]
 80019fa:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80019fc:	6a22      	ldr	r2, [r4, #32]
 80019fe:	3a01      	subs	r2, #1
 8001a00:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8001a04:	62cb      	str	r3, [r1, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001a06:	6822      	ldr	r2, [r4, #0]
 8001a08:	6893      	ldr	r3, [r2, #8]
 8001a0a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001a0e:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8001a10:	6822      	ldr	r2, [r4, #0]
 8001a12:	6893      	ldr	r3, [r2, #8]
 8001a14:	69e1      	ldr	r1, [r4, #28]
 8001a16:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8001a1a:	6093      	str	r3, [r2, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001a1c:	6822      	ldr	r2, [r4, #0]
 8001a1e:	6893      	ldr	r3, [r2, #8]
 8001a20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001a24:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001a26:	6822      	ldr	r2, [r4, #0]
 8001a28:	6893      	ldr	r3, [r2, #8]
 8001a2a:	6961      	ldr	r1, [r4, #20]
 8001a2c:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8001a30:	6093      	str	r3, [r2, #8]
  hadc->ErrorCode = HAL_ADC_ERROR_NONE;
 8001a32:	2000      	movs	r0, #0
 8001a34:	6420      	str	r0, [r4, #64]	; 0x40
  hadc->State = HAL_ADC_STATE_READY;
 8001a36:	2301      	movs	r3, #1
 8001a38:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(hadc);
 8001a3c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001a40:	bd10      	pop	{r4, pc}
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 8001a42:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8001a46:	481d      	ldr	r0, [pc, #116]	; (8001abc <HAL_ADC_Init+0x2a8>)
 8001a48:	f002 f856 	bl	8003af8 <assert_failed>
 8001a4c:	e70c      	b.n	8001868 <HAL_ADC_Init+0x54>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8001a4e:	f240 110f 	movw	r1, #271	; 0x10f
 8001a52:	481a      	ldr	r0, [pc, #104]	; (8001abc <HAL_ADC_Init+0x2a8>)
 8001a54:	f002 f850 	bl	8003af8 <assert_failed>
 8001a58:	e70a      	b.n	8001870 <HAL_ADC_Init+0x5c>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8001a5a:	f44f 7189 	mov.w	r1, #274	; 0x112
 8001a5e:	4817      	ldr	r0, [pc, #92]	; (8001abc <HAL_ADC_Init+0x2a8>)
 8001a60:	f002 f84a 	bl	8003af8 <assert_failed>
 8001a64:	e734      	b.n	80018d0 <HAL_ADC_Init+0xbc>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8001a66:	f240 1113 	movw	r1, #275	; 0x113
 8001a6a:	4814      	ldr	r0, [pc, #80]	; (8001abc <HAL_ADC_Init+0x2a8>)
 8001a6c:	f002 f844 	bl	8003af8 <assert_failed>
 8001a70:	e732      	b.n	80018d8 <HAL_ADC_Init+0xc4>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8001a72:	f44f 718a 	mov.w	r1, #276	; 0x114
 8001a76:	4811      	ldr	r0, [pc, #68]	; (8001abc <HAL_ADC_Init+0x2a8>)
 8001a78:	f002 f83e 	bl	8003af8 <assert_failed>
 8001a7c:	e730      	b.n	80018e0 <HAL_ADC_Init+0xcc>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8001a7e:	f240 1115 	movw	r1, #277	; 0x115
 8001a82:	480e      	ldr	r0, [pc, #56]	; (8001abc <HAL_ADC_Init+0x2a8>)
 8001a84:	f002 f838 	bl	8003af8 <assert_failed>
 8001a88:	e72e      	b.n	80018e8 <HAL_ADC_Init+0xd4>
    hadc->Lock = HAL_UNLOCKED;
 8001a8a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    HAL_ADC_MspInit(hadc);
 8001a8e:	4620      	mov	r0, r4
 8001a90:	f002 f83e 	bl	8003b10 <HAL_ADC_MspInit>
 8001a94:	e73d      	b.n	8001912 <HAL_ADC_Init+0xfe>
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a96:	6822      	ldr	r2, [r4, #0]
 8001a98:	6893      	ldr	r3, [r2, #8]
 8001a9a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001a9e:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001aa0:	6822      	ldr	r2, [r4, #0]
 8001aa2:	6893      	ldr	r3, [r2, #8]
 8001aa4:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001aa8:	6093      	str	r3, [r2, #8]
 8001aaa:	e776      	b.n	800199a <HAL_ADC_Init+0x186>
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 8001aac:	f240 5122 	movw	r1, #1314	; 0x522
 8001ab0:	4802      	ldr	r0, [pc, #8]	; (8001abc <HAL_ADC_Init+0x2a8>)
 8001ab2:	f002 f821 	bl	8003af8 <assert_failed>
 8001ab6:	e783      	b.n	80019c0 <HAL_ADC_Init+0x1ac>
 8001ab8:	40012000 	.word	0x40012000
 8001abc:	080040ac 	.word	0x080040ac
 8001ac0:	0f000001 	.word	0x0f000001
 8001ac4:	40012300 	.word	0x40012300
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ac8:	6822      	ldr	r2, [r4, #0]
 8001aca:	6853      	ldr	r3, [r2, #4]
 8001acc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001ad0:	6053      	str	r3, [r2, #4]
 8001ad2:	e78c      	b.n	80019ee <HAL_ADC_Init+0x1da>
     return HAL_ERROR;
 8001ad4:	2001      	movs	r0, #1
}
 8001ad6:	4770      	bx	lr

08001ad8 <HAL_ADC_Start>:
{
 8001ad8:	b510      	push	{r4, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	4604      	mov	r4, r0
  __IO uint32_t counter = 0;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	9301      	str	r3, [sp, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8001ae2:	6983      	ldr	r3, [r0, #24]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d848      	bhi.n	8001b7a <HAL_ADC_Start+0xa2>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 8001ae8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001aea:	f033 5380 	bics.w	r3, r3, #268435456	; 0x10000000
 8001aee:	d007      	beq.n	8001b00 <HAL_ADC_Start+0x28>
 8001af0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001af4:	d004      	beq.n	8001b00 <HAL_ADC_Start+0x28>
 8001af6:	f44f 71cb 	mov.w	r1, #406	; 0x196
 8001afa:	482f      	ldr	r0, [pc, #188]	; (8001bb8 <HAL_ADC_Start+0xe0>)
 8001afc:	f001 fffc 	bl	8003af8 <assert_failed>
  __HAL_LOCK(hadc);
 8001b00:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d050      	beq.n	8001baa <HAL_ADC_Start+0xd2>
 8001b08:	2301      	movs	r3, #1
 8001b0a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  if(hadc->State == HAL_ADC_STATE_BUSY_INJ)
 8001b0e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	2b22      	cmp	r3, #34	; 0x22
    hadc->State = HAL_ADC_STATE_BUSY_INJ_REG;  
 8001b16:	bf0c      	ite	eq
 8001b18:	2332      	moveq	r3, #50	; 0x32
    hadc->State = HAL_ADC_STATE_BUSY_REG;
 8001b1a:	2312      	movne	r3, #18
 8001b1c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b20:	6823      	ldr	r3, [r4, #0]
 8001b22:	689a      	ldr	r2, [r3, #8]
 8001b24:	f012 0f01 	tst.w	r2, #1
 8001b28:	d114      	bne.n	8001b54 <HAL_ADC_Start+0x7c>
    __HAL_ADC_ENABLE(hadc);
 8001b2a:	689a      	ldr	r2, [r3, #8]
 8001b2c:	f042 0201 	orr.w	r2, r2, #1
 8001b30:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001b32:	4b22      	ldr	r3, [pc, #136]	; (8001bbc <HAL_ADC_Start+0xe4>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a22      	ldr	r2, [pc, #136]	; (8001bc0 <HAL_ADC_Start+0xe8>)
 8001b38:	fba2 2303 	umull	r2, r3, r2, r3
 8001b3c:	0c9b      	lsrs	r3, r3, #18
 8001b3e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001b42:	9301      	str	r3, [sp, #4]
    while(counter != 0)
 8001b44:	9b01      	ldr	r3, [sp, #4]
 8001b46:	b12b      	cbz	r3, 8001b54 <HAL_ADC_Start+0x7c>
      counter--;
 8001b48:	9b01      	ldr	r3, [sp, #4]
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	9301      	str	r3, [sp, #4]
    while(counter != 0)
 8001b4e:	9b01      	ldr	r3, [sp, #4]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d1f9      	bne.n	8001b48 <HAL_ADC_Start+0x70>
  __HAL_UNLOCK(hadc);
 8001b54:	2300      	movs	r3, #0
 8001b56:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001b5a:	4b1a      	ldr	r3, [pc, #104]	; (8001bc4 <HAL_ADC_Start+0xec>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f013 0f1f 	tst.w	r3, #31
 8001b62:	d110      	bne.n	8001b86 <HAL_ADC_Start+0xae>
    if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001b64:	6823      	ldr	r3, [r4, #0]
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8001b6c:	d11f      	bne.n	8001bae <HAL_ADC_Start+0xd6>
      hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b6e:	689a      	ldr	r2, [r3, #8]
 8001b70:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b74:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8001b76:	2000      	movs	r0, #0
 8001b78:	e00a      	b.n	8001b90 <HAL_ADC_Start+0xb8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8001b7a:	f240 1195 	movw	r1, #405	; 0x195
 8001b7e:	480e      	ldr	r0, [pc, #56]	; (8001bb8 <HAL_ADC_Start+0xe0>)
 8001b80:	f001 ffba 	bl	8003af8 <assert_failed>
 8001b84:	e7b0      	b.n	8001ae8 <HAL_ADC_Start+0x10>
    if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b86:	6822      	ldr	r2, [r4, #0]
 8001b88:	4b0f      	ldr	r3, [pc, #60]	; (8001bc8 <HAL_ADC_Start+0xf0>)
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d002      	beq.n	8001b94 <HAL_ADC_Start+0xbc>
  return HAL_OK;
 8001b8e:	2000      	movs	r0, #0
}
 8001b90:	b002      	add	sp, #8
 8001b92:	bd10      	pop	{r4, pc}
    if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	f013 5f40 	tst.w	r3, #805306368	; 0x30000000
 8001b9a:	d10a      	bne.n	8001bb2 <HAL_ADC_Start+0xda>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b9c:	4a0a      	ldr	r2, [pc, #40]	; (8001bc8 <HAL_ADC_Start+0xf0>)
 8001b9e:	6893      	ldr	r3, [r2, #8]
 8001ba0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001ba4:	6093      	str	r3, [r2, #8]
  return HAL_OK;
 8001ba6:	2000      	movs	r0, #0
 8001ba8:	e7f2      	b.n	8001b90 <HAL_ADC_Start+0xb8>
  __HAL_LOCK(hadc);
 8001baa:	2002      	movs	r0, #2
 8001bac:	e7f0      	b.n	8001b90 <HAL_ADC_Start+0xb8>
  return HAL_OK;
 8001bae:	2000      	movs	r0, #0
 8001bb0:	e7ee      	b.n	8001b90 <HAL_ADC_Start+0xb8>
 8001bb2:	2000      	movs	r0, #0
 8001bb4:	e7ec      	b.n	8001b90 <HAL_ADC_Start+0xb8>
 8001bb6:	bf00      	nop
 8001bb8:	080040ac 	.word	0x080040ac
 8001bbc:	20000364 	.word	0x20000364
 8001bc0:	431bde83 	.word	0x431bde83
 8001bc4:	40012300 	.word	0x40012300
 8001bc8:	40012000 	.word	0x40012000

08001bcc <HAL_ADC_PollForConversion>:
{
 8001bcc:	b570      	push	{r4, r5, r6, lr}
 8001bce:	4605      	mov	r5, r0
 8001bd0:	460c      	mov	r4, r1
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001bd2:	6803      	ldr	r3, [r0, #0]
 8001bd4:	689a      	ldr	r2, [r3, #8]
 8001bd6:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001bda:	d003      	beq.n	8001be4 <HAL_ADC_PollForConversion+0x18>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001bdc:	689b      	ldr	r3, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001bde:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001be2:	d117      	bne.n	8001c14 <HAL_ADC_PollForConversion+0x48>
  tickstart = HAL_GetTick();
 8001be4:	f7ff fe02 	bl	80017ec <HAL_GetTick>
 8001be8:	4606      	mov	r6, r0
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001bea:	682a      	ldr	r2, [r5, #0]
 8001bec:	6813      	ldr	r3, [r2, #0]
 8001bee:	f013 0f02 	tst.w	r3, #2
 8001bf2:	d117      	bne.n	8001c24 <HAL_ADC_PollForConversion+0x58>
    if(Timeout != HAL_MAX_DELAY)
 8001bf4:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001bf8:	d0f8      	beq.n	8001bec <HAL_ADC_PollForConversion+0x20>
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001bfa:	b124      	cbz	r4, 8001c06 <HAL_ADC_PollForConversion+0x3a>
 8001bfc:	f7ff fdf6 	bl	80017ec <HAL_GetTick>
 8001c00:	1b80      	subs	r0, r0, r6
 8001c02:	42a0      	cmp	r0, r4
 8001c04:	d9f1      	bls.n	8001bea <HAL_ADC_PollForConversion+0x1e>
        hadc->State= HAL_ADC_STATE_TIMEOUT;
 8001c06:	2003      	movs	r0, #3
 8001c08:	f885 003d 	strb.w	r0, [r5, #61]	; 0x3d
        __HAL_UNLOCK(hadc);
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_TIMEOUT;
 8001c12:	e011      	b.n	8001c38 <HAL_ADC_PollForConversion+0x6c>
    hadc->State = HAL_ADC_STATE_ERROR;
 8001c14:	2304      	movs	r3, #4
 8001c16:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    __HAL_UNLOCK(hadc);
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 8001c20:	2001      	movs	r0, #1
 8001c22:	e009      	b.n	8001c38 <HAL_ADC_PollForConversion+0x6c>
  if(hadc->State == HAL_ADC_STATE_EOC_INJ)
 8001c24:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b25      	cmp	r3, #37	; 0x25
    hadc->State = HAL_ADC_STATE_EOC_INJ_REG;  
 8001c2c:	bf0c      	ite	eq
 8001c2e:	2335      	moveq	r3, #53	; 0x35
    hadc->State = HAL_ADC_STATE_EOC_REG;
 8001c30:	2315      	movne	r3, #21
 8001c32:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  return HAL_OK;
 8001c36:	2000      	movs	r0, #0
}
 8001c38:	bd70      	pop	{r4, r5, r6, pc}

08001c3a <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8001c3a:	6803      	ldr	r3, [r0, #0]
 8001c3c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8001c3e:	4770      	bx	lr

08001c40 <HAL_ADC_ConfigChannel>:
{
 8001c40:	b530      	push	{r4, r5, lr}
 8001c42:	b083      	sub	sp, #12
 8001c44:	4605      	mov	r5, r0
 8001c46:	460c      	mov	r4, r1
  __IO uint32_t counter = 0;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8001c4c:	680b      	ldr	r3, [r1, #0]
 8001c4e:	2b12      	cmp	r3, #18
 8001c50:	d84a      	bhi.n	8001ce8 <HAL_ADC_ConfigChannel+0xa8>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8001c52:	6863      	ldr	r3, [r4, #4]
 8001c54:	3b01      	subs	r3, #1
 8001c56:	2b0f      	cmp	r3, #15
 8001c58:	d84c      	bhi.n	8001cf4 <HAL_ADC_ConfigChannel+0xb4>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8001c5a:	68a3      	ldr	r3, [r4, #8]
 8001c5c:	2b07      	cmp	r3, #7
 8001c5e:	d84f      	bhi.n	8001d00 <HAL_ADC_ConfigChannel+0xc0>
  __HAL_LOCK(hadc);
 8001c60:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	f000 80c8 	beq.w	8001dfa <HAL_ADC_ConfigChannel+0x1ba>
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001c70:	6823      	ldr	r3, [r4, #0]
 8001c72:	2b09      	cmp	r3, #9
 8001c74:	d94a      	bls.n	8001d0c <HAL_ADC_ConfigChannel+0xcc>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c76:	6828      	ldr	r0, [r5, #0]
 8001c78:	68c2      	ldr	r2, [r0, #12]
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001c80:	3b1e      	subs	r3, #30
 8001c82:	2107      	movs	r1, #7
 8001c84:	fa01 f303 	lsl.w	r3, r1, r3
 8001c88:	ea22 0303 	bic.w	r3, r2, r3
 8001c8c:	60c3      	str	r3, [r0, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001c8e:	6829      	ldr	r1, [r5, #0]
 8001c90:	68c8      	ldr	r0, [r1, #12]
 8001c92:	8823      	ldrh	r3, [r4, #0]
 8001c94:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001c98:	3b1e      	subs	r3, #30
 8001c9a:	68a2      	ldr	r2, [r4, #8]
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	4303      	orrs	r3, r0
 8001ca2:	60cb      	str	r3, [r1, #12]
  if (sConfig->Rank < 7)
 8001ca4:	6863      	ldr	r3, [r4, #4]
 8001ca6:	2b06      	cmp	r3, #6
 8001ca8:	d845      	bhi.n	8001d36 <HAL_ADC_ConfigChannel+0xf6>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001caa:	6828      	ldr	r0, [r5, #0]
 8001cac:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8001cae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001cb2:	3b05      	subs	r3, #5
 8001cb4:	211f      	movs	r1, #31
 8001cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cba:	ea22 0303 	bic.w	r3, r2, r3
 8001cbe:	6343      	str	r3, [r0, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001cc0:	6829      	ldr	r1, [r5, #0]
 8001cc2:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8001cc4:	8822      	ldrh	r2, [r4, #0]
 8001cc6:	6863      	ldr	r3, [r4, #4]
 8001cc8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001ccc:	3b05      	subs	r3, #5
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	4303      	orrs	r3, r0
 8001cd4:	634b      	str	r3, [r1, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001cd6:	682a      	ldr	r2, [r5, #0]
 8001cd8:	4b49      	ldr	r3, [pc, #292]	; (8001e00 <HAL_ADC_ConfigChannel+0x1c0>)
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d05b      	beq.n	8001d96 <HAL_ADC_ConfigChannel+0x156>
  __HAL_UNLOCK(hadc);
 8001cde:	2000      	movs	r0, #0
 8001ce0:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
}
 8001ce4:	b003      	add	sp, #12
 8001ce6:	bd30      	pop	{r4, r5, pc}
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8001ce8:	f240 4124 	movw	r1, #1060	; 0x424
 8001cec:	4845      	ldr	r0, [pc, #276]	; (8001e04 <HAL_ADC_ConfigChannel+0x1c4>)
 8001cee:	f001 ff03 	bl	8003af8 <assert_failed>
 8001cf2:	e7ae      	b.n	8001c52 <HAL_ADC_ConfigChannel+0x12>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8001cf4:	f240 4125 	movw	r1, #1061	; 0x425
 8001cf8:	4842      	ldr	r0, [pc, #264]	; (8001e04 <HAL_ADC_ConfigChannel+0x1c4>)
 8001cfa:	f001 fefd 	bl	8003af8 <assert_failed>
 8001cfe:	e7ac      	b.n	8001c5a <HAL_ADC_ConfigChannel+0x1a>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8001d00:	f240 4126 	movw	r1, #1062	; 0x426
 8001d04:	483f      	ldr	r0, [pc, #252]	; (8001e04 <HAL_ADC_ConfigChannel+0x1c4>)
 8001d06:	f001 fef7 	bl	8003af8 <assert_failed>
 8001d0a:	e7a9      	b.n	8001c60 <HAL_ADC_ConfigChannel+0x20>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d0c:	6828      	ldr	r0, [r5, #0]
 8001d0e:	6902      	ldr	r2, [r0, #16]
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001d16:	2107      	movs	r1, #7
 8001d18:	fa01 f303 	lsl.w	r3, r1, r3
 8001d1c:	ea22 0303 	bic.w	r3, r2, r3
 8001d20:	6103      	str	r3, [r0, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001d22:	6829      	ldr	r1, [r5, #0]
 8001d24:	6908      	ldr	r0, [r1, #16]
 8001d26:	8823      	ldrh	r3, [r4, #0]
 8001d28:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8001d2c:	68a3      	ldr	r3, [r4, #8]
 8001d2e:	4093      	lsls	r3, r2
 8001d30:	4303      	orrs	r3, r0
 8001d32:	610b      	str	r3, [r1, #16]
 8001d34:	e7b6      	b.n	8001ca4 <HAL_ADC_ConfigChannel+0x64>
  else if (sConfig->Rank < 13)
 8001d36:	2b0c      	cmp	r3, #12
 8001d38:	d816      	bhi.n	8001d68 <HAL_ADC_ConfigChannel+0x128>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d3a:	6828      	ldr	r0, [r5, #0]
 8001d3c:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8001d3e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001d42:	3b23      	subs	r3, #35	; 0x23
 8001d44:	211f      	movs	r1, #31
 8001d46:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4a:	ea22 0303 	bic.w	r3, r2, r3
 8001d4e:	6303      	str	r3, [r0, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d50:	6829      	ldr	r1, [r5, #0]
 8001d52:	6b08      	ldr	r0, [r1, #48]	; 0x30
 8001d54:	8822      	ldrh	r2, [r4, #0]
 8001d56:	6863      	ldr	r3, [r4, #4]
 8001d58:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001d5c:	3b23      	subs	r3, #35	; 0x23
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	4303      	orrs	r3, r0
 8001d64:	630b      	str	r3, [r1, #48]	; 0x30
 8001d66:	e7b6      	b.n	8001cd6 <HAL_ADC_ConfigChannel+0x96>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d68:	6828      	ldr	r0, [r5, #0]
 8001d6a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8001d6c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001d70:	3b41      	subs	r3, #65	; 0x41
 8001d72:	211f      	movs	r1, #31
 8001d74:	fa01 f303 	lsl.w	r3, r1, r3
 8001d78:	ea22 0303 	bic.w	r3, r2, r3
 8001d7c:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d7e:	6829      	ldr	r1, [r5, #0]
 8001d80:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
 8001d82:	8822      	ldrh	r2, [r4, #0]
 8001d84:	6863      	ldr	r3, [r4, #4]
 8001d86:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001d8a:	3b41      	subs	r3, #65	; 0x41
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	4303      	orrs	r3, r0
 8001d92:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001d94:	e79f      	b.n	8001cd6 <HAL_ADC_ConfigChannel+0x96>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d96:	6823      	ldr	r3, [r4, #0]
 8001d98:	2b12      	cmp	r3, #18
 8001d9a:	d024      	beq.n	8001de6 <HAL_ADC_ConfigChannel+0x1a6>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d9c:	6823      	ldr	r3, [r4, #0]
 8001d9e:	3b10      	subs	r3, #16
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d89c      	bhi.n	8001cde <HAL_ADC_ConfigChannel+0x9e>
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001da4:	4a18      	ldr	r2, [pc, #96]	; (8001e08 <HAL_ADC_ConfigChannel+0x1c8>)
 8001da6:	6853      	ldr	r3, [r2, #4]
 8001da8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001dac:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001dae:	6823      	ldr	r3, [r4, #0]
 8001db0:	2b10      	cmp	r3, #16
 8001db2:	d194      	bne.n	8001cde <HAL_ADC_ConfigChannel+0x9e>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001db4:	4b15      	ldr	r3, [pc, #84]	; (8001e0c <HAL_ADC_ConfigChannel+0x1cc>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 8001dbc:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 8001dc0:	f202 3283 	addw	r2, r2, #899	; 0x383
 8001dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc8:	0c9b      	lsrs	r3, r3, #18
 8001dca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 8001dd2:	9b01      	ldr	r3, [sp, #4]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d082      	beq.n	8001cde <HAL_ADC_ConfigChannel+0x9e>
        counter--;
 8001dd8:	9b01      	ldr	r3, [sp, #4]
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 8001dde:	9b01      	ldr	r3, [sp, #4]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d1f9      	bne.n	8001dd8 <HAL_ADC_ConfigChannel+0x198>
 8001de4:	e77b      	b.n	8001cde <HAL_ADC_ConfigChannel+0x9e>
    ADC->CCR |= ADC_CCR_VBATE;
 8001de6:	4a08      	ldr	r2, [pc, #32]	; (8001e08 <HAL_ADC_ConfigChannel+0x1c8>)
 8001de8:	6853      	ldr	r3, [r2, #4]
 8001dea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001dee:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001df0:	682a      	ldr	r2, [r5, #0]
 8001df2:	4b03      	ldr	r3, [pc, #12]	; (8001e00 <HAL_ADC_ConfigChannel+0x1c0>)
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d0d1      	beq.n	8001d9c <HAL_ADC_ConfigChannel+0x15c>
 8001df8:	e771      	b.n	8001cde <HAL_ADC_ConfigChannel+0x9e>
  __HAL_LOCK(hadc);
 8001dfa:	2002      	movs	r0, #2
 8001dfc:	e772      	b.n	8001ce4 <HAL_ADC_ConfigChannel+0xa4>
 8001dfe:	bf00      	nop
 8001e00:	40012000 	.word	0x40012000
 8001e04:	080040ac 	.word	0x080040ac
 8001e08:	40012300 	.word	0x40012300
 8001e0c:	20000364 	.word	0x20000364

08001e10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e10:	b510      	push	{r4, lr}
 8001e12:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001e14:	1ec3      	subs	r3, r0, #3
 8001e16:	2b04      	cmp	r3, #4
 8001e18:	d80e      	bhi.n	8001e38 <HAL_NVIC_SetPriorityGrouping+0x28>
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e1a:	490a      	ldr	r1, [pc, #40]	; (8001e44 <HAL_NVIC_SetPriorityGrouping+0x34>)
 8001e1c:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8)                       );              /* Insert write key and priorty group */
 8001e1e:	0223      	lsls	r3, r4, #8
 8001e20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
 8001e24:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8001e28:	4014      	ands	r4, r2
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e2a:	4323      	orrs	r3, r4
  reg_value  =  (reg_value                                   |
 8001e2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001e34:	60cb      	str	r3, [r1, #12]
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001e36:	bd10      	pop	{r4, pc}
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001e38:	21a4      	movs	r1, #164	; 0xa4
 8001e3a:	4803      	ldr	r0, [pc, #12]	; (8001e48 <HAL_NVIC_SetPriorityGrouping+0x38>)
 8001e3c:	f001 fe5c 	bl	8003af8 <assert_failed>
 8001e40:	e7eb      	b.n	8001e1a <HAL_NVIC_SetPriorityGrouping+0xa>
 8001e42:	bf00      	nop
 8001e44:	e000ed00 	.word	0xe000ed00
 8001e48:	08004134 	.word	0x08004134

08001e4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e4c:	b570      	push	{r4, r5, r6, lr}
 8001e4e:	4605      	mov	r5, r0
 8001e50:	460c      	mov	r4, r1
 8001e52:	4616      	mov	r6, r2
  uint32_t prioritygroup = 0x00;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001e54:	2a0f      	cmp	r2, #15
 8001e56:	d826      	bhi.n	8001ea6 <HAL_NVIC_SetPriority+0x5a>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001e58:	2c0f      	cmp	r4, #15
 8001e5a:	d829      	bhi.n	8001eb0 <HAL_NVIC_SetPriority+0x64>

    \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e5c:	4b1a      	ldr	r3, [pc, #104]	; (8001ec8 <HAL_NVIC_SetPriority+0x7c>)
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e64:	f1c3 0207 	rsb	r2, r3, #7
 8001e68:	2a04      	cmp	r2, #4
 8001e6a:	bf28      	it	cs
 8001e6c:	2204      	movcs	r2, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e6e:	1d19      	adds	r1, r3, #4
 8001e70:	2906      	cmp	r1, #6
 8001e72:	bf8c      	ite	hi
 8001e74:	3b03      	subhi	r3, #3
 8001e76:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e78:	f04f 31ff 	mov.w	r1, #4294967295
 8001e7c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e80:	ea24 0402 	bic.w	r4, r4, r2
 8001e84:	409c      	lsls	r4, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e86:	fa01 f303 	lsl.w	r3, r1, r3
 8001e8a:	ea26 0603 	bic.w	r6, r6, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e8e:	4334      	orrs	r4, r6
  if((int32_t)IRQn < 0) {
 8001e90:	2d00      	cmp	r5, #0
 8001e92:	db12      	blt.n	8001eba <HAL_NVIC_SetPriority+0x6e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e94:	0124      	lsls	r4, r4, #4
 8001e96:	b2e4      	uxtb	r4, r4
 8001e98:	f105 4560 	add.w	r5, r5, #3758096384	; 0xe0000000
 8001e9c:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
 8001ea0:	f885 4300 	strb.w	r4, [r5, #768]	; 0x300
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001ea4:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001ea6:	21bc      	movs	r1, #188	; 0xbc
 8001ea8:	4808      	ldr	r0, [pc, #32]	; (8001ecc <HAL_NVIC_SetPriority+0x80>)
 8001eaa:	f001 fe25 	bl	8003af8 <assert_failed>
 8001eae:	e7d3      	b.n	8001e58 <HAL_NVIC_SetPriority+0xc>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001eb0:	21bd      	movs	r1, #189	; 0xbd
 8001eb2:	4806      	ldr	r0, [pc, #24]	; (8001ecc <HAL_NVIC_SetPriority+0x80>)
 8001eb4:	f001 fe20 	bl	8003af8 <assert_failed>
 8001eb8:	e7d0      	b.n	8001e5c <HAL_NVIC_SetPriority+0x10>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eba:	f005 050f 	and.w	r5, r5, #15
 8001ebe:	0124      	lsls	r4, r4, #4
 8001ec0:	b2e4      	uxtb	r4, r4
 8001ec2:	4b03      	ldr	r3, [pc, #12]	; (8001ed0 <HAL_NVIC_SetPriority+0x84>)
 8001ec4:	555c      	strb	r4, [r3, r5]
 8001ec6:	e7ed      	b.n	8001ea4 <HAL_NVIC_SetPriority+0x58>
 8001ec8:	e000ed00 	.word	0xe000ed00
 8001ecc:	08004134 	.word	0x08004134
 8001ed0:	e000ed14 	.word	0xe000ed14

08001ed4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ed4:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001ed6:	1e04      	subs	r4, r0, #0
 8001ed8:	db09      	blt.n	8001eee <HAL_NVIC_EnableIRQ+0x1a>
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001eda:	0962      	lsrs	r2, r4, #5
 8001edc:	f004 041f 	and.w	r4, r4, #31
 8001ee0:	2001      	movs	r0, #1
 8001ee2:	fa00 f404 	lsl.w	r4, r0, r4
 8001ee6:	4b04      	ldr	r3, [pc, #16]	; (8001ef8 <HAL_NVIC_EnableIRQ+0x24>)
 8001ee8:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001eec:	bd10      	pop	{r4, pc}
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001eee:	21d0      	movs	r1, #208	; 0xd0
 8001ef0:	4802      	ldr	r0, [pc, #8]	; (8001efc <HAL_NVIC_EnableIRQ+0x28>)
 8001ef2:	f001 fe01 	bl	8003af8 <assert_failed>
 8001ef6:	e7f0      	b.n	8001eda <HAL_NVIC_EnableIRQ+0x6>
 8001ef8:	e000e100 	.word	0xe000e100
 8001efc:	08004134 	.word	0x08004134

08001f00 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001f00:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001f02:	1e04      	subs	r4, r0, #0
 8001f04:	db0a      	blt.n	8001f1c <HAL_NVIC_DisableIRQ+0x1c>
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001f06:	0963      	lsrs	r3, r4, #5
 8001f08:	f004 041f 	and.w	r4, r4, #31
 8001f0c:	2001      	movs	r0, #1
 8001f0e:	fa00 f404 	lsl.w	r4, r0, r4
 8001f12:	3320      	adds	r3, #32
 8001f14:	4a04      	ldr	r2, [pc, #16]	; (8001f28 <HAL_NVIC_DisableIRQ+0x28>)
 8001f16:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8001f1a:	bd10      	pop	{r4, pc}
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001f1c:	21e0      	movs	r1, #224	; 0xe0
 8001f1e:	4803      	ldr	r0, [pc, #12]	; (8001f2c <HAL_NVIC_DisableIRQ+0x2c>)
 8001f20:	f001 fdea 	bl	8003af8 <assert_failed>
 8001f24:	e7ef      	b.n	8001f06 <HAL_NVIC_DisableIRQ+0x6>
 8001f26:	bf00      	nop
 8001f28:	e000e100 	.word	0xe000e100
 8001f2c:	08004134 	.word	0x08004134

08001f30 <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 8001f30:	3801      	subs	r0, #1
 8001f32:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001f36:	d20b      	bcs.n	8001f50 <HAL_SYSTICK_Config+0x20>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f38:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001f3c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f3e:	4a05      	ldr	r2, [pc, #20]	; (8001f54 <HAL_SYSTICK_Config+0x24>)
 8001f40:	21f0      	movs	r1, #240	; 0xf0
 8001f42:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f46:	2000      	movs	r0, #0
 8001f48:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f4a:	2207      	movs	r2, #7
 8001f4c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f4e:	4770      	bx	lr
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 8001f50:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001f52:	4770      	bx	lr
 8001f54:	e000ed00 	.word	0xe000ed00

08001f58 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001f58:	4770      	bx	lr

08001f5a <HAL_SYSTICK_IRQHandler>:
{
 8001f5a:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8001f5c:	f7ff fffc 	bl	8001f58 <HAL_SYSTICK_Callback>
}
 8001f60:	bd08      	pop	{r3, pc}
	...

08001f64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f68:	b083      	sub	sp, #12
 8001f6a:	4607      	mov	r7, r0
 8001f6c:	460e      	mov	r6, r1
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001f6e:	4b8d      	ldr	r3, [pc, #564]	; (80021a4 <HAL_GPIO_Init+0x240>)
 8001f70:	4298      	cmp	r0, r3
 8001f72:	d017      	beq.n	8001fa4 <HAL_GPIO_Init+0x40>
 8001f74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f78:	4298      	cmp	r0, r3
 8001f7a:	d013      	beq.n	8001fa4 <HAL_GPIO_Init+0x40>
 8001f7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f80:	4298      	cmp	r0, r3
 8001f82:	d00f      	beq.n	8001fa4 <HAL_GPIO_Init+0x40>
 8001f84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f88:	4298      	cmp	r0, r3
 8001f8a:	d00b      	beq.n	8001fa4 <HAL_GPIO_Init+0x40>
 8001f8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f90:	4298      	cmp	r0, r3
 8001f92:	d007      	beq.n	8001fa4 <HAL_GPIO_Init+0x40>
 8001f94:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8001f98:	4298      	cmp	r0, r3
 8001f9a:	d003      	beq.n	8001fa4 <HAL_GPIO_Init+0x40>
 8001f9c:	21c5      	movs	r1, #197	; 0xc5
 8001f9e:	4882      	ldr	r0, [pc, #520]	; (80021a8 <HAL_GPIO_Init+0x244>)
 8001fa0:	f001 fdaa 	bl	8003af8 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001fa4:	8833      	ldrh	r3, [r6, #0]
 8001fa6:	b30b      	cbz	r3, 8001fec <HAL_GPIO_Init+0x88>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001fa8:	6873      	ldr	r3, [r6, #4]
 8001faa:	2b03      	cmp	r3, #3
 8001fac:	d917      	bls.n	8001fde <HAL_GPIO_Init+0x7a>
 8001fae:	f1a3 0211 	sub.w	r2, r3, #17
 8001fb2:	2a01      	cmp	r2, #1
 8001fb4:	d913      	bls.n	8001fde <HAL_GPIO_Init+0x7a>
 8001fb6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8001fba:	497c      	ldr	r1, [pc, #496]	; (80021ac <HAL_GPIO_Init+0x248>)
 8001fbc:	428a      	cmp	r2, r1
 8001fbe:	d00e      	beq.n	8001fde <HAL_GPIO_Init+0x7a>
 8001fc0:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 8001fc4:	428b      	cmp	r3, r1
 8001fc6:	d00a      	beq.n	8001fde <HAL_GPIO_Init+0x7a>
 8001fc8:	f5a1 2170 	sub.w	r1, r1, #983040	; 0xf0000
 8001fcc:	428a      	cmp	r2, r1
 8001fce:	d006      	beq.n	8001fde <HAL_GPIO_Init+0x7a>
 8001fd0:	4a77      	ldr	r2, [pc, #476]	; (80021b0 <HAL_GPIO_Init+0x24c>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d003      	beq.n	8001fde <HAL_GPIO_Init+0x7a>
 8001fd6:	21c7      	movs	r1, #199	; 0xc7
 8001fd8:	4873      	ldr	r0, [pc, #460]	; (80021a8 <HAL_GPIO_Init+0x244>)
 8001fda:	f001 fd8d 	bl	8003af8 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001fde:	68b3      	ldr	r3, [r6, #8]
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d808      	bhi.n	8001ff6 <HAL_GPIO_Init+0x92>
{
 8001fe4:	2400      	movs	r4, #0
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001fe6:	f8df b1d4 	ldr.w	fp, [pc, #468]	; 80021bc <HAL_GPIO_Init+0x258>
 8001fea:	e05f      	b.n	80020ac <HAL_GPIO_Init+0x148>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001fec:	21c6      	movs	r1, #198	; 0xc6
 8001fee:	486e      	ldr	r0, [pc, #440]	; (80021a8 <HAL_GPIO_Init+0x244>)
 8001ff0:	f001 fd82 	bl	8003af8 <assert_failed>
 8001ff4:	e7d8      	b.n	8001fa8 <HAL_GPIO_Init+0x44>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001ff6:	21c8      	movs	r1, #200	; 0xc8
 8001ff8:	486b      	ldr	r0, [pc, #428]	; (80021a8 <HAL_GPIO_Init+0x244>)
 8001ffa:	f001 fd7d 	bl	8003af8 <assert_failed>
 8001ffe:	e7f1      	b.n	8001fe4 <HAL_GPIO_Init+0x80>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002000:	6933      	ldr	r3, [r6, #16]
 8002002:	2b0f      	cmp	r3, #15
 8002004:	d816      	bhi.n	8002034 <HAL_GPIO_Init+0xd0>
 8002006:	f249 72f7 	movw	r2, #38903	; 0x97f7
 800200a:	fa22 f303 	lsr.w	r3, r2, r3
 800200e:	f013 0f01 	tst.w	r3, #1
 8002012:	d00f      	beq.n	8002034 <HAL_GPIO_Init+0xd0>
        temp = GPIOx->AFR[position >> 3];
 8002014:	08e2      	lsrs	r2, r4, #3
 8002016:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 800201a:	6a10      	ldr	r0, [r2, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800201c:	f004 0307 	and.w	r3, r4, #7
 8002020:	0099      	lsls	r1, r3, #2
 8002022:	230f      	movs	r3, #15
 8002024:	408b      	lsls	r3, r1
 8002026:	ea20 0003 	bic.w	r0, r0, r3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800202a:	6933      	ldr	r3, [r6, #16]
 800202c:	408b      	lsls	r3, r1
 800202e:	4303      	orrs	r3, r0
        GPIOx->AFR[position >> 3] = temp;
 8002030:	6213      	str	r3, [r2, #32]
 8002032:	e048      	b.n	80020c6 <HAL_GPIO_Init+0x162>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002034:	21d9      	movs	r1, #217	; 0xd9
 8002036:	485c      	ldr	r0, [pc, #368]	; (80021a8 <HAL_GPIO_Init+0x244>)
 8002038:	f001 fd5e 	bl	8003af8 <assert_failed>
 800203c:	e7ea      	b.n	8002014 <HAL_GPIO_Init+0xb0>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800203e:	21ec      	movs	r1, #236	; 0xec
 8002040:	4859      	ldr	r0, [pc, #356]	; (80021a8 <HAL_GPIO_Init+0x244>)
 8002042:	f001 fd59 	bl	8003af8 <assert_failed>
 8002046:	e058      	b.n	80020fa <HAL_GPIO_Init+0x196>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002048:	2200      	movs	r2, #0
 800204a:	408a      	lsls	r2, r1
 800204c:	4302      	orrs	r2, r0
        SYSCFG->EXTICR[position >> 2] = temp;
 800204e:	609a      	str	r2, [r3, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002050:	4b58      	ldr	r3, [pc, #352]	; (80021b4 <HAL_GPIO_Init+0x250>)
 8002052:	681a      	ldr	r2, [r3, #0]
        temp &= ~((uint32_t)iocurrent);
 8002054:	ea6f 010a 	mvn.w	r1, sl
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002058:	6873      	ldr	r3, [r6, #4]
 800205a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800205e:	bf0c      	ite	eq
 8002060:	400a      	andeq	r2, r1
        {
          temp |= iocurrent;
 8002062:	ea4a 0202 	orrne.w	r2, sl, r2
        }
        EXTI->IMR = temp;
 8002066:	4b53      	ldr	r3, [pc, #332]	; (80021b4 <HAL_GPIO_Init+0x250>)
 8002068:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800206a:	685a      	ldr	r2, [r3, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800206c:	6873      	ldr	r3, [r6, #4]
 800206e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8002072:	bf0c      	ite	eq
 8002074:	400a      	andeq	r2, r1
        {
          temp |= iocurrent;
 8002076:	ea4a 0202 	orrne.w	r2, sl, r2
        }
        EXTI->EMR = temp;
 800207a:	4b4e      	ldr	r3, [pc, #312]	; (80021b4 <HAL_GPIO_Init+0x250>)
 800207c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800207e:	689a      	ldr	r2, [r3, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002080:	6873      	ldr	r3, [r6, #4]
 8002082:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8002086:	bf0c      	ite	eq
 8002088:	400a      	andeq	r2, r1
        {
          temp |= iocurrent;
 800208a:	ea4a 0202 	orrne.w	r2, sl, r2
        }
        EXTI->RTSR = temp;
 800208e:	4b49      	ldr	r3, [pc, #292]	; (80021b4 <HAL_GPIO_Init+0x250>)
 8002090:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002092:	68db      	ldr	r3, [r3, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002094:	6872      	ldr	r2, [r6, #4]
 8002096:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 800209a:	bf0c      	ite	eq
 800209c:	400b      	andeq	r3, r1
        {
          temp |= iocurrent;
 800209e:	ea4a 0303 	orrne.w	r3, sl, r3
        }
        EXTI->FTSR = temp;
 80020a2:	4a44      	ldr	r2, [pc, #272]	; (80021b4 <HAL_GPIO_Init+0x250>)
 80020a4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80020a6:	3401      	adds	r4, #1
 80020a8:	2c10      	cmp	r4, #16
 80020aa:	d077      	beq.n	800219c <HAL_GPIO_Init+0x238>
    ioposition = ((uint32_t)0x01) << position;
 80020ac:	2501      	movs	r5, #1
 80020ae:	40a5      	lsls	r5, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020b0:	6833      	ldr	r3, [r6, #0]
 80020b2:	ea05 0a03 	and.w	sl, r5, r3
    if(iocurrent == ioposition)
 80020b6:	ea35 0303 	bics.w	r3, r5, r3
 80020ba:	d1f4      	bne.n	80020a6 <HAL_GPIO_Init+0x142>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020bc:	6873      	ldr	r3, [r6, #4]
 80020be:	f023 0310 	bic.w	r3, r3, #16
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d09c      	beq.n	8002000 <HAL_GPIO_Init+0x9c>
      temp = GPIOx->MODER;
 80020c6:	683a      	ldr	r2, [r7, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80020c8:	ea4f 0944 	mov.w	r9, r4, lsl #1
 80020cc:	2303      	movs	r3, #3
 80020ce:	fa03 f309 	lsl.w	r3, r3, r9
 80020d2:	ea6f 0803 	mvn.w	r8, r3
 80020d6:	ea22 0203 	bic.w	r2, r2, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80020da:	6873      	ldr	r3, [r6, #4]
 80020dc:	f003 0303 	and.w	r3, r3, #3
 80020e0:	fa03 f309 	lsl.w	r3, r3, r9
 80020e4:	4313      	orrs	r3, r2
      GPIOx->MODER = temp;
 80020e6:	603b      	str	r3, [r7, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020e8:	6873      	ldr	r3, [r6, #4]
 80020ea:	f023 0310 	bic.w	r3, r3, #16
 80020ee:	3b01      	subs	r3, #1
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d813      	bhi.n	800211c <HAL_GPIO_Init+0x1b8>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80020f4:	68f3      	ldr	r3, [r6, #12]
 80020f6:	2b03      	cmp	r3, #3
 80020f8:	d8a1      	bhi.n	800203e <HAL_GPIO_Init+0xda>
        temp = GPIOx->OSPEEDR; 
 80020fa:	68ba      	ldr	r2, [r7, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80020fc:	ea08 0202 	and.w	r2, r8, r2
        temp |= (GPIO_Init->Speed << (position * 2));
 8002100:	68f3      	ldr	r3, [r6, #12]
 8002102:	fa03 f309 	lsl.w	r3, r3, r9
 8002106:	4313      	orrs	r3, r2
        GPIOx->OSPEEDR = temp;
 8002108:	60bb      	str	r3, [r7, #8]
        temp = GPIOx->OTYPER;
 800210a:	687a      	ldr	r2, [r7, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800210c:	ea22 0205 	bic.w	r2, r2, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002110:	6873      	ldr	r3, [r6, #4]
 8002112:	f3c3 1500 	ubfx	r5, r3, #4, #1
 8002116:	40a5      	lsls	r5, r4
 8002118:	4315      	orrs	r5, r2
        GPIOx->OTYPER = temp;
 800211a:	607d      	str	r5, [r7, #4]
      temp = GPIOx->PUPDR;
 800211c:	68fb      	ldr	r3, [r7, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800211e:	ea08 0803 	and.w	r8, r8, r3
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002122:	68b3      	ldr	r3, [r6, #8]
 8002124:	fa03 f309 	lsl.w	r3, r3, r9
 8002128:	ea43 0308 	orr.w	r3, r3, r8
      GPIOx->PUPDR = temp;
 800212c:	60fb      	str	r3, [r7, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800212e:	6873      	ldr	r3, [r6, #4]
 8002130:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002134:	d0b7      	beq.n	80020a6 <HAL_GPIO_Init+0x142>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002136:	4b20      	ldr	r3, [pc, #128]	; (80021b8 <HAL_GPIO_Init+0x254>)
 8002138:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800213a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800213e:	645a      	str	r2, [r3, #68]	; 0x44
 8002140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002142:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002146:	9301      	str	r3, [sp, #4]
 8002148:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 800214a:	f024 0303 	bic.w	r3, r4, #3
 800214e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002152:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8002156:	6898      	ldr	r0, [r3, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002158:	f004 0203 	and.w	r2, r4, #3
 800215c:	0091      	lsls	r1, r2, #2
 800215e:	220f      	movs	r2, #15
 8002160:	408a      	lsls	r2, r1
 8002162:	ea20 0002 	bic.w	r0, r0, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002166:	4a0f      	ldr	r2, [pc, #60]	; (80021a4 <HAL_GPIO_Init+0x240>)
 8002168:	4297      	cmp	r7, r2
 800216a:	f43f af6d 	beq.w	8002048 <HAL_GPIO_Init+0xe4>
 800216e:	455f      	cmp	r7, fp
 8002170:	d00e      	beq.n	8002190 <HAL_GPIO_Init+0x22c>
 8002172:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002176:	4297      	cmp	r7, r2
 8002178:	d00c      	beq.n	8002194 <HAL_GPIO_Init+0x230>
 800217a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800217e:	4297      	cmp	r7, r2
 8002180:	d00a      	beq.n	8002198 <HAL_GPIO_Init+0x234>
 8002182:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002186:	4297      	cmp	r7, r2
 8002188:	bf0c      	ite	eq
 800218a:	2204      	moveq	r2, #4
 800218c:	2205      	movne	r2, #5
 800218e:	e75c      	b.n	800204a <HAL_GPIO_Init+0xe6>
 8002190:	2201      	movs	r2, #1
 8002192:	e75a      	b.n	800204a <HAL_GPIO_Init+0xe6>
 8002194:	2202      	movs	r2, #2
 8002196:	e758      	b.n	800204a <HAL_GPIO_Init+0xe6>
 8002198:	2203      	movs	r2, #3
 800219a:	e756      	b.n	800204a <HAL_GPIO_Init+0xe6>
      }
    }
  }
}
 800219c:	b003      	add	sp, #12
 800219e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021a2:	bf00      	nop
 80021a4:	40020000 	.word	0x40020000
 80021a8:	080041c0 	.word	0x080041c0
 80021ac:	10110000 	.word	0x10110000
 80021b0:	10220000 	.word	0x10220000
 80021b4:	40013c00 	.word	0x40013c00
 80021b8:	40023800 	.word	0x40023800
 80021bc:	40020400 	.word	0x40020400

080021c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021c0:	b570      	push	{r4, r5, r6, lr}
 80021c2:	4605      	mov	r5, r0
 80021c4:	4614      	mov	r4, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80021c6:	460e      	mov	r6, r1
 80021c8:	b129      	cbz	r1, 80021d6 <HAL_GPIO_WritePin+0x16>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80021ca:	2c01      	cmp	r4, #1
 80021cc:	d809      	bhi.n	80021e2 <HAL_GPIO_WritePin+0x22>

  if(PinState != GPIO_PIN_RESET)
 80021ce:	b96c      	cbnz	r4, 80021ec <HAL_GPIO_WritePin+0x2c>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80021d0:	0436      	lsls	r6, r6, #16
 80021d2:	61ae      	str	r6, [r5, #24]
  }
}
 80021d4:	e00b      	b.n	80021ee <HAL_GPIO_WritePin+0x2e>
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80021d6:	f240 11b1 	movw	r1, #433	; 0x1b1
 80021da:	4805      	ldr	r0, [pc, #20]	; (80021f0 <HAL_GPIO_WritePin+0x30>)
 80021dc:	f001 fc8c 	bl	8003af8 <assert_failed>
 80021e0:	e7f3      	b.n	80021ca <HAL_GPIO_WritePin+0xa>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80021e2:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
 80021e6:	4802      	ldr	r0, [pc, #8]	; (80021f0 <HAL_GPIO_WritePin+0x30>)
 80021e8:	f001 fc86 	bl	8003af8 <assert_failed>
    GPIOx->BSRR = GPIO_Pin;
 80021ec:	61ae      	str	r6, [r5, #24]
}
 80021ee:	bd70      	pop	{r4, r5, r6, pc}
 80021f0:	080041c0 	.word	0x080041c0

080021f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021f4:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80021f6:	4b05      	ldr	r3, [pc, #20]	; (800220c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80021f8:	695b      	ldr	r3, [r3, #20]
 80021fa:	4203      	tst	r3, r0
 80021fc:	d100      	bne.n	8002200 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 80021fe:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002200:	4b02      	ldr	r3, [pc, #8]	; (800220c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8002202:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002204:	f001 fb1a 	bl	800383c <HAL_GPIO_EXTI_Callback>
}
 8002208:	e7f9      	b.n	80021fe <HAL_GPIO_EXTI_IRQHandler+0xa>
 800220a:	bf00      	nop
 800220c:	40013c00 	.word	0x40013c00

08002210 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002212:	b083      	sub	sp, #12
 8002214:	4604      	mov	r4, r0
 uint32_t tickstart = 0;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8002216:	6803      	ldr	r3, [r0, #0]
 8002218:	2b0f      	cmp	r3, #15
 800221a:	d84f      	bhi.n	80022bc <HAL_RCC_OscConfig+0xac>
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800221c:	6823      	ldr	r3, [r4, #0]
 800221e:	f013 0f01 	tst.w	r3, #1
 8002222:	d01e      	beq.n	8002262 <HAL_RCC_OscConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8002224:	6863      	ldr	r3, [r4, #4]
 8002226:	2b01      	cmp	r3, #1
 8002228:	d901      	bls.n	800222e <HAL_RCC_OscConfig+0x1e>
 800222a:	2b05      	cmp	r3, #5
 800222c:	d14c      	bne.n	80022c8 <HAL_RCC_OscConfig+0xb8>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800222e:	4ba6      	ldr	r3, [pc, #664]	; (80024c8 <HAL_RCC_OscConfig+0x2b8>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f003 030c 	and.w	r3, r3, #12
 8002236:	2b04      	cmp	r3, #4
 8002238:	d00a      	beq.n	8002250 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800223a:	4ba3      	ldr	r3, [pc, #652]	; (80024c8 <HAL_RCC_OscConfig+0x2b8>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002242:	2b08      	cmp	r3, #8
 8002244:	d146      	bne.n	80022d4 <HAL_RCC_OscConfig+0xc4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002246:	4ba0      	ldr	r3, [pc, #640]	; (80024c8 <HAL_RCC_OscConfig+0x2b8>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800224e:	d041      	beq.n	80022d4 <HAL_RCC_OscConfig+0xc4>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002250:	4b9d      	ldr	r3, [pc, #628]	; (80024c8 <HAL_RCC_OscConfig+0x2b8>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002258:	d003      	beq.n	8002262 <HAL_RCC_OscConfig+0x52>
 800225a:	6863      	ldr	r3, [r4, #4]
 800225c:	2b00      	cmp	r3, #0
 800225e:	f000 820d 	beq.w	800267c <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002262:	6823      	ldr	r3, [r4, #0]
 8002264:	f013 0f02 	tst.w	r3, #2
 8002268:	f000 8096 	beq.w	8002398 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800226c:	68e3      	ldr	r3, [r4, #12]
 800226e:	2b01      	cmp	r3, #1
 8002270:	d86b      	bhi.n	800234a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8002272:	6923      	ldr	r3, [r4, #16]
 8002274:	2b1f      	cmp	r3, #31
 8002276:	d86e      	bhi.n	8002356 <HAL_RCC_OscConfig+0x146>
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002278:	4b93      	ldr	r3, [pc, #588]	; (80024c8 <HAL_RCC_OscConfig+0x2b8>)
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f013 0f0c 	tst.w	r3, #12
 8002280:	d074      	beq.n	800236c <HAL_RCC_OscConfig+0x15c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002282:	4b91      	ldr	r3, [pc, #580]	; (80024c8 <HAL_RCC_OscConfig+0x2b8>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800228a:	2b08      	cmp	r3, #8
 800228c:	d069      	beq.n	8002362 <HAL_RCC_OscConfig+0x152>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800228e:	68e3      	ldr	r3, [r4, #12]
 8002290:	2b00      	cmp	r3, #0
 8002292:	f000 80ac 	beq.w	80023ee <HAL_RCC_OscConfig+0x1de>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002296:	4b8d      	ldr	r3, [pc, #564]	; (80024cc <HAL_RCC_OscConfig+0x2bc>)
 8002298:	2201      	movs	r2, #1
 800229a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800229c:	f7ff faa6 	bl	80017ec <HAL_GetTick>
 80022a0:	4605      	mov	r5, r0

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022a2:	4e89      	ldr	r6, [pc, #548]	; (80024c8 <HAL_RCC_OscConfig+0x2b8>)
 80022a4:	6833      	ldr	r3, [r6, #0]
 80022a6:	f013 0f02 	tst.w	r3, #2
 80022aa:	f040 8092 	bne.w	80023d2 <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022ae:	f7ff fa9d 	bl	80017ec <HAL_GetTick>
 80022b2:	1b40      	subs	r0, r0, r5
 80022b4:	2864      	cmp	r0, #100	; 0x64
 80022b6:	d9f5      	bls.n	80022a4 <HAL_RCC_OscConfig+0x94>
          {
            return HAL_TIMEOUT;
 80022b8:	2003      	movs	r0, #3
 80022ba:	e1e4      	b.n	8002686 <HAL_RCC_OscConfig+0x476>
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80022bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022c0:	4883      	ldr	r0, [pc, #524]	; (80024d0 <HAL_RCC_OscConfig+0x2c0>)
 80022c2:	f001 fc19 	bl	8003af8 <assert_failed>
 80022c6:	e7a9      	b.n	800221c <HAL_RCC_OscConfig+0xc>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80022c8:	f240 1105 	movw	r1, #261	; 0x105
 80022cc:	4880      	ldr	r0, [pc, #512]	; (80024d0 <HAL_RCC_OscConfig+0x2c0>)
 80022ce:	f001 fc13 	bl	8003af8 <assert_failed>
 80022d2:	e7ac      	b.n	800222e <HAL_RCC_OscConfig+0x1e>
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 80022d4:	4b7c      	ldr	r3, [pc, #496]	; (80024c8 <HAL_RCC_OscConfig+0x2b8>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	709a      	strb	r2, [r3, #2]
      tickstart = HAL_GetTick();
 80022da:	f7ff fa87 	bl	80017ec <HAL_GetTick>
 80022de:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022e0:	4e79      	ldr	r6, [pc, #484]	; (80024c8 <HAL_RCC_OscConfig+0x2b8>)
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022e2:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022e6:	6833      	ldr	r3, [r6, #0]
 80022e8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80022ec:	d006      	beq.n	80022fc <HAL_RCC_OscConfig+0xec>
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022ee:	f7ff fa7d 	bl	80017ec <HAL_GetTick>
 80022f2:	1b40      	subs	r0, r0, r5
 80022f4:	42b8      	cmp	r0, r7
 80022f6:	d9f6      	bls.n	80022e6 <HAL_RCC_OscConfig+0xd6>
          return HAL_TIMEOUT;
 80022f8:	2003      	movs	r0, #3
 80022fa:	e1c4      	b.n	8002686 <HAL_RCC_OscConfig+0x476>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022fc:	7922      	ldrb	r2, [r4, #4]
 80022fe:	4b72      	ldr	r3, [pc, #456]	; (80024c8 <HAL_RCC_OscConfig+0x2b8>)
 8002300:	709a      	strb	r2, [r3, #2]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002302:	6863      	ldr	r3, [r4, #4]
 8002304:	b183      	cbz	r3, 8002328 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 8002306:	f7ff fa71 	bl	80017ec <HAL_GetTick>
 800230a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800230c:	4e6e      	ldr	r6, [pc, #440]	; (80024c8 <HAL_RCC_OscConfig+0x2b8>)
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800230e:	f241 3788 	movw	r7, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002312:	6833      	ldr	r3, [r6, #0]
 8002314:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002318:	d1a3      	bne.n	8002262 <HAL_RCC_OscConfig+0x52>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800231a:	f7ff fa67 	bl	80017ec <HAL_GetTick>
 800231e:	1b40      	subs	r0, r0, r5
 8002320:	42b8      	cmp	r0, r7
 8002322:	d9f6      	bls.n	8002312 <HAL_RCC_OscConfig+0x102>
            return HAL_TIMEOUT;
 8002324:	2003      	movs	r0, #3
 8002326:	e1ae      	b.n	8002686 <HAL_RCC_OscConfig+0x476>
        tickstart = HAL_GetTick();
 8002328:	f7ff fa60 	bl	80017ec <HAL_GetTick>
 800232c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800232e:	4e66      	ldr	r6, [pc, #408]	; (80024c8 <HAL_RCC_OscConfig+0x2b8>)
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002330:	f241 3788 	movw	r7, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002334:	6833      	ldr	r3, [r6, #0]
 8002336:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800233a:	d092      	beq.n	8002262 <HAL_RCC_OscConfig+0x52>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800233c:	f7ff fa56 	bl	80017ec <HAL_GetTick>
 8002340:	1b40      	subs	r0, r0, r5
 8002342:	42b8      	cmp	r0, r7
 8002344:	d9f6      	bls.n	8002334 <HAL_RCC_OscConfig+0x124>
            return HAL_TIMEOUT;
 8002346:	2003      	movs	r0, #3
 8002348:	e19d      	b.n	8002686 <HAL_RCC_OscConfig+0x476>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800234a:	f44f 71a3 	mov.w	r1, #326	; 0x146
 800234e:	4860      	ldr	r0, [pc, #384]	; (80024d0 <HAL_RCC_OscConfig+0x2c0>)
 8002350:	f001 fbd2 	bl	8003af8 <assert_failed>
 8002354:	e78d      	b.n	8002272 <HAL_RCC_OscConfig+0x62>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8002356:	f240 1147 	movw	r1, #327	; 0x147
 800235a:	485d      	ldr	r0, [pc, #372]	; (80024d0 <HAL_RCC_OscConfig+0x2c0>)
 800235c:	f001 fbcc 	bl	8003af8 <assert_failed>
 8002360:	e78a      	b.n	8002278 <HAL_RCC_OscConfig+0x68>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002362:	4b59      	ldr	r3, [pc, #356]	; (80024c8 <HAL_RCC_OscConfig+0x2b8>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800236a:	d190      	bne.n	800228e <HAL_RCC_OscConfig+0x7e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800236c:	4b56      	ldr	r3, [pc, #344]	; (80024c8 <HAL_RCC_OscConfig+0x2b8>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f013 0f02 	tst.w	r3, #2
 8002374:	d003      	beq.n	800237e <HAL_RCC_OscConfig+0x16e>
 8002376:	68e3      	ldr	r3, [r4, #12]
 8002378:	2b01      	cmp	r3, #1
 800237a:	f040 8181 	bne.w	8002680 <HAL_RCC_OscConfig+0x470>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800237e:	4852      	ldr	r0, [pc, #328]	; (80024c8 <HAL_RCC_OscConfig+0x2b8>)
 8002380:	6801      	ldr	r1, [r0, #0]
 8002382:	23f8      	movs	r3, #248	; 0xf8
 8002384:	fa93 f3a3 	rbit	r3, r3
 8002388:	fab3 f283 	clz	r2, r3
 800238c:	6923      	ldr	r3, [r4, #16]
 800238e:	4093      	lsls	r3, r2
 8002390:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8002394:	4313      	orrs	r3, r2
 8002396:	6003      	str	r3, [r0, #0]
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002398:	6823      	ldr	r3, [r4, #0]
 800239a:	f013 0f08 	tst.w	r3, #8
 800239e:	d051      	beq.n	8002444 <HAL_RCC_OscConfig+0x234>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80023a0:	6963      	ldr	r3, [r4, #20]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d835      	bhi.n	8002412 <HAL_RCC_OscConfig+0x202>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023a6:	6963      	ldr	r3, [r4, #20]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d038      	beq.n	800241e <HAL_RCC_OscConfig+0x20e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023ac:	4b47      	ldr	r3, [pc, #284]	; (80024cc <HAL_RCC_OscConfig+0x2bc>)
 80023ae:	2201      	movs	r2, #1
 80023b0:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023b4:	f7ff fa1a 	bl	80017ec <HAL_GetTick>
 80023b8:	4605      	mov	r5, r0
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ba:	4e43      	ldr	r6, [pc, #268]	; (80024c8 <HAL_RCC_OscConfig+0x2b8>)
 80023bc:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80023be:	f013 0f02 	tst.w	r3, #2
 80023c2:	d13f      	bne.n	8002444 <HAL_RCC_OscConfig+0x234>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023c4:	f7ff fa12 	bl	80017ec <HAL_GetTick>
 80023c8:	1b40      	subs	r0, r0, r5
 80023ca:	2864      	cmp	r0, #100	; 0x64
 80023cc:	d9f6      	bls.n	80023bc <HAL_RCC_OscConfig+0x1ac>
        {
          return HAL_TIMEOUT;
 80023ce:	2003      	movs	r0, #3
 80023d0:	e159      	b.n	8002686 <HAL_RCC_OscConfig+0x476>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023d2:	483d      	ldr	r0, [pc, #244]	; (80024c8 <HAL_RCC_OscConfig+0x2b8>)
 80023d4:	6801      	ldr	r1, [r0, #0]
 80023d6:	23f8      	movs	r3, #248	; 0xf8
 80023d8:	fa93 f3a3 	rbit	r3, r3
 80023dc:	fab3 f283 	clz	r2, r3
 80023e0:	6923      	ldr	r3, [r4, #16]
 80023e2:	4093      	lsls	r3, r2
 80023e4:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 80023e8:	4313      	orrs	r3, r2
 80023ea:	6003      	str	r3, [r0, #0]
 80023ec:	e7d4      	b.n	8002398 <HAL_RCC_OscConfig+0x188>
        __HAL_RCC_HSI_DISABLE();
 80023ee:	4b37      	ldr	r3, [pc, #220]	; (80024cc <HAL_RCC_OscConfig+0x2bc>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80023f4:	f7ff f9fa 	bl	80017ec <HAL_GetTick>
 80023f8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023fa:	4e33      	ldr	r6, [pc, #204]	; (80024c8 <HAL_RCC_OscConfig+0x2b8>)
 80023fc:	6833      	ldr	r3, [r6, #0]
 80023fe:	f013 0f02 	tst.w	r3, #2
 8002402:	d0c9      	beq.n	8002398 <HAL_RCC_OscConfig+0x188>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002404:	f7ff f9f2 	bl	80017ec <HAL_GetTick>
 8002408:	1b40      	subs	r0, r0, r5
 800240a:	2864      	cmp	r0, #100	; 0x64
 800240c:	d9f6      	bls.n	80023fc <HAL_RCC_OscConfig+0x1ec>
            return HAL_TIMEOUT;
 800240e:	2003      	movs	r0, #3
 8002410:	e139      	b.n	8002686 <HAL_RCC_OscConfig+0x476>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8002412:	f240 1187 	movw	r1, #391	; 0x187
 8002416:	482e      	ldr	r0, [pc, #184]	; (80024d0 <HAL_RCC_OscConfig+0x2c0>)
 8002418:	f001 fb6e 	bl	8003af8 <assert_failed>
 800241c:	e7c3      	b.n	80023a6 <HAL_RCC_OscConfig+0x196>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800241e:	4b2b      	ldr	r3, [pc, #172]	; (80024cc <HAL_RCC_OscConfig+0x2bc>)
 8002420:	2200      	movs	r2, #0
 8002422:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002426:	f7ff f9e1 	bl	80017ec <HAL_GetTick>
 800242a:	4605      	mov	r5, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800242c:	4e26      	ldr	r6, [pc, #152]	; (80024c8 <HAL_RCC_OscConfig+0x2b8>)
 800242e:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8002430:	f013 0f02 	tst.w	r3, #2
 8002434:	d006      	beq.n	8002444 <HAL_RCC_OscConfig+0x234>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002436:	f7ff f9d9 	bl	80017ec <HAL_GetTick>
 800243a:	1b40      	subs	r0, r0, r5
 800243c:	2864      	cmp	r0, #100	; 0x64
 800243e:	d9f6      	bls.n	800242e <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8002440:	2003      	movs	r0, #3
 8002442:	e120      	b.n	8002686 <HAL_RCC_OscConfig+0x476>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002444:	6823      	ldr	r3, [r4, #0]
 8002446:	f013 0f04 	tst.w	r3, #4
 800244a:	d06d      	beq.n	8002528 <HAL_RCC_OscConfig+0x318>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800244c:	68a3      	ldr	r3, [r4, #8]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x246>
 8002452:	2b05      	cmp	r3, #5
 8002454:	d11d      	bne.n	8002492 <HAL_RCC_OscConfig+0x282>
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002456:	4b1c      	ldr	r3, [pc, #112]	; (80024c8 <HAL_RCC_OscConfig+0x2b8>)
 8002458:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800245a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800245e:	641a      	str	r2, [r3, #64]	; 0x40
 8002460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002466:	9301      	str	r3, [sp, #4]
 8002468:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800246a:	4a1a      	ldr	r2, [pc, #104]	; (80024d4 <HAL_RCC_OscConfig+0x2c4>)
 800246c:	6813      	ldr	r3, [r2, #0]
 800246e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002472:	6013      	str	r3, [r2, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002474:	f7ff f9ba 	bl	80017ec <HAL_GetTick>
 8002478:	4605      	mov	r5, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800247a:	4e16      	ldr	r6, [pc, #88]	; (80024d4 <HAL_RCC_OscConfig+0x2c4>)
 800247c:	6833      	ldr	r3, [r6, #0]
 800247e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002482:	d10c      	bne.n	800249e <HAL_RCC_OscConfig+0x28e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002484:	f7ff f9b2 	bl	80017ec <HAL_GetTick>
 8002488:	1b40      	subs	r0, r0, r5
 800248a:	2864      	cmp	r0, #100	; 0x64
 800248c:	d9f6      	bls.n	800247c <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_TIMEOUT;
 800248e:	2003      	movs	r0, #3
 8002490:	e0f9      	b.n	8002686 <HAL_RCC_OscConfig+0x476>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8002492:	f240 11b1 	movw	r1, #433	; 0x1b1
 8002496:	480e      	ldr	r0, [pc, #56]	; (80024d0 <HAL_RCC_OscConfig+0x2c0>)
 8002498:	f001 fb2e 	bl	8003af8 <assert_failed>
 800249c:	e7db      	b.n	8002456 <HAL_RCC_OscConfig+0x246>
      }      
    }
    
    /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 800249e:	4b0a      	ldr	r3, [pc, #40]	; (80024c8 <HAL_RCC_OscConfig+0x2b8>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024a6:	f7ff f9a1 	bl	80017ec <HAL_GetTick>
 80024aa:	4605      	mov	r5, r0
    
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024ac:	4e06      	ldr	r6, [pc, #24]	; (80024c8 <HAL_RCC_OscConfig+0x2b8>)
    {
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024ae:	f241 3788 	movw	r7, #5000	; 0x1388
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024b2:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80024b4:	f013 0f02 	tst.w	r3, #2
 80024b8:	d00e      	beq.n	80024d8 <HAL_RCC_OscConfig+0x2c8>
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024ba:	f7ff f997 	bl	80017ec <HAL_GetTick>
 80024be:	1b40      	subs	r0, r0, r5
 80024c0:	42b8      	cmp	r0, r7
 80024c2:	d9f6      	bls.n	80024b2 <HAL_RCC_OscConfig+0x2a2>
      {
        return HAL_TIMEOUT;
 80024c4:	2003      	movs	r0, #3
 80024c6:	e0de      	b.n	8002686 <HAL_RCC_OscConfig+0x476>
 80024c8:	40023800 	.word	0x40023800
 80024cc:	42470000 	.word	0x42470000
 80024d0:	08004248 	.word	0x08004248
 80024d4:	40007000 	.word	0x40007000
      }    
    } 
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024d8:	7a22      	ldrb	r2, [r4, #8]
 80024da:	4b6d      	ldr	r3, [pc, #436]	; (8002690 <HAL_RCC_OscConfig+0x480>)
 80024dc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024e0:	68a3      	ldr	r3, [r4, #8]
 80024e2:	b183      	cbz	r3, 8002506 <HAL_RCC_OscConfig+0x2f6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024e4:	f7ff f982 	bl	80017ec <HAL_GetTick>
 80024e8:	4605      	mov	r5, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ea:	4e69      	ldr	r6, [pc, #420]	; (8002690 <HAL_RCC_OscConfig+0x480>)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024ec:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024f0:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80024f2:	f013 0f02 	tst.w	r3, #2
 80024f6:	d117      	bne.n	8002528 <HAL_RCC_OscConfig+0x318>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024f8:	f7ff f978 	bl	80017ec <HAL_GetTick>
 80024fc:	1b40      	subs	r0, r0, r5
 80024fe:	42b8      	cmp	r0, r7
 8002500:	d9f6      	bls.n	80024f0 <HAL_RCC_OscConfig+0x2e0>
        {
          return HAL_TIMEOUT;
 8002502:	2003      	movs	r0, #3
 8002504:	e0bf      	b.n	8002686 <HAL_RCC_OscConfig+0x476>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002506:	f7ff f971 	bl	80017ec <HAL_GetTick>
 800250a:	4605      	mov	r5, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800250c:	4e60      	ldr	r6, [pc, #384]	; (8002690 <HAL_RCC_OscConfig+0x480>)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800250e:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002512:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8002514:	f013 0f02 	tst.w	r3, #2
 8002518:	d006      	beq.n	8002528 <HAL_RCC_OscConfig+0x318>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800251a:	f7ff f967 	bl	80017ec <HAL_GetTick>
 800251e:	1b40      	subs	r0, r0, r5
 8002520:	42b8      	cmp	r0, r7
 8002522:	d9f6      	bls.n	8002512 <HAL_RCC_OscConfig+0x302>
        {
          return HAL_TIMEOUT;
 8002524:	2003      	movs	r0, #3
 8002526:	e0ae      	b.n	8002686 <HAL_RCC_OscConfig+0x476>
      }
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8002528:	69a3      	ldr	r3, [r4, #24]
 800252a:	2b02      	cmp	r3, #2
 800252c:	d83d      	bhi.n	80025aa <HAL_RCC_OscConfig+0x39a>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800252e:	69a3      	ldr	r3, [r4, #24]
 8002530:	2b00      	cmp	r3, #0
 8002532:	f000 80a7 	beq.w	8002684 <HAL_RCC_OscConfig+0x474>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002536:	4a56      	ldr	r2, [pc, #344]	; (8002690 <HAL_RCC_OscConfig+0x480>)
 8002538:	6892      	ldr	r2, [r2, #8]
 800253a:	f002 020c 	and.w	r2, r2, #12
 800253e:	2a08      	cmp	r2, #8
 8002540:	f000 80a3 	beq.w	800268a <HAL_RCC_OscConfig+0x47a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002544:	2b02      	cmp	r3, #2
 8002546:	f040 8085 	bne.w	8002654 <HAL_RCC_OscConfig+0x444>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800254a:	69e3      	ldr	r3, [r4, #28]
 800254c:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 8002550:	d004      	beq.n	800255c <HAL_RCC_OscConfig+0x34c>
 8002552:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 8002556:	484f      	ldr	r0, [pc, #316]	; (8002694 <HAL_RCC_OscConfig+0x484>)
 8002558:	f001 face 	bl	8003af8 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800255c:	6a23      	ldr	r3, [r4, #32]
 800255e:	2b3f      	cmp	r3, #63	; 0x3f
 8002560:	d829      	bhi.n	80025b6 <HAL_RCC_OscConfig+0x3a6>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8002562:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002564:	3bc0      	subs	r3, #192	; 0xc0
 8002566:	2bf0      	cmp	r3, #240	; 0xf0
 8002568:	d82b      	bhi.n	80025c2 <HAL_RCC_OscConfig+0x3b2>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800256a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800256c:	2b08      	cmp	r3, #8
 800256e:	d82e      	bhi.n	80025ce <HAL_RCC_OscConfig+0x3be>
 8002570:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8002574:	fa22 f303 	lsr.w	r3, r2, r3
 8002578:	f013 0f01 	tst.w	r3, #1
 800257c:	d027      	beq.n	80025ce <HAL_RCC_OscConfig+0x3be>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800257e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002580:	3b04      	subs	r3, #4
 8002582:	2b0b      	cmp	r3, #11
 8002584:	d829      	bhi.n	80025da <HAL_RCC_OscConfig+0x3ca>
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002586:	4b44      	ldr	r3, [pc, #272]	; (8002698 <HAL_RCC_OscConfig+0x488>)
 8002588:	2200      	movs	r2, #0
 800258a:	661a      	str	r2, [r3, #96]	; 0x60
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258c:	f7ff f92e 	bl	80017ec <HAL_GetTick>
 8002590:	4605      	mov	r5, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002592:	4e3f      	ldr	r6, [pc, #252]	; (8002690 <HAL_RCC_OscConfig+0x480>)
 8002594:	6833      	ldr	r3, [r6, #0]
 8002596:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800259a:	d024      	beq.n	80025e6 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800259c:	f7ff f926 	bl	80017ec <HAL_GetTick>
 80025a0:	1b40      	subs	r0, r0, r5
 80025a2:	2864      	cmp	r0, #100	; 0x64
 80025a4:	d9f6      	bls.n	8002594 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80025a6:	2003      	movs	r0, #3
 80025a8:	e06d      	b.n	8002686 <HAL_RCC_OscConfig+0x476>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80025aa:	f240 11f5 	movw	r1, #501	; 0x1f5
 80025ae:	4839      	ldr	r0, [pc, #228]	; (8002694 <HAL_RCC_OscConfig+0x484>)
 80025b0:	f001 faa2 	bl	8003af8 <assert_failed>
 80025b4:	e7bb      	b.n	800252e <HAL_RCC_OscConfig+0x31e>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80025b6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80025ba:	4836      	ldr	r0, [pc, #216]	; (8002694 <HAL_RCC_OscConfig+0x484>)
 80025bc:	f001 fa9c 	bl	8003af8 <assert_failed>
 80025c0:	e7cf      	b.n	8002562 <HAL_RCC_OscConfig+0x352>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80025c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025c6:	4833      	ldr	r0, [pc, #204]	; (8002694 <HAL_RCC_OscConfig+0x484>)
 80025c8:	f001 fa96 	bl	8003af8 <assert_failed>
 80025cc:	e7cd      	b.n	800256a <HAL_RCC_OscConfig+0x35a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80025ce:	f240 2101 	movw	r1, #513	; 0x201
 80025d2:	4830      	ldr	r0, [pc, #192]	; (8002694 <HAL_RCC_OscConfig+0x484>)
 80025d4:	f001 fa90 	bl	8003af8 <assert_failed>
 80025d8:	e7d1      	b.n	800257e <HAL_RCC_OscConfig+0x36e>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80025da:	f240 2102 	movw	r1, #514	; 0x202
 80025de:	482d      	ldr	r0, [pc, #180]	; (8002694 <HAL_RCC_OscConfig+0x484>)
 80025e0:	f001 fa8a 	bl	8003af8 <assert_failed>
 80025e4:	e7cf      	b.n	8002586 <HAL_RCC_OscConfig+0x376>
 80025e6:	f647 75c0 	movw	r5, #32704	; 0x7fc0
 80025ea:	fa95 f5a5 	rbit	r5, r5
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025ee:	fab5 f585 	clz	r5, r5
 80025f2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80025f6:	fa92 f2a2 	rbit	r2, r2
 80025fa:	fab2 f082 	clz	r0, r2
 80025fe:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8002602:	fa91 f1a1 	rbit	r1, r1
 8002606:	fab1 f181 	clz	r1, r1
 800260a:	69e3      	ldr	r3, [r4, #28]
 800260c:	6a22      	ldr	r2, [r4, #32]
 800260e:	4313      	orrs	r3, r2
 8002610:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002612:	40aa      	lsls	r2, r5
 8002614:	4313      	orrs	r3, r2
 8002616:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002618:	0852      	lsrs	r2, r2, #1
 800261a:	3a01      	subs	r2, #1
 800261c:	4082      	lsls	r2, r0
 800261e:	4313      	orrs	r3, r2
 8002620:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002622:	fa02 f101 	lsl.w	r1, r2, r1
 8002626:	430b      	orrs	r3, r1
 8002628:	4a19      	ldr	r2, [pc, #100]	; (8002690 <HAL_RCC_OscConfig+0x480>)
 800262a:	6053      	str	r3, [r2, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1) -1) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800262c:	4b1a      	ldr	r3, [pc, #104]	; (8002698 <HAL_RCC_OscConfig+0x488>)
 800262e:	2201      	movs	r2, #1
 8002630:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002632:	f7ff f8db 	bl	80017ec <HAL_GetTick>
 8002636:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002638:	4d15      	ldr	r5, [pc, #84]	; (8002690 <HAL_RCC_OscConfig+0x480>)
 800263a:	682b      	ldr	r3, [r5, #0]
 800263c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002640:	d106      	bne.n	8002650 <HAL_RCC_OscConfig+0x440>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002642:	f7ff f8d3 	bl	80017ec <HAL_GetTick>
 8002646:	1b00      	subs	r0, r0, r4
 8002648:	2864      	cmp	r0, #100	; 0x64
 800264a:	d9f6      	bls.n	800263a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800264c:	2003      	movs	r0, #3
 800264e:	e01a      	b.n	8002686 <HAL_RCC_OscConfig+0x476>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8002650:	2000      	movs	r0, #0
 8002652:	e018      	b.n	8002686 <HAL_RCC_OscConfig+0x476>
        __HAL_RCC_PLL_DISABLE();
 8002654:	4b10      	ldr	r3, [pc, #64]	; (8002698 <HAL_RCC_OscConfig+0x488>)
 8002656:	2200      	movs	r2, #0
 8002658:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800265a:	f7ff f8c7 	bl	80017ec <HAL_GetTick>
 800265e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002660:	4d0b      	ldr	r5, [pc, #44]	; (8002690 <HAL_RCC_OscConfig+0x480>)
 8002662:	682b      	ldr	r3, [r5, #0]
 8002664:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002668:	d006      	beq.n	8002678 <HAL_RCC_OscConfig+0x468>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800266a:	f7ff f8bf 	bl	80017ec <HAL_GetTick>
 800266e:	1b00      	subs	r0, r0, r4
 8002670:	2864      	cmp	r0, #100	; 0x64
 8002672:	d9f6      	bls.n	8002662 <HAL_RCC_OscConfig+0x452>
            return HAL_TIMEOUT;
 8002674:	2003      	movs	r0, #3
 8002676:	e006      	b.n	8002686 <HAL_RCC_OscConfig+0x476>
  return HAL_OK;
 8002678:	2000      	movs	r0, #0
 800267a:	e004      	b.n	8002686 <HAL_RCC_OscConfig+0x476>
        return HAL_ERROR;
 800267c:	2001      	movs	r0, #1
 800267e:	e002      	b.n	8002686 <HAL_RCC_OscConfig+0x476>
        return HAL_ERROR;
 8002680:	2001      	movs	r0, #1
 8002682:	e000      	b.n	8002686 <HAL_RCC_OscConfig+0x476>
  return HAL_OK;
 8002684:	2000      	movs	r0, #0
}
 8002686:	b003      	add	sp, #12
 8002688:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_ERROR;
 800268a:	2001      	movs	r0, #1
 800268c:	e7fb      	b.n	8002686 <HAL_RCC_OscConfig+0x476>
 800268e:	bf00      	nop
 8002690:	40023800 	.word	0x40023800
 8002694:	08004248 	.word	0x08004248
 8002698:	42470000 	.word	0x42470000

0800269c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800269c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026a0:	4604      	mov	r4, r0
 80026a2:	460d      	mov	r5, r1
  uint32_t tickstart = 0;   
 
  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80026a4:	6803      	ldr	r3, [r0, #0]
 80026a6:	3b01      	subs	r3, #1
 80026a8:	2b0e      	cmp	r3, #14
 80026aa:	d861      	bhi.n	8002770 <HAL_RCC_ClockConfig+0xd4>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80026ac:	2d07      	cmp	r5, #7
 80026ae:	d865      	bhi.n	800277c <HAL_RCC_ClockConfig+0xe0>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80026b0:	4ba0      	ldr	r3, [pc, #640]	; (8002934 <HAL_RCC_ClockConfig+0x298>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 030f 	and.w	r3, r3, #15
 80026b8:	42ab      	cmp	r3, r5
 80026ba:	f080 80aa 	bcs.w	8002812 <HAL_RCC_ClockConfig+0x176>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026be:	b2ea      	uxtb	r2, r5
 80026c0:	4b9c      	ldr	r3, [pc, #624]	; (8002934 <HAL_RCC_ClockConfig+0x298>)
 80026c2:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 030f 	and.w	r3, r3, #15
 80026ca:	42ab      	cmp	r3, r5
 80026cc:	f040 817f 	bne.w	80029ce <HAL_RCC_ClockConfig+0x332>
    {
      return HAL_ERROR;
    }

    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026d0:	6823      	ldr	r3, [r4, #0]
 80026d2:	f013 0f02 	tst.w	r3, #2
 80026d6:	d018      	beq.n	800270a <HAL_RCC_ClockConfig+0x6e>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80026d8:	68a3      	ldr	r3, [r4, #8]
 80026da:	f033 0280 	bics.w	r2, r3, #128	; 0x80
 80026de:	d00d      	beq.n	80026fc <HAL_RCC_ClockConfig+0x60>
 80026e0:	f023 0220 	bic.w	r2, r3, #32
 80026e4:	2a90      	cmp	r2, #144	; 0x90
 80026e6:	d009      	beq.n	80026fc <HAL_RCC_ClockConfig+0x60>
 80026e8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80026ec:	2aa0      	cmp	r2, #160	; 0xa0
 80026ee:	d005      	beq.n	80026fc <HAL_RCC_ClockConfig+0x60>
 80026f0:	f023 0210 	bic.w	r2, r3, #16
 80026f4:	2ac0      	cmp	r2, #192	; 0xc0
 80026f6:	d001      	beq.n	80026fc <HAL_RCC_ClockConfig+0x60>
 80026f8:	2bf0      	cmp	r3, #240	; 0xf0
 80026fa:	d145      	bne.n	8002788 <HAL_RCC_ClockConfig+0xec>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026fc:	4a8e      	ldr	r2, [pc, #568]	; (8002938 <HAL_RCC_ClockConfig+0x29c>)
 80026fe:	6893      	ldr	r3, [r2, #8]
 8002700:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002704:	68a1      	ldr	r1, [r4, #8]
 8002706:	430b      	orrs	r3, r1
 8002708:	6093      	str	r3, [r2, #8]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/ 
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800270a:	6823      	ldr	r3, [r4, #0]
 800270c:	f013 0f01 	tst.w	r3, #1
 8002710:	f000 811e 	beq.w	8002950 <HAL_RCC_ClockConfig+0x2b4>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8002714:	6863      	ldr	r3, [r4, #4]
 8002716:	2b03      	cmp	r3, #3
 8002718:	d83c      	bhi.n	8002794 <HAL_RCC_ClockConfig+0xf8>
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800271a:	6862      	ldr	r2, [r4, #4]
 800271c:	2a01      	cmp	r2, #1
 800271e:	d03f      	beq.n	80027a0 <HAL_RCC_ClockConfig+0x104>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8002720:	1e93      	subs	r3, r2, #2
 8002722:	2b01      	cmp	r3, #1
 8002724:	d943      	bls.n	80027ae <HAL_RCC_ClockConfig+0x112>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002726:	4b84      	ldr	r3, [pc, #528]	; (8002938 <HAL_RCC_ClockConfig+0x29c>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f013 0f02 	tst.w	r3, #2
 800272e:	f000 8150 	beq.w	80029d2 <HAL_RCC_ClockConfig+0x336>
        {
          return HAL_ERROR;
        }
      }

      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002732:	4981      	ldr	r1, [pc, #516]	; (8002938 <HAL_RCC_ClockConfig+0x29c>)
 8002734:	688b      	ldr	r3, [r1, #8]
 8002736:	f023 0303 	bic.w	r3, r3, #3
 800273a:	4313      	orrs	r3, r2
 800273c:	608b      	str	r3, [r1, #8]
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800273e:	f7ff f855 	bl	80017ec <HAL_GetTick>
 8002742:	4605      	mov	r5, r0
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002744:	6863      	ldr	r3, [r4, #4]
 8002746:	2b01      	cmp	r3, #1
 8002748:	d038      	beq.n	80027bc <HAL_RCC_ClockConfig+0x120>
          {
            return HAL_TIMEOUT;
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800274a:	2b02      	cmp	r3, #2
 800274c:	d046      	beq.n	80027dc <HAL_RCC_ClockConfig+0x140>
          {
            return HAL_TIMEOUT;
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 800274e:	2b03      	cmp	r3, #3
 8002750:	d054      	beq.n	80027fc <HAL_RCC_ClockConfig+0x160>
          }
        }
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002752:	4e79      	ldr	r6, [pc, #484]	; (8002938 <HAL_RCC_ClockConfig+0x29c>)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002754:	f241 3788 	movw	r7, #5000	; 0x1388
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002758:	68b3      	ldr	r3, [r6, #8]
 800275a:	f013 0f0c 	tst.w	r3, #12
 800275e:	f000 80f7 	beq.w	8002950 <HAL_RCC_ClockConfig+0x2b4>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002762:	f7ff f843 	bl	80017ec <HAL_GetTick>
 8002766:	1b43      	subs	r3, r0, r5
 8002768:	42bb      	cmp	r3, r7
 800276a:	d9f5      	bls.n	8002758 <HAL_RCC_ClockConfig+0xbc>
          {
            return HAL_TIMEOUT;
 800276c:	2003      	movs	r0, #3
 800276e:	e12c      	b.n	80029ca <HAL_RCC_ClockConfig+0x32e>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8002770:	f44f 7118 	mov.w	r1, #608	; 0x260
 8002774:	4871      	ldr	r0, [pc, #452]	; (800293c <HAL_RCC_ClockConfig+0x2a0>)
 8002776:	f001 f9bf 	bl	8003af8 <assert_failed>
 800277a:	e797      	b.n	80026ac <HAL_RCC_ClockConfig+0x10>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800277c:	f240 2161 	movw	r1, #609	; 0x261
 8002780:	486e      	ldr	r0, [pc, #440]	; (800293c <HAL_RCC_ClockConfig+0x2a0>)
 8002782:	f001 f9b9 	bl	8003af8 <assert_failed>
 8002786:	e793      	b.n	80026b0 <HAL_RCC_ClockConfig+0x14>
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8002788:	f240 2177 	movw	r1, #631	; 0x277
 800278c:	486b      	ldr	r0, [pc, #428]	; (800293c <HAL_RCC_ClockConfig+0x2a0>)
 800278e:	f001 f9b3 	bl	8003af8 <assert_failed>
 8002792:	e7b3      	b.n	80026fc <HAL_RCC_ClockConfig+0x60>
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8002794:	f240 217e 	movw	r1, #638	; 0x27e
 8002798:	4868      	ldr	r0, [pc, #416]	; (800293c <HAL_RCC_ClockConfig+0x2a0>)
 800279a:	f001 f9ad 	bl	8003af8 <assert_failed>
 800279e:	e7bc      	b.n	800271a <HAL_RCC_ClockConfig+0x7e>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027a0:	4b65      	ldr	r3, [pc, #404]	; (8002938 <HAL_RCC_ClockConfig+0x29c>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80027a8:	d1c3      	bne.n	8002732 <HAL_RCC_ClockConfig+0x96>
          return HAL_ERROR;
 80027aa:	2001      	movs	r0, #1
 80027ac:	e10d      	b.n	80029ca <HAL_RCC_ClockConfig+0x32e>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ae:	4b62      	ldr	r3, [pc, #392]	; (8002938 <HAL_RCC_ClockConfig+0x29c>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80027b6:	d1bc      	bne.n	8002732 <HAL_RCC_ClockConfig+0x96>
          return HAL_ERROR;
 80027b8:	2001      	movs	r0, #1
 80027ba:	e106      	b.n	80029ca <HAL_RCC_ClockConfig+0x32e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80027bc:	4e5e      	ldr	r6, [pc, #376]	; (8002938 <HAL_RCC_ClockConfig+0x29c>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027be:	f241 3788 	movw	r7, #5000	; 0x1388
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80027c2:	68b3      	ldr	r3, [r6, #8]
 80027c4:	f003 030c 	and.w	r3, r3, #12
 80027c8:	2b04      	cmp	r3, #4
 80027ca:	f000 80c1 	beq.w	8002950 <HAL_RCC_ClockConfig+0x2b4>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027ce:	f7ff f80d 	bl	80017ec <HAL_GetTick>
 80027d2:	1b43      	subs	r3, r0, r5
 80027d4:	42bb      	cmp	r3, r7
 80027d6:	d9f4      	bls.n	80027c2 <HAL_RCC_ClockConfig+0x126>
            return HAL_TIMEOUT;
 80027d8:	2003      	movs	r0, #3
 80027da:	e0f6      	b.n	80029ca <HAL_RCC_ClockConfig+0x32e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027dc:	4e56      	ldr	r6, [pc, #344]	; (8002938 <HAL_RCC_ClockConfig+0x29c>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027de:	f241 3788 	movw	r7, #5000	; 0x1388
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027e2:	68b3      	ldr	r3, [r6, #8]
 80027e4:	f003 030c 	and.w	r3, r3, #12
 80027e8:	2b08      	cmp	r3, #8
 80027ea:	f000 80b1 	beq.w	8002950 <HAL_RCC_ClockConfig+0x2b4>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027ee:	f7fe fffd 	bl	80017ec <HAL_GetTick>
 80027f2:	1b40      	subs	r0, r0, r5
 80027f4:	42b8      	cmp	r0, r7
 80027f6:	d9f4      	bls.n	80027e2 <HAL_RCC_ClockConfig+0x146>
            return HAL_TIMEOUT;
 80027f8:	2003      	movs	r0, #3
 80027fa:	e0e6      	b.n	80029ca <HAL_RCC_ClockConfig+0x32e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 80027fc:	4e4e      	ldr	r6, [pc, #312]	; (8002938 <HAL_RCC_ClockConfig+0x29c>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027fe:	f241 3488 	movw	r4, #5000	; 0x1388
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8002802:	68b3      	ldr	r3, [r6, #8]
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002804:	f7fe fff2 	bl	80017ec <HAL_GetTick>
 8002808:	1b40      	subs	r0, r0, r5
 800280a:	42a0      	cmp	r0, r4
 800280c:	d9f9      	bls.n	8002802 <HAL_RCC_ClockConfig+0x166>
            return HAL_TIMEOUT;
 800280e:	2003      	movs	r0, #3
 8002810:	e0db      	b.n	80029ca <HAL_RCC_ClockConfig+0x32e>
  }
  /* Decreasing the CPU frequency */
  else
  {
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002812:	6823      	ldr	r3, [r4, #0]
 8002814:	f013 0f02 	tst.w	r3, #2
 8002818:	d018      	beq.n	800284c <HAL_RCC_ClockConfig+0x1b0>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800281a:	68a3      	ldr	r3, [r4, #8]
 800281c:	f033 0280 	bics.w	r2, r3, #128	; 0x80
 8002820:	d00d      	beq.n	800283e <HAL_RCC_ClockConfig+0x1a2>
 8002822:	f023 0220 	bic.w	r2, r3, #32
 8002826:	2a90      	cmp	r2, #144	; 0x90
 8002828:	d009      	beq.n	800283e <HAL_RCC_ClockConfig+0x1a2>
 800282a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800282e:	2aa0      	cmp	r2, #160	; 0xa0
 8002830:	d005      	beq.n	800283e <HAL_RCC_ClockConfig+0x1a2>
 8002832:	f023 0210 	bic.w	r2, r3, #16
 8002836:	2ac0      	cmp	r2, #192	; 0xc0
 8002838:	d001      	beq.n	800283e <HAL_RCC_ClockConfig+0x1a2>
 800283a:	2bf0      	cmp	r3, #240	; 0xf0
 800283c:	d137      	bne.n	80028ae <HAL_RCC_ClockConfig+0x212>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800283e:	4a3e      	ldr	r2, [pc, #248]	; (8002938 <HAL_RCC_ClockConfig+0x29c>)
 8002840:	6893      	ldr	r3, [r2, #8]
 8002842:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002846:	68a1      	ldr	r1, [r4, #8]
 8002848:	430b      	orrs	r3, r1
 800284a:	6093      	str	r3, [r2, #8]
    }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800284c:	6823      	ldr	r3, [r4, #0]
 800284e:	f013 0f01 	tst.w	r3, #1
 8002852:	d075      	beq.n	8002940 <HAL_RCC_ClockConfig+0x2a4>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8002854:	6863      	ldr	r3, [r4, #4]
 8002856:	2b03      	cmp	r3, #3
 8002858:	d82f      	bhi.n	80028ba <HAL_RCC_ClockConfig+0x21e>
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800285a:	6862      	ldr	r2, [r4, #4]
 800285c:	2a01      	cmp	r2, #1
 800285e:	d032      	beq.n	80028c6 <HAL_RCC_ClockConfig+0x22a>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) || 
 8002860:	1e93      	subs	r3, r2, #2
 8002862:	2b01      	cmp	r3, #1
 8002864:	d936      	bls.n	80028d4 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002866:	4b34      	ldr	r3, [pc, #208]	; (8002938 <HAL_RCC_ClockConfig+0x29c>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f013 0f02 	tst.w	r3, #2
 800286e:	f000 80b2 	beq.w	80029d6 <HAL_RCC_ClockConfig+0x33a>
        {
          return HAL_ERROR;
        }
      }
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002872:	4931      	ldr	r1, [pc, #196]	; (8002938 <HAL_RCC_ClockConfig+0x29c>)
 8002874:	688b      	ldr	r3, [r1, #8]
 8002876:	f023 0303 	bic.w	r3, r3, #3
 800287a:	4313      	orrs	r3, r2
 800287c:	608b      	str	r3, [r1, #8]
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800287e:	f7fe ffb5 	bl	80017ec <HAL_GetTick>
 8002882:	4606      	mov	r6, r0
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002884:	6863      	ldr	r3, [r4, #4]
 8002886:	2b01      	cmp	r3, #1
 8002888:	d02b      	beq.n	80028e2 <HAL_RCC_ClockConfig+0x246>
          {
            return HAL_TIMEOUT;
          } 
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800288a:	2b02      	cmp	r3, #2
 800288c:	d038      	beq.n	8002900 <HAL_RCC_ClockConfig+0x264>
          {
            return HAL_TIMEOUT;
          } 
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 800288e:	2b03      	cmp	r3, #3
 8002890:	d045      	beq.n	800291e <HAL_RCC_ClockConfig+0x282>
          } 
        }
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002892:	4f29      	ldr	r7, [pc, #164]	; (8002938 <HAL_RCC_ClockConfig+0x29c>)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002894:	f241 3888 	movw	r8, #5000	; 0x1388
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	f013 0f0c 	tst.w	r3, #12
 800289e:	d04f      	beq.n	8002940 <HAL_RCC_ClockConfig+0x2a4>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028a0:	f7fe ffa4 	bl	80017ec <HAL_GetTick>
 80028a4:	1b83      	subs	r3, r0, r6
 80028a6:	4543      	cmp	r3, r8
 80028a8:	d9f6      	bls.n	8002898 <HAL_RCC_ClockConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80028aa:	2003      	movs	r0, #3
 80028ac:	e08d      	b.n	80029ca <HAL_RCC_ClockConfig+0x32e>
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80028ae:	f240 21d1 	movw	r1, #721	; 0x2d1
 80028b2:	4822      	ldr	r0, [pc, #136]	; (800293c <HAL_RCC_ClockConfig+0x2a0>)
 80028b4:	f001 f920 	bl	8003af8 <assert_failed>
 80028b8:	e7c1      	b.n	800283e <HAL_RCC_ClockConfig+0x1a2>
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80028ba:	f44f 7136 	mov.w	r1, #728	; 0x2d8
 80028be:	481f      	ldr	r0, [pc, #124]	; (800293c <HAL_RCC_ClockConfig+0x2a0>)
 80028c0:	f001 f91a 	bl	8003af8 <assert_failed>
 80028c4:	e7c9      	b.n	800285a <HAL_RCC_ClockConfig+0x1be>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028c6:	4b1c      	ldr	r3, [pc, #112]	; (8002938 <HAL_RCC_ClockConfig+0x29c>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80028ce:	d1d0      	bne.n	8002872 <HAL_RCC_ClockConfig+0x1d6>
          return HAL_ERROR;
 80028d0:	2001      	movs	r0, #1
 80028d2:	e07a      	b.n	80029ca <HAL_RCC_ClockConfig+0x32e>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028d4:	4b18      	ldr	r3, [pc, #96]	; (8002938 <HAL_RCC_ClockConfig+0x29c>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80028dc:	d1c9      	bne.n	8002872 <HAL_RCC_ClockConfig+0x1d6>
          return HAL_ERROR;
 80028de:	2001      	movs	r0, #1
 80028e0:	e073      	b.n	80029ca <HAL_RCC_ClockConfig+0x32e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80028e2:	4f15      	ldr	r7, [pc, #84]	; (8002938 <HAL_RCC_ClockConfig+0x29c>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028e4:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	f003 030c 	and.w	r3, r3, #12
 80028ee:	2b04      	cmp	r3, #4
 80028f0:	d026      	beq.n	8002940 <HAL_RCC_ClockConfig+0x2a4>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028f2:	f7fe ff7b 	bl	80017ec <HAL_GetTick>
 80028f6:	1b83      	subs	r3, r0, r6
 80028f8:	4543      	cmp	r3, r8
 80028fa:	d9f5      	bls.n	80028e8 <HAL_RCC_ClockConfig+0x24c>
            return HAL_TIMEOUT;
 80028fc:	2003      	movs	r0, #3
 80028fe:	e064      	b.n	80029ca <HAL_RCC_ClockConfig+0x32e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002900:	4f0d      	ldr	r7, [pc, #52]	; (8002938 <HAL_RCC_ClockConfig+0x29c>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002902:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	f003 030c 	and.w	r3, r3, #12
 800290c:	2b08      	cmp	r3, #8
 800290e:	d017      	beq.n	8002940 <HAL_RCC_ClockConfig+0x2a4>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002910:	f7fe ff6c 	bl	80017ec <HAL_GetTick>
 8002914:	1b80      	subs	r0, r0, r6
 8002916:	4540      	cmp	r0, r8
 8002918:	d9f5      	bls.n	8002906 <HAL_RCC_ClockConfig+0x26a>
            return HAL_TIMEOUT;
 800291a:	2003      	movs	r0, #3
 800291c:	e055      	b.n	80029ca <HAL_RCC_ClockConfig+0x32e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 800291e:	4d06      	ldr	r5, [pc, #24]	; (8002938 <HAL_RCC_ClockConfig+0x29c>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002920:	f241 3488 	movw	r4, #5000	; 0x1388
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8002924:	68ab      	ldr	r3, [r5, #8]
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002926:	f7fe ff61 	bl	80017ec <HAL_GetTick>
 800292a:	1b80      	subs	r0, r0, r6
 800292c:	42a0      	cmp	r0, r4
 800292e:	d9f9      	bls.n	8002924 <HAL_RCC_ClockConfig+0x288>
            return HAL_TIMEOUT;
 8002930:	2003      	movs	r0, #3
 8002932:	e04a      	b.n	80029ca <HAL_RCC_ClockConfig+0x32e>
 8002934:	40023c00 	.word	0x40023c00
 8002938:	40023800 	.word	0x40023800
 800293c:	08004248 	.word	0x08004248
        }
      }
    }
    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002940:	b2ea      	uxtb	r2, r5
 8002942:	4b27      	ldr	r3, [pc, #156]	; (80029e0 <HAL_RCC_ClockConfig+0x344>)
 8002944:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 030f 	and.w	r3, r3, #15
 800294c:	42ab      	cmp	r3, r5
 800294e:	d144      	bne.n	80029da <HAL_RCC_ClockConfig+0x33e>
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002950:	6823      	ldr	r3, [r4, #0]
 8002952:	f013 0f04 	tst.w	r3, #4
 8002956:	d017      	beq.n	8002988 <HAL_RCC_ClockConfig+0x2ec>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8002958:	68e3      	ldr	r3, [r4, #12]
 800295a:	f433 5280 	bics.w	r2, r3, #4096	; 0x1000
 800295e:	d00c      	beq.n	800297a <HAL_RCC_ClockConfig+0x2de>
 8002960:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002964:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 8002968:	d007      	beq.n	800297a <HAL_RCC_ClockConfig+0x2de>
 800296a:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800296e:	d004      	beq.n	800297a <HAL_RCC_ClockConfig+0x2de>
 8002970:	f240 3132 	movw	r1, #818	; 0x332
 8002974:	481b      	ldr	r0, [pc, #108]	; (80029e4 <HAL_RCC_ClockConfig+0x348>)
 8002976:	f001 f8bf 	bl	8003af8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800297a:	4a1b      	ldr	r2, [pc, #108]	; (80029e8 <HAL_RCC_ClockConfig+0x34c>)
 800297c:	6893      	ldr	r3, [r2, #8]
 800297e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002982:	68e1      	ldr	r1, [r4, #12]
 8002984:	430b      	orrs	r3, r1
 8002986:	6093      	str	r3, [r2, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002988:	6823      	ldr	r3, [r4, #0]
 800298a:	f013 0f08 	tst.w	r3, #8
 800298e:	d018      	beq.n	80029c2 <HAL_RCC_ClockConfig+0x326>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8002990:	6923      	ldr	r3, [r4, #16]
 8002992:	f433 5280 	bics.w	r2, r3, #4096	; 0x1000
 8002996:	d00c      	beq.n	80029b2 <HAL_RCC_ClockConfig+0x316>
 8002998:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800299c:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 80029a0:	d007      	beq.n	80029b2 <HAL_RCC_ClockConfig+0x316>
 80029a2:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80029a6:	d004      	beq.n	80029b2 <HAL_RCC_ClockConfig+0x316>
 80029a8:	f240 3139 	movw	r1, #825	; 0x339
 80029ac:	480d      	ldr	r0, [pc, #52]	; (80029e4 <HAL_RCC_ClockConfig+0x348>)
 80029ae:	f001 f8a3 	bl	8003af8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029b2:	4a0d      	ldr	r2, [pc, #52]	; (80029e8 <HAL_RCC_ClockConfig+0x34c>)
 80029b4:	6893      	ldr	r3, [r2, #8]
 80029b6:	6921      	ldr	r1, [r4, #16]
 80029b8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80029bc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80029c0:	6093      	str	r3, [r2, #8]
  }

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80029c2:	2000      	movs	r0, #0
 80029c4:	f7fe fedc 	bl	8001780 <HAL_InitTick>
  
  return HAL_OK;
 80029c8:	2000      	movs	r0, #0
}
 80029ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_ERROR;
 80029ce:	2001      	movs	r0, #1
 80029d0:	e7fb      	b.n	80029ca <HAL_RCC_ClockConfig+0x32e>
          return HAL_ERROR;
 80029d2:	2001      	movs	r0, #1
 80029d4:	e7f9      	b.n	80029ca <HAL_RCC_ClockConfig+0x32e>
          return HAL_ERROR;
 80029d6:	2001      	movs	r0, #1
 80029d8:	e7f7      	b.n	80029ca <HAL_RCC_ClockConfig+0x32e>
      return HAL_ERROR;
 80029da:	2001      	movs	r0, #1
 80029dc:	e7f5      	b.n	80029ca <HAL_RCC_ClockConfig+0x32e>
 80029de:	bf00      	nop
 80029e0:	40023c00 	.word	0x40023c00
 80029e4:	08004248 	.word	0x08004248
 80029e8:	40023800 	.word	0x40023800

080029ec <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029ec:	4b1a      	ldr	r3, [pc, #104]	; (8002a58 <HAL_RCC_GetSysClockFreq+0x6c>)
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f003 030c 	and.w	r3, r3, #12
 80029f4:	2b04      	cmp	r3, #4
 80029f6:	d02b      	beq.n	8002a50 <HAL_RCC_GetSysClockFreq+0x64>
 80029f8:	2b08      	cmp	r3, #8
 80029fa:	d12b      	bne.n	8002a54 <HAL_RCC_GetSysClockFreq+0x68>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029fc:	4b16      	ldr	r3, [pc, #88]	; (8002a58 <HAL_RCC_GetSysClockFreq+0x6c>)
 80029fe:	685a      	ldr	r2, [r3, #4]
 8002a00:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8002a0a:	4b13      	ldr	r3, [pc, #76]	; (8002a58 <HAL_RCC_GetSysClockFreq+0x6c>)
 8002a0c:	6858      	ldr	r0, [r3, #4]
 8002a0e:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8002a12:	fa91 f3a1 	rbit	r3, r1
 8002a16:	fab3 f383 	clz	r3, r3
 8002a1a:	ea00 0001 	and.w	r0, r0, r1
 8002a1e:	fa20 f003 	lsr.w	r0, r0, r3
 8002a22:	bf14      	ite	ne
 8002a24:	4b0d      	ldrne	r3, [pc, #52]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x70>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8002a26:	4b0e      	ldreq	r3, [pc, #56]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x74>)
 8002a28:	fbb3 f2f2 	udiv	r2, r3, r2
 8002a2c:	fb02 f000 	mul.w	r0, r2, r0
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 8002a30:	4b09      	ldr	r3, [pc, #36]	; (8002a58 <HAL_RCC_GetSysClockFreq+0x6c>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002a38:	fa92 f2a2 	rbit	r2, r2
 8002a3c:	fab2 f282 	clz	r2, r2
 8002a40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a44:	40d3      	lsrs	r3, r2
 8002a46:	3301      	adds	r3, #1
 8002a48:	005b      	lsls	r3, r3, #1
      
      sysclockfreq = pllvco/pllp;
 8002a4a:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8002a4e:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a50:	4802      	ldr	r0, [pc, #8]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x70>)
 8002a52:	4770      	bx	lr
      sysclockfreq = HSI_VALUE;
 8002a54:	4802      	ldr	r0, [pc, #8]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x74>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002a56:	4770      	bx	lr
 8002a58:	40023800 	.word	0x40023800
 8002a5c:	007a1200 	.word	0x007a1200
 8002a60:	00f42400 	.word	0x00f42400

08002a64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a64:	b508      	push	{r3, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8002a66:	f7ff ffc1 	bl	80029ec <HAL_RCC_GetSysClockFreq>
 8002a6a:	4b08      	ldr	r3, [pc, #32]	; (8002a8c <HAL_RCC_GetHCLKFreq+0x28>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	22f0      	movs	r2, #240	; 0xf0
 8002a70:	fa92 f2a2 	rbit	r2, r2
 8002a74:	fab2 f282 	clz	r2, r2
 8002a78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a7c:	40d3      	lsrs	r3, r2
 8002a7e:	4a04      	ldr	r2, [pc, #16]	; (8002a90 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002a80:	5cd3      	ldrb	r3, [r2, r3]
 8002a82:	40d8      	lsrs	r0, r3
 8002a84:	4b03      	ldr	r3, [pc, #12]	; (8002a94 <HAL_RCC_GetHCLKFreq+0x30>)
 8002a86:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 8002a88:	bd08      	pop	{r3, pc}
 8002a8a:	bf00      	nop
 8002a8c:	40023800 	.word	0x40023800
 8002a90:	0800409c 	.word	0x0800409c
 8002a94:	20000364 	.word	0x20000364

08002a98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
 8002a98:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8002a9a:	f7ff ffe3 	bl	8002a64 <HAL_RCC_GetHCLKFreq>
 8002a9e:	4b07      	ldr	r3, [pc, #28]	; (8002abc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8002aa6:	fa92 f2a2 	rbit	r2, r2
 8002aaa:	fab2 f282 	clz	r2, r2
 8002aae:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8002ab2:	40d3      	lsrs	r3, r2
 8002ab4:	4a02      	ldr	r2, [pc, #8]	; (8002ac0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ab6:	5cd3      	ldrb	r3, [r2, r3]
}
 8002ab8:	40d8      	lsrs	r0, r3
 8002aba:	bd08      	pop	{r3, pc}
 8002abc:	40023800 	.word	0x40023800
 8002ac0:	0800409c 	.word	0x0800409c

08002ac4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ac4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8002ac6:	f7ff ffcd 	bl	8002a64 <HAL_RCC_GetHCLKFreq>
 8002aca:	4b07      	ldr	r3, [pc, #28]	; (8002ae8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8002ad2:	fa92 f2a2 	rbit	r2, r2
 8002ad6:	fab2 f282 	clz	r2, r2
 8002ada:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002ade:	40d3      	lsrs	r3, r2
 8002ae0:	4a02      	ldr	r2, [pc, #8]	; (8002aec <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ae2:	5cd3      	ldrb	r3, [r2, r3]
} 
 8002ae4:	40d8      	lsrs	r0, r3
 8002ae6:	bd08      	pop	{r3, pc}
 8002ae8:	40023800 	.word	0x40023800
 8002aec:	0800409c 	.word	0x0800409c

08002af0 <SPI_WaitOnFlagUntilTimeout>:
  * @param  Status: Flag status to check: RESET or set
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status, uint32_t Timeout)  
{
 8002af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002af4:	4606      	mov	r6, r0
 8002af6:	460d      	mov	r5, r1
 8002af8:	4690      	mov	r8, r2
 8002afa:	461c      	mov	r4, r3
  uint32_t tickstart = 0;

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002afc:	f7fe fe76 	bl	80017ec <HAL_GetTick>
 8002b00:	4607      	mov	r7, r0

  /* Wait until flag is set */
  if(Status == RESET)
 8002b02:	f1b8 0f00 	cmp.w	r8, #0
 8002b06:	d02e      	beq.n	8002b66 <SPI_WaitOnFlagUntilTimeout+0x76>
      }
    }
  }
  else
  {
    while(__HAL_SPI_GET_FLAG(hspi, Flag) != RESET)
 8002b08:	6832      	ldr	r2, [r6, #0]
 8002b0a:	6893      	ldr	r3, [r2, #8]
 8002b0c:	ea35 0303 	bics.w	r3, r5, r3
 8002b10:	d15b      	bne.n	8002bca <SPI_WaitOnFlagUntilTimeout+0xda>
    {
      if(Timeout != HAL_MAX_DELAY)
 8002b12:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002b16:	d0f8      	beq.n	8002b0a <SPI_WaitOnFlagUntilTimeout+0x1a>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8002b18:	b124      	cbz	r4, 8002b24 <SPI_WaitOnFlagUntilTimeout+0x34>
 8002b1a:	f7fe fe67 	bl	80017ec <HAL_GetTick>
 8002b1e:	1bc0      	subs	r0, r0, r7
 8002b20:	42a0      	cmp	r0, r4
 8002b22:	d9f1      	bls.n	8002b08 <SPI_WaitOnFlagUntilTimeout+0x18>
          /* Disable the SPI and reset the CRC: the CRC value should be cleared
             on both master and slave sides in order to resynchronize the master
             and slave for their respective CRC calculation */

          /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
          __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b24:	6832      	ldr	r2, [r6, #0]
 8002b26:	6853      	ldr	r3, [r2, #4]
 8002b28:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8002b2c:	6053      	str	r3, [r2, #4]

          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b2e:	6832      	ldr	r2, [r6, #0]
 8002b30:	6813      	ldr	r3, [r2, #0]
 8002b32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b36:	6013      	str	r3, [r2, #0]

          /* Reset CRC Calculation */
          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b38:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8002b3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b3e:	d039      	beq.n	8002bb4 <SPI_WaitOnFlagUntilTimeout+0xc4>
          {
            SPI_RESET_CRC(hspi);
          }

          hspi->State= HAL_SPI_STATE_READY;
 8002b40:	2301      	movs	r3, #1
 8002b42:	f886 3051 	strb.w	r3, [r6, #81]	; 0x51

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8002b46:	2300      	movs	r3, #0
 8002b48:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50

          return HAL_TIMEOUT;
 8002b4c:	2003      	movs	r0, #3
 8002b4e:	e02f      	b.n	8002bb0 <SPI_WaitOnFlagUntilTimeout+0xc0>
            SPI_RESET_CRC(hspi);
 8002b50:	6832      	ldr	r2, [r6, #0]
 8002b52:	6813      	ldr	r3, [r2, #0]
 8002b54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b58:	6013      	str	r3, [r2, #0]
 8002b5a:	6832      	ldr	r2, [r6, #0]
 8002b5c:	6813      	ldr	r3, [r2, #0]
 8002b5e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b62:	6013      	str	r3, [r2, #0]
 8002b64:	e01b      	b.n	8002b9e <SPI_WaitOnFlagUntilTimeout+0xae>
    while(__HAL_SPI_GET_FLAG(hspi, Flag) == RESET)
 8002b66:	6831      	ldr	r1, [r6, #0]
 8002b68:	688b      	ldr	r3, [r1, #8]
 8002b6a:	ea35 0303 	bics.w	r3, r5, r3
 8002b6e:	d01e      	beq.n	8002bae <SPI_WaitOnFlagUntilTimeout+0xbe>
      if(Timeout != HAL_MAX_DELAY)
 8002b70:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002b74:	d0f8      	beq.n	8002b68 <SPI_WaitOnFlagUntilTimeout+0x78>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8002b76:	b124      	cbz	r4, 8002b82 <SPI_WaitOnFlagUntilTimeout+0x92>
 8002b78:	f7fe fe38 	bl	80017ec <HAL_GetTick>
 8002b7c:	1bc0      	subs	r0, r0, r7
 8002b7e:	42a0      	cmp	r0, r4
 8002b80:	d9f1      	bls.n	8002b66 <SPI_WaitOnFlagUntilTimeout+0x76>
          __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b82:	6832      	ldr	r2, [r6, #0]
 8002b84:	6853      	ldr	r3, [r2, #4]
 8002b86:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8002b8a:	6053      	str	r3, [r2, #4]
          __HAL_SPI_DISABLE(hspi);
 8002b8c:	6832      	ldr	r2, [r6, #0]
 8002b8e:	6813      	ldr	r3, [r2, #0]
 8002b90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b94:	6013      	str	r3, [r2, #0]
          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b96:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8002b98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b9c:	d0d8      	beq.n	8002b50 <SPI_WaitOnFlagUntilTimeout+0x60>
          hspi->State= HAL_SPI_STATE_READY;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	f886 3051 	strb.w	r3, [r6, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
          return HAL_TIMEOUT;
 8002baa:	2003      	movs	r0, #3
 8002bac:	e000      	b.n	8002bb0 <SPI_WaitOnFlagUntilTimeout+0xc0>
        }
      }
    }
  }
  return HAL_OK;
 8002bae:	4640      	mov	r0, r8
}
 8002bb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            SPI_RESET_CRC(hspi);
 8002bb4:	6832      	ldr	r2, [r6, #0]
 8002bb6:	6813      	ldr	r3, [r2, #0]
 8002bb8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002bbc:	6013      	str	r3, [r2, #0]
 8002bbe:	6832      	ldr	r2, [r6, #0]
 8002bc0:	6813      	ldr	r3, [r2, #0]
 8002bc2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002bc6:	6013      	str	r3, [r2, #0]
 8002bc8:	e7ba      	b.n	8002b40 <SPI_WaitOnFlagUntilTimeout+0x50>
  return HAL_OK;
 8002bca:	2000      	movs	r0, #0
 8002bcc:	e7f0      	b.n	8002bb0 <SPI_WaitOnFlagUntilTimeout+0xc0>
	...

08002bd0 <HAL_SPI_Init>:
  if(hspi == NULL)
 8002bd0:	2800      	cmp	r0, #0
 8002bd2:	f000 80aa 	beq.w	8002d2a <HAL_SPI_Init+0x15a>
{
 8002bd6:	b510      	push	{r4, lr}
 8002bd8:	4604      	mov	r4, r0
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8002bda:	6843      	ldr	r3, [r0, #4]
 8002bdc:	b113      	cbz	r3, 8002be4 <HAL_SPI_Init+0x14>
 8002bde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002be2:	d17e      	bne.n	8002ce2 <HAL_SPI_Init+0x112>
  assert_param(IS_SPI_DIRECTION_MODE(hspi->Init.Direction));
 8002be4:	68a3      	ldr	r3, [r4, #8]
 8002be6:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 8002bea:	d002      	beq.n	8002bf2 <HAL_SPI_Init+0x22>
 8002bec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bf0:	d17c      	bne.n	8002cec <HAL_SPI_Init+0x11c>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8002bf2:	68e3      	ldr	r3, [r4, #12]
 8002bf4:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 8002bf8:	d17d      	bne.n	8002cf6 <HAL_SPI_Init+0x126>
  assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8002bfa:	6923      	ldr	r3, [r4, #16]
 8002bfc:	f033 0302 	bics.w	r3, r3, #2
 8002c00:	d003      	beq.n	8002c0a <HAL_SPI_Init+0x3a>
 8002c02:	21bb      	movs	r1, #187	; 0xbb
 8002c04:	484a      	ldr	r0, [pc, #296]	; (8002d30 <HAL_SPI_Init+0x160>)
 8002c06:	f000 ff77 	bl	8003af8 <assert_failed>
  assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8002c0a:	6963      	ldr	r3, [r4, #20]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d877      	bhi.n	8002d00 <HAL_SPI_Init+0x130>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8002c10:	69a3      	ldr	r3, [r4, #24]
 8002c12:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 8002c16:	d002      	beq.n	8002c1e <HAL_SPI_Init+0x4e>
 8002c18:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c1c:	d175      	bne.n	8002d0a <HAL_SPI_Init+0x13a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8002c1e:	69e3      	ldr	r3, [r4, #28]
 8002c20:	f033 0308 	bics.w	r3, r3, #8
 8002c24:	d009      	beq.n	8002c3a <HAL_SPI_Init+0x6a>
 8002c26:	2b10      	cmp	r3, #16
 8002c28:	d007      	beq.n	8002c3a <HAL_SPI_Init+0x6a>
 8002c2a:	2b20      	cmp	r3, #32
 8002c2c:	d005      	beq.n	8002c3a <HAL_SPI_Init+0x6a>
 8002c2e:	2b30      	cmp	r3, #48	; 0x30
 8002c30:	d003      	beq.n	8002c3a <HAL_SPI_Init+0x6a>
 8002c32:	21be      	movs	r1, #190	; 0xbe
 8002c34:	483e      	ldr	r0, [pc, #248]	; (8002d30 <HAL_SPI_Init+0x160>)
 8002c36:	f000 ff5f 	bl	8003af8 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8002c3a:	6a23      	ldr	r3, [r4, #32]
 8002c3c:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8002c40:	d003      	beq.n	8002c4a <HAL_SPI_Init+0x7a>
 8002c42:	21bf      	movs	r1, #191	; 0xbf
 8002c44:	483a      	ldr	r0, [pc, #232]	; (8002d30 <HAL_SPI_Init+0x160>)
 8002c46:	f000 ff57 	bl	8003af8 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8002c4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c4c:	f033 0310 	bics.w	r3, r3, #16
 8002c50:	d003      	beq.n	8002c5a <HAL_SPI_Init+0x8a>
 8002c52:	21c0      	movs	r1, #192	; 0xc0
 8002c54:	4836      	ldr	r0, [pc, #216]	; (8002d30 <HAL_SPI_Init+0x160>)
 8002c56:	f000 ff4f 	bl	8003af8 <assert_failed>
  assert_param(IS_SPI_CRC_CALCULATION(hspi->Init.CRCCalculation));
 8002c5a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002c5c:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 8002c60:	d003      	beq.n	8002c6a <HAL_SPI_Init+0x9a>
 8002c62:	21c1      	movs	r1, #193	; 0xc1
 8002c64:	4832      	ldr	r0, [pc, #200]	; (8002d30 <HAL_SPI_Init+0x160>)
 8002c66:	f000 ff47 	bl	8003af8 <assert_failed>
  assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
 8002c6a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d84e      	bhi.n	8002d14 <HAL_SPI_Init+0x144>
  if(hspi->State == HAL_SPI_STATE_RESET)
 8002c76:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d04f      	beq.n	8002d1e <HAL_SPI_Init+0x14e>
  hspi->State = HAL_SPI_STATE_BUSY;
 8002c7e:	2302      	movs	r3, #2
 8002c80:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8002c84:	6822      	ldr	r2, [r4, #0]
 8002c86:	6813      	ldr	r3, [r2, #0]
 8002c88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c8c:	6013      	str	r3, [r2, #0]
  hspi->Instance->CR1 = (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002c8e:	6822      	ldr	r2, [r4, #0]
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 8002c90:	6863      	ldr	r3, [r4, #4]
 8002c92:	68a1      	ldr	r1, [r4, #8]
 8002c94:	430b      	orrs	r3, r1
 8002c96:	68e1      	ldr	r1, [r4, #12]
 8002c98:	430b      	orrs	r3, r1
 8002c9a:	6921      	ldr	r1, [r4, #16]
 8002c9c:	430b      	orrs	r3, r1
 8002c9e:	6961      	ldr	r1, [r4, #20]
 8002ca0:	430b      	orrs	r3, r1
 8002ca2:	69e1      	ldr	r1, [r4, #28]
 8002ca4:	430b      	orrs	r3, r1
 8002ca6:	6a21      	ldr	r1, [r4, #32]
 8002ca8:	430b      	orrs	r3, r1
 8002caa:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002cac:	430b      	orrs	r3, r1
                         hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
 8002cae:	69a1      	ldr	r1, [r4, #24]
 8002cb0:	f401 7100 	and.w	r1, r1, #512	; 0x200
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 8002cb4:	430b      	orrs	r3, r1
  hspi->Instance->CR1 = (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002cb6:	6013      	str	r3, [r2, #0]
  hspi->Instance->CR2 = (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode);
 8002cb8:	6822      	ldr	r2, [r4, #0]
 8002cba:	8b63      	ldrh	r3, [r4, #26]
 8002cbc:	f003 0304 	and.w	r3, r3, #4
 8002cc0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002cc2:	430b      	orrs	r3, r1
 8002cc4:	6053      	str	r3, [r2, #4]
  hspi->Instance->CRCPR = hspi->Init.CRCPolynomial;
 8002cc6:	6823      	ldr	r3, [r4, #0]
 8002cc8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002cca:	611a      	str	r2, [r3, #16]
  hspi->Instance->I2SCFGR &= (uint32_t)(~SPI_I2SCFGR_I2SMOD);
 8002ccc:	6822      	ldr	r2, [r4, #0]
 8002cce:	69d3      	ldr	r3, [r2, #28]
 8002cd0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002cd4:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002cd6:	2000      	movs	r0, #0
 8002cd8:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8002ce0:	bd10      	pop	{r4, pc}
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8002ce2:	21b8      	movs	r1, #184	; 0xb8
 8002ce4:	4812      	ldr	r0, [pc, #72]	; (8002d30 <HAL_SPI_Init+0x160>)
 8002ce6:	f000 ff07 	bl	8003af8 <assert_failed>
 8002cea:	e77b      	b.n	8002be4 <HAL_SPI_Init+0x14>
  assert_param(IS_SPI_DIRECTION_MODE(hspi->Init.Direction));
 8002cec:	21b9      	movs	r1, #185	; 0xb9
 8002cee:	4810      	ldr	r0, [pc, #64]	; (8002d30 <HAL_SPI_Init+0x160>)
 8002cf0:	f000 ff02 	bl	8003af8 <assert_failed>
 8002cf4:	e77d      	b.n	8002bf2 <HAL_SPI_Init+0x22>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8002cf6:	21ba      	movs	r1, #186	; 0xba
 8002cf8:	480d      	ldr	r0, [pc, #52]	; (8002d30 <HAL_SPI_Init+0x160>)
 8002cfa:	f000 fefd 	bl	8003af8 <assert_failed>
 8002cfe:	e77c      	b.n	8002bfa <HAL_SPI_Init+0x2a>
  assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8002d00:	21bc      	movs	r1, #188	; 0xbc
 8002d02:	480b      	ldr	r0, [pc, #44]	; (8002d30 <HAL_SPI_Init+0x160>)
 8002d04:	f000 fef8 	bl	8003af8 <assert_failed>
 8002d08:	e782      	b.n	8002c10 <HAL_SPI_Init+0x40>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8002d0a:	21bd      	movs	r1, #189	; 0xbd
 8002d0c:	4808      	ldr	r0, [pc, #32]	; (8002d30 <HAL_SPI_Init+0x160>)
 8002d0e:	f000 fef3 	bl	8003af8 <assert_failed>
 8002d12:	e784      	b.n	8002c1e <HAL_SPI_Init+0x4e>
  assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
 8002d14:	21c2      	movs	r1, #194	; 0xc2
 8002d16:	4806      	ldr	r0, [pc, #24]	; (8002d30 <HAL_SPI_Init+0x160>)
 8002d18:	f000 feee 	bl	8003af8 <assert_failed>
 8002d1c:	e7ab      	b.n	8002c76 <HAL_SPI_Init+0xa6>
    hspi->Lock = HAL_UNLOCKED;
 8002d1e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8002d22:	4620      	mov	r0, r4
 8002d24:	f000 ff20 	bl	8003b68 <HAL_SPI_MspInit>
 8002d28:	e7a9      	b.n	8002c7e <HAL_SPI_Init+0xae>
    return HAL_ERROR;
 8002d2a:	2001      	movs	r0, #1
}
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	080042d0 	.word	0x080042d0

08002d34 <HAL_SPI_TransmitReceive>:
{
 8002d34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d38:	b082      	sub	sp, #8
 8002d3a:	4604      	mov	r4, r0
 8002d3c:	460f      	mov	r7, r1
 8002d3e:	4690      	mov	r8, r2
 8002d40:	461d      	mov	r5, r3
 8002d42:	9e08      	ldr	r6, [sp, #32]
  tmpstate = hspi->State; 
 8002d44:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8002d48:	b2db      	uxtb	r3, r3
  if((tmpstate == HAL_SPI_STATE_READY) || (tmpstate == HAL_SPI_STATE_BUSY_RX))
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d002      	beq.n	8002d54 <HAL_SPI_TransmitReceive+0x20>
 8002d4e:	2b22      	cmp	r3, #34	; 0x22
 8002d50:	f040 818f 	bne.w	8003072 <HAL_SPI_TransmitReceive+0x33e>
    if((pTxData == NULL ) || (pRxData == NULL ) || (Size == 0))
 8002d54:	2f00      	cmp	r7, #0
 8002d56:	f000 8190 	beq.w	800307a <HAL_SPI_TransmitReceive+0x346>
 8002d5a:	f1b8 0f00 	cmp.w	r8, #0
 8002d5e:	f000 8191 	beq.w	8003084 <HAL_SPI_TransmitReceive+0x350>
 8002d62:	2d00      	cmp	r5, #0
 8002d64:	f000 8190 	beq.w	8003088 <HAL_SPI_TransmitReceive+0x354>
    assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8002d68:	68a3      	ldr	r3, [r4, #8]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d145      	bne.n	8002dfa <HAL_SPI_TransmitReceive+0xc6>
    __HAL_LOCK(hspi);
 8002d6e:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	f000 818a 	beq.w	800308c <HAL_SPI_TransmitReceive+0x358>
 8002d78:	2301      	movs	r3, #1
 8002d7a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    if(hspi->State == HAL_SPI_STATE_READY)
 8002d7e:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	2b01      	cmp	r3, #1
      hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002d86:	bf04      	itt	eq
 8002d88:	2332      	moveq	r3, #50	; 0x32
 8002d8a:	f884 3051 	strbeq.w	r3, [r4, #81]	; 0x51
    hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->pRxBuffPtr  = pRxData;
 8002d92:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
    hspi->RxXferSize  = Size;
 8002d96:	87a5      	strh	r5, [r4, #60]	; 0x3c
    hspi->RxXferCount = Size;  
 8002d98:	87e5      	strh	r5, [r4, #62]	; 0x3e
    hspi->pTxBuffPtr  = pTxData;
 8002d9a:	6327      	str	r7, [r4, #48]	; 0x30
    hspi->TxXferSize  = Size; 
 8002d9c:	86a5      	strh	r5, [r4, #52]	; 0x34
    hspi->TxXferCount = Size;
 8002d9e:	86e5      	strh	r5, [r4, #54]	; 0x36
    hspi->RxISR = 0;
 8002da0:	64a3      	str	r3, [r4, #72]	; 0x48
    hspi->TxISR = 0;
 8002da2:	64e3      	str	r3, [r4, #76]	; 0x4c
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002da4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002da6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002daa:	d02c      	beq.n	8002e06 <HAL_SPI_TransmitReceive+0xd2>
    if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8002dac:	6823      	ldr	r3, [r4, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002db4:	d103      	bne.n	8002dbe <HAL_SPI_TransmitReceive+0x8a>
      __HAL_SPI_ENABLE(hspi);
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dbc:	601a      	str	r2, [r3, #0]
    if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002dbe:	68e3      	ldr	r3, [r4, #12]
 8002dc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002dc4:	d02a      	beq.n	8002e1c <HAL_SPI_TransmitReceive+0xe8>
      if((hspi->Init.Mode == SPI_MODE_SLAVE) || ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->TxXferCount == 0x01)))
 8002dc6:	6863      	ldr	r3, [r4, #4]
 8002dc8:	b12b      	cbz	r3, 8002dd6 <HAL_SPI_TransmitReceive+0xa2>
 8002dca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002dce:	d10b      	bne.n	8002de8 <HAL_SPI_TransmitReceive+0xb4>
 8002dd0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d108      	bne.n	8002de8 <HAL_SPI_TransmitReceive+0xb4>
        hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 8002dd6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002dd8:	1c5a      	adds	r2, r3, #1
 8002dda:	6322      	str	r2, [r4, #48]	; 0x30
 8002ddc:	6822      	ldr	r2, [r4, #0]
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 8002de2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002de4:	3b01      	subs	r3, #1
 8002de6:	86e3      	strh	r3, [r4, #54]	; 0x36
      if(hspi->TxXferCount == 0)
 8002de8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	f000 8098 	beq.w	8002f20 <HAL_SPI_TransmitReceive+0x1ec>
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8002df0:	2500      	movs	r5, #0
 8002df2:	2702      	movs	r7, #2
            if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8002df4:	f04f 0801 	mov.w	r8, #1
 8002df8:	e0e9      	b.n	8002fce <HAL_SPI_TransmitReceive+0x29a>
    assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8002dfa:	f44f 7126 	mov.w	r1, #664	; 0x298
 8002dfe:	48a0      	ldr	r0, [pc, #640]	; (8003080 <HAL_SPI_TransmitReceive+0x34c>)
 8002e00:	f000 fe7a 	bl	8003af8 <assert_failed>
 8002e04:	e7b3      	b.n	8002d6e <HAL_SPI_TransmitReceive+0x3a>
      SPI_RESET_CRC(hspi);
 8002e06:	6822      	ldr	r2, [r4, #0]
 8002e08:	6813      	ldr	r3, [r2, #0]
 8002e0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e0e:	6013      	str	r3, [r2, #0]
 8002e10:	6822      	ldr	r2, [r4, #0]
 8002e12:	6813      	ldr	r3, [r2, #0]
 8002e14:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002e18:	6013      	str	r3, [r2, #0]
 8002e1a:	e7c7      	b.n	8002dac <HAL_SPI_TransmitReceive+0x78>
      if((hspi->Init.Mode == SPI_MODE_SLAVE) || ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->TxXferCount == 0x01)))
 8002e1c:	6863      	ldr	r3, [r4, #4]
 8002e1e:	b12b      	cbz	r3, 8002e2c <HAL_SPI_TransmitReceive+0xf8>
 8002e20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e24:	d10c      	bne.n	8002e40 <HAL_SPI_TransmitReceive+0x10c>
 8002e26:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d109      	bne.n	8002e40 <HAL_SPI_TransmitReceive+0x10c>
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 8002e2c:	6823      	ldr	r3, [r4, #0]
 8002e2e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002e30:	8812      	ldrh	r2, [r2, #0]
 8002e32:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr+=2;
 8002e34:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002e36:	3302      	adds	r3, #2
 8002e38:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002e3a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	86e3      	strh	r3, [r4, #54]	; 0x36
      if(hspi->TxXferCount == 0)
 8002e40:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002e42:	b123      	cbz	r3, 8002e4e <HAL_SPI_TransmitReceive+0x11a>
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8002e44:	2500      	movs	r5, #0
 8002e46:	2702      	movs	r7, #2
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8002e48:	f04f 0801 	mov.w	r8, #1
 8002e4c:	e032      	b.n	8002eb4 <HAL_SPI_TransmitReceive+0x180>
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e4e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002e50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e54:	d013      	beq.n	8002e7e <HAL_SPI_TransmitReceive+0x14a>
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8002e56:	4633      	mov	r3, r6
 8002e58:	2200      	movs	r2, #0
 8002e5a:	2101      	movs	r1, #1
 8002e5c:	4620      	mov	r0, r4
 8002e5e:	f7ff fe47 	bl	8002af0 <SPI_WaitOnFlagUntilTimeout>
 8002e62:	2800      	cmp	r0, #0
 8002e64:	f040 8114 	bne.w	8003090 <HAL_SPI_TransmitReceive+0x35c>
        *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002e68:	6823      	ldr	r3, [r4, #0]
 8002e6a:	68da      	ldr	r2, [r3, #12]
 8002e6c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002e6e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr+=2;
 8002e70:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002e72:	3302      	adds	r3, #2
 8002e74:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8002e76:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002e78:	3b01      	subs	r3, #1
 8002e7a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8002e7c:	e064      	b.n	8002f48 <HAL_SPI_TransmitReceive+0x214>
          hspi->Instance->CR1 |= SPI_CR1_CRCNEXT;
 8002e7e:	6822      	ldr	r2, [r4, #0]
 8002e80:	6813      	ldr	r3, [r2, #0]
 8002e82:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e86:	6013      	str	r3, [r2, #0]
 8002e88:	e7e5      	b.n	8002e56 <HAL_SPI_TransmitReceive+0x122>
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8002e8a:	4633      	mov	r3, r6
 8002e8c:	462a      	mov	r2, r5
 8002e8e:	4641      	mov	r1, r8
 8002e90:	4620      	mov	r0, r4
 8002e92:	f7ff fe2d 	bl	8002af0 <SPI_WaitOnFlagUntilTimeout>
 8002e96:	2800      	cmp	r0, #0
 8002e98:	f040 80fe 	bne.w	8003098 <HAL_SPI_TransmitReceive+0x364>
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002e9c:	6823      	ldr	r3, [r4, #0]
 8002e9e:	68da      	ldr	r2, [r3, #12]
 8002ea0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002ea2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr+=2;
 8002ea4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002ea6:	3302      	adds	r3, #2
 8002ea8:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->RxXferCount--;
 8002eaa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002eac:	3b01      	subs	r3, #1
 8002eae:	87e3      	strh	r3, [r4, #62]	; 0x3e
        while(hspi->TxXferCount > 0)
 8002eb0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002eb2:	b1fb      	cbz	r3, 8002ef4 <HAL_SPI_TransmitReceive+0x1c0>
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8002eb4:	4633      	mov	r3, r6
 8002eb6:	462a      	mov	r2, r5
 8002eb8:	4639      	mov	r1, r7
 8002eba:	4620      	mov	r0, r4
 8002ebc:	f7ff fe18 	bl	8002af0 <SPI_WaitOnFlagUntilTimeout>
 8002ec0:	2800      	cmp	r0, #0
 8002ec2:	f040 80e7 	bne.w	8003094 <HAL_SPI_TransmitReceive+0x360>
          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 8002ec6:	6823      	ldr	r3, [r4, #0]
 8002ec8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002eca:	8812      	ldrh	r2, [r2, #0]
 8002ecc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr+=2;
 8002ece:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002ed0:	3302      	adds	r3, #2
 8002ed2:	6323      	str	r3, [r4, #48]	; 0x30
          hspi->TxXferCount--;
 8002ed4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	86e3      	strh	r3, [r4, #54]	; 0x36
          if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d1d4      	bne.n	8002e8a <HAL_SPI_TransmitReceive+0x156>
 8002ee0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002ee2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ee6:	d1d0      	bne.n	8002e8a <HAL_SPI_TransmitReceive+0x156>
            hspi->Instance->CR1 |= SPI_CR1_CRCNEXT;
 8002ee8:	6822      	ldr	r2, [r4, #0]
 8002eea:	6813      	ldr	r3, [r2, #0]
 8002eec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ef0:	6013      	str	r3, [r2, #0]
 8002ef2:	e7ca      	b.n	8002e8a <HAL_SPI_TransmitReceive+0x156>
        if(hspi->Init.Mode == SPI_MODE_SLAVE)
 8002ef4:	6863      	ldr	r3, [r4, #4]
 8002ef6:	bb3b      	cbnz	r3, 8002f48 <HAL_SPI_TransmitReceive+0x214>
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8002ef8:	4633      	mov	r3, r6
 8002efa:	2200      	movs	r2, #0
 8002efc:	2101      	movs	r1, #1
 8002efe:	4620      	mov	r0, r4
 8002f00:	f7ff fdf6 	bl	8002af0 <SPI_WaitOnFlagUntilTimeout>
 8002f04:	2800      	cmp	r0, #0
 8002f06:	f040 80c9 	bne.w	800309c <HAL_SPI_TransmitReceive+0x368>
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002f0a:	6823      	ldr	r3, [r4, #0]
 8002f0c:	68da      	ldr	r2, [r3, #12]
 8002f0e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002f10:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr+=2;
 8002f12:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002f14:	3302      	adds	r3, #2
 8002f16:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->RxXferCount--;
 8002f18:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8002f1e:	e013      	b.n	8002f48 <HAL_SPI_TransmitReceive+0x214>
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f20:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002f22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f26:	d039      	beq.n	8002f9c <HAL_SPI_TransmitReceive+0x268>
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8002f28:	4633      	mov	r3, r6
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	2101      	movs	r1, #1
 8002f2e:	4620      	mov	r0, r4
 8002f30:	f7ff fdde 	bl	8002af0 <SPI_WaitOnFlagUntilTimeout>
 8002f34:	2800      	cmp	r0, #0
 8002f36:	f040 80b3 	bne.w	80030a0 <HAL_SPI_TransmitReceive+0x36c>
        (*hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002f3a:	6823      	ldr	r3, [r4, #0]
 8002f3c:	68da      	ldr	r2, [r3, #12]
 8002f3e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002f40:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 8002f42:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002f44:	3b01      	subs	r3, #1
 8002f46:	87e3      	strh	r3, [r4, #62]	; 0x3e
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f48:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002f4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f4e:	d071      	beq.n	8003034 <HAL_SPI_TransmitReceive+0x300>
    if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_BSY, SET, Timeout) != HAL_OK)
 8002f50:	4633      	mov	r3, r6
 8002f52:	2201      	movs	r2, #1
 8002f54:	2180      	movs	r1, #128	; 0x80
 8002f56:	4620      	mov	r0, r4
 8002f58:	f7ff fdca 	bl	8002af0 <SPI_WaitOnFlagUntilTimeout>
 8002f5c:	2800      	cmp	r0, #0
 8002f5e:	d17e      	bne.n	800305e <HAL_SPI_TransmitReceive+0x32a>
    hspi->State = HAL_SPI_STATE_READY;
 8002f60:	2301      	movs	r3, #1
 8002f62:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    tmp = __HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR);
 8002f66:	6823      	ldr	r3, [r4, #0]
 8002f68:	6899      	ldr	r1, [r3, #8]
    if((hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) && (tmp != RESET))
 8002f6a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002f6c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002f70:	d17b      	bne.n	800306a <HAL_SPI_TransmitReceive+0x336>
 8002f72:	f011 0f10 	tst.w	r1, #16
 8002f76:	d078      	beq.n	800306a <HAL_SPI_TransmitReceive+0x336>
      hspi->ErrorCode |= HAL_SPI_ERROR_CRC;
 8002f78:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002f7a:	f042 0202 	orr.w	r2, r2, #2
 8002f7e:	6562      	str	r2, [r4, #84]	; 0x54
        SPI_RESET_CRC(hspi);
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f86:	601a      	str	r2, [r3, #0]
 8002f88:	6822      	ldr	r2, [r4, #0]
 8002f8a:	6813      	ldr	r3, [r2, #0]
 8002f8c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002f90:	6013      	str	r3, [r2, #0]
      __HAL_UNLOCK(hspi);
 8002f92:	2300      	movs	r3, #0
 8002f94:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      return HAL_ERROR; 
 8002f98:	2001      	movs	r0, #1
 8002f9a:	e06b      	b.n	8003074 <HAL_SPI_TransmitReceive+0x340>
          hspi->Instance->CR1 |= SPI_CR1_CRCNEXT;
 8002f9c:	6822      	ldr	r2, [r4, #0]
 8002f9e:	6813      	ldr	r3, [r2, #0]
 8002fa0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002fa4:	6013      	str	r3, [r2, #0]
 8002fa6:	e7bf      	b.n	8002f28 <HAL_SPI_TransmitReceive+0x1f4>
            if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8002fa8:	4633      	mov	r3, r6
 8002faa:	462a      	mov	r2, r5
 8002fac:	4641      	mov	r1, r8
 8002fae:	4620      	mov	r0, r4
 8002fb0:	f7ff fd9e 	bl	8002af0 <SPI_WaitOnFlagUntilTimeout>
 8002fb4:	2800      	cmp	r0, #0
 8002fb6:	d177      	bne.n	80030a8 <HAL_SPI_TransmitReceive+0x374>
            (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 8002fb8:	6823      	ldr	r3, [r4, #0]
 8002fba:	68da      	ldr	r2, [r3, #12]
 8002fbc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002fbe:	1c59      	adds	r1, r3, #1
 8002fc0:	63a1      	str	r1, [r4, #56]	; 0x38
 8002fc2:	701a      	strb	r2, [r3, #0]
            hspi->RxXferCount--;
 8002fc4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	87e3      	strh	r3, [r4, #62]	; 0x3e
        while(hspi->TxXferCount > 0)
 8002fca:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002fcc:	b1eb      	cbz	r3, 800300a <HAL_SPI_TransmitReceive+0x2d6>
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8002fce:	4633      	mov	r3, r6
 8002fd0:	462a      	mov	r2, r5
 8002fd2:	4639      	mov	r1, r7
 8002fd4:	4620      	mov	r0, r4
 8002fd6:	f7ff fd8b 	bl	8002af0 <SPI_WaitOnFlagUntilTimeout>
 8002fda:	2800      	cmp	r0, #0
 8002fdc:	d162      	bne.n	80030a4 <HAL_SPI_TransmitReceive+0x370>
          hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 8002fde:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002fe0:	1c5a      	adds	r2, r3, #1
 8002fe2:	6322      	str	r2, [r4, #48]	; 0x30
 8002fe4:	6822      	ldr	r2, [r4, #0]
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	60d3      	str	r3, [r2, #12]
          hspi->TxXferCount--;
 8002fea:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002fec:	3b01      	subs	r3, #1
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	86e3      	strh	r3, [r4, #54]	; 0x36
          if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1d8      	bne.n	8002fa8 <HAL_SPI_TransmitReceive+0x274>
 8002ff6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002ff8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ffc:	d1d4      	bne.n	8002fa8 <HAL_SPI_TransmitReceive+0x274>
            hspi->Instance->CR1 |= SPI_CR1_CRCNEXT;
 8002ffe:	6822      	ldr	r2, [r4, #0]
 8003000:	6813      	ldr	r3, [r2, #0]
 8003002:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003006:	6013      	str	r3, [r2, #0]
 8003008:	e7ce      	b.n	8002fa8 <HAL_SPI_TransmitReceive+0x274>
        if(hspi->Init.Mode == SPI_MODE_SLAVE)
 800300a:	6863      	ldr	r3, [r4, #4]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d19b      	bne.n	8002f48 <HAL_SPI_TransmitReceive+0x214>
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8003010:	4633      	mov	r3, r6
 8003012:	2200      	movs	r2, #0
 8003014:	2101      	movs	r1, #1
 8003016:	4620      	mov	r0, r4
 8003018:	f7ff fd6a 	bl	8002af0 <SPI_WaitOnFlagUntilTimeout>
 800301c:	2800      	cmp	r0, #0
 800301e:	d145      	bne.n	80030ac <HAL_SPI_TransmitReceive+0x378>
          (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 8003020:	6823      	ldr	r3, [r4, #0]
 8003022:	68da      	ldr	r2, [r3, #12]
 8003024:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003026:	1c59      	adds	r1, r3, #1
 8003028:	63a1      	str	r1, [r4, #56]	; 0x38
 800302a:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 800302c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800302e:	3b01      	subs	r3, #1
 8003030:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003032:	e789      	b.n	8002f48 <HAL_SPI_TransmitReceive+0x214>
      if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8003034:	4633      	mov	r3, r6
 8003036:	2200      	movs	r2, #0
 8003038:	2101      	movs	r1, #1
 800303a:	4620      	mov	r0, r4
 800303c:	f7ff fd58 	bl	8002af0 <SPI_WaitOnFlagUntilTimeout>
 8003040:	b938      	cbnz	r0, 8003052 <HAL_SPI_TransmitReceive+0x31e>
      tmpreg = hspi->Instance->DR;
 8003042:	6823      	ldr	r3, [r4, #0]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	b29b      	uxth	r3, r3
 8003048:	f8ad 3006 	strh.w	r3, [sp, #6]
      UNUSED(tmpreg);
 800304c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8003050:	e77e      	b.n	8002f50 <HAL_SPI_TransmitReceive+0x21c>
        hspi->ErrorCode |= HAL_SPI_ERROR_CRC;
 8003052:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003054:	f043 0302 	orr.w	r3, r3, #2
 8003058:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 800305a:	2003      	movs	r0, #3
 800305c:	e00a      	b.n	8003074 <HAL_SPI_TransmitReceive+0x340>
      hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
 800305e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003060:	f043 0320 	orr.w	r3, r3, #32
 8003064:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8003066:	2003      	movs	r0, #3
 8003068:	e004      	b.n	8003074 <HAL_SPI_TransmitReceive+0x340>
    __HAL_UNLOCK(hspi);
 800306a:	2300      	movs	r3, #0
 800306c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    return HAL_OK;
 8003070:	e000      	b.n	8003074 <HAL_SPI_TransmitReceive+0x340>
    return HAL_BUSY;
 8003072:	2002      	movs	r0, #2
}
 8003074:	b002      	add	sp, #8
 8003076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 800307a:	2001      	movs	r0, #1
 800307c:	e7fa      	b.n	8003074 <HAL_SPI_TransmitReceive+0x340>
 800307e:	bf00      	nop
 8003080:	080042d0 	.word	0x080042d0
 8003084:	2001      	movs	r0, #1
 8003086:	e7f5      	b.n	8003074 <HAL_SPI_TransmitReceive+0x340>
 8003088:	2001      	movs	r0, #1
 800308a:	e7f3      	b.n	8003074 <HAL_SPI_TransmitReceive+0x340>
    __HAL_LOCK(hspi);
 800308c:	2002      	movs	r0, #2
 800308e:	e7f1      	b.n	8003074 <HAL_SPI_TransmitReceive+0x340>
          return HAL_TIMEOUT;
 8003090:	2003      	movs	r0, #3
 8003092:	e7ef      	b.n	8003074 <HAL_SPI_TransmitReceive+0x340>
            return HAL_TIMEOUT;
 8003094:	2003      	movs	r0, #3
 8003096:	e7ed      	b.n	8003074 <HAL_SPI_TransmitReceive+0x340>
            return HAL_TIMEOUT;
 8003098:	2003      	movs	r0, #3
 800309a:	e7eb      	b.n	8003074 <HAL_SPI_TransmitReceive+0x340>
            return HAL_TIMEOUT;
 800309c:	2003      	movs	r0, #3
 800309e:	e7e9      	b.n	8003074 <HAL_SPI_TransmitReceive+0x340>
          return HAL_TIMEOUT;
 80030a0:	2003      	movs	r0, #3
 80030a2:	e7e7      	b.n	8003074 <HAL_SPI_TransmitReceive+0x340>
            return HAL_TIMEOUT;
 80030a4:	2003      	movs	r0, #3
 80030a6:	e7e5      	b.n	8003074 <HAL_SPI_TransmitReceive+0x340>
              return HAL_TIMEOUT;
 80030a8:	2003      	movs	r0, #3
 80030aa:	e7e3      	b.n	8003074 <HAL_SPI_TransmitReceive+0x340>
            return HAL_TIMEOUT;
 80030ac:	2003      	movs	r0, #3
 80030ae:	e7e1      	b.n	8003074 <HAL_SPI_TransmitReceive+0x340>

080030b0 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030b2:	4604      	mov	r4, r0
  uint32_t tmpreg = 0x00;
  
  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));  
 80030b4:	6842      	ldr	r2, [r0, #4]
 80030b6:	4b94      	ldr	r3, [pc, #592]	; (8003308 <UART_SetConfig+0x258>)
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d878      	bhi.n	80031ae <UART_SetConfig+0xfe>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80030bc:	68e3      	ldr	r3, [r4, #12]
 80030be:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 80030c2:	d004      	beq.n	80030ce <UART_SetConfig+0x1e>
 80030c4:	f240 7137 	movw	r1, #1847	; 0x737
 80030c8:	4890      	ldr	r0, [pc, #576]	; (800330c <UART_SetConfig+0x25c>)
 80030ca:	f000 fd15 	bl	8003af8 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80030ce:	6923      	ldr	r3, [r4, #16]
 80030d0:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 80030d4:	d002      	beq.n	80030dc <UART_SetConfig+0x2c>
 80030d6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80030da:	d16e      	bne.n	80031ba <UART_SetConfig+0x10a>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80030dc:	6963      	ldr	r3, [r4, #20]
 80030de:	f64f 72f3 	movw	r2, #65523	; 0xfff3
 80030e2:	4213      	tst	r3, r2
 80030e4:	d100      	bne.n	80030e8 <UART_SetConfig+0x38>
 80030e6:	b923      	cbnz	r3, 80030f2 <UART_SetConfig+0x42>
 80030e8:	f240 7139 	movw	r1, #1849	; 0x739
 80030ec:	4887      	ldr	r0, [pc, #540]	; (800330c <UART_SetConfig+0x25c>)
 80030ee:	f000 fd03 	bl	8003af8 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 80030f2:	6822      	ldr	r2, [r4, #0]
 80030f4:	6913      	ldr	r3, [r2, #16]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80030f6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80030fa:	68e1      	ldr	r1, [r4, #12]
 80030fc:	430b      	orrs	r3, r1
  
  /* Write to USART CR2 */
  huart->Instance->CR2 = (uint32_t)tmpreg;
 80030fe:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8003100:	6821      	ldr	r1, [r4, #0]
 8003102:	68ca      	ldr	r2, [r1, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8003104:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
 8003108:	f022 020c 	bic.w	r2, r2, #12
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800310c:	68a3      	ldr	r3, [r4, #8]
 800310e:	6920      	ldr	r0, [r4, #16]
 8003110:	4303      	orrs	r3, r0
 8003112:	6960      	ldr	r0, [r4, #20]
 8003114:	4303      	orrs	r3, r0
 8003116:	69e0      	ldr	r0, [r4, #28]
 8003118:	4303      	orrs	r3, r0
 800311a:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  huart->Instance->CR1 = (uint32_t)tmpreg;
 800311c:	60cb      	str	r3, [r1, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 800311e:	6822      	ldr	r2, [r4, #0]
 8003120:	6953      	ldr	r3, [r2, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8003122:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8003126:	69a1      	ldr	r1, [r4, #24]
 8003128:	430b      	orrs	r3, r1
  
  /* Write to USART CR3 */
  huart->Instance->CR3 = (uint32_t)tmpreg;
 800312a:	6153      	str	r3, [r2, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800312c:	69e3      	ldr	r3, [r4, #28]
 800312e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003132:	d048      	beq.n	80031c6 <UART_SetConfig+0x116>
    }
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8003134:	6823      	ldr	r3, [r4, #0]
 8003136:	4a76      	ldr	r2, [pc, #472]	; (8003310 <UART_SetConfig+0x260>)
 8003138:	4293      	cmp	r3, r2
 800313a:	f000 80b2 	beq.w	80032a2 <UART_SetConfig+0x1f2>
 800313e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003142:	4293      	cmp	r3, r2
 8003144:	f000 80ad 	beq.w	80032a2 <UART_SetConfig+0x1f2>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003148:	f7ff fca6 	bl	8002a98 <HAL_RCC_GetPCLK1Freq>
 800314c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003150:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003154:	6863      	ldr	r3, [r4, #4]
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	fbb0 f3f3 	udiv	r3, r0, r3
 800315c:	4f6d      	ldr	r7, [pc, #436]	; (8003314 <UART_SetConfig+0x264>)
 800315e:	fba7 2303 	umull	r2, r3, r7, r3
 8003162:	095b      	lsrs	r3, r3, #5
 8003164:	011e      	lsls	r6, r3, #4
 8003166:	f7ff fc97 	bl	8002a98 <HAL_RCC_GetPCLK1Freq>
 800316a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800316e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003172:	6865      	ldr	r5, [r4, #4]
 8003174:	00ad      	lsls	r5, r5, #2
 8003176:	fbb0 f5f5 	udiv	r5, r0, r5
 800317a:	f7ff fc8d 	bl	8002a98 <HAL_RCC_GetPCLK1Freq>
 800317e:	6822      	ldr	r2, [r4, #0]
 8003180:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003184:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003188:	6863      	ldr	r3, [r4, #4]
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003190:	fba7 1303 	umull	r1, r3, r7, r3
 8003194:	095b      	lsrs	r3, r3, #5
 8003196:	2164      	movs	r1, #100	; 0x64
 8003198:	fb01 5313 	mls	r3, r1, r3, r5
 800319c:	011b      	lsls	r3, r3, #4
 800319e:	3332      	adds	r3, #50	; 0x32
 80031a0:	fba7 1303 	umull	r1, r3, r7, r3
 80031a4:	f3c3 1343 	ubfx	r3, r3, #5, #4
 80031a8:	4333      	orrs	r3, r6
 80031aa:	6093      	str	r3, [r2, #8]
    }
  }
}
 80031ac:	e0ab      	b.n	8003306 <UART_SetConfig+0x256>
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));  
 80031ae:	f240 7136 	movw	r1, #1846	; 0x736
 80031b2:	4856      	ldr	r0, [pc, #344]	; (800330c <UART_SetConfig+0x25c>)
 80031b4:	f000 fca0 	bl	8003af8 <assert_failed>
 80031b8:	e780      	b.n	80030bc <UART_SetConfig+0xc>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80031ba:	f44f 61e7 	mov.w	r1, #1848	; 0x738
 80031be:	4853      	ldr	r0, [pc, #332]	; (800330c <UART_SetConfig+0x25c>)
 80031c0:	f000 fc9a 	bl	8003af8 <assert_failed>
 80031c4:	e78a      	b.n	80030dc <UART_SetConfig+0x2c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80031c6:	6823      	ldr	r3, [r4, #0]
 80031c8:	4a51      	ldr	r2, [pc, #324]	; (8003310 <UART_SetConfig+0x260>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d036      	beq.n	800323c <UART_SetConfig+0x18c>
 80031ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d032      	beq.n	800323c <UART_SetConfig+0x18c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80031d6:	f7ff fc5f 	bl	8002a98 <HAL_RCC_GetPCLK1Freq>
 80031da:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80031de:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80031e2:	6863      	ldr	r3, [r4, #4]
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80031ea:	4f4a      	ldr	r7, [pc, #296]	; (8003314 <UART_SetConfig+0x264>)
 80031ec:	fba7 2303 	umull	r2, r3, r7, r3
 80031f0:	095b      	lsrs	r3, r3, #5
 80031f2:	011e      	lsls	r6, r3, #4
 80031f4:	f7ff fc50 	bl	8002a98 <HAL_RCC_GetPCLK1Freq>
 80031f8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80031fc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003200:	6865      	ldr	r5, [r4, #4]
 8003202:	006d      	lsls	r5, r5, #1
 8003204:	fbb0 f5f5 	udiv	r5, r0, r5
 8003208:	f7ff fc46 	bl	8002a98 <HAL_RCC_GetPCLK1Freq>
 800320c:	6822      	ldr	r2, [r4, #0]
 800320e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003212:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003216:	6863      	ldr	r3, [r4, #4]
 8003218:	005b      	lsls	r3, r3, #1
 800321a:	fbb0 f3f3 	udiv	r3, r0, r3
 800321e:	fba7 1303 	umull	r1, r3, r7, r3
 8003222:	095b      	lsrs	r3, r3, #5
 8003224:	2164      	movs	r1, #100	; 0x64
 8003226:	fb01 5313 	mls	r3, r1, r3, r5
 800322a:	011b      	lsls	r3, r3, #4
 800322c:	3332      	adds	r3, #50	; 0x32
 800322e:	fba7 1303 	umull	r1, r3, r7, r3
 8003232:	f3c3 1343 	ubfx	r3, r3, #5, #4
 8003236:	4333      	orrs	r3, r6
 8003238:	6093      	str	r3, [r2, #8]
 800323a:	e064      	b.n	8003306 <UART_SetConfig+0x256>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800323c:	f7ff fc42 	bl	8002ac4 <HAL_RCC_GetPCLK2Freq>
 8003240:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003244:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003248:	6863      	ldr	r3, [r4, #4]
 800324a:	005b      	lsls	r3, r3, #1
 800324c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003250:	4f30      	ldr	r7, [pc, #192]	; (8003314 <UART_SetConfig+0x264>)
 8003252:	fba7 2303 	umull	r2, r3, r7, r3
 8003256:	095b      	lsrs	r3, r3, #5
 8003258:	011e      	lsls	r6, r3, #4
 800325a:	f7ff fc33 	bl	8002ac4 <HAL_RCC_GetPCLK2Freq>
 800325e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003262:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003266:	6865      	ldr	r5, [r4, #4]
 8003268:	006d      	lsls	r5, r5, #1
 800326a:	fbb0 f5f5 	udiv	r5, r0, r5
 800326e:	f7ff fc29 	bl	8002ac4 <HAL_RCC_GetPCLK2Freq>
 8003272:	6822      	ldr	r2, [r4, #0]
 8003274:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003278:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800327c:	6863      	ldr	r3, [r4, #4]
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	fbb0 f3f3 	udiv	r3, r0, r3
 8003284:	fba7 1303 	umull	r1, r3, r7, r3
 8003288:	095b      	lsrs	r3, r3, #5
 800328a:	2164      	movs	r1, #100	; 0x64
 800328c:	fb01 5313 	mls	r3, r1, r3, r5
 8003290:	011b      	lsls	r3, r3, #4
 8003292:	3332      	adds	r3, #50	; 0x32
 8003294:	fba7 1303 	umull	r1, r3, r7, r3
 8003298:	f3c3 1343 	ubfx	r3, r3, #5, #4
 800329c:	4333      	orrs	r3, r6
 800329e:	6093      	str	r3, [r2, #8]
 80032a0:	e031      	b.n	8003306 <UART_SetConfig+0x256>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80032a2:	f7ff fc0f 	bl	8002ac4 <HAL_RCC_GetPCLK2Freq>
 80032a6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80032aa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80032ae:	6863      	ldr	r3, [r4, #4]
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80032b6:	4f17      	ldr	r7, [pc, #92]	; (8003314 <UART_SetConfig+0x264>)
 80032b8:	fba7 2303 	umull	r2, r3, r7, r3
 80032bc:	095b      	lsrs	r3, r3, #5
 80032be:	011e      	lsls	r6, r3, #4
 80032c0:	f7ff fc00 	bl	8002ac4 <HAL_RCC_GetPCLK2Freq>
 80032c4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80032c8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80032cc:	6865      	ldr	r5, [r4, #4]
 80032ce:	00ad      	lsls	r5, r5, #2
 80032d0:	fbb0 f5f5 	udiv	r5, r0, r5
 80032d4:	f7ff fbf6 	bl	8002ac4 <HAL_RCC_GetPCLK2Freq>
 80032d8:	6822      	ldr	r2, [r4, #0]
 80032da:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80032de:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80032e2:	6863      	ldr	r3, [r4, #4]
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80032ea:	fba7 1303 	umull	r1, r3, r7, r3
 80032ee:	095b      	lsrs	r3, r3, #5
 80032f0:	2164      	movs	r1, #100	; 0x64
 80032f2:	fb01 5313 	mls	r3, r1, r3, r5
 80032f6:	011b      	lsls	r3, r3, #4
 80032f8:	3332      	adds	r3, #50	; 0x32
 80032fa:	fba7 1303 	umull	r1, r3, r7, r3
 80032fe:	f3c3 1343 	ubfx	r3, r3, #5, #4
 8003302:	4333      	orrs	r3, r6
 8003304:	6093      	str	r3, [r2, #8]
}
 8003306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003308:	00a037a0 	.word	0x00a037a0
 800330c:	08004358 	.word	0x08004358
 8003310:	40011000 	.word	0x40011000
 8003314:	51eb851f 	.word	0x51eb851f

08003318 <UART_WaitOnFlagUntilTimeout>:
{
 8003318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800331c:	4606      	mov	r6, r0
 800331e:	460d      	mov	r5, r1
 8003320:	4690      	mov	r8, r2
 8003322:	461c      	mov	r4, r3
  tickstart = HAL_GetTick();
 8003324:	f7fe fa62 	bl	80017ec <HAL_GetTick>
 8003328:	4607      	mov	r7, r0
  if(Status == RESET)
 800332a:	f1b8 0f00 	cmp.w	r8, #0
 800332e:	d029      	beq.n	8003384 <UART_WaitOnFlagUntilTimeout+0x6c>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 8003330:	6832      	ldr	r2, [r6, #0]
 8003332:	6813      	ldr	r3, [r2, #0]
 8003334:	ea35 0303 	bics.w	r3, r5, r3
 8003338:	d151      	bne.n	80033de <UART_WaitOnFlagUntilTimeout+0xc6>
      if(Timeout != HAL_MAX_DELAY)
 800333a:	f1b4 3fff 	cmp.w	r4, #4294967295
 800333e:	d0f8      	beq.n	8003332 <UART_WaitOnFlagUntilTimeout+0x1a>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8003340:	b124      	cbz	r4, 800334c <UART_WaitOnFlagUntilTimeout+0x34>
 8003342:	f7fe fa53 	bl	80017ec <HAL_GetTick>
 8003346:	1bc0      	subs	r0, r0, r7
 8003348:	42a0      	cmp	r0, r4
 800334a:	d9f1      	bls.n	8003330 <UART_WaitOnFlagUntilTimeout+0x18>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800334c:	6832      	ldr	r2, [r6, #0]
 800334e:	68d3      	ldr	r3, [r2, #12]
 8003350:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003354:	60d3      	str	r3, [r2, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003356:	6832      	ldr	r2, [r6, #0]
 8003358:	68d3      	ldr	r3, [r2, #12]
 800335a:	f023 0320 	bic.w	r3, r3, #32
 800335e:	60d3      	str	r3, [r2, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003360:	6832      	ldr	r2, [r6, #0]
 8003362:	68d3      	ldr	r3, [r2, #12]
 8003364:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003368:	60d3      	str	r3, [r2, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800336a:	6832      	ldr	r2, [r6, #0]
 800336c:	6953      	ldr	r3, [r2, #20]
 800336e:	f023 0301 	bic.w	r3, r3, #1
 8003372:	6153      	str	r3, [r2, #20]
          huart->State= HAL_UART_STATE_READY;
 8003374:	2301      	movs	r3, #1
 8003376:	f886 3039 	strb.w	r3, [r6, #57]	; 0x39
          __HAL_UNLOCK(huart);
 800337a:	2300      	movs	r3, #0
 800337c:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38
          return HAL_TIMEOUT;
 8003380:	2003      	movs	r0, #3
 8003382:	e02a      	b.n	80033da <UART_WaitOnFlagUntilTimeout+0xc2>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8003384:	6831      	ldr	r1, [r6, #0]
 8003386:	680b      	ldr	r3, [r1, #0]
 8003388:	ea35 0303 	bics.w	r3, r5, r3
 800338c:	d024      	beq.n	80033d8 <UART_WaitOnFlagUntilTimeout+0xc0>
      if(Timeout != HAL_MAX_DELAY)
 800338e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8003392:	d0f8      	beq.n	8003386 <UART_WaitOnFlagUntilTimeout+0x6e>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8003394:	b124      	cbz	r4, 80033a0 <UART_WaitOnFlagUntilTimeout+0x88>
 8003396:	f7fe fa29 	bl	80017ec <HAL_GetTick>
 800339a:	1bc0      	subs	r0, r0, r7
 800339c:	42a0      	cmp	r0, r4
 800339e:	d9f1      	bls.n	8003384 <UART_WaitOnFlagUntilTimeout+0x6c>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80033a0:	6832      	ldr	r2, [r6, #0]
 80033a2:	68d3      	ldr	r3, [r2, #12]
 80033a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033a8:	60d3      	str	r3, [r2, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80033aa:	6832      	ldr	r2, [r6, #0]
 80033ac:	68d3      	ldr	r3, [r2, #12]
 80033ae:	f023 0320 	bic.w	r3, r3, #32
 80033b2:	60d3      	str	r3, [r2, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80033b4:	6832      	ldr	r2, [r6, #0]
 80033b6:	68d3      	ldr	r3, [r2, #12]
 80033b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033bc:	60d3      	str	r3, [r2, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80033be:	6832      	ldr	r2, [r6, #0]
 80033c0:	6953      	ldr	r3, [r2, #20]
 80033c2:	f023 0301 	bic.w	r3, r3, #1
 80033c6:	6153      	str	r3, [r2, #20]
          huart->State= HAL_UART_STATE_READY;
 80033c8:	2301      	movs	r3, #1
 80033ca:	f886 3039 	strb.w	r3, [r6, #57]	; 0x39
          __HAL_UNLOCK(huart);
 80033ce:	2300      	movs	r3, #0
 80033d0:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38
          return HAL_TIMEOUT;
 80033d4:	2003      	movs	r0, #3
 80033d6:	e000      	b.n	80033da <UART_WaitOnFlagUntilTimeout+0xc2>
  return HAL_OK;
 80033d8:	4640      	mov	r0, r8
}
 80033da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 80033de:	2000      	movs	r0, #0
 80033e0:	e7fb      	b.n	80033da <UART_WaitOnFlagUntilTimeout+0xc2>
	...

080033e4 <HAL_UART_Init>:
  if(huart == NULL)
 80033e4:	2800      	cmp	r0, #0
 80033e6:	d072      	beq.n	80034ce <HAL_UART_Init+0xea>
{
 80033e8:	b510      	push	{r4, lr}
 80033ea:	4604      	mov	r4, r0
  if(huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80033ec:	6983      	ldr	r3, [r0, #24]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d055      	beq.n	800349e <HAL_UART_Init+0xba>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80033f2:	6802      	ldr	r2, [r0, #0]
 80033f4:	4937      	ldr	r1, [pc, #220]	; (80034d4 <HAL_UART_Init+0xf0>)
 80033f6:	428a      	cmp	r2, r1
 80033f8:	d044      	beq.n	8003484 <HAL_UART_Init+0xa0>
 80033fa:	f5a1 414c 	sub.w	r1, r1, #52224	; 0xcc00
 80033fe:	428a      	cmp	r2, r1
 8003400:	d040      	beq.n	8003484 <HAL_UART_Init+0xa0>
 8003402:	f501 4150 	add.w	r1, r1, #53248	; 0xd000
 8003406:	428a      	cmp	r2, r1
 8003408:	d03c      	beq.n	8003484 <HAL_UART_Init+0xa0>
 800340a:	21fc      	movs	r1, #252	; 0xfc
 800340c:	4832      	ldr	r0, [pc, #200]	; (80034d8 <HAL_UART_Init+0xf4>)
 800340e:	f000 fb73 	bl	8003af8 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8003412:	69a3      	ldr	r3, [r4, #24]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d135      	bne.n	8003484 <HAL_UART_Init+0xa0>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8003418:	68a3      	ldr	r3, [r4, #8]
 800341a:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 800341e:	d004      	beq.n	800342a <HAL_UART_Init+0x46>
 8003420:	f240 1103 	movw	r1, #259	; 0x103
 8003424:	482c      	ldr	r0, [pc, #176]	; (80034d8 <HAL_UART_Init+0xf4>)
 8003426:	f000 fb67 	bl	8003af8 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800342a:	69e3      	ldr	r3, [r4, #28]
 800342c:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 8003430:	d004      	beq.n	800343c <HAL_UART_Init+0x58>
 8003432:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003436:	4828      	ldr	r0, [pc, #160]	; (80034d8 <HAL_UART_Init+0xf4>)
 8003438:	f000 fb5e 	bl	8003af8 <assert_failed>
  if(huart->State == HAL_UART_STATE_RESET)
 800343c:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8003440:	2b00      	cmp	r3, #0
 8003442:	d03e      	beq.n	80034c2 <HAL_UART_Init+0xde>
  huart->State = HAL_UART_STATE_BUSY;
 8003444:	2302      	movs	r3, #2
 8003446:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800344a:	6822      	ldr	r2, [r4, #0]
 800344c:	68d3      	ldr	r3, [r2, #12]
 800344e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003452:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8003454:	4620      	mov	r0, r4
 8003456:	f7ff fe2b 	bl	80030b0 <UART_SetConfig>
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 800345a:	6822      	ldr	r2, [r4, #0]
 800345c:	6913      	ldr	r3, [r2, #16]
 800345e:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8003462:	6113      	str	r3, [r2, #16]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8003464:	6822      	ldr	r2, [r4, #0]
 8003466:	6953      	ldr	r3, [r2, #20]
 8003468:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800346c:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 800346e:	6822      	ldr	r2, [r4, #0]
 8003470:	68d3      	ldr	r3, [r2, #12]
 8003472:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003476:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003478:	2000      	movs	r0, #0
 800347a:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->State= HAL_UART_STATE_READY;
 800347c:	2301      	movs	r3, #1
 800347e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 8003482:	bd10      	pop	{r4, pc}
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8003484:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003488:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800348c:	d0c4      	beq.n	8003418 <HAL_UART_Init+0x34>
 800348e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003492:	d0c1      	beq.n	8003418 <HAL_UART_Init+0x34>
 8003494:	21fd      	movs	r1, #253	; 0xfd
 8003496:	4810      	ldr	r0, [pc, #64]	; (80034d8 <HAL_UART_Init+0xf4>)
 8003498:	f000 fb2e 	bl	8003af8 <assert_failed>
 800349c:	e7bc      	b.n	8003418 <HAL_UART_Init+0x34>
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800349e:	6803      	ldr	r3, [r0, #0]
 80034a0:	4a0c      	ldr	r2, [pc, #48]	; (80034d4 <HAL_UART_Init+0xf0>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d0b8      	beq.n	8003418 <HAL_UART_Init+0x34>
 80034a6:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d0b4      	beq.n	8003418 <HAL_UART_Init+0x34>
 80034ae:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d0b0      	beq.n	8003418 <HAL_UART_Init+0x34>
 80034b6:	f240 1101 	movw	r1, #257	; 0x101
 80034ba:	4807      	ldr	r0, [pc, #28]	; (80034d8 <HAL_UART_Init+0xf4>)
 80034bc:	f000 fb1c 	bl	8003af8 <assert_failed>
 80034c0:	e7aa      	b.n	8003418 <HAL_UART_Init+0x34>
    huart->Lock = HAL_UNLOCKED;
 80034c2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80034c6:	4620      	mov	r0, r4
 80034c8:	f000 fbbc 	bl	8003c44 <HAL_UART_MspInit>
 80034cc:	e7ba      	b.n	8003444 <HAL_UART_Init+0x60>
    return HAL_ERROR;
 80034ce:	2001      	movs	r0, #1
}
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	40011000 	.word	0x40011000
 80034d8:	08004358 	.word	0x08004358

080034dc <HAL_UART_Transmit>:
{
 80034dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034e0:	4604      	mov	r4, r0
 80034e2:	4688      	mov	r8, r1
 80034e4:	461d      	mov	r5, r3
  tmp1 = huart->State;
 80034e6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80034ea:	b2db      	uxtb	r3, r3
  if((tmp1 == HAL_UART_STATE_READY) || (tmp1 == HAL_UART_STATE_BUSY_RX))
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d001      	beq.n	80034f4 <HAL_UART_Transmit+0x18>
 80034f0:	2b22      	cmp	r3, #34	; 0x22
 80034f2:	d15b      	bne.n	80035ac <HAL_UART_Transmit+0xd0>
    if((pData == NULL ) || (Size == 0)) 
 80034f4:	f1b8 0f00 	cmp.w	r8, #0
 80034f8:	d05b      	beq.n	80035b2 <HAL_UART_Transmit+0xd6>
 80034fa:	2a00      	cmp	r2, #0
 80034fc:	d05b      	beq.n	80035b6 <HAL_UART_Transmit+0xda>
    __HAL_LOCK(huart);
 80034fe:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8003502:	2b01      	cmp	r3, #1
 8003504:	d059      	beq.n	80035ba <HAL_UART_Transmit+0xde>
 8003506:	2301      	movs	r3, #1
 8003508:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800350c:	2300      	movs	r3, #0
 800350e:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 8003510:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8003514:	b2db      	uxtb	r3, r3
 8003516:	2b22      	cmp	r3, #34	; 0x22
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8003518:	bf0c      	ite	eq
 800351a:	2332      	moveq	r3, #50	; 0x32
      huart->State = HAL_UART_STATE_BUSY_TX;
 800351c:	2312      	movne	r3, #18
 800351e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    huart->TxXferSize = Size;
 8003522:	84a2      	strh	r2, [r4, #36]	; 0x24
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8003524:	2700      	movs	r7, #0
 8003526:	2680      	movs	r6, #128	; 0x80
 8003528:	e01d      	b.n	8003566 <HAL_UART_Transmit+0x8a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 800352a:	462b      	mov	r3, r5
 800352c:	463a      	mov	r2, r7
 800352e:	4631      	mov	r1, r6
 8003530:	4620      	mov	r0, r4
 8003532:	f7ff fef1 	bl	8003318 <UART_WaitOnFlagUntilTimeout>
 8003536:	2800      	cmp	r0, #0
 8003538:	d141      	bne.n	80035be <HAL_UART_Transmit+0xe2>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800353a:	6822      	ldr	r2, [r4, #0]
 800353c:	f8b8 3000 	ldrh.w	r3, [r8]
 8003540:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003544:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8003546:	6923      	ldr	r3, [r4, #16]
 8003548:	b913      	cbnz	r3, 8003550 <HAL_UART_Transmit+0x74>
          pData +=2;
 800354a:	f108 0802 	add.w	r8, r8, #2
 800354e:	e008      	b.n	8003562 <HAL_UART_Transmit+0x86>
          pData +=1;
 8003550:	f108 0801 	add.w	r8, r8, #1
 8003554:	e005      	b.n	8003562 <HAL_UART_Transmit+0x86>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003556:	4641      	mov	r1, r8
 8003558:	6823      	ldr	r3, [r4, #0]
 800355a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800355e:	605a      	str	r2, [r3, #4]
 8003560:	4688      	mov	r8, r1
    while(huart->TxXferCount > 0)
 8003562:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8003564:	b17a      	cbz	r2, 8003586 <HAL_UART_Transmit+0xaa>
      huart->TxXferCount--;
 8003566:	3a01      	subs	r2, #1
 8003568:	84e2      	strh	r2, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800356a:	68a2      	ldr	r2, [r4, #8]
 800356c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8003570:	d0db      	beq.n	800352a <HAL_UART_Transmit+0x4e>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8003572:	462b      	mov	r3, r5
 8003574:	463a      	mov	r2, r7
 8003576:	4631      	mov	r1, r6
 8003578:	4620      	mov	r0, r4
 800357a:	f7ff fecd 	bl	8003318 <UART_WaitOnFlagUntilTimeout>
 800357e:	2800      	cmp	r0, #0
 8003580:	d0e9      	beq.n	8003556 <HAL_UART_Transmit+0x7a>
          return HAL_TIMEOUT;
 8003582:	2003      	movs	r0, #3
 8003584:	e013      	b.n	80035ae <HAL_UART_Transmit+0xd2>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 8003586:	462b      	mov	r3, r5
 8003588:	2140      	movs	r1, #64	; 0x40
 800358a:	4620      	mov	r0, r4
 800358c:	f7ff fec4 	bl	8003318 <UART_WaitOnFlagUntilTimeout>
 8003590:	b9b8      	cbnz	r0, 80035c2 <HAL_UART_Transmit+0xe6>
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8003592:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8003596:	b2db      	uxtb	r3, r3
 8003598:	2b32      	cmp	r3, #50	; 0x32
      huart->State = HAL_UART_STATE_BUSY_RX;
 800359a:	bf0c      	ite	eq
 800359c:	2322      	moveq	r3, #34	; 0x22
      huart->State = HAL_UART_STATE_READY;
 800359e:	2301      	movne	r3, #1
 80035a0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 80035a4:	2300      	movs	r3, #0
 80035a6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    return HAL_OK;
 80035aa:	e000      	b.n	80035ae <HAL_UART_Transmit+0xd2>
    return HAL_BUSY;   
 80035ac:	2002      	movs	r0, #2
}
 80035ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 80035b2:	2001      	movs	r0, #1
 80035b4:	e7fb      	b.n	80035ae <HAL_UART_Transmit+0xd2>
 80035b6:	2001      	movs	r0, #1
 80035b8:	e7f9      	b.n	80035ae <HAL_UART_Transmit+0xd2>
    __HAL_LOCK(huart);
 80035ba:	2002      	movs	r0, #2
 80035bc:	e7f7      	b.n	80035ae <HAL_UART_Transmit+0xd2>
          return HAL_TIMEOUT;
 80035be:	2003      	movs	r0, #3
 80035c0:	e7f5      	b.n	80035ae <HAL_UART_Transmit+0xd2>
      return HAL_TIMEOUT;
 80035c2:	2003      	movs	r0, #3
 80035c4:	e7f3      	b.n	80035ae <HAL_UART_Transmit+0xd2>

080035c6 <HAL_UART_TxCpltCallback>:
}
 80035c6:	4770      	bx	lr

080035c8 <HAL_UART_RxCpltCallback>:
}
 80035c8:	4770      	bx	lr

080035ca <HAL_UART_ErrorCallback>:
}
 80035ca:	4770      	bx	lr

080035cc <HAL_UART_IRQHandler>:
{
 80035cc:	b510      	push	{r4, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	4604      	mov	r4, r0
  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
 80035d2:	6803      	ldr	r3, [r0, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE);  
 80035d6:	68d9      	ldr	r1, [r3, #12]
  if((tmp1 != RESET) && (tmp2 != RESET))
 80035d8:	f012 0f01 	tst.w	r2, #1
 80035dc:	d00b      	beq.n	80035f6 <HAL_UART_IRQHandler+0x2a>
 80035de:	f411 7f80 	tst.w	r1, #256	; 0x100
 80035e2:	d008      	beq.n	80035f6 <HAL_UART_IRQHandler+0x2a>
    __HAL_UART_CLEAR_PEFLAG(huart);
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	9200      	str	r2, [sp, #0]
 80035e8:	685a      	ldr	r2, [r3, #4]
 80035ea:	9200      	str	r2, [sp, #0]
 80035ec:	9a00      	ldr	r2, [sp, #0]
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 80035ee:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80035f0:	f042 0201 	orr.w	r2, r2, #1
 80035f4:	63c2      	str	r2, [r0, #60]	; 0x3c
  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_FE);
 80035f6:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 80035f8:	6959      	ldr	r1, [r3, #20]
  if((tmp1 != RESET) && (tmp2 != RESET))
 80035fa:	f012 0f02 	tst.w	r2, #2
 80035fe:	d00b      	beq.n	8003618 <HAL_UART_IRQHandler+0x4c>
 8003600:	f011 0f01 	tst.w	r1, #1
 8003604:	d008      	beq.n	8003618 <HAL_UART_IRQHandler+0x4c>
    __HAL_UART_CLEAR_FEFLAG(huart);
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	9201      	str	r2, [sp, #4]
 800360a:	685a      	ldr	r2, [r3, #4]
 800360c:	9201      	str	r2, [sp, #4]
 800360e:	9a01      	ldr	r2, [sp, #4]
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003610:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003612:	f042 0204 	orr.w	r2, r2, #4
 8003616:	63e2      	str	r2, [r4, #60]	; 0x3c
  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_NE);
 8003618:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 800361a:	6959      	ldr	r1, [r3, #20]
  if((tmp1 != RESET) && (tmp2 != RESET))
 800361c:	f012 0f04 	tst.w	r2, #4
 8003620:	d00b      	beq.n	800363a <HAL_UART_IRQHandler+0x6e>
 8003622:	f011 0f01 	tst.w	r1, #1
 8003626:	d008      	beq.n	800363a <HAL_UART_IRQHandler+0x6e>
    __HAL_UART_CLEAR_NEFLAG(huart);
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	9202      	str	r2, [sp, #8]
 800362c:	685a      	ldr	r2, [r3, #4]
 800362e:	9202      	str	r2, [sp, #8]
 8003630:	9a02      	ldr	r2, [sp, #8]
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003632:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003634:	f042 0202 	orr.w	r2, r2, #2
 8003638:	63e2      	str	r2, [r4, #60]	; 0x3c
  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_ORE);
 800363a:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 800363c:	6959      	ldr	r1, [r3, #20]
  if((tmp1 != RESET) && (tmp2 != RESET))
 800363e:	f012 0f08 	tst.w	r2, #8
 8003642:	d00b      	beq.n	800365c <HAL_UART_IRQHandler+0x90>
 8003644:	f011 0f01 	tst.w	r1, #1
 8003648:	d008      	beq.n	800365c <HAL_UART_IRQHandler+0x90>
    __HAL_UART_CLEAR_OREFLAG(huart);
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	9203      	str	r2, [sp, #12]
 800364e:	685a      	ldr	r2, [r3, #4]
 8003650:	9203      	str	r2, [sp, #12]
 8003652:	9a03      	ldr	r2, [sp, #12]
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003654:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003656:	f042 0208 	orr.w	r2, r2, #8
 800365a:	63e2      	str	r2, [r4, #60]	; 0x3c
  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE);
 800365c:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE);
 800365e:	68d9      	ldr	r1, [r3, #12]
  if((tmp1 != RESET) && (tmp2 != RESET))
 8003660:	f012 0f20 	tst.w	r2, #32
 8003664:	d002      	beq.n	800366c <HAL_UART_IRQHandler+0xa0>
 8003666:	f011 0f20 	tst.w	r1, #32
 800366a:	d118      	bne.n	800369e <HAL_UART_IRQHandler+0xd2>
  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_TXE);
 800366c:	6823      	ldr	r3, [r4, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE);
 8003670:	68d9      	ldr	r1, [r3, #12]
  if((tmp1 != RESET) && (tmp2 != RESET))
 8003672:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003676:	d002      	beq.n	800367e <HAL_UART_IRQHandler+0xb2>
 8003678:	f011 0f80 	tst.w	r1, #128	; 0x80
 800367c:	d160      	bne.n	8003740 <HAL_UART_IRQHandler+0x174>
  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_TC);
 800367e:	6823      	ldr	r3, [r4, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC);
 8003682:	68d9      	ldr	r1, [r3, #12]
  if((tmp1 != RESET) && (tmp2 != RESET))
 8003684:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003688:	d003      	beq.n	8003692 <HAL_UART_IRQHandler+0xc6>
 800368a:	f011 0f40 	tst.w	r1, #64	; 0x40
 800368e:	f040 8086 	bne.w	800379e <HAL_UART_IRQHandler+0x1d2>
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003692:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003694:	2b00      	cmp	r3, #0
 8003696:	f040 80a0 	bne.w	80037da <HAL_UART_IRQHandler+0x20e>
}
 800369a:	b004      	add	sp, #16
 800369c:	bd10      	pop	{r4, pc}
  tmp1 = huart->State; 
 800369e:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
  if((tmp1 == HAL_UART_STATE_BUSY_RX) || (tmp1 == HAL_UART_STATE_BUSY_TX_RX))
 80036a2:	f002 02ef 	and.w	r2, r2, #239	; 0xef
 80036a6:	2a22      	cmp	r2, #34	; 0x22
 80036a8:	d1e0      	bne.n	800366c <HAL_UART_IRQHandler+0xa0>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80036aa:	68a2      	ldr	r2, [r4, #8]
 80036ac:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80036b0:	d028      	beq.n	8003704 <HAL_UART_IRQHandler+0x138>
      if(huart->Init.Parity == UART_PARITY_NONE)
 80036b2:	6922      	ldr	r2, [r4, #16]
 80036b4:	2a00      	cmp	r2, #0
 80036b6:	d137      	bne.n	8003728 <HAL_UART_IRQHandler+0x15c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80036b8:	685a      	ldr	r2, [r3, #4]
 80036ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80036bc:	1c59      	adds	r1, r3, #1
 80036be:	62a1      	str	r1, [r4, #40]	; 0x28
 80036c0:	701a      	strb	r2, [r3, #0]
    if(--huart->RxXferCount == 0)
 80036c2:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80036c4:	3b01      	subs	r3, #1
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	85e3      	strh	r3, [r4, #46]	; 0x2e
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1ce      	bne.n	800366c <HAL_UART_IRQHandler+0xa0>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80036ce:	6822      	ldr	r2, [r4, #0]
 80036d0:	68d3      	ldr	r3, [r2, #12]
 80036d2:	f023 0320 	bic.w	r3, r3, #32
 80036d6:	60d3      	str	r3, [r2, #12]
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 80036d8:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	2b32      	cmp	r3, #50	; 0x32
 80036e0:	d02a      	beq.n	8003738 <HAL_UART_IRQHandler+0x16c>
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80036e2:	6822      	ldr	r2, [r4, #0]
 80036e4:	68d3      	ldr	r3, [r2, #12]
 80036e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036ea:	60d3      	str	r3, [r2, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80036ec:	6822      	ldr	r2, [r4, #0]
 80036ee:	6953      	ldr	r3, [r2, #20]
 80036f0:	f023 0301 	bic.w	r3, r3, #1
 80036f4:	6153      	str	r3, [r2, #20]
        huart->State = HAL_UART_STATE_READY;
 80036f6:	2301      	movs	r3, #1
 80036f8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      HAL_UART_RxCpltCallback(huart);
 80036fc:	4620      	mov	r0, r4
 80036fe:	f7ff ff63 	bl	80035c8 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8003702:	e7b3      	b.n	800366c <HAL_UART_IRQHandler+0xa0>
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8003704:	6aa1      	ldr	r1, [r4, #40]	; 0x28
      if(huart->Init.Parity == UART_PARITY_NONE)
 8003706:	6922      	ldr	r2, [r4, #16]
 8003708:	b93a      	cbnz	r2, 800371a <HAL_UART_IRQHandler+0x14e>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003710:	800b      	strh	r3, [r1, #0]
        huart->pRxBuffPtr += 2;
 8003712:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003714:	3302      	adds	r3, #2
 8003716:	62a3      	str	r3, [r4, #40]	; 0x28
 8003718:	e7d3      	b.n	80036c2 <HAL_UART_IRQHandler+0xf6>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	b2db      	uxtb	r3, r3
 800371e:	800b      	strh	r3, [r1, #0]
        huart->pRxBuffPtr += 1;
 8003720:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003722:	3301      	adds	r3, #1
 8003724:	62a3      	str	r3, [r4, #40]	; 0x28
 8003726:	e7cc      	b.n	80036c2 <HAL_UART_IRQHandler+0xf6>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800372c:	1c51      	adds	r1, r2, #1
 800372e:	62a1      	str	r1, [r4, #40]	; 0x28
 8003730:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003734:	7013      	strb	r3, [r2, #0]
 8003736:	e7c4      	b.n	80036c2 <HAL_UART_IRQHandler+0xf6>
        huart->State = HAL_UART_STATE_BUSY_TX;
 8003738:	2312      	movs	r3, #18
 800373a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 800373e:	e7dd      	b.n	80036fc <HAL_UART_IRQHandler+0x130>
  tmp1 = huart->State;
 8003740:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
  if((tmp1 == HAL_UART_STATE_BUSY_TX) || (tmp1 == HAL_UART_STATE_BUSY_TX_RX))
 8003744:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8003748:	2a12      	cmp	r2, #18
 800374a:	d198      	bne.n	800367e <HAL_UART_IRQHandler+0xb2>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800374c:	68a2      	ldr	r2, [r4, #8]
 800374e:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8003752:	d015      	beq.n	8003780 <HAL_UART_IRQHandler+0x1b4>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003754:	6a22      	ldr	r2, [r4, #32]
 8003756:	1c51      	adds	r1, r2, #1
 8003758:	6221      	str	r1, [r4, #32]
 800375a:	7812      	ldrb	r2, [r2, #0]
 800375c:	605a      	str	r2, [r3, #4]
    if(--huart->TxXferCount == 0)
 800375e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8003760:	3b01      	subs	r3, #1
 8003762:	b29b      	uxth	r3, r3
 8003764:	84e3      	strh	r3, [r4, #38]	; 0x26
 8003766:	2b00      	cmp	r3, #0
 8003768:	d189      	bne.n	800367e <HAL_UART_IRQHandler+0xb2>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800376a:	6822      	ldr	r2, [r4, #0]
 800376c:	68d3      	ldr	r3, [r2, #12]
 800376e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003772:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003774:	6822      	ldr	r2, [r4, #0]
 8003776:	68d3      	ldr	r3, [r2, #12]
 8003778:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800377c:	60d3      	str	r3, [r2, #12]
 800377e:	e77e      	b.n	800367e <HAL_UART_IRQHandler+0xb2>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003780:	6a22      	ldr	r2, [r4, #32]
 8003782:	8812      	ldrh	r2, [r2, #0]
 8003784:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003788:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800378a:	6923      	ldr	r3, [r4, #16]
 800378c:	b91b      	cbnz	r3, 8003796 <HAL_UART_IRQHandler+0x1ca>
        huart->pTxBuffPtr += 2;
 800378e:	6a23      	ldr	r3, [r4, #32]
 8003790:	3302      	adds	r3, #2
 8003792:	6223      	str	r3, [r4, #32]
 8003794:	e7e3      	b.n	800375e <HAL_UART_IRQHandler+0x192>
        huart->pTxBuffPtr += 1;
 8003796:	6a23      	ldr	r3, [r4, #32]
 8003798:	3301      	adds	r3, #1
 800379a:	6223      	str	r3, [r4, #32]
 800379c:	e7df      	b.n	800375e <HAL_UART_IRQHandler+0x192>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800379e:	68da      	ldr	r2, [r3, #12]
 80037a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037a4:	60da      	str	r2, [r3, #12]
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 80037a6:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	2b32      	cmp	r3, #50	; 0x32
 80037ae:	d010      	beq.n	80037d2 <HAL_UART_IRQHandler+0x206>
    __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80037b0:	6822      	ldr	r2, [r4, #0]
 80037b2:	68d3      	ldr	r3, [r2, #12]
 80037b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037b8:	60d3      	str	r3, [r2, #12]
    __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80037ba:	6822      	ldr	r2, [r4, #0]
 80037bc:	6953      	ldr	r3, [r2, #20]
 80037be:	f023 0301 	bic.w	r3, r3, #1
 80037c2:	6153      	str	r3, [r2, #20]
    huart->State = HAL_UART_STATE_READY;
 80037c4:	2301      	movs	r3, #1
 80037c6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80037ca:	4620      	mov	r0, r4
 80037cc:	f7ff fefb 	bl	80035c6 <HAL_UART_TxCpltCallback>
  return HAL_OK;
 80037d0:	e75f      	b.n	8003692 <HAL_UART_IRQHandler+0xc6>
    huart->State = HAL_UART_STATE_BUSY_RX;
 80037d2:	2322      	movs	r3, #34	; 0x22
 80037d4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 80037d8:	e7f7      	b.n	80037ca <HAL_UART_IRQHandler+0x1fe>
    huart->State = HAL_UART_STATE_READY;
 80037da:	2301      	movs	r3, #1
 80037dc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    HAL_UART_ErrorCallback(huart);
 80037e0:	4620      	mov	r0, r4
 80037e2:	f7ff fef2 	bl	80035ca <HAL_UART_ErrorCallback>
}
 80037e6:	e758      	b.n	800369a <HAL_UART_IRQHandler+0xce>

080037e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80037e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003820 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80037ec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80037ee:	e003      	b.n	80037f8 <LoopCopyDataInit>

080037f0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80037f0:	4b0c      	ldr	r3, [pc, #48]	; (8003824 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80037f2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80037f4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80037f6:	3104      	adds	r1, #4

080037f8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80037f8:	480b      	ldr	r0, [pc, #44]	; (8003828 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80037fa:	4b0c      	ldr	r3, [pc, #48]	; (800382c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80037fc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80037fe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003800:	d3f6      	bcc.n	80037f0 <CopyDataInit>
  ldr  r2, =_sbss
 8003802:	4a0b      	ldr	r2, [pc, #44]	; (8003830 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003804:	e002      	b.n	800380c <LoopFillZerobss>

08003806 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003806:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003808:	f842 3b04 	str.w	r3, [r2], #4

0800380c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800380c:	4b09      	ldr	r3, [pc, #36]	; (8003834 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800380e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003810:	d3f9      	bcc.n	8003806 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003812:	f7fd ff8f 	bl	8001734 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003816:	f000 fa81 	bl	8003d1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800381a:	f000 f947 	bl	8003aac <main>
  bx  lr    
 800381e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003820:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8003824:	08004860 	.word	0x08004860
  ldr  r0, =_sdata
 8003828:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800382c:	20000368 	.word	0x20000368
  ldr  r2, =_sbss
 8003830:	20000368 	.word	0x20000368
  ldr  r3, = _ebss
 8003834:	200005d8 	.word	0x200005d8

08003838 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003838:	e7fe      	b.n	8003838 <ADC_IRQHandler>
	...

0800383c <HAL_GPIO_EXTI_Callback>:
  * @retval None
  */

// PA10, PB3, PB5, PA8
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800383c:	b508      	push	{r3, lr}
  switch (GPIO_Pin)
 800383e:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8003842:	d02c      	beq.n	800389e <HAL_GPIO_EXTI_Callback+0x62>
 8003844:	d810      	bhi.n	8003868 <HAL_GPIO_EXTI_Callback+0x2c>
 8003846:	2802      	cmp	r0, #2
 8003848:	d026      	beq.n	8003898 <HAL_GPIO_EXTI_Callback+0x5c>
 800384a:	2840      	cmp	r0, #64	; 0x40
 800384c:	d107      	bne.n	800385e <HAL_GPIO_EXTI_Callback+0x22>
    break;
  case L6470_nFLAG_GPIO_PIN:
    BSP_L6470_FlagEventManager();
    break;
  case GPIO_PIN_6:
	  USART_Transmit(&huart2, (uint8_t* )"PA6 Limit Reached\n");
 800384e:	491c      	ldr	r1, [pc, #112]	; (80038c0 <HAL_GPIO_EXTI_Callback+0x84>)
 8003850:	481c      	ldr	r0, [pc, #112]	; (80038c4 <HAL_GPIO_EXTI_Callback+0x88>)
 8003852:	f000 f841 	bl	80038d8 <USART_Transmit>
	  L6470_HardStop(0);
 8003856:	2000      	movs	r0, #0
 8003858:	f7fd f9be 	bl	8000bd8 <L6470_HardStop>
	  // PB3
	 break;
 800385c:	e010      	b.n	8003880 <HAL_GPIO_EXTI_Callback+0x44>
  switch (GPIO_Pin)
 800385e:	2801      	cmp	r0, #1
 8003860:	d10e      	bne.n	8003880 <HAL_GPIO_EXTI_Callback+0x44>
    BSP_L6470_BusySynchEventManager();
 8003862:	f7fd fe58 	bl	8001516 <BSP_L6470_BusySynchEventManager>
    break;
 8003866:	e00b      	b.n	8003880 <HAL_GPIO_EXTI_Callback+0x44>
  switch (GPIO_Pin)
 8003868:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800386c:	d01f      	beq.n	80038ae <HAL_GPIO_EXTI_Callback+0x72>
 800386e:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8003872:	d106      	bne.n	8003882 <HAL_GPIO_EXTI_Callback+0x46>
	 USART_Transmit(&huart2, (uint8_t* )"EMERGENCY STOP TRIGGERED\n");
 8003874:	4914      	ldr	r1, [pc, #80]	; (80038c8 <HAL_GPIO_EXTI_Callback+0x8c>)
 8003876:	4813      	ldr	r0, [pc, #76]	; (80038c4 <HAL_GPIO_EXTI_Callback+0x88>)
 8003878:	f000 f82e 	bl	80038d8 <USART_Transmit>
    BSP_EmergencyStop();
 800387c:	f7fd fe50 	bl	8001520 <BSP_EmergencyStop>
	  USART_Transmit(&huart2, (uint8_t* )"PA10 Limit Reached\n");
	  L6470_HardStop(0);
	  // PA10
	 break;
  }
}
 8003880:	bd08      	pop	{r3, pc}
  switch (GPIO_Pin)
 8003882:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003886:	d1fb      	bne.n	8003880 <HAL_GPIO_EXTI_Callback+0x44>
	  USART_Transmit(&huart2, (uint8_t* )"PA9 Limit Reached\n");
 8003888:	4910      	ldr	r1, [pc, #64]	; (80038cc <HAL_GPIO_EXTI_Callback+0x90>)
 800388a:	480e      	ldr	r0, [pc, #56]	; (80038c4 <HAL_GPIO_EXTI_Callback+0x88>)
 800388c:	f000 f824 	bl	80038d8 <USART_Transmit>
	  L6470_HardStop(0);
 8003890:	2000      	movs	r0, #0
 8003892:	f7fd f9a1 	bl	8000bd8 <L6470_HardStop>
	 break;
 8003896:	e7f3      	b.n	8003880 <HAL_GPIO_EXTI_Callback+0x44>
    BSP_L6470_FlagEventManager();
 8003898:	f7fd fe3f 	bl	800151a <BSP_L6470_FlagEventManager>
    break;
 800389c:	e7f0      	b.n	8003880 <HAL_GPIO_EXTI_Callback+0x44>
	  USART_Transmit(&huart2, (uint8_t* )"PA8 Limit Reached\n");
 800389e:	490c      	ldr	r1, [pc, #48]	; (80038d0 <HAL_GPIO_EXTI_Callback+0x94>)
 80038a0:	4808      	ldr	r0, [pc, #32]	; (80038c4 <HAL_GPIO_EXTI_Callback+0x88>)
 80038a2:	f000 f819 	bl	80038d8 <USART_Transmit>
	  L6470_HardStop(0);
 80038a6:	2000      	movs	r0, #0
 80038a8:	f7fd f996 	bl	8000bd8 <L6470_HardStop>
	 break;
 80038ac:	e7e8      	b.n	8003880 <HAL_GPIO_EXTI_Callback+0x44>
	  USART_Transmit(&huart2, (uint8_t* )"PA10 Limit Reached\n");
 80038ae:	4909      	ldr	r1, [pc, #36]	; (80038d4 <HAL_GPIO_EXTI_Callback+0x98>)
 80038b0:	4804      	ldr	r0, [pc, #16]	; (80038c4 <HAL_GPIO_EXTI_Callback+0x88>)
 80038b2:	f000 f811 	bl	80038d8 <USART_Transmit>
	  L6470_HardStop(0);
 80038b6:	2000      	movs	r0, #0
 80038b8:	f7fd f98e 	bl	8000bd8 <L6470_HardStop>
}
 80038bc:	e7e0      	b.n	8003880 <HAL_GPIO_EXTI_Callback+0x44>
 80038be:	bf00      	nop
 80038c0:	0800443c 	.word	0x0800443c
 80038c4:	20000484 	.word	0x20000484
 80038c8:	08004420 	.word	0x08004420
 80038cc:	08004464 	.word	0x08004464
 80038d0:	08004450 	.word	0x08004450
 80038d4:	08004478 	.word	0x08004478

080038d8 <USART_Transmit>:
 * @param  huart       pointer to a UART_HandleTypeDef structure that contains
 *                     the configuration information for the specified UART module.
 * @param  TextString  The text string to be sent.
 * @note It use the HAL_UART_Transmit function.
 */
void USART_Transmit(UART_HandleTypeDef* huart, uint8_t* TextString) {
 80038d8:	b510      	push	{r4, lr}
	uint8_t TextStringLength;

	/* Calculate the length of the text string to be sent */
	TextStringLength = 0;
	while (TextString[TextStringLength++] != '\0')
 80038da:	2300      	movs	r3, #0
 80038dc:	b2da      	uxtb	r2, r3
 80038de:	5c8c      	ldrb	r4, [r1, r2]
 80038e0:	3301      	adds	r3, #1
 80038e2:	2c00      	cmp	r4, #0
 80038e4:	d1fa      	bne.n	80038dc <USART_Transmit+0x4>
		;
	TextStringLength--;

	/* Use the HAL function to send the text string via USART */
	HAL_UART_Transmit(huart, TextString, TextStringLength, 10);
 80038e6:	230a      	movs	r3, #10
 80038e8:	f7ff fdf8 	bl	80034dc <HAL_UART_Transmit>
}
 80038ec:	bd10      	pop	{r4, pc}
	...

080038f0 <USART_TxWelcomeMessage>:
void USART_TxWelcomeMessage(void) {
 80038f0:	b510      	push	{r4, lr}
	USART_Transmit(&huart2, (uint8_t* )"\r\n");
 80038f2:	4c13      	ldr	r4, [pc, #76]	; (8003940 <USART_TxWelcomeMessage+0x50>)
 80038f4:	4913      	ldr	r1, [pc, #76]	; (8003944 <USART_TxWelcomeMessage+0x54>)
 80038f6:	4620      	mov	r0, r4
 80038f8:	f7ff ffee 	bl	80038d8 <USART_Transmit>
	USART_Transmit(&huart2, (uint8_t* )" X-NUCLEO-IHM02A1\r\n");
 80038fc:	4912      	ldr	r1, [pc, #72]	; (8003948 <USART_TxWelcomeMessage+0x58>)
 80038fe:	4620      	mov	r0, r4
 8003900:	f7ff ffea 	bl	80038d8 <USART_Transmit>
	USART_Transmit(&huart2, (uint8_t* )" -------------------------------------------\r\n");
 8003904:	4911      	ldr	r1, [pc, #68]	; (800394c <USART_TxWelcomeMessage+0x5c>)
 8003906:	4620      	mov	r0, r4
 8003908:	f7ff ffe6 	bl	80038d8 <USART_Transmit>
	USART_Transmit(&huart2, (uint8_t* )" Dual L6470 Expansion Board for STM32 NUCLEO\r\n");
 800390c:	4910      	ldr	r1, [pc, #64]	; (8003950 <USART_TxWelcomeMessage+0x60>)
 800390e:	4620      	mov	r0, r4
 8003910:	f7ff ffe2 	bl	80038d8 <USART_Transmit>
	USART_Transmit(&huart2, (uint8_t* )" Stacked on ");
 8003914:	490f      	ldr	r1, [pc, #60]	; (8003954 <USART_TxWelcomeMessage+0x64>)
 8003916:	4620      	mov	r0, r4
 8003918:	f7ff ffde 	bl	80038d8 <USART_Transmit>
	USART_Transmit(&huart2, NUCLEO_BOARD_NAME);
 800391c:	490e      	ldr	r1, [pc, #56]	; (8003958 <USART_TxWelcomeMessage+0x68>)
 800391e:	4620      	mov	r0, r4
 8003920:	f7ff ffda 	bl	80038d8 <USART_Transmit>
	USART_Transmit(&huart2, (uint8_t* )" \r\n");
 8003924:	490d      	ldr	r1, [pc, #52]	; (800395c <USART_TxWelcomeMessage+0x6c>)
 8003926:	4620      	mov	r0, r4
 8003928:	f7ff ffd6 	bl	80038d8 <USART_Transmit>
	USART_Transmit(&huart2, (uint8_t* )" X-CUBE-SPN2 v1.1.1\r\n");
 800392c:	490c      	ldr	r1, [pc, #48]	; (8003960 <USART_TxWelcomeMessage+0x70>)
 800392e:	4620      	mov	r0, r4
 8003930:	f7ff ffd2 	bl	80038d8 <USART_Transmit>
	USART_Transmit(&huart2, (uint8_t* )" STMicroelectronics, 2015\r\n\r\n");
 8003934:	490b      	ldr	r1, [pc, #44]	; (8003964 <USART_TxWelcomeMessage+0x74>)
 8003936:	4620      	mov	r0, r4
 8003938:	f7ff ffce 	bl	80038d8 <USART_Transmit>
}
 800393c:	bd10      	pop	{r4, pc}
 800393e:	bf00      	nop
 8003940:	20000484 	.word	0x20000484
 8003944:	08004560 	.word	0x08004560
 8003948:	080046cc 	.word	0x080046cc
 800394c:	080046e0 	.word	0x080046e0
 8003950:	08004710 	.word	0x08004710
 8003954:	08004740 	.word	0x08004740
 8003958:	08004750 	.word	0x08004750
 800395c:	08004760 	.word	0x08004760
 8003960:	08004764 	.word	0x08004764
 8003964:	0800477c 	.word	0x0800477c

08003968 <USART_ITCharManager>:
 * @brief  Handle text character just received.
 * @param  huart pointer to a UART_HandleTypeDef structure that contains
 *               the configuration information for the specified UART module.
 * @note To use inside USART2_IRQHandler function.
 */
void USART_ITCharManager(UART_HandleTypeDef* huart) {
 8003968:	b510      	push	{r4, lr}
 800396a:	4604      	mov	r4, r0
	uint8_t UART_Receive_IT_Char;

	UART_Receive_IT_Char = (uint8_t) (huart->Instance->USART_DATA_REGISTER);
 800396c:	6803      	ldr	r3, [r0, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
	/* Checks the buffer full or retur carriage  */
	if ((huart->RxXferCount == 1) || (UART_Receive_IT_Char == '\r')) {
 8003970:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
 8003972:	2a01      	cmp	r2, #1
 8003974:	d003      	beq.n	800397e <USART_ITCharManager+0x16>
 8003976:	b2db      	uxtb	r3, r3
 8003978:	2b0d      	cmp	r3, #13
 800397a:	d000      	beq.n	800397e <USART_ITCharManager+0x16>
			__HAL_UART_DISABLE_IT(huart, UART_IT_ERR);

			huart->State = HAL_UART_STATE_READY;
		}
	}
}
 800397c:	bd10      	pop	{r4, pc}
		huart->RxXferCount += 1;
 800397e:	3201      	adds	r2, #1
 8003980:	85e2      	strh	r2, [r4, #46]	; 0x2e
		huart->pRxBuffPtr -= 1;
 8003982:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003984:	1e5a      	subs	r2, r3, #1
 8003986:	62a2      	str	r2, [r4, #40]	; 0x28
		*(huart->pRxBuffPtr) = '\0';
 8003988:	2200      	movs	r2, #0
 800398a:	f803 2c01 	strb.w	r2, [r3, #-1]
		USART_Transmit(huart, (uint8_t *)"\r\n");
 800398e:	4912      	ldr	r1, [pc, #72]	; (80039d8 <USART_ITCharManager+0x70>)
 8003990:	4620      	mov	r0, r4
 8003992:	f7ff ffa1 	bl	80038d8 <USART_Transmit>
		while (HAL_IS_BIT_SET(huart->Instance->USART_STATUS_REGISTER,
 8003996:	6822      	ldr	r2, [r4, #0]
 8003998:	6813      	ldr	r3, [r2, #0]
 800399a:	f013 0f20 	tst.w	r3, #32
 800399e:	d1fb      	bne.n	8003998 <USART_ITCharManager+0x30>
		__HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80039a0:	68d3      	ldr	r3, [r2, #12]
 80039a2:	f023 0320 	bic.w	r3, r3, #32
 80039a6:	60d3      	str	r3, [r2, #12]
		if (huart->State == HAL_UART_STATE_BUSY_TX_RX) {
 80039a8:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	2b32      	cmp	r3, #50	; 0x32
 80039b0:	d00d      	beq.n	80039ce <USART_ITCharManager+0x66>
			__HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80039b2:	6822      	ldr	r2, [r4, #0]
 80039b4:	68d3      	ldr	r3, [r2, #12]
 80039b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039ba:	60d3      	str	r3, [r2, #12]
			__HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80039bc:	6822      	ldr	r2, [r4, #0]
 80039be:	6953      	ldr	r3, [r2, #20]
 80039c0:	f023 0301 	bic.w	r3, r3, #1
 80039c4:	6153      	str	r3, [r2, #20]
			huart->State = HAL_UART_STATE_READY;
 80039c6:	2301      	movs	r3, #1
 80039c8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 80039cc:	e7d6      	b.n	800397c <USART_ITCharManager+0x14>
			huart->State = HAL_UART_STATE_BUSY_TX;
 80039ce:	2312      	movs	r3, #18
 80039d0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 80039d4:	e7d2      	b.n	800397c <USART_ITCharManager+0x14>
 80039d6:	bf00      	nop
 80039d8:	08004560 	.word	0x08004560

080039dc <limitSwitch_Init>:
  */

ADC_HandleTypeDef hadc1;

void limitSwitch_Init()
{
 80039dc:	b570      	push	{r4, r5, r6, lr}
 80039de:	b094      	sub	sp, #80	; 0x50
	  GPIO_InitTypeDef PA6_init, PA8_init, PA9_init, PA10_init;

	  // PA6
	  PA6_init.Pin = GPIO_PIN_6;
 80039e0:	2340      	movs	r3, #64	; 0x40
 80039e2:	930f      	str	r3, [sp, #60]	; 0x3c
	  PA6_init.Mode = GPIO_MODE_IT_FALLING;
 80039e4:	4e16      	ldr	r6, [pc, #88]	; (8003a40 <limitSwitch_Init+0x64>)
 80039e6:	9610      	str	r6, [sp, #64]	; 0x40
	  PA6_init.Pull = GPIO_NOPULL;
 80039e8:	2400      	movs	r4, #0
 80039ea:	9411      	str	r4, [sp, #68]	; 0x44
	  HAL_GPIO_Init(GPIOA, &PA6_init);
 80039ec:	4d15      	ldr	r5, [pc, #84]	; (8003a44 <limitSwitch_Init+0x68>)
 80039ee:	a90f      	add	r1, sp, #60	; 0x3c
 80039f0:	4628      	mov	r0, r5
 80039f2:	f7fe fab7 	bl	8001f64 <HAL_GPIO_Init>

	  // PA8
	  PA8_init.Pin = GPIO_PIN_8;
 80039f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039fa:	930a      	str	r3, [sp, #40]	; 0x28
	  PA8_init.Mode = GPIO_MODE_IT_FALLING;
 80039fc:	960b      	str	r6, [sp, #44]	; 0x2c
	  PA8_init.Pull = GPIO_NOPULL;
 80039fe:	940c      	str	r4, [sp, #48]	; 0x30
	  HAL_GPIO_Init(GPIOA, &PA8_init);
 8003a00:	a90a      	add	r1, sp, #40	; 0x28
 8003a02:	4628      	mov	r0, r5
 8003a04:	f7fe faae 	bl	8001f64 <HAL_GPIO_Init>

	  // PA9
	  PA9_init.Pin = GPIO_PIN_9;
 8003a08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a0c:	9305      	str	r3, [sp, #20]
	  PA9_init.Mode = GPIO_MODE_IT_FALLING;
 8003a0e:	9606      	str	r6, [sp, #24]
	  PA9_init.Pull = GPIO_NOPULL;
 8003a10:	9407      	str	r4, [sp, #28]
	  HAL_GPIO_Init(GPIOA, &PA9_init);
 8003a12:	a905      	add	r1, sp, #20
 8003a14:	4628      	mov	r0, r5
 8003a16:	f7fe faa5 	bl	8001f64 <HAL_GPIO_Init>

	  // PA10
	  PA10_init.Pin = GPIO_PIN_10;
 8003a1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a1e:	9300      	str	r3, [sp, #0]
	  PA10_init.Mode = GPIO_MODE_IT_FALLING;
 8003a20:	9601      	str	r6, [sp, #4]
	  PA10_init.Pull = GPIO_NOPULL;
 8003a22:	9402      	str	r4, [sp, #8]
	  HAL_GPIO_Init(GPIOA, &PA10_init);
 8003a24:	4669      	mov	r1, sp
 8003a26:	4628      	mov	r0, r5
 8003a28:	f7fe fa9c 	bl	8001f64 <HAL_GPIO_Init>

	  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0x01, 0x00);
 8003a2c:	4622      	mov	r2, r4
 8003a2e:	2101      	movs	r1, #1
 8003a30:	2017      	movs	r0, #23
 8003a32:	f7fe fa0b 	bl	8001e4c <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003a36:	2017      	movs	r0, #23
 8003a38:	f7fe fa4c 	bl	8001ed4 <HAL_NVIC_EnableIRQ>
}
 8003a3c:	b014      	add	sp, #80	; 0x50
 8003a3e:	bd70      	pop	{r4, r5, r6, pc}
 8003a40:	10210000 	.word	0x10210000
 8003a44:	40020000 	.word	0x40020000

08003a48 <adc1_init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
void adc1_init(void)
{
 8003a48:	b500      	push	{lr}
 8003a4a:	b085      	sub	sp, #20

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	9300      	str	r3, [sp, #0]
 8003a50:	9301      	str	r3, [sp, #4]
 8003a52:	9302      	str	r3, [sp, #8]
 8003a54:	9303      	str	r3, [sp, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003a56:	4812      	ldr	r0, [pc, #72]	; (8003aa0 <adc1_init+0x58>)
 8003a58:	4a12      	ldr	r2, [pc, #72]	; (8003aa4 <adc1_init+0x5c>)
 8003a5a:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003a5c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003a60:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003a62:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8003a64:	6103      	str	r3, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003a66:	6183      	str	r3, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003a68:	6243      	str	r3, [r0, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003a6a:	6303      	str	r3, [r0, #48]	; 0x30
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003a6c:	4a0e      	ldr	r2, [pc, #56]	; (8003aa8 <adc1_init+0x60>)
 8003a6e:	62c2      	str	r2, [r0, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003a70:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003a72:	2201      	movs	r2, #1
 8003a74:	6202      	str	r2, [r0, #32]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003a76:	61c3      	str	r3, [r0, #28]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003a78:	6142      	str	r2, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003a7a:	f7fd fecb 	bl	8001814 <HAL_ADC_Init>
 8003a7e:	b960      	cbnz	r0, 8003a9a <adc1_init+0x52>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8003a80:	230f      	movs	r3, #15
 8003a82:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 8003a84:	2301      	movs	r3, #1
 8003a86:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	9302      	str	r3, [sp, #8]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8003a8c:	4669      	mov	r1, sp
 8003a8e:	4804      	ldr	r0, [pc, #16]	; (8003aa0 <adc1_init+0x58>)
 8003a90:	f7fe f8d6 	bl	8001c40 <HAL_ADC_ConfigChannel>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003a94:	b005      	add	sp, #20
 8003a96:	f85d fb04 	ldr.w	pc, [sp], #4
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a9a:	b672      	cpsid	i
  while (1)
 8003a9c:	e7fe      	b.n	8003a9c <adc1_init+0x54>
 8003a9e:	bf00      	nop
 8003aa0:	20000594 	.word	0x20000594
 8003aa4:	40012000 	.word	0x40012000
 8003aa8:	0f000001 	.word	0x0f000001

08003aac <main>:

int main(void)
{
 8003aac:	b500      	push	{lr}
 8003aae:	b083      	sub	sp, #12
  volatile int raw = 0;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	9301      	str	r3, [sp, #4]
  volatile int read_code = 0;
 8003ab4:	9300      	str	r3, [sp, #0]
  /* NUCLEO board initialization */
  NUCLEO_Board_Init();
 8003ab6:	f7fd fe2b 	bl	8001710 <NUCLEO_Board_Init>
  
  /* X-NUCLEO-IHM02A1 initialization */
  BSP_Init();
 8003aba:	f7fd fd20 	bl	80014fe <BSP_Init>
  
  /* Setup interrupt GPIO pins */
  limitSwitch_Init();
 8003abe:	f7ff ff8d 	bl	80039dc <limitSwitch_Init>

  adc1_init();
 8003ac2:	f7ff ffc1 	bl	8003a48 <adc1_init>

#ifdef NUCLEO_USE_USART
  /* Transmit the initial message to the PC via UART */
  USART_TxWelcomeMessage();
 8003ac6:	f7ff ff13 	bl	80038f0 <USART_TxWelcomeMessage>
  /* Fill the L6470_DaisyChainMnemonic structure */
  //Fill_L6470_DaisyChainMnemonic();
  /* Infinite loop */
  while (1)
  {
	HAL_ADC_Start(&hadc1);
 8003aca:	4c0a      	ldr	r4, [pc, #40]	; (8003af4 <main+0x48>)
	read_code = HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8003acc:	f04f 36ff 	mov.w	r6, #4294967295
	raw = HAL_ADC_GetValue(&hadc1);
	//HAL_ADC_Stop(&hadc1); // stop adc
	HAL_Delay (100); // wait for 500ms
 8003ad0:	2564      	movs	r5, #100	; 0x64
	HAL_ADC_Start(&hadc1);
 8003ad2:	4620      	mov	r0, r4
 8003ad4:	f7fe f800 	bl	8001ad8 <HAL_ADC_Start>
	read_code = HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8003ad8:	4631      	mov	r1, r6
 8003ada:	4620      	mov	r0, r4
 8003adc:	f7fe f876 	bl	8001bcc <HAL_ADC_PollForConversion>
 8003ae0:	9000      	str	r0, [sp, #0]
	raw = HAL_ADC_GetValue(&hadc1);
 8003ae2:	4620      	mov	r0, r4
 8003ae4:	f7fe f8a9 	bl	8001c3a <HAL_ADC_GetValue>
 8003ae8:	9001      	str	r0, [sp, #4]
	HAL_Delay (100); // wait for 500ms
 8003aea:	4628      	mov	r0, r5
 8003aec:	f7fd fe84 	bl	80017f8 <HAL_Delay>
  while (1)
 8003af0:	e7ef      	b.n	8003ad2 <main+0x26>
 8003af2:	bf00      	nop
 8003af4:	20000594 	.word	0x20000594

08003af8 <assert_failed>:
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
    ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */

}
 8003af8:	4770      	bx	lr

08003afa <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003afa:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003afc:	2007      	movs	r0, #7
 8003afe:	f7fe f987 	bl	8001e10 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003b02:	2200      	movs	r2, #0
 8003b04:	4611      	mov	r1, r2
 8003b06:	f04f 30ff 	mov.w	r0, #4294967295
 8003b0a:	f7fe f99f 	bl	8001e4c <HAL_NVIC_SetPriority>
}
 8003b0e:	bd08      	pop	{r3, pc}

08003b10 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8003b10:	6802      	ldr	r2, [r0, #0]
 8003b12:	4b13      	ldr	r3, [pc, #76]	; (8003b60 <HAL_ADC_MspInit+0x50>)
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d000      	beq.n	8003b1a <HAL_ADC_MspInit+0xa>
 8003b18:	4770      	bx	lr
{
 8003b1a:	b500      	push	{lr}
 8003b1c:	b089      	sub	sp, #36	; 0x24
  {
    /* GPIO clocks enable */
    __GPIOB_CLK_ENABLE();
 8003b1e:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8003b22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b24:	f042 0202 	orr.w	r2, r2, #2
 8003b28:	631a      	str	r2, [r3, #48]	; 0x30
 8003b2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b2c:	f002 0202 	and.w	r2, r2, #2
 8003b30:	9201      	str	r2, [sp, #4]
 8003b32:	9a01      	ldr	r2, [sp, #4]
    
    /* Peripheral clock enable */
    __ADC1_CLK_ENABLE();
 8003b34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b3a:	645a      	str	r2, [r3, #68]	; 0x44
 8003b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b42:	9302      	str	r3, [sp, #8]
 8003b44:	9b02      	ldr	r3, [sp, #8]
  
    /**ADC1 GPIO Configuration    
    PB0     ------> ADC1_IN8 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003b46:	2301      	movs	r3, #1
 8003b48:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b52:	a903      	add	r1, sp, #12
 8003b54:	4803      	ldr	r0, [pc, #12]	; (8003b64 <HAL_ADC_MspInit+0x54>)
 8003b56:	f7fe fa05 	bl	8001f64 <HAL_GPIO_Init>
  }
}
 8003b5a:	b009      	add	sp, #36	; 0x24
 8003b5c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003b60:	40012000 	.word	0x40012000
 8003b64:	40020400 	.word	0x40020400

08003b68 <HAL_SPI_MspInit>:
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_0);
  }
}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b6a:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 8003b6c:	6803      	ldr	r3, [r0, #0]
 8003b6e:	4a30      	ldr	r2, [pc, #192]	; (8003c30 <HAL_SPI_MspInit+0xc8>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d004      	beq.n	8003b7e <HAL_SPI_MspInit+0x16>
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
#elif defined (USE_PA5_AS_SCK)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
#endif
  }
  else if(hspi->Instance==SPI2)
 8003b74:	4a2f      	ldr	r2, [pc, #188]	; (8003c34 <HAL_SPI_MspInit+0xcc>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d036      	beq.n	8003be8 <HAL_SPI_MspInit+0x80>
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
  }
}
 8003b7a:	b00b      	add	sp, #44	; 0x2c
 8003b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __GPIOA_CLK_ENABLE();
 8003b7e:	4b2e      	ldr	r3, [pc, #184]	; (8003c38 <HAL_SPI_MspInit+0xd0>)
 8003b80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b82:	f042 0201 	orr.w	r2, r2, #1
 8003b86:	631a      	str	r2, [r3, #48]	; 0x30
 8003b88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b8a:	f002 0201 	and.w	r2, r2, #1
 8003b8e:	9200      	str	r2, [sp, #0]
 8003b90:	9a00      	ldr	r2, [sp, #0]
    __GPIOB_CLK_ENABLE();
 8003b92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b94:	f042 0202 	orr.w	r2, r2, #2
 8003b98:	631a      	str	r2, [r3, #48]	; 0x30
 8003b9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b9c:	f002 0202 	and.w	r2, r2, #2
 8003ba0:	9201      	str	r2, [sp, #4]
 8003ba2:	9a01      	ldr	r2, [sp, #4]
    __SPI1_CLK_ENABLE();
 8003ba4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ba6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003baa:	645a      	str	r2, [r3, #68]	; 0x44
 8003bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bb2:	9302      	str	r3, [sp, #8]
 8003bb4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003bb6:	23c0      	movs	r3, #192	; 0xc0
 8003bb8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bba:	2702      	movs	r7, #2
 8003bbc:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bbe:	2600      	movs	r6, #0
 8003bc0:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8003bc2:	2503      	movs	r5, #3
 8003bc4:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003bc6:	2405      	movs	r4, #5
 8003bc8:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bca:	a905      	add	r1, sp, #20
 8003bcc:	481b      	ldr	r0, [pc, #108]	; (8003c3c <HAL_SPI_MspInit+0xd4>)
 8003bce:	f7fe f9c9 	bl	8001f64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003bd2:	2308      	movs	r3, #8
 8003bd4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bd6:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd8:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8003bda:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003bdc:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bde:	a905      	add	r1, sp, #20
 8003be0:	4817      	ldr	r0, [pc, #92]	; (8003c40 <HAL_SPI_MspInit+0xd8>)
 8003be2:	f7fe f9bf 	bl	8001f64 <HAL_GPIO_Init>
 8003be6:	e7c8      	b.n	8003b7a <HAL_SPI_MspInit+0x12>
    __GPIOB_CLK_ENABLE();
 8003be8:	4b13      	ldr	r3, [pc, #76]	; (8003c38 <HAL_SPI_MspInit+0xd0>)
 8003bea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bec:	f042 0202 	orr.w	r2, r2, #2
 8003bf0:	631a      	str	r2, [r3, #48]	; 0x30
 8003bf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bf4:	f002 0202 	and.w	r2, r2, #2
 8003bf8:	9203      	str	r2, [sp, #12]
 8003bfa:	9a03      	ldr	r2, [sp, #12]
    __SPI2_CLK_ENABLE();
 8003bfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bfe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c02:	641a      	str	r2, [r3, #64]	; 0x40
 8003c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c0a:	9304      	str	r3, [sp, #16]
 8003c0c:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003c0e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003c12:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c14:	2302      	movs	r3, #2
 8003c16:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003c20:	2305      	movs	r3, #5
 8003c22:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c24:	a905      	add	r1, sp, #20
 8003c26:	4806      	ldr	r0, [pc, #24]	; (8003c40 <HAL_SPI_MspInit+0xd8>)
 8003c28:	f7fe f99c 	bl	8001f64 <HAL_GPIO_Init>
}
 8003c2c:	e7a5      	b.n	8003b7a <HAL_SPI_MspInit+0x12>
 8003c2e:	bf00      	nop
 8003c30:	40013000 	.word	0x40013000
 8003c34:	40003800 	.word	0x40003800
 8003c38:	40023800 	.word	0x40023800
 8003c3c:	40020000 	.word	0x40020000
 8003c40:	40020400 	.word	0x40020400

08003c44 <HAL_UART_MspInit>:
}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 8003c44:	6802      	ldr	r2, [r0, #0]
 8003c46:	4b19      	ldr	r3, [pc, #100]	; (8003cac <HAL_UART_MspInit+0x68>)
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d000      	beq.n	8003c4e <HAL_UART_MspInit+0xa>
 8003c4c:	4770      	bx	lr
{
 8003c4e:	b510      	push	{r4, lr}
 8003c50:	b088      	sub	sp, #32
  {
    /* GPIO clocks enable */
    __GPIOA_CLK_ENABLE();
 8003c52:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8003c56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c58:	f042 0201 	orr.w	r2, r2, #1
 8003c5c:	631a      	str	r2, [r3, #48]	; 0x30
 8003c5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c60:	f002 0201 	and.w	r2, r2, #1
 8003c64:	9201      	str	r2, [sp, #4]
 8003c66:	9a01      	ldr	r2, [sp, #4]
    
    /* Peripheral clock enable */
    __USART2_CLK_ENABLE();
 8003c68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c6a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003c6e:	641a      	str	r2, [r3, #64]	; 0x40
 8003c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c76:	9302      	str	r3, [sp, #8]
 8003c78:	9b02      	ldr	r3, [sp, #8]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003c7a:	230c      	movs	r3, #12
 8003c7c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c7e:	2302      	movs	r3, #2
 8003c80:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c82:	2400      	movs	r4, #0
 8003c84:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8003c86:	2303      	movs	r3, #3
 8003c88:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003c8a:	2307      	movs	r3, #7
 8003c8c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c8e:	a903      	add	r1, sp, #12
 8003c90:	4807      	ldr	r0, [pc, #28]	; (8003cb0 <HAL_UART_MspInit+0x6c>)
 8003c92:	f7fe f967 	bl	8001f64 <HAL_GPIO_Init>

  /* System interrupt init*/
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003c96:	4622      	mov	r2, r4
 8003c98:	4621      	mov	r1, r4
 8003c9a:	2026      	movs	r0, #38	; 0x26
 8003c9c:	f7fe f8d6 	bl	8001e4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003ca0:	2026      	movs	r0, #38	; 0x26
 8003ca2:	f7fe f917 	bl	8001ed4 <HAL_NVIC_EnableIRQ>
  }
}
 8003ca6:	b008      	add	sp, #32
 8003ca8:	bd10      	pop	{r4, pc}
 8003caa:	bf00      	nop
 8003cac:	40004400 	.word	0x40004400
 8003cb0:	40020000 	.word	0x40020000

08003cb4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003cb4:	b508      	push	{r3, lr}
  HAL_IncTick();
 8003cb6:	f7fd fd91 	bl	80017dc <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8003cba:	f7fe f94e 	bl	8001f5a <HAL_SYSTICK_IRQHandler>
}
 8003cbe:	bd08      	pop	{r3, pc}

08003cc0 <EXTI1_IRQHandler>:

/**
* @brief This function handles EXTI Line1 interrupt.
*/
void EXTI1_IRQHandler(void)
{
 8003cc0:	b508      	push	{r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003cc2:	2002      	movs	r0, #2
 8003cc4:	f7fe fa96 	bl	80021f4 <HAL_GPIO_EXTI_IRQHandler>
}
 8003cc8:	bd08      	pop	{r3, pc}

08003cca <EXTI0_IRQHandler>:

/**
* @brief This function handles EXTI Line0 interrupt.
*/
void EXTI0_IRQHandler(void)
{
 8003cca:	b508      	push	{r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003ccc:	2001      	movs	r0, #1
 8003cce:	f7fe fa91 	bl	80021f4 <HAL_GPIO_EXTI_IRQHandler>
}
 8003cd2:	bd08      	pop	{r3, pc}

08003cd4 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt.
*/
void USART2_IRQHandler(void)
{
 8003cd4:	b510      	push	{r4, lr}
  HAL_UART_IRQHandler(&huart2);
 8003cd6:	4c04      	ldr	r4, [pc, #16]	; (8003ce8 <USART2_IRQHandler+0x14>)
 8003cd8:	4620      	mov	r0, r4
 8003cda:	f7ff fc77 	bl	80035cc <HAL_UART_IRQHandler>
  USART_ITCharManager(&huart2);
 8003cde:	4620      	mov	r0, r4
 8003ce0:	f7ff fe42 	bl	8003968 <USART_ITCharManager>
}
 8003ce4:	bd10      	pop	{r4, pc}
 8003ce6:	bf00      	nop
 8003ce8:	20000484 	.word	0x20000484

08003cec <EXTI15_10_IRQHandler>:

/**
* @brief This function handles EXTI Line[15:10] interrupts.
*/
void EXTI15_10_IRQHandler(void)
{
 8003cec:	b508      	push	{r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);	// emergency stop
 8003cee:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003cf2:	f7fe fa7f 	bl	80021f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);	// Axis 1 - End 1 PA10
 8003cf6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003cfa:	f7fe fa7b 	bl	80021f4 <HAL_GPIO_EXTI_IRQHandler>
}
 8003cfe:	bd08      	pop	{r3, pc}

08003d00 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8003d00:	b508      	push	{r3, lr}
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);	// Axis 2 - End 1 PA6
 8003d02:	2040      	movs	r0, #64	; 0x40
 8003d04:	f7fe fa76 	bl	80021f4 <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);	// Axis 2 - End 2 PA8
 8003d08:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003d0c:	f7fe fa72 	bl	80021f4 <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);	// Axis 2 - End 1 PA9
 8003d10:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003d14:	f7fe fa6e 	bl	80021f4 <HAL_GPIO_EXTI_IRQHandler>
}
 8003d18:	bd08      	pop	{r3, pc}
	...

08003d1c <__libc_init_array>:
 8003d1c:	b570      	push	{r4, r5, r6, lr}
 8003d1e:	4d0d      	ldr	r5, [pc, #52]	; (8003d54 <__libc_init_array+0x38>)
 8003d20:	4c0d      	ldr	r4, [pc, #52]	; (8003d58 <__libc_init_array+0x3c>)
 8003d22:	1b64      	subs	r4, r4, r5
 8003d24:	10a4      	asrs	r4, r4, #2
 8003d26:	2600      	movs	r6, #0
 8003d28:	42a6      	cmp	r6, r4
 8003d2a:	d109      	bne.n	8003d40 <__libc_init_array+0x24>
 8003d2c:	4d0b      	ldr	r5, [pc, #44]	; (8003d5c <__libc_init_array+0x40>)
 8003d2e:	4c0c      	ldr	r4, [pc, #48]	; (8003d60 <__libc_init_array+0x44>)
 8003d30:	f000 f818 	bl	8003d64 <_init>
 8003d34:	1b64      	subs	r4, r4, r5
 8003d36:	10a4      	asrs	r4, r4, #2
 8003d38:	2600      	movs	r6, #0
 8003d3a:	42a6      	cmp	r6, r4
 8003d3c:	d105      	bne.n	8003d4a <__libc_init_array+0x2e>
 8003d3e:	bd70      	pop	{r4, r5, r6, pc}
 8003d40:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d44:	4798      	blx	r3
 8003d46:	3601      	adds	r6, #1
 8003d48:	e7ee      	b.n	8003d28 <__libc_init_array+0xc>
 8003d4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d4e:	4798      	blx	r3
 8003d50:	3601      	adds	r6, #1
 8003d52:	e7f2      	b.n	8003d3a <__libc_init_array+0x1e>
 8003d54:	08004858 	.word	0x08004858
 8003d58:	08004858 	.word	0x08004858
 8003d5c:	08004858 	.word	0x08004858
 8003d60:	0800485c 	.word	0x0800485c

08003d64 <_init>:
 8003d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d66:	bf00      	nop
 8003d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d6a:	bc08      	pop	{r3}
 8003d6c:	469e      	mov	lr, r3
 8003d6e:	4770      	bx	lr

08003d70 <_fini>:
 8003d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d72:	bf00      	nop
 8003d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d76:	bc08      	pop	{r3}
 8003d78:	469e      	mov	lr, r3
 8003d7a:	4770      	bx	lr
