
X-CUBE-SPN2_F401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a88  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d14  08003c1c  08003c1c  00013c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004930  08004930  00014930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004934  08004934  00014934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000368  20000000  08004938  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000274  20000368  08004ca0  00020368  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  200005dc  08004ca0  000205dc  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020368  2**0
                  CONTENTS, READONLY
  9 .debug_info   00014f2f  00000000  00000000  00020398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002d71  00000000  00000000  000352c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00008dd6  00000000  00000000  00038038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000bb8  00000000  00000000  00040e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000b48  00000000  00000000  000419c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00010e1b  00000000  00000000  00042510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00013407  00000000  00000000  0005332b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00060a1c  00000000  00000000  00066732  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  000c714e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002094  00000000  00000000  000c71a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000368 	.word	0x20000368
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003c04 	.word	0x08003c04

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000036c 	.word	0x2000036c
 80001d0:	08003c04 	.word	0x08003c04

080001d4 <L6470_ResetAppCmdPkg>:
{
  uint8_t id;
  
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
  {
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 80001d4:	2300      	movs	r3, #0
 80001d6:	7003      	strb	r3, [r0, #0]
    (pL6470_AppCmdPkg+id)->p1=0;
 80001d8:	6043      	str	r3, [r0, #4]
    (pL6470_AppCmdPkg+id)->p2=0;
 80001da:	6083      	str	r3, [r0, #8]
    (pL6470_AppCmdPkg+id)->p3=0;
 80001dc:	60c3      	str	r3, [r0, #12]
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 80001de:	7403      	strb	r3, [r0, #16]
    (pL6470_AppCmdPkg+id)->p1=0;
 80001e0:	6143      	str	r3, [r0, #20]
    (pL6470_AppCmdPkg+id)->p2=0;
 80001e2:	6183      	str	r3, [r0, #24]
    (pL6470_AppCmdPkg+id)->p3=0;
 80001e4:	61c3      	str	r3, [r0, #28]
  }
}
 80001e6:	4770      	bx	lr

080001e8 <L6470_PrepareAppCmdPkg>:
  * @param  p1                The 1st parameter (if it is not needed it will be not considered).
  * @param  p2                The 2nd parameter (if it is not needed it will be not considered).
  * @param  p3                The 3rd parameter (if it is not needed it will be not considered).
  */
void L6470_PrepareAppCmdPkg(uint8_t L6470_Id, sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
{
 80001e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80001ea:	4604      	mov	r4, r0
 80001ec:	460d      	mov	r5, r1
 80001ee:	4617      	mov	r7, r2
 80001f0:	461e      	mov	r6, r3
  if(!L6470_DaisyChain_HalfPrepared)
 80001f2:	4b0a      	ldr	r3, [pc, #40]	; (800021c <L6470_PrepareAppCmdPkg+0x34>)
 80001f4:	781b      	ldrb	r3, [r3, #0]
 80001f6:	b14b      	cbz	r3, 800020c <L6470_PrepareAppCmdPkg+0x24>
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 80001f8:	0123      	lsls	r3, r4, #4
 80001fa:	eb05 1004 	add.w	r0, r5, r4, lsl #4
 80001fe:	54ef      	strb	r7, [r5, r3]
  (pL6470_AppCmdPkg+L6470_Id)->p1 = p1;
 8000200:	6046      	str	r6, [r0, #4]
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 8000202:	9b06      	ldr	r3, [sp, #24]
 8000204:	6083      	str	r3, [r0, #8]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 8000206:	9b07      	ldr	r3, [sp, #28]
 8000208:	60c3      	str	r3, [r0, #12]
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
    L6470_ResetAppCmdPkg(pL6470_AppCmdPkg);
  }
  
  L6470_FillAppCmdPkg(L6470_Id, pL6470_AppCmdPkg, L6470_AppCmdId, p1, p2, p3);
}
 800020a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 800020c:	4b03      	ldr	r3, [pc, #12]	; (800021c <L6470_PrepareAppCmdPkg+0x34>)
 800020e:	2201      	movs	r2, #1
 8000210:	701a      	strb	r2, [r3, #0]
    L6470_ResetAppCmdPkg(pL6470_AppCmdPkg);
 8000212:	4608      	mov	r0, r1
 8000214:	f7ff ffde 	bl	80001d4 <L6470_ResetAppCmdPkg>
 8000218:	e7ee      	b.n	80001f8 <L6470_PrepareAppCmdPkg+0x10>
 800021a:	bf00      	nop
 800021c:	20000384 	.word	0x20000384

08000220 <L6470_PrepareSetParam>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareSetParam(uint8_t L6470_Id, eL6470_RegId_t L6470_RegId, uint32_t Value)
{
 8000220:	b500      	push	{lr}
 8000222:	b083      	sub	sp, #12
 8000224:	460b      	mov	r3, r1
    L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 8000226:	2100      	movs	r1, #0
 8000228:	9101      	str	r1, [sp, #4]
 800022a:	9200      	str	r2, [sp, #0]
 800022c:	2201      	movs	r2, #1
 800022e:	4903      	ldr	r1, [pc, #12]	; (800023c <L6470_PrepareSetParam+0x1c>)
 8000230:	f7ff ffda 	bl	80001e8 <L6470_PrepareAppCmdPkg>
}
 8000234:	b003      	add	sp, #12
 8000236:	f85d fb04 	ldr.w	pc, [sp], #4
 800023a:	bf00      	nop
 800023c:	20000388 	.word	0x20000388

08000240 <L6470_PrepareGetParam>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareGetParam(uint8_t L6470_Id, eL6470_RegId_t L6470_RegId)
{
 8000240:	b500      	push	{lr}
 8000242:	b083      	sub	sp, #12
 8000244:	460b      	mov	r3, r1
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 8000246:	2200      	movs	r2, #0
 8000248:	9201      	str	r2, [sp, #4]
 800024a:	9200      	str	r2, [sp, #0]
 800024c:	2202      	movs	r2, #2
 800024e:	4903      	ldr	r1, [pc, #12]	; (800025c <L6470_PrepareGetParam+0x1c>)
 8000250:	f7ff ffca 	bl	80001e8 <L6470_PrepareAppCmdPkg>
}
 8000254:	b003      	add	sp, #12
 8000256:	f85d fb04 	ldr.w	pc, [sp], #4
 800025a:	bf00      	nop
 800025c:	20000388 	.word	0x20000388

08000260 <L6470_PrepareRun>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareRun(uint8_t L6470_Id, eL6470_DirId_t L6470_DirId, uint32_t Speed)
{
 8000260:	b500      	push	{lr}
 8000262:	b083      	sub	sp, #12
 8000264:	460b      	mov	r3, r1
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 8000266:	2100      	movs	r1, #0
 8000268:	9101      	str	r1, [sp, #4]
 800026a:	9200      	str	r2, [sp, #0]
 800026c:	2203      	movs	r2, #3
 800026e:	4903      	ldr	r1, [pc, #12]	; (800027c <L6470_PrepareRun+0x1c>)
 8000270:	f7ff ffba 	bl	80001e8 <L6470_PrepareAppCmdPkg>
}
 8000274:	b003      	add	sp, #12
 8000276:	f85d fb04 	ldr.w	pc, [sp], #4
 800027a:	bf00      	nop
 800027c:	20000388 	.word	0x20000388

08000280 <L6470_PrepareStepClock>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareStepClock(uint8_t L6470_Id, eL6470_DirId_t L6470_DirId)
{
 8000280:	b500      	push	{lr}
 8000282:	b083      	sub	sp, #12
 8000284:	460b      	mov	r3, r1
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 8000286:	2200      	movs	r2, #0
 8000288:	9201      	str	r2, [sp, #4]
 800028a:	9200      	str	r2, [sp, #0]
 800028c:	2204      	movs	r2, #4
 800028e:	4903      	ldr	r1, [pc, #12]	; (800029c <L6470_PrepareStepClock+0x1c>)
 8000290:	f7ff ffaa 	bl	80001e8 <L6470_PrepareAppCmdPkg>
}
 8000294:	b003      	add	sp, #12
 8000296:	f85d fb04 	ldr.w	pc, [sp], #4
 800029a:	bf00      	nop
 800029c:	20000388 	.word	0x20000388

080002a0 <L6470_PrepareMove>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareMove(uint8_t L6470_Id, eL6470_DirId_t L6470_DirId, uint32_t N_Step)
{
 80002a0:	b500      	push	{lr}
 80002a2:	b083      	sub	sp, #12
 80002a4:	460b      	mov	r3, r1
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 80002a6:	2100      	movs	r1, #0
 80002a8:	9101      	str	r1, [sp, #4]
 80002aa:	9200      	str	r2, [sp, #0]
 80002ac:	2205      	movs	r2, #5
 80002ae:	4903      	ldr	r1, [pc, #12]	; (80002bc <L6470_PrepareMove+0x1c>)
 80002b0:	f7ff ff9a 	bl	80001e8 <L6470_PrepareAppCmdPkg>
}
 80002b4:	b003      	add	sp, #12
 80002b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80002ba:	bf00      	nop
 80002bc:	20000388 	.word	0x20000388

080002c0 <L6470_PrepareGoTo>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareGoTo(uint8_t L6470_Id, uint32_t AbsPos)
{
 80002c0:	b500      	push	{lr}
 80002c2:	b083      	sub	sp, #12
 80002c4:	460b      	mov	r3, r1
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 80002c6:	2200      	movs	r2, #0
 80002c8:	9201      	str	r2, [sp, #4]
 80002ca:	9200      	str	r2, [sp, #0]
 80002cc:	2206      	movs	r2, #6
 80002ce:	4903      	ldr	r1, [pc, #12]	; (80002dc <L6470_PrepareGoTo+0x1c>)
 80002d0:	f7ff ff8a 	bl	80001e8 <L6470_PrepareAppCmdPkg>
}
 80002d4:	b003      	add	sp, #12
 80002d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80002da:	bf00      	nop
 80002dc:	20000388 	.word	0x20000388

080002e0 <L6470_PrepareGoToDir>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareGoToDir(uint8_t L6470_Id, eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
{
 80002e0:	b500      	push	{lr}
 80002e2:	b083      	sub	sp, #12
 80002e4:	460b      	mov	r3, r1
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 80002e6:	2100      	movs	r1, #0
 80002e8:	9101      	str	r1, [sp, #4]
 80002ea:	9200      	str	r2, [sp, #0]
 80002ec:	2207      	movs	r2, #7
 80002ee:	4903      	ldr	r1, [pc, #12]	; (80002fc <L6470_PrepareGoToDir+0x1c>)
 80002f0:	f7ff ff7a 	bl	80001e8 <L6470_PrepareAppCmdPkg>
}
 80002f4:	b003      	add	sp, #12
 80002f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80002fa:	bf00      	nop
 80002fc:	20000388 	.word	0x20000388

08000300 <L6470_PrepareGoUntil>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareGoUntil(uint8_t L6470_Id, eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
{
 8000300:	b500      	push	{lr}
 8000302:	b083      	sub	sp, #12
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 8000304:	9301      	str	r3, [sp, #4]
 8000306:	9200      	str	r2, [sp, #0]
 8000308:	460b      	mov	r3, r1
 800030a:	2208      	movs	r2, #8
 800030c:	4902      	ldr	r1, [pc, #8]	; (8000318 <L6470_PrepareGoUntil+0x18>)
 800030e:	f7ff ff6b 	bl	80001e8 <L6470_PrepareAppCmdPkg>
}
 8000312:	b003      	add	sp, #12
 8000314:	f85d fb04 	ldr.w	pc, [sp], #4
 8000318:	20000388 	.word	0x20000388

0800031c <L6470_PrepareReleaseSW>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareReleaseSW(uint8_t L6470_Id, eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
{
 800031c:	b500      	push	{lr}
 800031e:	b083      	sub	sp, #12
 8000320:	460b      	mov	r3, r1
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 8000322:	2100      	movs	r1, #0
 8000324:	9101      	str	r1, [sp, #4]
 8000326:	9200      	str	r2, [sp, #0]
 8000328:	2209      	movs	r2, #9
 800032a:	4903      	ldr	r1, [pc, #12]	; (8000338 <L6470_PrepareReleaseSW+0x1c>)
 800032c:	f7ff ff5c 	bl	80001e8 <L6470_PrepareAppCmdPkg>
}
 8000330:	b003      	add	sp, #12
 8000332:	f85d fb04 	ldr.w	pc, [sp], #4
 8000336:	bf00      	nop
 8000338:	20000388 	.word	0x20000388

0800033c <L6470_PrepareGoHome>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareGoHome(uint8_t L6470_Id)
{
 800033c:	b500      	push	{lr}
 800033e:	b083      	sub	sp, #12
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 8000340:	2300      	movs	r3, #0
 8000342:	9301      	str	r3, [sp, #4]
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	220a      	movs	r2, #10
 8000348:	4902      	ldr	r1, [pc, #8]	; (8000354 <L6470_PrepareGoHome+0x18>)
 800034a:	f7ff ff4d 	bl	80001e8 <L6470_PrepareAppCmdPkg>
}
 800034e:	b003      	add	sp, #12
 8000350:	f85d fb04 	ldr.w	pc, [sp], #4
 8000354:	20000388 	.word	0x20000388

08000358 <L6470_PrepareGoMark>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareGoMark(uint8_t L6470_Id)
{
 8000358:	b500      	push	{lr}
 800035a:	b083      	sub	sp, #12
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 800035c:	2300      	movs	r3, #0
 800035e:	9301      	str	r3, [sp, #4]
 8000360:	9300      	str	r3, [sp, #0]
 8000362:	220b      	movs	r2, #11
 8000364:	4902      	ldr	r1, [pc, #8]	; (8000370 <L6470_PrepareGoMark+0x18>)
 8000366:	f7ff ff3f 	bl	80001e8 <L6470_PrepareAppCmdPkg>
}
 800036a:	b003      	add	sp, #12
 800036c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000370:	20000388 	.word	0x20000388

08000374 <L6470_PrepareResetPos>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareResetPos(uint8_t L6470_Id)
{
 8000374:	b500      	push	{lr}
 8000376:	b083      	sub	sp, #12
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 8000378:	2300      	movs	r3, #0
 800037a:	9301      	str	r3, [sp, #4]
 800037c:	9300      	str	r3, [sp, #0]
 800037e:	220c      	movs	r2, #12
 8000380:	4902      	ldr	r1, [pc, #8]	; (800038c <L6470_PrepareResetPos+0x18>)
 8000382:	f7ff ff31 	bl	80001e8 <L6470_PrepareAppCmdPkg>
}
 8000386:	b003      	add	sp, #12
 8000388:	f85d fb04 	ldr.w	pc, [sp], #4
 800038c:	20000388 	.word	0x20000388

08000390 <L6470_PrepareResetDevice>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareResetDevice(uint8_t L6470_Id)
{
 8000390:	b500      	push	{lr}
 8000392:	b083      	sub	sp, #12
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 8000394:	2300      	movs	r3, #0
 8000396:	9301      	str	r3, [sp, #4]
 8000398:	9300      	str	r3, [sp, #0]
 800039a:	220d      	movs	r2, #13
 800039c:	4902      	ldr	r1, [pc, #8]	; (80003a8 <L6470_PrepareResetDevice+0x18>)
 800039e:	f7ff ff23 	bl	80001e8 <L6470_PrepareAppCmdPkg>
}
 80003a2:	b003      	add	sp, #12
 80003a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80003a8:	20000388 	.word	0x20000388

080003ac <L6470_PrepareSoftStop>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareSoftStop(uint8_t L6470_Id)
{
 80003ac:	b500      	push	{lr}
 80003ae:	b083      	sub	sp, #12
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 80003b0:	2300      	movs	r3, #0
 80003b2:	9301      	str	r3, [sp, #4]
 80003b4:	9300      	str	r3, [sp, #0]
 80003b6:	220e      	movs	r2, #14
 80003b8:	4902      	ldr	r1, [pc, #8]	; (80003c4 <L6470_PrepareSoftStop+0x18>)
 80003ba:	f7ff ff15 	bl	80001e8 <L6470_PrepareAppCmdPkg>
}
 80003be:	b003      	add	sp, #12
 80003c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80003c4:	20000388 	.word	0x20000388

080003c8 <L6470_PrepareHardStop>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareHardStop(uint8_t L6470_Id)
{
 80003c8:	b500      	push	{lr}
 80003ca:	b083      	sub	sp, #12
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 80003cc:	2300      	movs	r3, #0
 80003ce:	9301      	str	r3, [sp, #4]
 80003d0:	9300      	str	r3, [sp, #0]
 80003d2:	220f      	movs	r2, #15
 80003d4:	4902      	ldr	r1, [pc, #8]	; (80003e0 <L6470_PrepareHardStop+0x18>)
 80003d6:	f7ff ff07 	bl	80001e8 <L6470_PrepareAppCmdPkg>
}
 80003da:	b003      	add	sp, #12
 80003dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80003e0:	20000388 	.word	0x20000388

080003e4 <L6470_PrepareSoftHiZ>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareSoftHiZ(uint8_t L6470_Id)
{
 80003e4:	b500      	push	{lr}
 80003e6:	b083      	sub	sp, #12
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 80003e8:	2300      	movs	r3, #0
 80003ea:	9301      	str	r3, [sp, #4]
 80003ec:	9300      	str	r3, [sp, #0]
 80003ee:	2210      	movs	r2, #16
 80003f0:	4902      	ldr	r1, [pc, #8]	; (80003fc <L6470_PrepareSoftHiZ+0x18>)
 80003f2:	f7ff fef9 	bl	80001e8 <L6470_PrepareAppCmdPkg>
}
 80003f6:	b003      	add	sp, #12
 80003f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80003fc:	20000388 	.word	0x20000388

08000400 <L6470_PrepareHardHiZ>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareHardHiZ(uint8_t L6470_Id)
{
 8000400:	b500      	push	{lr}
 8000402:	b083      	sub	sp, #12
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 8000404:	2300      	movs	r3, #0
 8000406:	9301      	str	r3, [sp, #4]
 8000408:	9300      	str	r3, [sp, #0]
 800040a:	2211      	movs	r2, #17
 800040c:	4902      	ldr	r1, [pc, #8]	; (8000418 <L6470_PrepareHardHiZ+0x18>)
 800040e:	f7ff feeb 	bl	80001e8 <L6470_PrepareAppCmdPkg>
}
 8000412:	b003      	add	sp, #12
 8000414:	f85d fb04 	ldr.w	pc, [sp], #4
 8000418:	20000388 	.word	0x20000388

0800041c <L6470_PrepareGetStatus>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareGetStatus(uint8_t L6470_Id)
{
 800041c:	b500      	push	{lr}
 800041e:	b083      	sub	sp, #12
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 8000420:	2300      	movs	r3, #0
 8000422:	9301      	str	r3, [sp, #4]
 8000424:	9300      	str	r3, [sp, #0]
 8000426:	2212      	movs	r2, #18
 8000428:	4902      	ldr	r1, [pc, #8]	; (8000434 <L6470_PrepareGetStatus+0x18>)
 800042a:	f7ff fedd 	bl	80001e8 <L6470_PrepareAppCmdPkg>
}
 800042e:	b003      	add	sp, #12
 8000430:	f85d fb04 	ldr.w	pc, [sp], #4
 8000434:	20000388 	.word	0x20000388

08000438 <L6470_PrepareDaisyChainCommand>:
{
 8000438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      *(pL6470_DaisyChainSpiTxStruct+(i++)) = 0x00;
 800043c:	2300      	movs	r3, #0
 800043e:	700b      	strb	r3, [r1, #0]
 8000440:	704b      	strb	r3, [r1, #1]
 8000442:	708b      	strb	r3, [r1, #2]
 8000444:	70cb      	strb	r3, [r1, #3]
 8000446:	710b      	strb	r3, [r1, #4]
 8000448:	714b      	strb	r3, [r1, #5]
 800044a:	718b      	strb	r3, [r1, #6]
 800044c:	71cb      	strb	r3, [r1, #7]
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 800044e:	f101 3cff 	add.w	ip, r1, #4294967295
      *(pL6470_DaisyChainSpiTxStruct+(i++)) = 0x00;
 8000452:	461a      	mov	r2, r3
    *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) = (L6470_ApplicationCommand[(pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId].BinaryCode);
 8000454:	4c73      	ldr	r4, [pc, #460]	; (8000624 <L6470_PrepareDaisyChainCommand+0x1ec>)
 8000456:	e032      	b.n	80004be <L6470_PrepareDaisyChainCommand+0x86>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 8000458:	6846      	ldr	r6, [r0, #4]
 800045a:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 800045e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8000462:	f896 610c 	ldrb.w	r6, [r6, #268]	; 0x10c
 8000466:	ea4e 0e06 	orr.w	lr, lr, r6
 800046a:	f88c e000 	strb.w	lr, [ip]
      PARAMLengthBytes = L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].LengthByte;
 800046e:	6846      	ldr	r6, [r0, #4]
 8000470:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8000474:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8000478:	f896 611a 	ldrb.w	r6, [r6, #282]	; 0x11a
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 800047c:	b1d6      	cbz	r6, 80004b4 <L6470_PrepareDaisyChainCommand+0x7c>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(PARAMLengthBytes-spibyte)));
 800047e:	eb01 0843 	add.w	r8, r1, r3, lsl #1
 8000482:	eba6 0e03 	sub.w	lr, r6, r3
 8000486:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 800048a:	68af      	ldr	r7, [r5, #8]
 800048c:	fa27 fe0e 	lsr.w	lr, r7, lr
 8000490:	f808 e002 	strb.w	lr, [r8, r2]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 8000494:	3301      	adds	r3, #1
 8000496:	b2db      	uxtb	r3, r3
 8000498:	429e      	cmp	r6, r3
 800049a:	d2f0      	bcs.n	800047e <L6470_PrepareDaisyChainCommand+0x46>
 800049c:	e00a      	b.n	80004b4 <L6470_PrepareDaisyChainCommand+0x7c>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 800049e:	6843      	ldr	r3, [r0, #4]
 80004a0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80004a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80004a8:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80004ac:	ea4e 0e03 	orr.w	lr, lr, r3
 80004b0:	f88c e000 	strb.w	lr, [ip]
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 80004b4:	3201      	adds	r2, #1
 80004b6:	3010      	adds	r0, #16
 80004b8:	2a02      	cmp	r2, #2
 80004ba:	f000 80b0 	beq.w	800061e <L6470_PrepareDaisyChainCommand+0x1e6>
    *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) = (L6470_ApplicationCommand[(pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId].BinaryCode);
 80004be:	4605      	mov	r5, r0
 80004c0:	7803      	ldrb	r3, [r0, #0]
 80004c2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80004c6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80004ca:	f893 e00c 	ldrb.w	lr, [r3, #12]
 80004ce:	f80c ef01 	strb.w	lr, [ip, #1]!
    switch((pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId)
 80004d2:	7803      	ldrb	r3, [r0, #0]
 80004d4:	1e5e      	subs	r6, r3, #1
 80004d6:	2e08      	cmp	r6, #8
 80004d8:	d8ec      	bhi.n	80004b4 <L6470_PrepareDaisyChainCommand+0x7c>
 80004da:	a701      	add	r7, pc, #4	; (adr r7, 80004e0 <L6470_PrepareDaisyChainCommand+0xa8>)
 80004dc:	f857 f026 	ldr.w	pc, [r7, r6, lsl #2]
 80004e0:	08000459 	.word	0x08000459
 80004e4:	0800049f 	.word	0x0800049f
 80004e8:	08000505 	.word	0x08000505
 80004ec:	0800052f 	.word	0x0800052f
 80004f0:	08000545 	.word	0x08000545
 80004f4:	0800056f 	.word	0x0800056f
 80004f8:	08000585 	.word	0x08000585
 80004fc:	080005af 	.word	0x080005af
 8000500:	080005f1 	.word	0x080005f1
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8000504:	6843      	ldr	r3, [r0, #4]
 8000506:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800050a:	4423      	add	r3, r4
 800050c:	f893 3308 	ldrb.w	r3, [r3, #776]	; 0x308
 8000510:	ea4e 0e03 	orr.w	lr, lr, r3
 8000514:	f88c e000 	strb.w	lr, [ip]
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8000518:	8943      	ldrh	r3, [r0, #10]
 800051a:	f88c 3002 	strb.w	r3, [ip, #2]
 800051e:	6883      	ldr	r3, [r0, #8]
 8000520:	0a1b      	lsrs	r3, r3, #8
 8000522:	f88c 3004 	strb.w	r3, [ip, #4]
 8000526:	6883      	ldr	r3, [r0, #8]
 8000528:	f88c 3006 	strb.w	r3, [ip, #6]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800052c:	e7c2      	b.n	80004b4 <L6470_PrepareDaisyChainCommand+0x7c>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 800052e:	6843      	ldr	r3, [r0, #4]
 8000530:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8000534:	4423      	add	r3, r4
 8000536:	f893 3308 	ldrb.w	r3, [r3, #776]	; 0x308
 800053a:	ea4e 0e03 	orr.w	lr, lr, r3
 800053e:	f88c e000 	strb.w	lr, [ip]
      break;
 8000542:	e7b7      	b.n	80004b4 <L6470_PrepareDaisyChainCommand+0x7c>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8000544:	6843      	ldr	r3, [r0, #4]
 8000546:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800054a:	4423      	add	r3, r4
 800054c:	f893 3308 	ldrb.w	r3, [r3, #776]	; 0x308
 8000550:	ea4e 0e03 	orr.w	lr, lr, r3
 8000554:	f88c e000 	strb.w	lr, [ip]
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8000558:	8943      	ldrh	r3, [r0, #10]
 800055a:	f88c 3002 	strb.w	r3, [ip, #2]
 800055e:	6883      	ldr	r3, [r0, #8]
 8000560:	0a1b      	lsrs	r3, r3, #8
 8000562:	f88c 3004 	strb.w	r3, [ip, #4]
 8000566:	6883      	ldr	r3, [r0, #8]
 8000568:	f88c 3006 	strb.w	r3, [ip, #6]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800056c:	e7a2      	b.n	80004b4 <L6470_PrepareDaisyChainCommand+0x7c>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p1) >> (8*(3-spibyte)));
 800056e:	88c3      	ldrh	r3, [r0, #6]
 8000570:	f88c 3002 	strb.w	r3, [ip, #2]
 8000574:	6843      	ldr	r3, [r0, #4]
 8000576:	0a1b      	lsrs	r3, r3, #8
 8000578:	f88c 3004 	strb.w	r3, [ip, #4]
 800057c:	6843      	ldr	r3, [r0, #4]
 800057e:	f88c 3006 	strb.w	r3, [ip, #6]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8000582:	e797      	b.n	80004b4 <L6470_PrepareDaisyChainCommand+0x7c>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8000584:	6843      	ldr	r3, [r0, #4]
 8000586:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800058a:	4423      	add	r3, r4
 800058c:	f893 3308 	ldrb.w	r3, [r3, #776]	; 0x308
 8000590:	ea4e 0e03 	orr.w	lr, lr, r3
 8000594:	f88c e000 	strb.w	lr, [ip]
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8000598:	8943      	ldrh	r3, [r0, #10]
 800059a:	f88c 3002 	strb.w	r3, [ip, #2]
 800059e:	6883      	ldr	r3, [r0, #8]
 80005a0:	0a1b      	lsrs	r3, r3, #8
 80005a2:	f88c 3004 	strb.w	r3, [ip, #4]
 80005a6:	6883      	ldr	r3, [r0, #8]
 80005a8:	f88c 3006 	strb.w	r3, [ip, #6]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 80005ac:	e782      	b.n	80004b4 <L6470_PrepareDaisyChainCommand+0x7c>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 80005ae:	6843      	ldr	r3, [r0, #4]
 80005b0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80005b4:	4423      	add	r3, r4
 80005b6:	f893 3318 	ldrb.w	r3, [r3, #792]	; 0x318
 80005ba:	ea4e 0ec3 	orr.w	lr, lr, r3, lsl #3
 80005be:	fa5f fe8e 	uxtb.w	lr, lr
 80005c2:	f88c e000 	strb.w	lr, [ip]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 80005c6:	6883      	ldr	r3, [r0, #8]
 80005c8:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 80005cc:	4423      	add	r3, r4
 80005ce:	f893 3308 	ldrb.w	r3, [r3, #776]	; 0x308
 80005d2:	ea4e 0e03 	orr.w	lr, lr, r3
 80005d6:	f88c e000 	strb.w	lr, [ip]
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p3) >> (8*(3-spibyte)));
 80005da:	89c3      	ldrh	r3, [r0, #14]
 80005dc:	f88c 3002 	strb.w	r3, [ip, #2]
 80005e0:	68c3      	ldr	r3, [r0, #12]
 80005e2:	0a1b      	lsrs	r3, r3, #8
 80005e4:	f88c 3004 	strb.w	r3, [ip, #4]
 80005e8:	68c3      	ldr	r3, [r0, #12]
 80005ea:	f88c 3006 	strb.w	r3, [ip, #6]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 80005ee:	e761      	b.n	80004b4 <L6470_PrepareDaisyChainCommand+0x7c>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 80005f0:	6843      	ldr	r3, [r0, #4]
 80005f2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80005f6:	4423      	add	r3, r4
 80005f8:	f893 3318 	ldrb.w	r3, [r3, #792]	; 0x318
 80005fc:	ea4e 0ec3 	orr.w	lr, lr, r3, lsl #3
 8000600:	fa5f fe8e 	uxtb.w	lr, lr
 8000604:	f88c e000 	strb.w	lr, [ip]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 8000608:	6883      	ldr	r3, [r0, #8]
 800060a:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800060e:	4423      	add	r3, r4
 8000610:	f893 3308 	ldrb.w	r3, [r3, #776]	; 0x308
 8000614:	ea4e 0e03 	orr.w	lr, lr, r3
 8000618:	f88c e000 	strb.w	lr, [ip]
      break;
 800061c:	e74a      	b.n	80004b4 <L6470_PrepareDaisyChainCommand+0x7c>
}
 800061e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000622:	bf00      	nop
 8000624:	08003c1c 	.word	0x08003c1c

08000628 <Step_s_2_Speed>:
  if (Step_s <= (L6470_MAX_SPEED * ((float)14.9012e-3)))
 8000628:	eddf 7a08 	vldr	s15, [pc, #32]	; 800064c <Step_s_2_Speed+0x24>
 800062c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000634:	d808      	bhi.n	8000648 <Step_s_2_Speed+0x20>
    return (uint32_t)(Step_s / ((float)14.9012e-3));
 8000636:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000650 <Step_s_2_Speed+0x28>
 800063a:	eec0 7a07 	vdiv.f32	s15, s0, s14
 800063e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000642:	ee17 0a90 	vmov	r0, s15
 8000646:	4770      	bx	lr
    return 0;   // Warning
 8000648:	2000      	movs	r0, #0
}
 800064a:	4770      	bx	lr
 800064c:	4674241b 	.word	0x4674241b
 8000650:	3c74242a 	.word	0x3c74242a

08000654 <Step_s2_2_Acc>:
  if (Step_s2 <= (L6470_MAX_ACC * ((float)1.4552e1)))
 8000654:	eddf 7a09 	vldr	s15, [pc, #36]	; 800067c <Step_s2_2_Acc+0x28>
 8000658:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800065c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000660:	d809      	bhi.n	8000676 <Step_s2_2_Acc+0x22>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 8000662:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000680 <Step_s2_2_Acc+0x2c>
 8000666:	eec0 7a07 	vdiv.f32	s15, s0, s14
 800066a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800066e:	ee17 3a90 	vmov	r3, s15
 8000672:	b298      	uxth	r0, r3
 8000674:	4770      	bx	lr
    return 0;   // Warning
 8000676:	2000      	movs	r0, #0
}
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	4768c671 	.word	0x4768c671
 8000680:	4168d4fe 	.word	0x4168d4fe

08000684 <Step_s2_2_Dec>:
  if (Step_s2 <= (L6470_MAX_DEC * ((float)1.4552e1)))
 8000684:	eddf 7a09 	vldr	s15, [pc, #36]	; 80006ac <Step_s2_2_Dec+0x28>
 8000688:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800068c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000690:	d809      	bhi.n	80006a6 <Step_s2_2_Dec+0x22>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 8000692:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80006b0 <Step_s2_2_Dec+0x2c>
 8000696:	eec0 7a07 	vdiv.f32	s15, s0, s14
 800069a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800069e:	ee17 3a90 	vmov	r3, s15
 80006a2:	b298      	uxth	r0, r3
 80006a4:	4770      	bx	lr
    return 0;   // Warning
 80006a6:	2000      	movs	r0, #0
}
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	4768c671 	.word	0x4768c671
 80006b0:	4168d4fe 	.word	0x4168d4fe

080006b4 <Step_s_2_MaxSpeed>:
  if (Step_s <= (L6470_MAX_MAX_SPEED * ((float)15.2588)))
 80006b4:	eddf 7a09 	vldr	s15, [pc, #36]	; 80006dc <Step_s_2_MaxSpeed+0x28>
 80006b8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80006bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006c0:	d809      	bhi.n	80006d6 <Step_s_2_MaxSpeed+0x22>
    return (uint16_t)(Step_s / ((float)15.2588));
 80006c2:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80006e0 <Step_s_2_MaxSpeed+0x2c>
 80006c6:	eec0 7a07 	vdiv.f32	s15, s0, s14
 80006ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006ce:	ee17 3a90 	vmov	r3, s15
 80006d2:	b298      	uxth	r0, r3
 80006d4:	4770      	bx	lr
    return 0;   // Warning
 80006d6:	2000      	movs	r0, #0
}
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	4673e702 	.word	0x4673e702
 80006e0:	4174240b 	.word	0x4174240b

080006e4 <Step_s_2_MinSpeed>:
  if (Step_s <= (L6470_MAX_MIN_SPEED * ((float)238.4186e-3)))
 80006e4:	eddf 7a09 	vldr	s15, [pc, #36]	; 800070c <Step_s_2_MinSpeed+0x28>
 80006e8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80006ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006f0:	d809      	bhi.n	8000706 <Step_s_2_MinSpeed+0x22>
    return (uint16_t)(Step_s / ((float)238.4186e-3));
 80006f2:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000710 <Step_s_2_MinSpeed+0x2c>
 80006f6:	eec0 7a07 	vdiv.f32	s15, s0, s14
 80006fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006fe:	ee17 3a90 	vmov	r3, s15
 8000702:	b298      	uxth	r0, r3
 8000704:	4770      	bx	lr
    return 0;   // Warning
 8000706:	2000      	movs	r0, #0
}
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	447414bf 	.word	0x447414bf
 8000710:	3e742401 	.word	0x3e742401

08000714 <Step_s_2_FsSpd>:
  if (Step_s <= ((L6470_MAX_FS_SPD+0.5) * ((float)15.25)))
 8000714:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8000744 <Step_s_2_FsSpd+0x30>
 8000718:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800071c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000720:	d80d      	bhi.n	800073e <Step_s_2_FsSpd+0x2a>
    return (uint16_t)((float)(Step_s / ((float)15.25)) - (float)0.5);
 8000722:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8000748 <Step_s_2_FsSpd+0x34>
 8000726:	eec0 7a07 	vdiv.f32	s15, s0, s14
 800072a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800072e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000732:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000736:	ee17 3a90 	vmov	r3, s15
 800073a:	b298      	uxth	r0, r3
 800073c:	4770      	bx	lr
    return 0;   // Warning
 800073e:	2000      	movs	r0, #0
}
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	4673e180 	.word	0x4673e180
 8000748:	41740000 	.word	0x41740000

0800074c <Step_s_2_IntSpeed>:
  if (Step_s <= (L6470_MAX_INT_SPEED * ((float)59.6046e-3)))
 800074c:	eddf 7a09 	vldr	s15, [pc, #36]	; 8000774 <Step_s_2_IntSpeed+0x28>
 8000750:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000758:	d809      	bhi.n	800076e <Step_s_2_IntSpeed+0x22>
    return (uint16_t)(Step_s / ((float)59.6046e-3));
 800075a:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000778 <Step_s_2_IntSpeed+0x2c>
 800075e:	eec0 7a07 	vdiv.f32	s15, s0, s14
 8000762:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000766:	ee17 3a90 	vmov	r3, s15
 800076a:	b298      	uxth	r0, r3
 800076c:	4770      	bx	lr
    return 0;   // Warning
 800076e:	2000      	movs	r0, #0
}
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	44742023 	.word	0x44742023
 8000778:	3d7423f4 	.word	0x3d7423f4

0800077c <s_Step_2_StSlp>:
  if (s_Step <= (L6470_MAX_ST_SLP * ((float)1.5686e-5)))
 800077c:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80007a8 <s_Step_2_StSlp+0x2c>
 8000780:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000788:	d80c      	bhi.n	80007a4 <s_Step_2_StSlp+0x28>
{
 800078a:	b082      	sub	sp, #8
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 800078c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80007ac <s_Step_2_StSlp+0x30>
 8000790:	eec0 7a07 	vdiv.f32	s15, s0, s14
 8000794:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000798:	edcd 7a01 	vstr	s15, [sp, #4]
 800079c:	f89d 0004 	ldrb.w	r0, [sp, #4]
}
 80007a0:	b002      	add	sp, #8
 80007a2:	4770      	bx	lr
    return 0;   // Warning
 80007a4:	2000      	movs	r0, #0
}
 80007a6:	4770      	bx	lr
 80007a8:	3b8311d9 	.word	0x3b8311d9
 80007ac:	3783956e 	.word	0x3783956e

080007b0 <s_Step_2_FnSlpAcc>:
  if (s_Step <= (L6470_MAX_FN_SLP_ACC * ((float)1.5686e-5)))
 80007b0:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80007dc <s_Step_2_FnSlpAcc+0x2c>
 80007b4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80007b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007bc:	d80c      	bhi.n	80007d8 <s_Step_2_FnSlpAcc+0x28>
{
 80007be:	b082      	sub	sp, #8
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 80007c0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80007e0 <s_Step_2_FnSlpAcc+0x30>
 80007c4:	eec0 7a07 	vdiv.f32	s15, s0, s14
 80007c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007cc:	edcd 7a01 	vstr	s15, [sp, #4]
 80007d0:	f89d 0004 	ldrb.w	r0, [sp, #4]
}
 80007d4:	b002      	add	sp, #8
 80007d6:	4770      	bx	lr
    return 0;   // Warning
 80007d8:	2000      	movs	r0, #0
}
 80007da:	4770      	bx	lr
 80007dc:	3b8311d9 	.word	0x3b8311d9
 80007e0:	3783956e 	.word	0x3783956e

080007e4 <s_Step_2_FnSlpDec>:
  if (s_Step <= (L6470_MAX_FN_SLP_DEC * ((float)1.5686e-5)))
 80007e4:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8000810 <s_Step_2_FnSlpDec+0x2c>
 80007e8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80007ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007f0:	d80c      	bhi.n	800080c <s_Step_2_FnSlpDec+0x28>
{
 80007f2:	b082      	sub	sp, #8
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 80007f4:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000814 <s_Step_2_FnSlpDec+0x30>
 80007f8:	eec0 7a07 	vdiv.f32	s15, s0, s14
 80007fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000800:	edcd 7a01 	vstr	s15, [sp, #4]
 8000804:	f89d 0004 	ldrb.w	r0, [sp, #4]
}
 8000808:	b002      	add	sp, #8
 800080a:	4770      	bx	lr
    return 0;   // Warning
 800080c:	2000      	movs	r0, #0
}
 800080e:	4770      	bx	lr
 8000810:	3b8311d9 	.word	0x3b8311d9
 8000814:	3783956e 	.word	0x3783956e

08000818 <mA_2_OcdTh>:
  if (mA <= ((L6470_MAX_OCD_TH+1) * ((float)375)))
 8000818:	eddf 7a12 	vldr	s15, [pc, #72]	; 8000864 <mA_2_OcdTh+0x4c>
 800081c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000824:	d81b      	bhi.n	800085e <mA_2_OcdTh+0x46>
{
 8000826:	b082      	sub	sp, #8
    result = (mA / ((float)375));
 8000828:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000868 <mA_2_OcdTh+0x50>
 800082c:	eec0 7a07 	vdiv.f32	s15, s0, s14
    decimal = result - (uint8_t)result;
 8000830:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8000834:	ed8d 7a01 	vstr	s14, [sp, #4]
 8000838:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800083c:	ee07 0a10 	vmov	s14, r0
 8000840:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000844:	ee77 7ac7 	vsub.f32	s15, s15, s14
    if (decimal < (float)0.5)
 8000848:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800084c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000854:	d501      	bpl.n	800085a <mA_2_OcdTh+0x42>
      return ((uint8_t)result - 1);
 8000856:	3801      	subs	r0, #1
 8000858:	b2c0      	uxtb	r0, r0
}
 800085a:	b002      	add	sp, #8
 800085c:	4770      	bx	lr
    return 0;   // Warning
 800085e:	2000      	movs	r0, #0
}
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	45bb8000 	.word	0x45bb8000
 8000868:	43bb8000 	.word	0x43bb8000

0800086c <mA_2_StallTh>:
  if (mA <= ((L6470_MAX_STALL_TH+1) * ((float)31.25)))
 800086c:	eddf 7a12 	vldr	s15, [pc, #72]	; 80008b8 <mA_2_StallTh+0x4c>
 8000870:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000878:	d81b      	bhi.n	80008b2 <mA_2_StallTh+0x46>
{
 800087a:	b082      	sub	sp, #8
    result = (mA / ((float)31.25));
 800087c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80008bc <mA_2_StallTh+0x50>
 8000880:	eec0 7a07 	vdiv.f32	s15, s0, s14
    decimal = result - (uint8_t)result;
 8000884:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8000888:	ed8d 7a01 	vstr	s14, [sp, #4]
 800088c:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8000890:	ee07 0a10 	vmov	s14, r0
 8000894:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000898:	ee77 7ac7 	vsub.f32	s15, s15, s14
    if (decimal < (float)0.5)
 800089c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80008a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80008a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008a8:	d501      	bpl.n	80008ae <mA_2_StallTh+0x42>
      return ((uint8_t)result - 1);
 80008aa:	3801      	subs	r0, #1
 80008ac:	b2c0      	uxtb	r0, r0
}
 80008ae:	b002      	add	sp, #8
 80008b0:	4770      	bx	lr
    return 0;   // Warning
 80008b2:	2000      	movs	r0, #0
}
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	457a0000 	.word	0x457a0000
 80008bc:	41fa0000 	.word	0x41fa0000

080008c0 <L6470_ID>:
  {
    return (position);
  }
  else
  {
    return 0xFF;
 80008c0:	2802      	cmp	r0, #2
  }
}
 80008c2:	bf28      	it	cs
 80008c4:	20ff      	movcs	r0, #255	; 0xff
 80008c6:	4770      	bx	lr

080008c8 <L6470_DaisyChainCommand>:
  * @brief  Send command to the L6470 daisy chain via SPI
  * @param  pL6470_DaisyChainSpiTxStruct  Pointer to the matrix array of bytes to be sent to the daisy chain L6470
  * @param  pL6470_DaisyChainSpiRxStruct  Pointer to the matrix array of bytes to be received from the daisy chain L6470
  */
void L6470_DaisyChainCommand(uint8_t* pL6470_DaisyChainSpiTxStruct, uint8_t* pL6470_DaisyChainSpiRxStruct)
{
 80008c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80008cc:	b083      	sub	sp, #12
 80008ce:	4681      	mov	r9, r0
 80008d0:	4688      	mov	r8, r1
  uint8_t spibyte;
  
  L6470_DaisyChain_HalfPrepared = ZERO_F;
 80008d2:	2500      	movs	r5, #0
 80008d4:	4b14      	ldr	r3, [pc, #80]	; (8000928 <L6470_DaisyChainCommand+0x60>)
 80008d6:	701d      	strb	r5, [r3, #0]
  
  /* Send all command bytes via SPI */
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
  {
    /* Enable SPI communication for L6470 */
    L6470_nCS_LOW();
 80008d8:	4e14      	ldr	r6, [pc, #80]	; (800092c <L6470_DaisyChainCommand+0x64>)
 80008da:	462f      	mov	r7, r5
    L6470_SPI_Communication(&HSPI, (pL6470_DaisyChainSpiTxStruct+(spibyte * L6470DAISYCHAINSIZE)), (pL6470_DaisyChainSpiRxStruct+(spibyte * L6470DAISYCHAINSIZE)), L6470DAISYCHAINSIZE, 10);
    
    /* Allow the device to decode the received command */
    L6470_nCS_HIGH();
    
    _DELAY(TDISCS);
 80008dc:	461c      	mov	r4, r3
    L6470_nCS_LOW();
 80008de:	463a      	mov	r2, r7
 80008e0:	8931      	ldrh	r1, [r6, #8]
 80008e2:	6870      	ldr	r0, [r6, #4]
 80008e4:	f001 f9a6 	bl	8001c34 <HAL_GPIO_WritePin>
    L6470_SPI_Communication(&HSPI, (pL6470_DaisyChainSpiTxStruct+(spibyte * L6470DAISYCHAINSIZE)), (pL6470_DaisyChainSpiRxStruct+(spibyte * L6470DAISYCHAINSIZE)), L6470DAISYCHAINSIZE, 10);
 80008e8:	230a      	movs	r3, #10
 80008ea:	9300      	str	r3, [sp, #0]
 80008ec:	2302      	movs	r3, #2
 80008ee:	eb08 0205 	add.w	r2, r8, r5
 80008f2:	eb09 0105 	add.w	r1, r9, r5
 80008f6:	480e      	ldr	r0, [pc, #56]	; (8000930 <L6470_DaisyChainCommand+0x68>)
 80008f8:	f001 ff56 	bl	80027a8 <HAL_SPI_TransmitReceive>
    L6470_nCS_HIGH();
 80008fc:	2201      	movs	r2, #1
 80008fe:	8931      	ldrh	r1, [r6, #8]
 8000900:	6870      	ldr	r0, [r6, #4]
 8000902:	f001 f997 	bl	8001c34 <HAL_GPIO_WritePin>
    _DELAY(TDISCS);
 8000906:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800090a:	bf00      	nop
 800090c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000910:	3301      	adds	r3, #1
 8000912:	b2db      	uxtb	r3, r3
 8000914:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8000918:	2b13      	cmp	r3, #19
 800091a:	d9f6      	bls.n	800090a <L6470_DaisyChainCommand+0x42>
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 800091c:	3502      	adds	r5, #2
 800091e:	2d08      	cmp	r5, #8
 8000920:	d1dd      	bne.n	80008de <L6470_DaisyChainCommand+0x16>
  }
}
 8000922:	b003      	add	sp, #12
 8000924:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000928:	20000384 	.word	0x20000384
 800092c:	200003c0 	.word	0x200003c0
 8000930:	200003d0 	.word	0x200003d0

08000934 <L6470_SetParam>:
{
 8000934:	b570      	push	{r4, r5, r6, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	460b      	mov	r3, r1
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 800093a:	4c0b      	ldr	r4, [pc, #44]	; (8000968 <L6470_SetParam+0x34>)
 800093c:	1d26      	adds	r6, r4, #4
 800093e:	2100      	movs	r1, #0
 8000940:	9101      	str	r1, [sp, #4]
 8000942:	9200      	str	r2, [sp, #0]
 8000944:	2201      	movs	r2, #1
 8000946:	4631      	mov	r1, r6
 8000948:	f7ff fc4e 	bl	80001e8 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800094c:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8000950:	4629      	mov	r1, r5
 8000952:	4630      	mov	r0, r6
 8000954:	f7ff fd70 	bl	8000438 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000958:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800095c:	4628      	mov	r0, r5
 800095e:	f7ff ffb3 	bl	80008c8 <L6470_DaisyChainCommand>
}
 8000962:	b002      	add	sp, #8
 8000964:	bd70      	pop	{r4, r5, r6, pc}
 8000966:	bf00      	nop
 8000968:	20000384 	.word	0x20000384

0800096c <L6470_Run>:
{
 800096c:	b570      	push	{r4, r5, r6, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	460b      	mov	r3, r1
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 8000972:	4c0b      	ldr	r4, [pc, #44]	; (80009a0 <L6470_Run+0x34>)
 8000974:	1d26      	adds	r6, r4, #4
 8000976:	2100      	movs	r1, #0
 8000978:	9101      	str	r1, [sp, #4]
 800097a:	9200      	str	r2, [sp, #0]
 800097c:	2203      	movs	r2, #3
 800097e:	4631      	mov	r1, r6
 8000980:	f7ff fc32 	bl	80001e8 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000984:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8000988:	4629      	mov	r1, r5
 800098a:	4630      	mov	r0, r6
 800098c:	f7ff fd54 	bl	8000438 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000990:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8000994:	4628      	mov	r0, r5
 8000996:	f7ff ff97 	bl	80008c8 <L6470_DaisyChainCommand>
}
 800099a:	b002      	add	sp, #8
 800099c:	bd70      	pop	{r4, r5, r6, pc}
 800099e:	bf00      	nop
 80009a0:	20000384 	.word	0x20000384

080009a4 <L6470_StepClock>:
{
 80009a4:	b570      	push	{r4, r5, r6, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	460b      	mov	r3, r1
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 80009aa:	4c0b      	ldr	r4, [pc, #44]	; (80009d8 <L6470_StepClock+0x34>)
 80009ac:	1d26      	adds	r6, r4, #4
 80009ae:	2200      	movs	r2, #0
 80009b0:	9201      	str	r2, [sp, #4]
 80009b2:	9200      	str	r2, [sp, #0]
 80009b4:	2204      	movs	r2, #4
 80009b6:	4631      	mov	r1, r6
 80009b8:	f7ff fc16 	bl	80001e8 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80009bc:	f104 0528 	add.w	r5, r4, #40	; 0x28
 80009c0:	4629      	mov	r1, r5
 80009c2:	4630      	mov	r0, r6
 80009c4:	f7ff fd38 	bl	8000438 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80009c8:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80009cc:	4628      	mov	r0, r5
 80009ce:	f7ff ff7b 	bl	80008c8 <L6470_DaisyChainCommand>
}
 80009d2:	b002      	add	sp, #8
 80009d4:	bd70      	pop	{r4, r5, r6, pc}
 80009d6:	bf00      	nop
 80009d8:	20000384 	.word	0x20000384

080009dc <L6470_Move>:
{
 80009dc:	b570      	push	{r4, r5, r6, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	460b      	mov	r3, r1
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 80009e2:	4c0b      	ldr	r4, [pc, #44]	; (8000a10 <L6470_Move+0x34>)
 80009e4:	1d26      	adds	r6, r4, #4
 80009e6:	2100      	movs	r1, #0
 80009e8:	9101      	str	r1, [sp, #4]
 80009ea:	9200      	str	r2, [sp, #0]
 80009ec:	2205      	movs	r2, #5
 80009ee:	4631      	mov	r1, r6
 80009f0:	f7ff fbfa 	bl	80001e8 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80009f4:	f104 0528 	add.w	r5, r4, #40	; 0x28
 80009f8:	4629      	mov	r1, r5
 80009fa:	4630      	mov	r0, r6
 80009fc:	f7ff fd1c 	bl	8000438 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000a00:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8000a04:	4628      	mov	r0, r5
 8000a06:	f7ff ff5f 	bl	80008c8 <L6470_DaisyChainCommand>
}
 8000a0a:	b002      	add	sp, #8
 8000a0c:	bd70      	pop	{r4, r5, r6, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000384 	.word	0x20000384

08000a14 <L6470_GoTo>:
  if (AbsPos <= L6470_POSITION_RANGE)
 8000a14:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8000a18:	d300      	bcc.n	8000a1c <L6470_GoTo+0x8>
 8000a1a:	4770      	bx	lr
{
 8000a1c:	b570      	push	{r4, r5, r6, lr}
 8000a1e:	b082      	sub	sp, #8
    L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 8000a20:	4c0b      	ldr	r4, [pc, #44]	; (8000a50 <L6470_GoTo+0x3c>)
 8000a22:	1d26      	adds	r6, r4, #4
 8000a24:	2200      	movs	r2, #0
 8000a26:	9201      	str	r2, [sp, #4]
 8000a28:	9200      	str	r2, [sp, #0]
 8000a2a:	460b      	mov	r3, r1
 8000a2c:	2206      	movs	r2, #6
 8000a2e:	4631      	mov	r1, r6
 8000a30:	f7ff fbda 	bl	80001e8 <L6470_PrepareAppCmdPkg>
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000a34:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8000a38:	4629      	mov	r1, r5
 8000a3a:	4630      	mov	r0, r6
 8000a3c:	f7ff fcfc 	bl	8000438 <L6470_PrepareDaisyChainCommand>
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000a40:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8000a44:	4628      	mov	r0, r5
 8000a46:	f7ff ff3f 	bl	80008c8 <L6470_DaisyChainCommand>
}
 8000a4a:	b002      	add	sp, #8
 8000a4c:	bd70      	pop	{r4, r5, r6, pc}
 8000a4e:	bf00      	nop
 8000a50:	20000384 	.word	0x20000384

08000a54 <L6470_GoToDir>:
  if (AbsPos <= L6470_POSITION_RANGE)
 8000a54:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8000a58:	d300      	bcc.n	8000a5c <L6470_GoToDir+0x8>
 8000a5a:	4770      	bx	lr
{
 8000a5c:	b570      	push	{r4, r5, r6, lr}
 8000a5e:	b082      	sub	sp, #8
    L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 8000a60:	4c0b      	ldr	r4, [pc, #44]	; (8000a90 <L6470_GoToDir+0x3c>)
 8000a62:	1d26      	adds	r6, r4, #4
 8000a64:	2300      	movs	r3, #0
 8000a66:	9301      	str	r3, [sp, #4]
 8000a68:	9200      	str	r2, [sp, #0]
 8000a6a:	460b      	mov	r3, r1
 8000a6c:	2207      	movs	r2, #7
 8000a6e:	4631      	mov	r1, r6
 8000a70:	f7ff fbba 	bl	80001e8 <L6470_PrepareAppCmdPkg>
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000a74:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8000a78:	4629      	mov	r1, r5
 8000a7a:	4630      	mov	r0, r6
 8000a7c:	f7ff fcdc 	bl	8000438 <L6470_PrepareDaisyChainCommand>
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000a80:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8000a84:	4628      	mov	r0, r5
 8000a86:	f7ff ff1f 	bl	80008c8 <L6470_DaisyChainCommand>
}
 8000a8a:	b002      	add	sp, #8
 8000a8c:	bd70      	pop	{r4, r5, r6, pc}
 8000a8e:	bf00      	nop
 8000a90:	20000384 	.word	0x20000384

08000a94 <L6470_GoUntil>:
{
 8000a94:	b570      	push	{r4, r5, r6, lr}
 8000a96:	b082      	sub	sp, #8
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 8000a98:	4c0a      	ldr	r4, [pc, #40]	; (8000ac4 <L6470_GoUntil+0x30>)
 8000a9a:	1d26      	adds	r6, r4, #4
 8000a9c:	9301      	str	r3, [sp, #4]
 8000a9e:	9200      	str	r2, [sp, #0]
 8000aa0:	460b      	mov	r3, r1
 8000aa2:	2208      	movs	r2, #8
 8000aa4:	4631      	mov	r1, r6
 8000aa6:	f7ff fb9f 	bl	80001e8 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000aaa:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8000aae:	4629      	mov	r1, r5
 8000ab0:	4630      	mov	r0, r6
 8000ab2:	f7ff fcc1 	bl	8000438 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000ab6:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8000aba:	4628      	mov	r0, r5
 8000abc:	f7ff ff04 	bl	80008c8 <L6470_DaisyChainCommand>
}
 8000ac0:	b002      	add	sp, #8
 8000ac2:	bd70      	pop	{r4, r5, r6, pc}
 8000ac4:	20000384 	.word	0x20000384

08000ac8 <L6470_ReleaseSW>:
{
 8000ac8:	b570      	push	{r4, r5, r6, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	460b      	mov	r3, r1
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 8000ace:	4c0b      	ldr	r4, [pc, #44]	; (8000afc <L6470_ReleaseSW+0x34>)
 8000ad0:	1d26      	adds	r6, r4, #4
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	9101      	str	r1, [sp, #4]
 8000ad6:	9200      	str	r2, [sp, #0]
 8000ad8:	2209      	movs	r2, #9
 8000ada:	4631      	mov	r1, r6
 8000adc:	f7ff fb84 	bl	80001e8 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000ae0:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8000ae4:	4629      	mov	r1, r5
 8000ae6:	4630      	mov	r0, r6
 8000ae8:	f7ff fca6 	bl	8000438 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000aec:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8000af0:	4628      	mov	r0, r5
 8000af2:	f7ff fee9 	bl	80008c8 <L6470_DaisyChainCommand>
}
 8000af6:	b002      	add	sp, #8
 8000af8:	bd70      	pop	{r4, r5, r6, pc}
 8000afa:	bf00      	nop
 8000afc:	20000384 	.word	0x20000384

08000b00 <L6470_GoHome>:
{
 8000b00:	b570      	push	{r4, r5, r6, lr}
 8000b02:	b082      	sub	sp, #8
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 8000b04:	4c0a      	ldr	r4, [pc, #40]	; (8000b30 <L6470_GoHome+0x30>)
 8000b06:	1d26      	adds	r6, r4, #4
 8000b08:	2300      	movs	r3, #0
 8000b0a:	9301      	str	r3, [sp, #4]
 8000b0c:	9300      	str	r3, [sp, #0]
 8000b0e:	220a      	movs	r2, #10
 8000b10:	4631      	mov	r1, r6
 8000b12:	f7ff fb69 	bl	80001e8 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000b16:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8000b1a:	4629      	mov	r1, r5
 8000b1c:	4630      	mov	r0, r6
 8000b1e:	f7ff fc8b 	bl	8000438 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000b22:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8000b26:	4628      	mov	r0, r5
 8000b28:	f7ff fece 	bl	80008c8 <L6470_DaisyChainCommand>
}
 8000b2c:	b002      	add	sp, #8
 8000b2e:	bd70      	pop	{r4, r5, r6, pc}
 8000b30:	20000384 	.word	0x20000384

08000b34 <L6470_GoMark>:
{
 8000b34:	b570      	push	{r4, r5, r6, lr}
 8000b36:	b082      	sub	sp, #8
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 8000b38:	4c0a      	ldr	r4, [pc, #40]	; (8000b64 <L6470_GoMark+0x30>)
 8000b3a:	1d26      	adds	r6, r4, #4
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	9301      	str	r3, [sp, #4]
 8000b40:	9300      	str	r3, [sp, #0]
 8000b42:	220b      	movs	r2, #11
 8000b44:	4631      	mov	r1, r6
 8000b46:	f7ff fb4f 	bl	80001e8 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000b4a:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8000b4e:	4629      	mov	r1, r5
 8000b50:	4630      	mov	r0, r6
 8000b52:	f7ff fc71 	bl	8000438 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000b56:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8000b5a:	4628      	mov	r0, r5
 8000b5c:	f7ff feb4 	bl	80008c8 <L6470_DaisyChainCommand>
}
 8000b60:	b002      	add	sp, #8
 8000b62:	bd70      	pop	{r4, r5, r6, pc}
 8000b64:	20000384 	.word	0x20000384

08000b68 <L6470_ResetPos>:
{
 8000b68:	b570      	push	{r4, r5, r6, lr}
 8000b6a:	b082      	sub	sp, #8
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 8000b6c:	4c0a      	ldr	r4, [pc, #40]	; (8000b98 <L6470_ResetPos+0x30>)
 8000b6e:	1d26      	adds	r6, r4, #4
 8000b70:	2300      	movs	r3, #0
 8000b72:	9301      	str	r3, [sp, #4]
 8000b74:	9300      	str	r3, [sp, #0]
 8000b76:	220c      	movs	r2, #12
 8000b78:	4631      	mov	r1, r6
 8000b7a:	f7ff fb35 	bl	80001e8 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000b7e:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8000b82:	4629      	mov	r1, r5
 8000b84:	4630      	mov	r0, r6
 8000b86:	f7ff fc57 	bl	8000438 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000b8a:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8000b8e:	4628      	mov	r0, r5
 8000b90:	f7ff fe9a 	bl	80008c8 <L6470_DaisyChainCommand>
}
 8000b94:	b002      	add	sp, #8
 8000b96:	bd70      	pop	{r4, r5, r6, pc}
 8000b98:	20000384 	.word	0x20000384

08000b9c <L6470_ResetDevice>:
{
 8000b9c:	b570      	push	{r4, r5, r6, lr}
 8000b9e:	b082      	sub	sp, #8
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 8000ba0:	4c0a      	ldr	r4, [pc, #40]	; (8000bcc <L6470_ResetDevice+0x30>)
 8000ba2:	1d26      	adds	r6, r4, #4
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	9301      	str	r3, [sp, #4]
 8000ba8:	9300      	str	r3, [sp, #0]
 8000baa:	220d      	movs	r2, #13
 8000bac:	4631      	mov	r1, r6
 8000bae:	f7ff fb1b 	bl	80001e8 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000bb2:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8000bb6:	4629      	mov	r1, r5
 8000bb8:	4630      	mov	r0, r6
 8000bba:	f7ff fc3d 	bl	8000438 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000bbe:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8000bc2:	4628      	mov	r0, r5
 8000bc4:	f7ff fe80 	bl	80008c8 <L6470_DaisyChainCommand>
}
 8000bc8:	b002      	add	sp, #8
 8000bca:	bd70      	pop	{r4, r5, r6, pc}
 8000bcc:	20000384 	.word	0x20000384

08000bd0 <L6470_SoftStop>:
{
 8000bd0:	b570      	push	{r4, r5, r6, lr}
 8000bd2:	b082      	sub	sp, #8
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 8000bd4:	4c0a      	ldr	r4, [pc, #40]	; (8000c00 <L6470_SoftStop+0x30>)
 8000bd6:	1d26      	adds	r6, r4, #4
 8000bd8:	2300      	movs	r3, #0
 8000bda:	9301      	str	r3, [sp, #4]
 8000bdc:	9300      	str	r3, [sp, #0]
 8000bde:	220e      	movs	r2, #14
 8000be0:	4631      	mov	r1, r6
 8000be2:	f7ff fb01 	bl	80001e8 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000be6:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8000bea:	4629      	mov	r1, r5
 8000bec:	4630      	mov	r0, r6
 8000bee:	f7ff fc23 	bl	8000438 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000bf2:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8000bf6:	4628      	mov	r0, r5
 8000bf8:	f7ff fe66 	bl	80008c8 <L6470_DaisyChainCommand>
}
 8000bfc:	b002      	add	sp, #8
 8000bfe:	bd70      	pop	{r4, r5, r6, pc}
 8000c00:	20000384 	.word	0x20000384

08000c04 <L6470_HardStop>:
{
 8000c04:	b570      	push	{r4, r5, r6, lr}
 8000c06:	b082      	sub	sp, #8
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 8000c08:	4c0a      	ldr	r4, [pc, #40]	; (8000c34 <L6470_HardStop+0x30>)
 8000c0a:	1d26      	adds	r6, r4, #4
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	9301      	str	r3, [sp, #4]
 8000c10:	9300      	str	r3, [sp, #0]
 8000c12:	220f      	movs	r2, #15
 8000c14:	4631      	mov	r1, r6
 8000c16:	f7ff fae7 	bl	80001e8 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000c1a:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8000c1e:	4629      	mov	r1, r5
 8000c20:	4630      	mov	r0, r6
 8000c22:	f7ff fc09 	bl	8000438 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000c26:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8000c2a:	4628      	mov	r0, r5
 8000c2c:	f7ff fe4c 	bl	80008c8 <L6470_DaisyChainCommand>
}
 8000c30:	b002      	add	sp, #8
 8000c32:	bd70      	pop	{r4, r5, r6, pc}
 8000c34:	20000384 	.word	0x20000384

08000c38 <L6470_SoftHiZ>:
{
 8000c38:	b570      	push	{r4, r5, r6, lr}
 8000c3a:	b082      	sub	sp, #8
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 8000c3c:	4c0a      	ldr	r4, [pc, #40]	; (8000c68 <L6470_SoftHiZ+0x30>)
 8000c3e:	1d26      	adds	r6, r4, #4
 8000c40:	2300      	movs	r3, #0
 8000c42:	9301      	str	r3, [sp, #4]
 8000c44:	9300      	str	r3, [sp, #0]
 8000c46:	2210      	movs	r2, #16
 8000c48:	4631      	mov	r1, r6
 8000c4a:	f7ff facd 	bl	80001e8 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000c4e:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8000c52:	4629      	mov	r1, r5
 8000c54:	4630      	mov	r0, r6
 8000c56:	f7ff fbef 	bl	8000438 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000c5a:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8000c5e:	4628      	mov	r0, r5
 8000c60:	f7ff fe32 	bl	80008c8 <L6470_DaisyChainCommand>
}
 8000c64:	b002      	add	sp, #8
 8000c66:	bd70      	pop	{r4, r5, r6, pc}
 8000c68:	20000384 	.word	0x20000384

08000c6c <L6470_HardHiZ>:
{
 8000c6c:	b570      	push	{r4, r5, r6, lr}
 8000c6e:	b082      	sub	sp, #8
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 8000c70:	4c0a      	ldr	r4, [pc, #40]	; (8000c9c <L6470_HardHiZ+0x30>)
 8000c72:	1d26      	adds	r6, r4, #4
 8000c74:	2300      	movs	r3, #0
 8000c76:	9301      	str	r3, [sp, #4]
 8000c78:	9300      	str	r3, [sp, #0]
 8000c7a:	2211      	movs	r2, #17
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	f7ff fab3 	bl	80001e8 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000c82:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8000c86:	4629      	mov	r1, r5
 8000c88:	4630      	mov	r0, r6
 8000c8a:	f7ff fbd5 	bl	8000438 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000c8e:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8000c92:	4628      	mov	r0, r5
 8000c94:	f7ff fe18 	bl	80008c8 <L6470_DaisyChainCommand>
}
 8000c98:	b002      	add	sp, #8
 8000c9a:	bd70      	pop	{r4, r5, r6, pc}
 8000c9c:	20000384 	.word	0x20000384

08000ca0 <L6470_PerformPreparedApplicationCommand>:
{
 8000ca0:	b538      	push	{r3, r4, r5, lr}
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000ca2:	4c07      	ldr	r4, [pc, #28]	; (8000cc0 <L6470_PerformPreparedApplicationCommand+0x20>)
 8000ca4:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8000ca8:	4629      	mov	r1, r5
 8000caa:	1d20      	adds	r0, r4, #4
 8000cac:	f7ff fbc4 	bl	8000438 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000cb0:	3430      	adds	r4, #48	; 0x30
 8000cb2:	4621      	mov	r1, r4
 8000cb4:	4628      	mov	r0, r5
 8000cb6:	f7ff fe07 	bl	80008c8 <L6470_DaisyChainCommand>
}
 8000cba:	4620      	mov	r0, r4
 8000cbc:	bd38      	pop	{r3, r4, r5, pc}
 8000cbe:	bf00      	nop
 8000cc0:	20000384 	.word	0x20000384

08000cc4 <L6470_ExtractReturnedData>:
{
  uint32_t value;
  uint8_t i;
  
  value = 0x000000;
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 8000cc4:	4401      	add	r1, r0
 8000cc6:	1e53      	subs	r3, r2, #1
 8000cc8:	00db      	lsls	r3, r3, #3
 8000cca:	f102 5200 	add.w	r2, r2, #536870912	; 0x20000000
 8000cce:	3a04      	subs	r2, #4
 8000cd0:	00d2      	lsls	r2, r2, #3
  value = 0x000000;
 8000cd2:	2000      	movs	r0, #0
  {
    value |= (*(pL6470_DaisyChainSpiRxStruct+(i*L6470DAISYCHAINSIZE)+L6470_Id))<<((LengthByte-i)*8);
 8000cd4:	f811 cf02 	ldrb.w	ip, [r1, #2]!
 8000cd8:	fa0c fc03 	lsl.w	ip, ip, r3
 8000cdc:	ea40 000c 	orr.w	r0, r0, ip
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 8000ce0:	3b08      	subs	r3, #8
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d1f6      	bne.n	8000cd4 <L6470_ExtractReturnedData+0x10>
  }
  
  return value;
}
 8000ce6:	4770      	bx	lr

08000ce8 <L6470_GetParam>:
{
 8000ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000cec:	b082      	sub	sp, #8
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460c      	mov	r4, r1
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 8000cf2:	4d12      	ldr	r5, [pc, #72]	; (8000d3c <L6470_GetParam+0x54>)
 8000cf4:	f105 0804 	add.w	r8, r5, #4
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	9301      	str	r3, [sp, #4]
 8000cfc:	9300      	str	r3, [sp, #0]
 8000cfe:	460b      	mov	r3, r1
 8000d00:	2202      	movs	r2, #2
 8000d02:	4641      	mov	r1, r8
 8000d04:	f7ff fa70 	bl	80001e8 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000d08:	f105 0728 	add.w	r7, r5, #40	; 0x28
 8000d0c:	4639      	mov	r1, r7
 8000d0e:	4640      	mov	r0, r8
 8000d10:	f7ff fb92 	bl	8000438 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000d14:	3530      	adds	r5, #48	; 0x30
 8000d16:	4629      	mov	r1, r5
 8000d18:	4638      	mov	r0, r7
 8000d1a:	f7ff fdd5 	bl	80008c8 <L6470_DaisyChainCommand>
  ValueLengthByte = L6470_Register[L6470_RegId].LengthByte;
 8000d1e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8000d22:	4907      	ldr	r1, [pc, #28]	; (8000d40 <L6470_GetParam+0x58>)
 8000d24:	eb01 0484 	add.w	r4, r1, r4, lsl #2
  ReceivedValue = L6470_ExtractReturnedData(L6470_Id, (uint8_t*)L6470_DaisyChainSpiRxStruct, ValueLengthByte);
 8000d28:	f894 211a 	ldrb.w	r2, [r4, #282]	; 0x11a
 8000d2c:	4629      	mov	r1, r5
 8000d2e:	4630      	mov	r0, r6
 8000d30:	f7ff ffc8 	bl	8000cc4 <L6470_ExtractReturnedData>
}
 8000d34:	b002      	add	sp, #8
 8000d36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d3a:	bf00      	nop
 8000d3c:	20000384 	.word	0x20000384
 8000d40:	08003c1c 	.word	0x08003c1c

08000d44 <L6470_CheckStatusRegisterFlag>:
  *
  * @retval state The flag state.
  */

uint8_t L6470_CheckStatusRegisterFlag(uint8_t L6470_Id, uint8_t L6470_StatusRegisterFlagId)
{
 8000d44:	b510      	push	{r4, lr}
 8000d46:	460c      	mov	r4, r1
  uint8_t state = 0;
  
  *((uint16_t*)pL6470_StatusRegister) = L6470_GetParam(L6470_Id, L6470_STATUS_ID);
 8000d48:	2118      	movs	r1, #24
 8000d4a:	f7ff ffcd 	bl	8000ce8 <L6470_GetParam>
 8000d4e:	4b34      	ldr	r3, [pc, #208]	; (8000e20 <L6470_CheckStatusRegisterFlag+0xdc>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	8018      	strh	r0, [r3, #0]
  
  switch(L6470_StatusRegisterFlagId)
 8000d54:	2c0e      	cmp	r4, #14
 8000d56:	d861      	bhi.n	8000e1c <L6470_CheckStatusRegisterFlag+0xd8>
 8000d58:	e8df f004 	tbb	[pc, r4]
 8000d5c:	1a140e08 	.word	0x1a140e08
 8000d60:	312c2620 	.word	0x312c2620
 8000d64:	49433d37 	.word	0x49433d37
 8000d68:	554f      	.short	0x554f
 8000d6a:	5b          	.byte	0x5b
 8000d6b:	00          	.byte	0x00
  {
  case HiZ_ID:
    state = pL6470_StatusRegister->HiZ;
 8000d6c:	4b2c      	ldr	r3, [pc, #176]	; (8000e20 <L6470_CheckStatusRegisterFlag+0xdc>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	7818      	ldrb	r0, [r3, #0]
 8000d72:	f000 0001 	and.w	r0, r0, #1
    state = pL6470_StatusRegister->SCK_MOD;
    break;
  }
  
  return state;
}
 8000d76:	bd10      	pop	{r4, pc}
    state = pL6470_StatusRegister->BUSY;
 8000d78:	4b29      	ldr	r3, [pc, #164]	; (8000e20 <L6470_CheckStatusRegisterFlag+0xdc>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	7818      	ldrb	r0, [r3, #0]
 8000d7e:	f3c0 0040 	ubfx	r0, r0, #1, #1
    break;
 8000d82:	e7f8      	b.n	8000d76 <L6470_CheckStatusRegisterFlag+0x32>
    state = pL6470_StatusRegister->SW_F;
 8000d84:	4b26      	ldr	r3, [pc, #152]	; (8000e20 <L6470_CheckStatusRegisterFlag+0xdc>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	7818      	ldrb	r0, [r3, #0]
 8000d8a:	f3c0 0080 	ubfx	r0, r0, #2, #1
    break;
 8000d8e:	e7f2      	b.n	8000d76 <L6470_CheckStatusRegisterFlag+0x32>
    state = pL6470_StatusRegister->SW_EVN;
 8000d90:	4b23      	ldr	r3, [pc, #140]	; (8000e20 <L6470_CheckStatusRegisterFlag+0xdc>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	7818      	ldrb	r0, [r3, #0]
 8000d96:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    break;
 8000d9a:	e7ec      	b.n	8000d76 <L6470_CheckStatusRegisterFlag+0x32>
    state = pL6470_StatusRegister->DIR;
 8000d9c:	4b20      	ldr	r3, [pc, #128]	; (8000e20 <L6470_CheckStatusRegisterFlag+0xdc>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	7818      	ldrb	r0, [r3, #0]
 8000da2:	f3c0 1000 	ubfx	r0, r0, #4, #1
    break;
 8000da6:	e7e6      	b.n	8000d76 <L6470_CheckStatusRegisterFlag+0x32>
    state = pL6470_StatusRegister->MOT_STATUS;
 8000da8:	4b1d      	ldr	r3, [pc, #116]	; (8000e20 <L6470_CheckStatusRegisterFlag+0xdc>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	7818      	ldrb	r0, [r3, #0]
 8000dae:	f3c0 1041 	ubfx	r0, r0, #5, #2
    break;
 8000db2:	e7e0      	b.n	8000d76 <L6470_CheckStatusRegisterFlag+0x32>
    state = pL6470_StatusRegister->NOTPERF_CMD;
 8000db4:	4b1a      	ldr	r3, [pc, #104]	; (8000e20 <L6470_CheckStatusRegisterFlag+0xdc>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	7818      	ldrb	r0, [r3, #0]
 8000dba:	09c0      	lsrs	r0, r0, #7
    break;
 8000dbc:	e7db      	b.n	8000d76 <L6470_CheckStatusRegisterFlag+0x32>
    state = pL6470_StatusRegister->WRONG_CMD;
 8000dbe:	4b18      	ldr	r3, [pc, #96]	; (8000e20 <L6470_CheckStatusRegisterFlag+0xdc>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	7858      	ldrb	r0, [r3, #1]
 8000dc4:	f000 0001 	and.w	r0, r0, #1
    break;
 8000dc8:	e7d5      	b.n	8000d76 <L6470_CheckStatusRegisterFlag+0x32>
    state = pL6470_StatusRegister->UVLO;
 8000dca:	4b15      	ldr	r3, [pc, #84]	; (8000e20 <L6470_CheckStatusRegisterFlag+0xdc>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	7858      	ldrb	r0, [r3, #1]
 8000dd0:	f3c0 0040 	ubfx	r0, r0, #1, #1
    break;
 8000dd4:	e7cf      	b.n	8000d76 <L6470_CheckStatusRegisterFlag+0x32>
    state = pL6470_StatusRegister->TH_WRN;
 8000dd6:	4b12      	ldr	r3, [pc, #72]	; (8000e20 <L6470_CheckStatusRegisterFlag+0xdc>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	7858      	ldrb	r0, [r3, #1]
 8000ddc:	f3c0 0080 	ubfx	r0, r0, #2, #1
    break;
 8000de0:	e7c9      	b.n	8000d76 <L6470_CheckStatusRegisterFlag+0x32>
    state = pL6470_StatusRegister->TH_SD;
 8000de2:	4b0f      	ldr	r3, [pc, #60]	; (8000e20 <L6470_CheckStatusRegisterFlag+0xdc>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	7858      	ldrb	r0, [r3, #1]
 8000de8:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    break;
 8000dec:	e7c3      	b.n	8000d76 <L6470_CheckStatusRegisterFlag+0x32>
    state = pL6470_StatusRegister->OCD;
 8000dee:	4b0c      	ldr	r3, [pc, #48]	; (8000e20 <L6470_CheckStatusRegisterFlag+0xdc>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	7858      	ldrb	r0, [r3, #1]
 8000df4:	f3c0 1000 	ubfx	r0, r0, #4, #1
    break;
 8000df8:	e7bd      	b.n	8000d76 <L6470_CheckStatusRegisterFlag+0x32>
    state = pL6470_StatusRegister->STEP_LOSS_A;
 8000dfa:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <L6470_CheckStatusRegisterFlag+0xdc>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	7858      	ldrb	r0, [r3, #1]
 8000e00:	f3c0 1040 	ubfx	r0, r0, #5, #1
    break;
 8000e04:	e7b7      	b.n	8000d76 <L6470_CheckStatusRegisterFlag+0x32>
    state = pL6470_StatusRegister->STEP_LOSS_B;
 8000e06:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <L6470_CheckStatusRegisterFlag+0xdc>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	7858      	ldrb	r0, [r3, #1]
 8000e0c:	f3c0 1080 	ubfx	r0, r0, #6, #1
    break;
 8000e10:	e7b1      	b.n	8000d76 <L6470_CheckStatusRegisterFlag+0x32>
    state = pL6470_StatusRegister->SCK_MOD;
 8000e12:	4b03      	ldr	r3, [pc, #12]	; (8000e20 <L6470_CheckStatusRegisterFlag+0xdc>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	7858      	ldrb	r0, [r3, #1]
 8000e18:	09c0      	lsrs	r0, r0, #7
    break;
 8000e1a:	e7ac      	b.n	8000d76 <L6470_CheckStatusRegisterFlag+0x32>
  switch(L6470_StatusRegisterFlagId)
 8000e1c:	2000      	movs	r0, #0
 8000e1e:	e7aa      	b.n	8000d76 <L6470_CheckStatusRegisterFlag+0x32>
 8000e20:	20000000 	.word	0x20000000

08000e24 <L6470_GetStatus>:
{
 8000e24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e26:	b083      	sub	sp, #12
 8000e28:	4605      	mov	r5, r0
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 8000e2a:	4c0e      	ldr	r4, [pc, #56]	; (8000e64 <L6470_GetStatus+0x40>)
 8000e2c:	1d27      	adds	r7, r4, #4
 8000e2e:	2300      	movs	r3, #0
 8000e30:	9301      	str	r3, [sp, #4]
 8000e32:	9300      	str	r3, [sp, #0]
 8000e34:	2212      	movs	r2, #18
 8000e36:	4639      	mov	r1, r7
 8000e38:	f7ff f9d6 	bl	80001e8 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000e3c:	f104 0628 	add.w	r6, r4, #40	; 0x28
 8000e40:	4631      	mov	r1, r6
 8000e42:	4638      	mov	r0, r7
 8000e44:	f7ff faf8 	bl	8000438 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000e48:	3430      	adds	r4, #48	; 0x30
 8000e4a:	4621      	mov	r1, r4
 8000e4c:	4630      	mov	r0, r6
 8000e4e:	f7ff fd3b 	bl	80008c8 <L6470_DaisyChainCommand>
  ReceivedValue = (uint16_t)L6470_ExtractReturnedData(L6470_Id, (uint8_t*)L6470_DaisyChainSpiRxStruct, 2);
 8000e52:	2202      	movs	r2, #2
 8000e54:	4621      	mov	r1, r4
 8000e56:	4628      	mov	r0, r5
 8000e58:	f7ff ff34 	bl	8000cc4 <L6470_ExtractReturnedData>
}
 8000e5c:	b280      	uxth	r0, r0
 8000e5e:	b003      	add	sp, #12
 8000e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e62:	bf00      	nop
 8000e64:	20000384 	.word	0x20000384

08000e68 <L6470_GetRegisterName>:
  * @brief  Return the mnemonic name for the L6470 register.
  * @param  id  The identifier of the L6470 register.
  */
uint8_t *L6470_GetRegisterName(uint8_t id)
{
  if (id < L6470REGIDSIZE)
 8000e68:	2818      	cmp	r0, #24
 8000e6a:	d806      	bhi.n	8000e7a <L6470_GetRegisterName+0x12>
  {
    return (uint8_t*)L6470_Register[id].Name;
 8000e6c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8000e70:	4b03      	ldr	r3, [pc, #12]	; (8000e80 <L6470_GetRegisterName+0x18>)
 8000e72:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8000e76:	3001      	adds	r0, #1
 8000e78:	4770      	bx	lr
  }
  else
  {
    return (uint8_t*)"";
 8000e7a:	4802      	ldr	r0, [pc, #8]	; (8000e84 <L6470_GetRegisterName+0x1c>)
  }
}
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	08003d28 	.word	0x08003d28
 8000e84:	080047a0 	.word	0x080047a0

08000e88 <L6470_Config>:
  * @brief  Configures the L6470 registers.
  * @param  StepperMotorDriverHandle_t* The pointer to the stepper motor driver handle structure.
  * @param  MotorParameterData_t* The pointer to the related parameter data structure.
  */
void L6470_Config(StepperMotorDriverHandle_t *StepperMotorDriverHandle, MotorParameterData_t *MotorParameterData)
{
 8000e88:	b570      	push	{r4, r5, r6, lr}
 8000e8a:	4604      	mov	r4, r0
 8000e8c:	460d      	mov	r5, r1
  /* Prepare the 'Register' field of StepperMotorDriverHandle */
  StepperMotorDriverHandle->Register.ACC = Step_s2_2_Acc(MotorParameterData->acc);
 8000e8e:	ed91 0a05 	vldr	s0, [r1, #20]
 8000e92:	f7ff fbdf 	bl	8000654 <Step_s2_2_Acc>
 8000e96:	4606      	mov	r6, r0
 8000e98:	83a0      	strh	r0, [r4, #28]
  StepperMotorDriverHandle->Register.DEC = Step_s2_2_Dec(MotorParameterData->dec);
 8000e9a:	ed95 0a06 	vldr	s0, [r5, #24]
 8000e9e:	f7ff fbf1 	bl	8000684 <Step_s2_2_Dec>
 8000ea2:	83e0      	strh	r0, [r4, #30]
  StepperMotorDriverHandle->Register.MAX_SPEED = Step_s_2_MaxSpeed(MotorParameterData->maxspeed);
 8000ea4:	ed95 0a07 	vldr	s0, [r5, #28]
 8000ea8:	f7ff fc04 	bl	80006b4 <Step_s_2_MaxSpeed>
 8000eac:	8420      	strh	r0, [r4, #32]
  StepperMotorDriverHandle->Register.MIN_SPEED = Step_s_2_MinSpeed(MotorParameterData->minspeed);
 8000eae:	ed95 0a08 	vldr	s0, [r5, #32]
 8000eb2:	f7ff fc17 	bl	80006e4 <Step_s_2_MinSpeed>
 8000eb6:	8460      	strh	r0, [r4, #34]	; 0x22
  StepperMotorDriverHandle->Register.FS_SPD = Step_s_2_FsSpd(MotorParameterData->fsspd);
 8000eb8:	ed95 0a09 	vldr	s0, [r5, #36]	; 0x24
 8000ebc:	f7ff fc2a 	bl	8000714 <Step_s_2_FsSpd>
 8000ec0:	84a0      	strh	r0, [r4, #36]	; 0x24
  StepperMotorDriverHandle->Register.KVAL_HOLD = (uint8_t)((float)((float)(MotorParameterData->kvalhold * 256) / (MotorParameterData->motorvoltage)));
 8000ec2:	edd5 6a0a 	vldr	s13, [r5, #40]	; 0x28
 8000ec6:	eddf 7a74 	vldr	s15, [pc, #464]	; 8001098 <L6470_Config+0x210>
 8000eca:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000ece:	ed95 6a00 	vldr	s12, [r5]
 8000ed2:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8000ed6:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8000eda:	ee17 3a10 	vmov	r3, s14
 8000ede:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
  StepperMotorDriverHandle->Register.KVAL_RUN = (uint8_t)((float)((float)(MotorParameterData->kvalrun * 256) / (MotorParameterData->motorvoltage)));
 8000ee2:	edd5 6a0b 	vldr	s13, [r5, #44]	; 0x2c
 8000ee6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000eea:	ed95 6a00 	vldr	s12, [r5]
 8000eee:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8000ef2:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8000ef6:	ee17 3a10 	vmov	r3, s14
 8000efa:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
  StepperMotorDriverHandle->Register.KVAL_ACC = (uint8_t)((float)((float)(MotorParameterData->kvalacc * 256) / (MotorParameterData->motorvoltage)));
 8000efe:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8000f02:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000f06:	ed95 6a00 	vldr	s12, [r5]
 8000f0a:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8000f0e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8000f12:	ee17 3a10 	vmov	r3, s14
 8000f16:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  StepperMotorDriverHandle->Register.KVAL_DEC = (uint8_t)((float)((float)(MotorParameterData->kvaldec * 256) / (MotorParameterData->motorvoltage)));
 8000f1a:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
 8000f1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f22:	edd5 6a00 	vldr	s13, [r5]
 8000f26:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000f2a:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8000f2e:	ee17 3a90 	vmov	r3, s15
 8000f32:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
  StepperMotorDriverHandle->Register.INT_SPEED = Step_s_2_IntSpeed(MotorParameterData->intspeed);
 8000f36:	ed95 0a0e 	vldr	s0, [r5, #56]	; 0x38
 8000f3a:	f7ff fc07 	bl	800074c <Step_s_2_IntSpeed>
 8000f3e:	8560      	strh	r0, [r4, #42]	; 0x2a
  StepperMotorDriverHandle->Register.ST_SLP = s_Step_2_StSlp(MotorParameterData->stslp);
 8000f40:	ed95 0a0f 	vldr	s0, [r5, #60]	; 0x3c
 8000f44:	f7ff fc1a 	bl	800077c <s_Step_2_StSlp>
 8000f48:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
  StepperMotorDriverHandle->Register.FN_SLP_ACC = s_Step_2_FnSlpAcc(MotorParameterData->fnslpacc);
 8000f4c:	ed95 0a10 	vldr	s0, [r5, #64]	; 0x40
 8000f50:	f7ff fc2e 	bl	80007b0 <s_Step_2_FnSlpAcc>
 8000f54:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
  StepperMotorDriverHandle->Register.FN_SLP_DEC = s_Step_2_FnSlpDec(MotorParameterData->fnslpdec);
 8000f58:	ed95 0a11 	vldr	s0, [r5, #68]	; 0x44
 8000f5c:	f7ff fc42 	bl	80007e4 <s_Step_2_FnSlpDec>
 8000f60:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
  StepperMotorDriverHandle->Register.K_THERM = MotorParameterData->kterm;
 8000f64:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
 8000f68:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
  StepperMotorDriverHandle->Register.OCD_TH = mA_2_OcdTh(MotorParameterData->ocdth);
 8000f6c:	ed95 0a13 	vldr	s0, [r5, #76]	; 0x4c
 8000f70:	f7ff fc52 	bl	8000818 <mA_2_OcdTh>
 8000f74:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
  StepperMotorDriverHandle->Register.STALL_TH = mA_2_StallTh(MotorParameterData->stallth);
 8000f78:	ed95 0a14 	vldr	s0, [r5, #80]	; 0x50
 8000f7c:	f7ff fc76 	bl	800086c <mA_2_StallTh>
 8000f80:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
  StepperMotorDriverHandle->Register.STEP_MODE = MotorParameterData->step_sel;
 8000f84:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
 8000f88:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  StepperMotorDriverHandle->Register.ALARM_EN = MotorParameterData->alarmen;
 8000f8c:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 8000f90:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  StepperMotorDriverHandle->Register.CONFIG = MotorParameterData->config;
 8000f94:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
 8000f98:	86e3      	strh	r3, [r4, #54]	; 0x36
  
  /* Write the L6470 registers with the prepared data */
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_ACC_ID, StepperMotorDriverHandle->Register.ACC);
 8000f9a:	68a3      	ldr	r3, [r4, #8]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4632      	mov	r2, r6
 8000fa0:	2104      	movs	r1, #4
 8000fa2:	7820      	ldrb	r0, [r4, #0]
 8000fa4:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_DEC_ID, StepperMotorDriverHandle->Register.DEC);
 8000fa6:	68a3      	ldr	r3, [r4, #8]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	8be2      	ldrh	r2, [r4, #30]
 8000fac:	2105      	movs	r1, #5
 8000fae:	7820      	ldrb	r0, [r4, #0]
 8000fb0:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_MAX_SPEED_ID, StepperMotorDriverHandle->Register.MAX_SPEED);
 8000fb2:	68a3      	ldr	r3, [r4, #8]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	8c22      	ldrh	r2, [r4, #32]
 8000fb8:	2106      	movs	r1, #6
 8000fba:	7820      	ldrb	r0, [r4, #0]
 8000fbc:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_MIN_SPEED_ID, StepperMotorDriverHandle->Register.MIN_SPEED);
 8000fbe:	68a3      	ldr	r3, [r4, #8]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 8000fc4:	2107      	movs	r1, #7
 8000fc6:	7820      	ldrb	r0, [r4, #0]
 8000fc8:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_FS_SPD_ID, StepperMotorDriverHandle->Register.FS_SPD);
 8000fca:	68a3      	ldr	r3, [r4, #8]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
 8000fd0:	2108      	movs	r1, #8
 8000fd2:	7820      	ldrb	r0, [r4, #0]
 8000fd4:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_KVAL_HOLD_ID, StepperMotorDriverHandle->Register.KVAL_HOLD);
 8000fd6:	68a3      	ldr	r3, [r4, #8]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 8000fde:	2109      	movs	r1, #9
 8000fe0:	7820      	ldrb	r0, [r4, #0]
 8000fe2:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_KVAL_RUN_ID, StepperMotorDriverHandle->Register.KVAL_RUN);
 8000fe4:	68a3      	ldr	r3, [r4, #8]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
 8000fec:	210a      	movs	r1, #10
 8000fee:	7820      	ldrb	r0, [r4, #0]
 8000ff0:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_KVAL_ACC_ID, StepperMotorDriverHandle->Register.KVAL_ACC);
 8000ff2:	68a3      	ldr	r3, [r4, #8]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8000ffa:	210b      	movs	r1, #11
 8000ffc:	7820      	ldrb	r0, [r4, #0]
 8000ffe:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_KVAL_DEC_ID, StepperMotorDriverHandle->Register.KVAL_DEC);
 8001000:	68a3      	ldr	r3, [r4, #8]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 8001008:	210c      	movs	r1, #12
 800100a:	7820      	ldrb	r0, [r4, #0]
 800100c:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_INT_SPEED_ID, StepperMotorDriverHandle->Register.INT_SPEED);
 800100e:	68a3      	ldr	r3, [r4, #8]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001014:	210d      	movs	r1, #13
 8001016:	7820      	ldrb	r0, [r4, #0]
 8001018:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_ST_SLP_ID, StepperMotorDriverHandle->Register.ST_SLP);
 800101a:	68a3      	ldr	r3, [r4, #8]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8001022:	210e      	movs	r1, #14
 8001024:	7820      	ldrb	r0, [r4, #0]
 8001026:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_FN_SLP_ACC_ID, StepperMotorDriverHandle->Register.FN_SLP_ACC);
 8001028:	68a3      	ldr	r3, [r4, #8]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8001030:	210f      	movs	r1, #15
 8001032:	7820      	ldrb	r0, [r4, #0]
 8001034:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_FN_SLP_DEC_ID, StepperMotorDriverHandle->Register.FN_SLP_DEC);
 8001036:	68a3      	ldr	r3, [r4, #8]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
 800103e:	2110      	movs	r1, #16
 8001040:	7820      	ldrb	r0, [r4, #0]
 8001042:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_K_THERM_ID, StepperMotorDriverHandle->Register.K_THERM);
 8001044:	68a3      	ldr	r3, [r4, #8]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
 800104c:	2111      	movs	r1, #17
 800104e:	7820      	ldrb	r0, [r4, #0]
 8001050:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_OCD_TH_ID, StepperMotorDriverHandle->Register.OCD_TH);
 8001052:	68a3      	ldr	r3, [r4, #8]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 800105a:	2113      	movs	r1, #19
 800105c:	7820      	ldrb	r0, [r4, #0]
 800105e:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_STALL_TH_ID, StepperMotorDriverHandle->Register.STALL_TH);
 8001060:	68a3      	ldr	r3, [r4, #8]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
 8001068:	2114      	movs	r1, #20
 800106a:	7820      	ldrb	r0, [r4, #0]
 800106c:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_STEP_MODE_ID, StepperMotorDriverHandle->Register.STEP_MODE);
 800106e:	68a3      	ldr	r3, [r4, #8]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
 8001076:	2115      	movs	r1, #21
 8001078:	7820      	ldrb	r0, [r4, #0]
 800107a:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_ALARM_EN_ID, StepperMotorDriverHandle->Register.ALARM_EN);
 800107c:	68a3      	ldr	r3, [r4, #8]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8001084:	2116      	movs	r1, #22
 8001086:	7820      	ldrb	r0, [r4, #0]
 8001088:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_CONFIG_ID, StepperMotorDriverHandle->Register.CONFIG);
 800108a:	68a3      	ldr	r3, [r4, #8]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001090:	2117      	movs	r1, #23
 8001092:	7820      	ldrb	r0, [r4, #0]
 8001094:	4798      	blx	r3
}
 8001096:	bd70      	pop	{r4, r5, r6, pc}
 8001098:	43800000 	.word	0x43800000

0800109c <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 800109c:	b530      	push	{r4, r5, lr}
 800109e:	b087      	sub	sp, #28
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80010a0:	4602      	mov	r2, r0
 80010a2:	b948      	cbnz	r0, 80010b8 <BSP_LED_Init+0x1c>
 80010a4:	4b0f      	ldr	r3, [pc, #60]	; (80010e4 <BSP_LED_Init+0x48>)
 80010a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80010a8:	f041 0101 	orr.w	r1, r1, #1
 80010ac:	6319      	str	r1, [r3, #48]	; 0x30
 80010ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b0:	f003 0301 	and.w	r3, r3, #1
 80010b4:	9300      	str	r3, [sp, #0]
 80010b6:	9b00      	ldr	r3, [sp, #0]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80010b8:	2520      	movs	r5, #32
 80010ba:	9501      	str	r5, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010bc:	2301      	movs	r3, #1
 80010be:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010c0:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80010c2:	2302      	movs	r3, #2
 80010c4:	9304      	str	r3, [sp, #16]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80010c6:	4c08      	ldr	r4, [pc, #32]	; (80010e8 <BSP_LED_Init+0x4c>)
 80010c8:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 80010cc:	a901      	add	r1, sp, #4
 80010ce:	6860      	ldr	r0, [r4, #4]
 80010d0:	f000 fc82 	bl	80019d8 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80010d4:	2200      	movs	r2, #0
 80010d6:	4629      	mov	r1, r5
 80010d8:	6860      	ldr	r0, [r4, #4]
 80010da:	f000 fdab 	bl	8001c34 <HAL_GPIO_WritePin>
}
 80010de:	b007      	add	sp, #28
 80010e0:	bd30      	pop	{r4, r5, pc}
 80010e2:	bf00      	nop
 80010e4:	40023800 	.word	0x40023800
 80010e8:	20000098 	.word	0x20000098

080010ec <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80010ec:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 80010ee:	4b04      	ldr	r3, [pc, #16]	; (8001100 <BSP_LED_On+0x14>)
 80010f0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80010f4:	2201      	movs	r2, #1
 80010f6:	2120      	movs	r1, #32
 80010f8:	6840      	ldr	r0, [r0, #4]
 80010fa:	f000 fd9b 	bl	8001c34 <HAL_GPIO_WritePin>
}
 80010fe:	bd08      	pop	{r3, pc}
 8001100:	20000098 	.word	0x20000098

08001104 <BSP_LED_Off>:
  *   This parameter can be one of following parameters:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8001104:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8001106:	4b04      	ldr	r3, [pc, #16]	; (8001118 <BSP_LED_Off+0x14>)
 8001108:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800110c:	2200      	movs	r2, #0
 800110e:	2120      	movs	r1, #32
 8001110:	6840      	ldr	r0, [r0, #4]
 8001112:	f000 fd8f 	bl	8001c34 <HAL_GPIO_WritePin>
}
 8001116:	bd08      	pop	{r3, pc}
 8001118:	20000098 	.word	0x20000098

0800111c <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800111c:	b510      	push	{r4, lr}
 800111e:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8001120:	4684      	mov	ip, r0
 8001122:	b948      	cbnz	r0, 8001138 <BSP_PB_Init+0x1c>
 8001124:	4b1b      	ldr	r3, [pc, #108]	; (8001194 <BSP_PB_Init+0x78>)
 8001126:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001128:	f042 0204 	orr.w	r2, r2, #4
 800112c:	631a      	str	r2, [r3, #48]	; 0x30
 800112e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001130:	f003 0304 	and.w	r3, r3, #4
 8001134:	9300      	str	r3, [sp, #0]
 8001136:	9b00      	ldr	r3, [sp, #0]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8001138:	b119      	cbz	r1, 8001142 <BSP_PB_Init+0x26>
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 800113a:	2901      	cmp	r1, #1
 800113c:	d012      	beq.n	8001164 <BSP_PB_Init+0x48>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
  }
}
 800113e:	b006      	add	sp, #24
 8001140:	bd10      	pop	{r4, pc}
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8001142:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001146:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001148:	2300      	movs	r3, #0
 800114a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800114c:	2302      	movs	r3, #2
 800114e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001150:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8001152:	4b11      	ldr	r3, [pc, #68]	; (8001198 <BSP_PB_Init+0x7c>)
 8001154:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8001158:	a901      	add	r1, sp, #4
 800115a:	f8dc 0008 	ldr.w	r0, [ip, #8]
 800115e:	f000 fc3b 	bl	80019d8 <HAL_GPIO_Init>
  if(ButtonMode == BUTTON_MODE_EXTI)
 8001162:	e7ec      	b.n	800113e <BSP_PB_Init+0x22>
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8001164:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001168:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2400      	movs	r4, #0
 800116c:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; 
 800116e:	4b0b      	ldr	r3, [pc, #44]	; (800119c <BSP_PB_Init+0x80>)
 8001170:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8001172:	4b09      	ldr	r3, [pc, #36]	; (8001198 <BSP_PB_Init+0x7c>)
 8001174:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8001178:	a901      	add	r1, sp, #4
 800117a:	f8dc 0008 	ldr.w	r0, [ip, #8]
 800117e:	f000 fc2b 	bl	80019d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8001182:	4622      	mov	r2, r4
 8001184:	210f      	movs	r1, #15
 8001186:	2028      	movs	r0, #40	; 0x28
 8001188:	f000 fb9a 	bl	80018c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 800118c:	2028      	movs	r0, #40	; 0x28
 800118e:	f000 fbdb 	bl	8001948 <HAL_NVIC_EnableIRQ>
}
 8001192:	e7d4      	b.n	800113e <BSP_PB_Init+0x22>
 8001194:	40023800 	.word	0x40023800
 8001198:	20000098 	.word	0x20000098
 800119c:	10210000 	.word	0x10210000

080011a0 <BSP_Select>:
  * @param  ExpBrd_Id   The identifier of the Expansion Board to be addressed.
  * @retval FlagStatus  SET or RESET related to the result.
  */
uint8_t BSP_Select(uint8_t ExpBrd_Id)
{
  if (ExpBrd_Id < EXPBRD_MOUNTED_NR)
 80011a0:	b948      	cbnz	r0, 80011b6 <BSP_Select+0x16>
  {
    L6470_nCS_GPIO.gpio_clk_enable = L6470_nCS_GPIO_Array[ExpBrd_Id].gpio_clk_enable;
 80011a2:	4b06      	ldr	r3, [pc, #24]	; (80011bc <BSP_Select+0x1c>)
 80011a4:	4a06      	ldr	r2, [pc, #24]	; (80011c0 <BSP_Select+0x20>)
 80011a6:	6811      	ldr	r1, [r2, #0]
 80011a8:	6019      	str	r1, [r3, #0]
    L6470_nCS_GPIO.port = L6470_nCS_GPIO_Array[ExpBrd_Id].port;
 80011aa:	6851      	ldr	r1, [r2, #4]
 80011ac:	6059      	str	r1, [r3, #4]
    L6470_nCS_GPIO.pin = L6470_nCS_GPIO_Array[ExpBrd_Id].pin;
 80011ae:	8912      	ldrh	r2, [r2, #8]
 80011b0:	811a      	strh	r2, [r3, #8]
    return SET;
 80011b2:	2001      	movs	r0, #1
 80011b4:	4770      	bx	lr
  }
  else
    return RESET;
 80011b6:	2000      	movs	r0, #0
}
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	200003c0 	.word	0x200003c0
 80011c0:	200000a4 	.word	0x200000a4

080011c4 <BSP_L6470_ResetDevice>:
{
 80011c4:	b510      	push	{r4, lr}
 80011c6:	460c      	mov	r4, r1
  if (BSP_Select(ExpBrd_Id))
 80011c8:	f7ff ffea 	bl	80011a0 <BSP_Select>
 80011cc:	b900      	cbnz	r0, 80011d0 <BSP_L6470_ResetDevice+0xc>
}
 80011ce:	bd10      	pop	{r4, pc}
    L6470_ResetDevice(L6470_Id);
 80011d0:	4620      	mov	r0, r4
 80011d2:	f7ff fce3 	bl	8000b9c <L6470_ResetDevice>
}
 80011d6:	e7fa      	b.n	80011ce <BSP_L6470_ResetDevice+0xa>

080011d8 <BSP_L6470_GetStatus>:
{
 80011d8:	b510      	push	{r4, lr}
 80011da:	460c      	mov	r4, r1
  if (BSP_Select(ExpBrd_Id))
 80011dc:	f7ff ffe0 	bl	80011a0 <BSP_Select>
 80011e0:	b908      	cbnz	r0, 80011e6 <BSP_L6470_GetStatus+0xe>
    return 0;
 80011e2:	2000      	movs	r0, #0
}
 80011e4:	bd10      	pop	{r4, pc}
    return L6470_GetStatus(L6470_Id);
 80011e6:	4620      	mov	r0, r4
 80011e8:	f7ff fe1c 	bl	8000e24 <L6470_GetStatus>
 80011ec:	e7fa      	b.n	80011e4 <BSP_L6470_GetStatus+0xc>

080011ee <BSP_L6470_SetParam>:
{
 80011ee:	b570      	push	{r4, r5, r6, lr}
 80011f0:	460c      	mov	r4, r1
 80011f2:	4615      	mov	r5, r2
 80011f4:	461e      	mov	r6, r3
  if (BSP_Select(ExpBrd_Id))
 80011f6:	f7ff ffd3 	bl	80011a0 <BSP_Select>
 80011fa:	b900      	cbnz	r0, 80011fe <BSP_L6470_SetParam+0x10>
}
 80011fc:	bd70      	pop	{r4, r5, r6, pc}
    L6470_SetParam(L6470_Id, L6470_RegId, Value);
 80011fe:	4632      	mov	r2, r6
 8001200:	4629      	mov	r1, r5
 8001202:	4620      	mov	r0, r4
 8001204:	f7ff fb96 	bl	8000934 <L6470_SetParam>
}
 8001208:	e7f8      	b.n	80011fc <BSP_L6470_SetParam+0xe>

0800120a <BSP_L6470_GetParam>:
{
 800120a:	b538      	push	{r3, r4, r5, lr}
 800120c:	460c      	mov	r4, r1
 800120e:	4615      	mov	r5, r2
  if (BSP_Select(ExpBrd_Id))
 8001210:	f7ff ffc6 	bl	80011a0 <BSP_Select>
 8001214:	b908      	cbnz	r0, 800121a <BSP_L6470_GetParam+0x10>
    return 0xFF;
 8001216:	20ff      	movs	r0, #255	; 0xff
}
 8001218:	bd38      	pop	{r3, r4, r5, pc}
    return L6470_GetParam(L6470_Id, L6470_RegId);
 800121a:	4629      	mov	r1, r5
 800121c:	4620      	mov	r0, r4
 800121e:	f7ff fd63 	bl	8000ce8 <L6470_GetParam>
 8001222:	e7f9      	b.n	8001218 <BSP_L6470_GetParam+0xe>

08001224 <BSP_L6470_Run>:
{
 8001224:	b570      	push	{r4, r5, r6, lr}
 8001226:	460c      	mov	r4, r1
 8001228:	4615      	mov	r5, r2
 800122a:	461e      	mov	r6, r3
  if (BSP_Select(ExpBrd_Id))
 800122c:	f7ff ffb8 	bl	80011a0 <BSP_Select>
 8001230:	b900      	cbnz	r0, 8001234 <BSP_L6470_Run+0x10>
}
 8001232:	bd70      	pop	{r4, r5, r6, pc}
    L6470_Run(L6470_Id, L6470_DirId, Speed);
 8001234:	4632      	mov	r2, r6
 8001236:	4629      	mov	r1, r5
 8001238:	4620      	mov	r0, r4
 800123a:	f7ff fb97 	bl	800096c <L6470_Run>
}
 800123e:	e7f8      	b.n	8001232 <BSP_L6470_Run+0xe>

08001240 <BSP_L6470_StepClock>:
{
 8001240:	b538      	push	{r3, r4, r5, lr}
 8001242:	460c      	mov	r4, r1
 8001244:	4615      	mov	r5, r2
  if (BSP_Select(ExpBrd_Id))
 8001246:	f7ff ffab 	bl	80011a0 <BSP_Select>
 800124a:	b900      	cbnz	r0, 800124e <BSP_L6470_StepClock+0xe>
}
 800124c:	bd38      	pop	{r3, r4, r5, pc}
    L6470_StepClock(L6470_Id, L6470_DirId);
 800124e:	4629      	mov	r1, r5
 8001250:	4620      	mov	r0, r4
 8001252:	f7ff fba7 	bl	80009a4 <L6470_StepClock>
}
 8001256:	e7f9      	b.n	800124c <BSP_L6470_StepClock+0xc>

08001258 <BSP_L6470_Move>:
{
 8001258:	b570      	push	{r4, r5, r6, lr}
 800125a:	460c      	mov	r4, r1
 800125c:	4615      	mov	r5, r2
 800125e:	461e      	mov	r6, r3
  if (BSP_Select(ExpBrd_Id))
 8001260:	f7ff ff9e 	bl	80011a0 <BSP_Select>
 8001264:	b900      	cbnz	r0, 8001268 <BSP_L6470_Move+0x10>
}
 8001266:	bd70      	pop	{r4, r5, r6, pc}
    L6470_Move(L6470_Id, L6470_DirId, N_Step);
 8001268:	4632      	mov	r2, r6
 800126a:	4629      	mov	r1, r5
 800126c:	4620      	mov	r0, r4
 800126e:	f7ff fbb5 	bl	80009dc <L6470_Move>
}
 8001272:	e7f8      	b.n	8001266 <BSP_L6470_Move+0xe>

08001274 <BSP_L6470_GoTo>:
{
 8001274:	b538      	push	{r3, r4, r5, lr}
 8001276:	460c      	mov	r4, r1
 8001278:	4615      	mov	r5, r2
  if (BSP_Select(ExpBrd_Id))
 800127a:	f7ff ff91 	bl	80011a0 <BSP_Select>
 800127e:	b900      	cbnz	r0, 8001282 <BSP_L6470_GoTo+0xe>
}
 8001280:	bd38      	pop	{r3, r4, r5, pc}
    L6470_GoTo(L6470_Id, AbsPos);
 8001282:	4629      	mov	r1, r5
 8001284:	4620      	mov	r0, r4
 8001286:	f7ff fbc5 	bl	8000a14 <L6470_GoTo>
}
 800128a:	e7f9      	b.n	8001280 <BSP_L6470_GoTo+0xc>

0800128c <BSP_L6470_GoToDir>:
{
 800128c:	b570      	push	{r4, r5, r6, lr}
 800128e:	460c      	mov	r4, r1
 8001290:	4615      	mov	r5, r2
 8001292:	461e      	mov	r6, r3
  if (BSP_Select(ExpBrd_Id))
 8001294:	f7ff ff84 	bl	80011a0 <BSP_Select>
 8001298:	b900      	cbnz	r0, 800129c <BSP_L6470_GoToDir+0x10>
}
 800129a:	bd70      	pop	{r4, r5, r6, pc}
    L6470_GoToDir(L6470_Id, L6470_DirId, AbsPos);
 800129c:	4632      	mov	r2, r6
 800129e:	4629      	mov	r1, r5
 80012a0:	4620      	mov	r0, r4
 80012a2:	f7ff fbd7 	bl	8000a54 <L6470_GoToDir>
}
 80012a6:	e7f8      	b.n	800129a <BSP_L6470_GoToDir+0xe>

080012a8 <BSP_L6470_GoUntil>:
{
 80012a8:	b570      	push	{r4, r5, r6, lr}
 80012aa:	460c      	mov	r4, r1
 80012ac:	4615      	mov	r5, r2
 80012ae:	461e      	mov	r6, r3
  if (BSP_Select(ExpBrd_Id))
 80012b0:	f7ff ff76 	bl	80011a0 <BSP_Select>
 80012b4:	b900      	cbnz	r0, 80012b8 <BSP_L6470_GoUntil+0x10>
}
 80012b6:	bd70      	pop	{r4, r5, r6, pc}
    L6470_GoUntil(L6470_Id, L6470_ActId, L6470_DirId, Speed);
 80012b8:	9b04      	ldr	r3, [sp, #16]
 80012ba:	4632      	mov	r2, r6
 80012bc:	4629      	mov	r1, r5
 80012be:	4620      	mov	r0, r4
 80012c0:	f7ff fbe8 	bl	8000a94 <L6470_GoUntil>
}
 80012c4:	e7f7      	b.n	80012b6 <BSP_L6470_GoUntil+0xe>

080012c6 <BSP_L6470_ReleaseSW>:
{
 80012c6:	b570      	push	{r4, r5, r6, lr}
 80012c8:	460c      	mov	r4, r1
 80012ca:	4615      	mov	r5, r2
 80012cc:	461e      	mov	r6, r3
  if (BSP_Select(ExpBrd_Id))
 80012ce:	f7ff ff67 	bl	80011a0 <BSP_Select>
 80012d2:	b900      	cbnz	r0, 80012d6 <BSP_L6470_ReleaseSW+0x10>
}
 80012d4:	bd70      	pop	{r4, r5, r6, pc}
    L6470_ReleaseSW(L6470_Id, L6470_ActId, L6470_DirId);
 80012d6:	4632      	mov	r2, r6
 80012d8:	4629      	mov	r1, r5
 80012da:	4620      	mov	r0, r4
 80012dc:	f7ff fbf4 	bl	8000ac8 <L6470_ReleaseSW>
}
 80012e0:	e7f8      	b.n	80012d4 <BSP_L6470_ReleaseSW+0xe>

080012e2 <BSP_L6470_GoHome>:
{
 80012e2:	b510      	push	{r4, lr}
 80012e4:	460c      	mov	r4, r1
  if (BSP_Select(ExpBrd_Id))
 80012e6:	f7ff ff5b 	bl	80011a0 <BSP_Select>
 80012ea:	b900      	cbnz	r0, 80012ee <BSP_L6470_GoHome+0xc>
}
 80012ec:	bd10      	pop	{r4, pc}
    L6470_GoHome(L6470_Id);
 80012ee:	4620      	mov	r0, r4
 80012f0:	f7ff fc06 	bl	8000b00 <L6470_GoHome>
}
 80012f4:	e7fa      	b.n	80012ec <BSP_L6470_GoHome+0xa>

080012f6 <BSP_L6470_GoMark>:
{
 80012f6:	b510      	push	{r4, lr}
 80012f8:	460c      	mov	r4, r1
  if (BSP_Select(ExpBrd_Id))
 80012fa:	f7ff ff51 	bl	80011a0 <BSP_Select>
 80012fe:	b900      	cbnz	r0, 8001302 <BSP_L6470_GoMark+0xc>
}
 8001300:	bd10      	pop	{r4, pc}
    L6470_GoMark(L6470_Id);
 8001302:	4620      	mov	r0, r4
 8001304:	f7ff fc16 	bl	8000b34 <L6470_GoMark>
}
 8001308:	e7fa      	b.n	8001300 <BSP_L6470_GoMark+0xa>

0800130a <BSP_L6470_ResetPos>:
{
 800130a:	b510      	push	{r4, lr}
 800130c:	460c      	mov	r4, r1
  if (BSP_Select(ExpBrd_Id))
 800130e:	f7ff ff47 	bl	80011a0 <BSP_Select>
 8001312:	b900      	cbnz	r0, 8001316 <BSP_L6470_ResetPos+0xc>
}
 8001314:	bd10      	pop	{r4, pc}
    L6470_ResetPos(L6470_Id);
 8001316:	4620      	mov	r0, r4
 8001318:	f7ff fc26 	bl	8000b68 <L6470_ResetPos>
}
 800131c:	e7fa      	b.n	8001314 <BSP_L6470_ResetPos+0xa>

0800131e <BSP_L6470_SoftStop>:
{
 800131e:	b510      	push	{r4, lr}
 8001320:	460c      	mov	r4, r1
  if (BSP_Select(ExpBrd_Id))
 8001322:	f7ff ff3d 	bl	80011a0 <BSP_Select>
 8001326:	b900      	cbnz	r0, 800132a <BSP_L6470_SoftStop+0xc>
}
 8001328:	bd10      	pop	{r4, pc}
    L6470_SoftStop(L6470_Id);
 800132a:	4620      	mov	r0, r4
 800132c:	f7ff fc50 	bl	8000bd0 <L6470_SoftStop>
}
 8001330:	e7fa      	b.n	8001328 <BSP_L6470_SoftStop+0xa>

08001332 <BSP_L6470_HardStop>:
{
 8001332:	b510      	push	{r4, lr}
 8001334:	460c      	mov	r4, r1
  if (BSP_Select(ExpBrd_Id))
 8001336:	f7ff ff33 	bl	80011a0 <BSP_Select>
 800133a:	b900      	cbnz	r0, 800133e <BSP_L6470_HardStop+0xc>
}
 800133c:	bd10      	pop	{r4, pc}
    L6470_HardStop(L6470_Id);
 800133e:	4620      	mov	r0, r4
 8001340:	f7ff fc60 	bl	8000c04 <L6470_HardStop>
}
 8001344:	e7fa      	b.n	800133c <BSP_L6470_HardStop+0xa>

08001346 <BSP_L6470_SoftHiZ>:
{
 8001346:	b510      	push	{r4, lr}
 8001348:	460c      	mov	r4, r1
  if (BSP_Select(ExpBrd_Id))
 800134a:	f7ff ff29 	bl	80011a0 <BSP_Select>
 800134e:	b900      	cbnz	r0, 8001352 <BSP_L6470_SoftHiZ+0xc>
}
 8001350:	bd10      	pop	{r4, pc}
    L6470_SoftHiZ(L6470_Id);
 8001352:	4620      	mov	r0, r4
 8001354:	f7ff fc70 	bl	8000c38 <L6470_SoftHiZ>
}
 8001358:	e7fa      	b.n	8001350 <BSP_L6470_SoftHiZ+0xa>

0800135a <BSP_L6470_HardHiZ>:
{
 800135a:	b510      	push	{r4, lr}
 800135c:	460c      	mov	r4, r1
  if (BSP_Select(ExpBrd_Id))
 800135e:	f7ff ff1f 	bl	80011a0 <BSP_Select>
 8001362:	b900      	cbnz	r0, 8001366 <BSP_L6470_HardHiZ+0xc>
}
 8001364:	bd10      	pop	{r4, pc}
    L6470_HardHiZ(L6470_Id);
 8001366:	4620      	mov	r0, r4
 8001368:	f7ff fc80 	bl	8000c6c <L6470_HardHiZ>
}
 800136c:	e7fa      	b.n	8001364 <BSP_L6470_HardHiZ+0xa>

0800136e <BSP_L6470_CheckStatusRegisterFlag>:
{
 800136e:	b538      	push	{r3, r4, r5, lr}
 8001370:	460c      	mov	r4, r1
 8001372:	4615      	mov	r5, r2
  if (BSP_Select(ExpBrd_Id))
 8001374:	f7ff ff14 	bl	80011a0 <BSP_Select>
 8001378:	b908      	cbnz	r0, 800137e <BSP_L6470_CheckStatusRegisterFlag+0x10>
    return 0xFF;
 800137a:	20ff      	movs	r0, #255	; 0xff
}
 800137c:	bd38      	pop	{r3, r4, r5, pc}
    return L6470_CheckStatusRegisterFlag(L6470_Id, L6470_StatusRegisterFlagId);
 800137e:	4629      	mov	r1, r5
 8001380:	4620      	mov	r0, r4
 8001382:	f7ff fcdf 	bl	8000d44 <L6470_CheckStatusRegisterFlag>
 8001386:	e7f9      	b.n	800137c <BSP_L6470_CheckStatusRegisterFlag+0xe>

08001388 <BSP_L6470_0_0_Config>:
 * @brief   Initialize the data structure related to the stepper motor driver #0
 *          of the expansion board #0.
 * @param   MotorParameterData_t* The pointer to the related parameter data structure.
*/
void BSP_L6470_0_0_Config(MotorParameterData_t *MotorParameterData)
{
 8001388:	b508      	push	{r3, lr}
 800138a:	4601      	mov	r1, r0
  StepperMotorDriverHandle_t *StepperMotorDriverHandle;
  
  StepperMotorDriverHandle = &L6470DrvMtx[0][0];
  L6470_Config(StepperMotorDriverHandle, MotorParameterData);
 800138c:	4801      	ldr	r0, [pc, #4]	; (8001394 <BSP_L6470_0_0_Config+0xc>)
 800138e:	f7ff fd7b 	bl	8000e88 <L6470_Config>
}
 8001392:	bd08      	pop	{r3, pc}
 8001394:	200000b0 	.word	0x200000b0

08001398 <BSP_L6470_0_1_Config>:
 * @brief   Initialize the data structure related to the stepper motor driver #1
 *          of the expansion board #0.
 * @param   MotorParameterData_t* The pointer to the related parameter data structure.
 */
void BSP_L6470_0_1_Config(MotorParameterData_t *MotorParameterData)
{
 8001398:	b508      	push	{r3, lr}
 800139a:	4601      	mov	r1, r0
  StepperMotorDriverHandle_t *StepperMotorDriverHandle;
  
  StepperMotorDriverHandle = &L6470DrvMtx[0][1];
  L6470_Config(StepperMotorDriverHandle, MotorParameterData);
 800139c:	4801      	ldr	r0, [pc, #4]	; (80013a4 <BSP_L6470_0_1_Config+0xc>)
 800139e:	f7ff fd73 	bl	8000e88 <L6470_Config>
}
 80013a2:	bd08      	pop	{r3, pc}
 80013a4:	200000ec 	.word	0x200000ec

080013a8 <BSP_L6470_1_0_Config>:
 * @brief   Initialize the data structure related to the stepper motor driver #0
 *          of the expansion board #1.
 * @param   MotorParameterData_t* The pointer to the related parameter data structure.
 */
void BSP_L6470_1_0_Config(MotorParameterData_t *MotorParameterData)
{
 80013a8:	b508      	push	{r3, lr}
 80013aa:	4601      	mov	r1, r0
  StepperMotorDriverHandle_t *StepperMotorDriverHandle;
  
  StepperMotorDriverHandle = &L6470DrvMtx[1][0];
  L6470_Config(StepperMotorDriverHandle, MotorParameterData);
 80013ac:	4801      	ldr	r0, [pc, #4]	; (80013b4 <BSP_L6470_1_0_Config+0xc>)
 80013ae:	f7ff fd6b 	bl	8000e88 <L6470_Config>
}
 80013b2:	bd08      	pop	{r3, pc}
 80013b4:	20000128 	.word	0x20000128

080013b8 <BSP_L6470_1_1_Config>:
 * @brief   Initialize the data structure related to the stepper motor driver #1
 *          of the expansion board #1.
 * @param   MotorParameterData_t* The pointer to the related parameter data structure.
 */
void BSP_L6470_1_1_Config(MotorParameterData_t *MotorParameterData)
{
 80013b8:	b508      	push	{r3, lr}
 80013ba:	4601      	mov	r1, r0
  StepperMotorDriverHandle_t *StepperMotorDriverHandle;
  
  StepperMotorDriverHandle = &L6470DrvMtx[1][1];
  L6470_Config(StepperMotorDriverHandle, MotorParameterData);
 80013bc:	4801      	ldr	r0, [pc, #4]	; (80013c4 <BSP_L6470_1_1_Config+0xc>)
 80013be:	f7ff fd63 	bl	8000e88 <L6470_Config>
}
 80013c2:	bd08      	pop	{r3, pc}
 80013c4:	20000164 	.word	0x20000164

080013c8 <BSP_L6470_2_0_Config>:
 * @brief   Initialize the data structure related to the stepper motor driver #0
 *          of the expansion board #2.
 * @param   MotorParameterData_t* The pointer to the related parameter data structure.
 */
void BSP_L6470_2_0_Config(MotorParameterData_t *MotorParameterData)
{
 80013c8:	b508      	push	{r3, lr}
 80013ca:	4601      	mov	r1, r0
  StepperMotorDriverHandle_t *StepperMotorDriverHandle;
  
  StepperMotorDriverHandle = &L6470DrvMtx[2][0];
  L6470_Config(StepperMotorDriverHandle, MotorParameterData);
 80013cc:	4801      	ldr	r0, [pc, #4]	; (80013d4 <BSP_L6470_2_0_Config+0xc>)
 80013ce:	f7ff fd5b 	bl	8000e88 <L6470_Config>
}
 80013d2:	bd08      	pop	{r3, pc}
 80013d4:	200001a0 	.word	0x200001a0

080013d8 <BSP_L6470_2_1_Config>:
 * @brief   Initialize the data structure related to the stepper motor driver #1
 *          of the expansion board #2.
 * @param   MotorParameterData_t* The pointer to the related parameter data structure.
 */
void BSP_L6470_2_1_Config(MotorParameterData_t *MotorParameterData)
{
 80013d8:	b508      	push	{r3, lr}
 80013da:	4601      	mov	r1, r0
  StepperMotorDriverHandle_t *StepperMotorDriverHandle;
  
  StepperMotorDriverHandle = &L6470DrvMtx[2][1];
  L6470_Config(StepperMotorDriverHandle, MotorParameterData);
 80013dc:	4801      	ldr	r0, [pc, #4]	; (80013e4 <BSP_L6470_2_1_Config+0xc>)
 80013de:	f7ff fd53 	bl	8000e88 <L6470_Config>
}
 80013e2:	bd08      	pop	{r3, pc}
 80013e4:	200001dc 	.word	0x200001dc

080013e8 <BSP_L6470_3_0_Config>:
 * @brief   Initialize the data structure related to the stepper motor driver #0
 *          of the expansion board #3.
 * @param   MotorParameterData_t* The pointer to the related parameter data structure.
 */
void BSP_L6470_3_0_Config(MotorParameterData_t *MotorParameterData)
{
 80013e8:	b508      	push	{r3, lr}
 80013ea:	4601      	mov	r1, r0
  StepperMotorDriverHandle_t *StepperMotorDriverHandle;
  
  StepperMotorDriverHandle = &L6470DrvMtx[3][0];
  L6470_Config(StepperMotorDriverHandle, MotorParameterData);
 80013ec:	4801      	ldr	r0, [pc, #4]	; (80013f4 <BSP_L6470_3_0_Config+0xc>)
 80013ee:	f7ff fd4b 	bl	8000e88 <L6470_Config>
}
 80013f2:	bd08      	pop	{r3, pc}
 80013f4:	20000218 	.word	0x20000218

080013f8 <BSP_L6470_3_1_Config>:
 * @brief   Initialize the data structure related to the stepper motor driver #1
 *          of the expansion board #3.
 * @param   MotorParameterData_t* The pointer to the related parameter data structure.
 */
void BSP_L6470_3_1_Config(MotorParameterData_t *MotorParameterData)
{
 80013f8:	b508      	push	{r3, lr}
 80013fa:	4601      	mov	r1, r0
  StepperMotorDriverHandle_t *StepperMotorDriverHandle;
  
  StepperMotorDriverHandle = &L6470DrvMtx[3][1];
  L6470_Config(StepperMotorDriverHandle, MotorParameterData);
 80013fc:	4801      	ldr	r0, [pc, #4]	; (8001404 <BSP_L6470_3_1_Config+0xc>)
 80013fe:	f7ff fd43 	bl	8000e88 <L6470_Config>
}
 8001402:	bd08      	pop	{r3, pc}
 8001404:	20000254 	.word	0x20000254

08001408 <BSP_NUCLEO_GPIO_Init>:
{
 8001408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800140c:	b086      	sub	sp, #24
  GPIO_CLK_ENABLE(L6470_nSTBY_nRST_GPIO.gpio_clk_enable);
 800140e:	4e29      	ldr	r6, [pc, #164]	; (80014b4 <BSP_NUCLEO_GPIO_Init+0xac>)
 8001410:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8001412:	4c29      	ldr	r4, [pc, #164]	; (80014b8 <BSP_NUCLEO_GPIO_Init+0xb0>)
 8001414:	f8d4 21ec 	ldr.w	r2, [r4, #492]	; 0x1ec
 8001418:	4313      	orrs	r3, r2
 800141a:	6333      	str	r3, [r6, #48]	; 0x30
  GPIO_InitStruct.Pin = L6470_nSTBY_nRST_GPIO.pin;
 800141c:	f8b4 31f4 	ldrh.w	r3, [r4, #500]	; 0x1f4
 8001420:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001422:	2311      	movs	r3, #17
 8001424:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2500      	movs	r5, #0
 8001428:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800142a:	2703      	movs	r7, #3
 800142c:	9704      	str	r7, [sp, #16]
  HAL_GPIO_Init(L6470_nSTBY_nRST_GPIO.port, &GPIO_InitStruct);
 800142e:	a901      	add	r1, sp, #4
 8001430:	f8d4 01f0 	ldr.w	r0, [r4, #496]	; 0x1f0
 8001434:	f000 fad0 	bl	80019d8 <HAL_GPIO_Init>
  GPIO_CLK_ENABLE(L6470_nBUSY_SYNC_GPIO.gpio_clk_enable);
 8001438:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800143a:	f8d4 21f8 	ldr.w	r2, [r4, #504]	; 0x1f8
 800143e:	4313      	orrs	r3, r2
 8001440:	6333      	str	r3, [r6, #48]	; 0x30
  GPIO_InitStruct.Pin = L6470_nBUSY_SYNC_GPIO.pin;
 8001442:	f8b4 3200 	ldrh.w	r3, [r4, #512]	; 0x200
 8001446:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001448:	f8df 8070 	ldr.w	r8, [pc, #112]	; 80014bc <BSP_NUCLEO_GPIO_Init+0xb4>
 800144c:	f8cd 8008 	str.w	r8, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	9503      	str	r5, [sp, #12]
  HAL_GPIO_Init(L6470_nBUSY_SYNC_GPIO.port, &GPIO_InitStruct);
 8001452:	a901      	add	r1, sp, #4
 8001454:	f8d4 01fc 	ldr.w	r0, [r4, #508]	; 0x1fc
 8001458:	f000 fabe 	bl	80019d8 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(L6470_nBUSY_SYNC_IRQn, 0, 0);
 800145c:	462a      	mov	r2, r5
 800145e:	4629      	mov	r1, r5
 8001460:	2006      	movs	r0, #6
 8001462:	f000 fa2d 	bl	80018c0 <HAL_NVIC_SetPriority>
  GPIO_CLK_ENABLE(L6470_nFLAG_GPIO.gpio_clk_enable);
 8001466:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8001468:	f8d4 2204 	ldr.w	r2, [r4, #516]	; 0x204
 800146c:	4313      	orrs	r3, r2
 800146e:	6333      	str	r3, [r6, #48]	; 0x30
  GPIO_InitStruct.Pin = L6470_nFLAG_GPIO.pin;
 8001470:	f8b4 320c 	ldrh.w	r3, [r4, #524]	; 0x20c
 8001474:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001476:	f8cd 8008 	str.w	r8, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147a:	9503      	str	r5, [sp, #12]
  HAL_GPIO_Init(L6470_nFLAG_GPIO.port, &GPIO_InitStruct);
 800147c:	a901      	add	r1, sp, #4
 800147e:	f8d4 0208 	ldr.w	r0, [r4, #520]	; 0x208
 8001482:	f000 faa9 	bl	80019d8 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(L6470_nFLAG_IRQn, 0, 0);
 8001486:	462a      	mov	r2, r5
 8001488:	4629      	mov	r1, r5
 800148a:	2007      	movs	r0, #7
 800148c:	f000 fa18 	bl	80018c0 <HAL_NVIC_SetPriority>
    GPIO_CLK_ENABLE(L6470_nCS_GPIO_Array[ExpBrd].gpio_clk_enable);
 8001490:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8001492:	6822      	ldr	r2, [r4, #0]
 8001494:	4313      	orrs	r3, r2
 8001496:	6333      	str	r3, [r6, #48]	; 0x30
    GPIO_InitStruct.Pin = L6470_nCS_GPIO_Array[ExpBrd].pin;
 8001498:	8923      	ldrh	r3, [r4, #8]
 800149a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800149c:	2301      	movs	r3, #1
 800149e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80014a2:	9704      	str	r7, [sp, #16]
    HAL_GPIO_Init(L6470_nCS_GPIO_Array[ExpBrd].port, &GPIO_InitStruct);
 80014a4:	a901      	add	r1, sp, #4
 80014a6:	6860      	ldr	r0, [r4, #4]
 80014a8:	f000 fa96 	bl	80019d8 <HAL_GPIO_Init>
}
 80014ac:	b006      	add	sp, #24
 80014ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80014b2:	bf00      	nop
 80014b4:	40023800 	.word	0x40023800
 80014b8:	200000a4 	.word	0x200000a4
 80014bc:	10210000 	.word	0x10210000

080014c0 <BSP_L6470_Init>:
{
 80014c0:	b538      	push	{r3, r4, r5, lr}
  L6470_DISABLE();
 80014c2:	4c17      	ldr	r4, [pc, #92]	; (8001520 <BSP_L6470_Init+0x60>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	f8b4 11f4 	ldrh.w	r1, [r4, #500]	; 0x1f4
 80014ca:	f8d4 01f0 	ldr.w	r0, [r4, #496]	; 0x1f0
 80014ce:	f000 fbb1 	bl	8001c34 <HAL_GPIO_WritePin>
  L6470_ENABLE();
 80014d2:	2201      	movs	r2, #1
 80014d4:	f8b4 11f4 	ldrh.w	r1, [r4, #500]	; 0x1f4
 80014d8:	f8d4 01f0 	ldr.w	r0, [r4, #496]	; 0x1f0
 80014dc:	f000 fbaa 	bl	8001c34 <HAL_GPIO_WritePin>
    BSP_Select(ExpBrd);
 80014e0:	2000      	movs	r0, #0
 80014e2:	f7ff fe5d 	bl	80011a0 <BSP_Select>
    L6470_nCS_HIGH();
 80014e6:	4b0f      	ldr	r3, [pc, #60]	; (8001524 <BSP_L6470_Init+0x64>)
 80014e8:	2201      	movs	r2, #1
 80014ea:	8919      	ldrh	r1, [r3, #8]
 80014ec:	6858      	ldr	r0, [r3, #4]
 80014ee:	f000 fba1 	bl	8001c34 <HAL_GPIO_WritePin>
    for (L6470_Id = L6470_ID(0); L6470_Id<=L6470_ID(L6470DAISYCHAINSIZE-1); L6470_Id++)
 80014f2:	2000      	movs	r0, #0
 80014f4:	f7ff f9e4 	bl	80008c0 <L6470_ID>
 80014f8:	4604      	mov	r4, r0
 80014fa:	2501      	movs	r5, #1
 80014fc:	e007      	b.n	800150e <BSP_L6470_Init+0x4e>
      L6470_ResetDevice(L6470_Id);
 80014fe:	4620      	mov	r0, r4
 8001500:	f7ff fb4c 	bl	8000b9c <L6470_ResetDevice>
      L6470_GetStatus(L6470_Id);
 8001504:	4620      	mov	r0, r4
 8001506:	f7ff fc8d 	bl	8000e24 <L6470_GetStatus>
    for (L6470_Id = L6470_ID(0); L6470_Id<=L6470_ID(L6470DAISYCHAINSIZE-1); L6470_Id++)
 800150a:	3401      	adds	r4, #1
 800150c:	b2e4      	uxtb	r4, r4
 800150e:	4628      	mov	r0, r5
 8001510:	f7ff f9d6 	bl	80008c0 <L6470_ID>
 8001514:	42a0      	cmp	r0, r4
 8001516:	d2f2      	bcs.n	80014fe <BSP_L6470_Init+0x3e>
  BSP_Select(EXPBRD_ID(0));
 8001518:	2000      	movs	r0, #0
 800151a:	f7ff fe41 	bl	80011a0 <BSP_Select>
}
 800151e:	bd38      	pop	{r3, r4, r5, pc}
 8001520:	200000a4 	.word	0x200000a4
 8001524:	200003c0 	.word	0x200003c0

08001528 <BSP_IRQ>:
{
 8001528:	b508      	push	{r3, lr}
  if(fs == ENABLE)
 800152a:	2801      	cmp	r0, #1
 800152c:	d006      	beq.n	800153c <BSP_IRQ+0x14>
    HAL_NVIC_DisableIRQ(L6470_nBUSY_SYNC_IRQn);
 800152e:	2006      	movs	r0, #6
 8001530:	f000 fa20 	bl	8001974 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(L6470_nFLAG_IRQn);
 8001534:	2007      	movs	r0, #7
 8001536:	f000 fa1d 	bl	8001974 <HAL_NVIC_DisableIRQ>
}
 800153a:	bd08      	pop	{r3, pc}
    HAL_NVIC_EnableIRQ(L6470_nBUSY_SYNC_IRQn);
 800153c:	2006      	movs	r0, #6
 800153e:	f000 fa03 	bl	8001948 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(L6470_nFLAG_IRQn);
 8001542:	2007      	movs	r0, #7
 8001544:	f000 fa00 	bl	8001948 <HAL_NVIC_EnableIRQ>
 8001548:	e7f7      	b.n	800153a <BSP_IRQ+0x12>

0800154a <EXPBRD_ID>:
  if (position < EXPBRD_MOUNTED_NR)
 800154a:	3800      	subs	r0, #0
 800154c:	bf18      	it	ne
 800154e:	2001      	movne	r0, #1
 8001550:	4240      	negs	r0, r0
}
 8001552:	b2c0      	uxtb	r0, r0
 8001554:	4770      	bx	lr

08001556 <BSP_Init>:
{
 8001556:	b508      	push	{r3, lr}
  BSP_Select(EXPBRD_ID(0));
 8001558:	2000      	movs	r0, #0
 800155a:	f7ff fe21 	bl	80011a0 <BSP_Select>
  BSP_NUCLEO_GPIO_Init();
 800155e:	f7ff ff53 	bl	8001408 <BSP_NUCLEO_GPIO_Init>
  BSP_L6470_Init();
 8001562:	f7ff ffad 	bl	80014c0 <BSP_L6470_Init>
  BSP_IRQ(ENABLE);
 8001566:	2001      	movs	r0, #1
 8001568:	f7ff ffde 	bl	8001528 <BSP_IRQ>
}
 800156c:	bd08      	pop	{r3, pc}

0800156e <BSP_L6470_BusySynchEventManager>:
 800156e:	bf00      	nop
}
 8001570:	4770      	bx	lr

08001572 <BSP_L6470_FlagEventManager>:
 8001572:	bf00      	nop
}
 8001574:	4770      	bx	lr
	...

08001578 <BSP_EmergencyStop>:
{
 8001578:	b508      	push	{r3, lr}
  L6470_DISABLE();
 800157a:	4b04      	ldr	r3, [pc, #16]	; (800158c <BSP_EmergencyStop+0x14>)
 800157c:	2200      	movs	r2, #0
 800157e:	f8b3 11f4 	ldrh.w	r1, [r3, #500]	; 0x1f4
 8001582:	f8d3 01f0 	ldr.w	r0, [r3, #496]	; 0x1f0
 8001586:	f000 fb55 	bl	8001c34 <HAL_GPIO_WritePin>
  while(1);
 800158a:	e7fe      	b.n	800158a <BSP_EmergencyStop+0x12>
 800158c:	200000a4 	.word	0x200000a4

08001590 <BSP_GetExpansionBoardHandle>:
 * @param id Identifier inside the daisy chain
 * @retval Pointer to the StepperMotorDriverHandle_t structure
 */
StepperMotorBoardHandle_t *BSP_GetExpansionBoardHandle(uint8_t id)
{
  if (id == EXPBRD_ID(0))
 8001590:	b120      	cbz	r0, 800159c <BSP_GetExpansionBoardHandle+0xc>
    return (&XNUCLEOIHM02A1Drv[0]);
  if (id == EXPBRD_ID(1))
 8001592:	28ff      	cmp	r0, #255	; 0xff
  if (id == EXPBRD_ID(2))
    return (&XNUCLEOIHM02A1Drv[2]);
  if (id == EXPBRD_ID(3))
    return (&XNUCLEOIHM02A1Drv[3]);
  
  return 0;
 8001594:	4802      	ldr	r0, [pc, #8]	; (80015a0 <BSP_GetExpansionBoardHandle+0x10>)
 8001596:	bf18      	it	ne
 8001598:	2000      	movne	r0, #0
 800159a:	4770      	bx	lr
    return (&XNUCLEOIHM02A1Drv[0]);
 800159c:	4801      	ldr	r0, [pc, #4]	; (80015a4 <BSP_GetExpansionBoardHandle+0x14>)
}
 800159e:	4770      	bx	lr
 80015a0:	200002cc 	.word	0x200002cc
 80015a4:	200002b4 	.word	0x200002b4

080015a8 <BSP_Config>:
  * @brief  Configures each L6470 mounted on the X-NUCLEO-IHM02A1.
  * @param  StepperMotorBoardHandle_t* The pointer to the stepper motor board handle structure.
  * @param  MotorParameterData_t* The pointer to the parameter data structure.
  */
void BSP_Config(StepperMotorBoardHandle_t *StepperMotorBoardHandle, MotorParameterData_t *MotorParameterData)
{
 80015a8:	b538      	push	{r3, r4, r5, lr}
 80015aa:	4604      	mov	r4, r0
 80015ac:	460d      	mov	r5, r1
  StepperMotorBoardHandle->Select(StepperMotorBoardHandle->StackedPosition);
 80015ae:	6943      	ldr	r3, [r0, #20]
 80015b0:	7800      	ldrb	r0, [r0, #0]
 80015b2:	4798      	blx	r3
  
  StepperMotorBoardHandle->StepperMotorDriverHandle[0]->Config(MotorParameterData+0);
 80015b4:	68e3      	ldr	r3, [r4, #12]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	4628      	mov	r0, r5
 80015ba:	4798      	blx	r3
  StepperMotorBoardHandle->StepperMotorDriverHandle[1]->Config(MotorParameterData+1);
 80015bc:	6923      	ldr	r3, [r4, #16]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f105 0058 	add.w	r0, r5, #88	; 0x58
 80015c4:	4798      	blx	r3
}
 80015c6:	bd38      	pop	{r3, r4, r5, pc}

080015c8 <BSP_0_Config>:
{
 80015c8:	b508      	push	{r3, lr}
 80015ca:	4601      	mov	r1, r0
  BSP_Config(StepperMotorBoardHandle, MotorParameterData);
 80015cc:	4801      	ldr	r0, [pc, #4]	; (80015d4 <BSP_0_Config+0xc>)
 80015ce:	f7ff ffeb 	bl	80015a8 <BSP_Config>
}
 80015d2:	bd08      	pop	{r3, pc}
 80015d4:	200002b4 	.word	0x200002b4

080015d8 <BSP_1_Config>:
{
 80015d8:	b508      	push	{r3, lr}
 80015da:	4601      	mov	r1, r0
  BSP_Config(StepperMotorBoardHandle, MotorParameterData);
 80015dc:	4801      	ldr	r0, [pc, #4]	; (80015e4 <BSP_1_Config+0xc>)
 80015de:	f7ff ffe3 	bl	80015a8 <BSP_Config>
}
 80015e2:	bd08      	pop	{r3, pc}
 80015e4:	200002cc 	.word	0x200002cc

080015e8 <BSP_2_Config>:
{
 80015e8:	b508      	push	{r3, lr}
 80015ea:	4601      	mov	r1, r0
  BSP_Config(StepperMotorBoardHandle, MotorParameterData);
 80015ec:	4801      	ldr	r0, [pc, #4]	; (80015f4 <BSP_2_Config+0xc>)
 80015ee:	f7ff ffdb 	bl	80015a8 <BSP_Config>
}
 80015f2:	bd08      	pop	{r3, pc}
 80015f4:	200002e4 	.word	0x200002e4

080015f8 <BSP_3_Config>:
{
 80015f8:	b508      	push	{r3, lr}
 80015fa:	4601      	mov	r1, r0
  BSP_Config(StepperMotorBoardHandle, MotorParameterData);
 80015fc:	4801      	ldr	r0, [pc, #4]	; (8001604 <BSP_3_Config+0xc>)
 80015fe:	f7ff ffd3 	bl	80015a8 <BSP_Config>
}
 8001602:	bd08      	pop	{r3, pc}
 8001604:	200002fc 	.word	0x200002fc

08001608 <SystemClock_Config>:
  *         - APB1 Timer Clocks: 84 MHz
  *         - APB2 Peripheral Clocks: 84 MHz
  *         - APB2 Timer Clocks: 84 MHz
  */
void SystemClock_Config(void)
{
 8001608:	b530      	push	{r4, r5, lr}
 800160a:	b095      	sub	sp, #84	; 0x54

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __PWR_CLK_ENABLE();
 800160c:	4b1b      	ldr	r3, [pc, #108]	; (800167c <SystemClock_Config+0x74>)
 800160e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001610:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001614:	641a      	str	r2, [r3, #64]	; 0x40
 8001616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800161c:	9301      	str	r3, [sp, #4]
 800161e:	9b01      	ldr	r3, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001620:	4a17      	ldr	r2, [pc, #92]	; (8001680 <SystemClock_Config+0x78>)
 8001622:	6813      	ldr	r3, [r2, #0]
 8001624:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001628:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800162c:	6013      	str	r3, [r2, #0]
 800162e:	6813      	ldr	r3, [r2, #0]
 8001630:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001634:	9302      	str	r3, [sp, #8]
 8001636:	9b02      	ldr	r3, [sp, #8]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001638:	2402      	movs	r4, #2
 800163a:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800163c:	2301      	movs	r3, #1
 800163e:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001640:	2310      	movs	r3, #16
 8001642:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001644:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001646:	2500      	movs	r5, #0
 8001648:	950f      	str	r5, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800164a:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800164c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001650:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001652:	2304      	movs	r3, #4
 8001654:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001656:	2307      	movs	r3, #7
 8001658:	9313      	str	r3, [sp, #76]	; 0x4c
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800165a:	a808      	add	r0, sp, #32
 800165c:	f000 fb12 	bl	8001c84 <HAL_RCC_OscConfig>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1;
 8001660:	2305      	movs	r3, #5
 8001662:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001664:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001666:	9505      	str	r5, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001668:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800166c:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800166e:	9507      	str	r5, [sp, #28]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 8001670:	4621      	mov	r1, r4
 8001672:	a803      	add	r0, sp, #12
 8001674:	f000 fd4c 	bl	8002110 <HAL_RCC_ClockConfig>

}
 8001678:	b015      	add	sp, #84	; 0x54
 800167a:	bd30      	pop	{r4, r5, pc}
 800167c:	40023800 	.word	0x40023800
 8001680:	40007000 	.word	0x40007000

08001684 <MX_GPIO_Init>:

/**
  * @brief  This function initializes the GPIO MX.
  */
void MX_GPIO_Init(void)
{
 8001684:	b508      	push	{r3, lr}
#ifdef NUCLEO_USE_USER_BUTTON
  /* Configures Button GPIO and EXTI Line */
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8001686:	2101      	movs	r1, #1
 8001688:	2000      	movs	r0, #0
 800168a:	f7ff fd47 	bl	800111c <BSP_PB_Init>
#endif

#ifdef NUCLEO_USE_USER_LED
  /* Configures LED GPIO */
  BSP_LED_Init(LED2);
 800168e:	2000      	movs	r0, #0
 8001690:	f7ff fd04 	bl	800109c <BSP_LED_Init>
#endif
}
 8001694:	bd08      	pop	{r3, pc}
	...

08001698 <MX_SPI1_Init>:
  *         - CPOL High
  *         - CPHA 2nd Edge
  *         - Baud Rate lower than 5 MBits/s
  */
void MX_SPI1_Init(void)
{
 8001698:	b508      	push	{r3, lr}
  #define MAX_BAUDRATE  5000000
  uint32_t freq;
  uint16_t freq_div;
  uint32_t spi_baudrateprescaler;
  
  hspi1.Instance = SPI1;
 800169a:	4b1f      	ldr	r3, [pc, #124]	; (8001718 <MX_SPI1_Init+0x80>)
 800169c:	4a1f      	ldr	r2, [pc, #124]	; (800171c <MX_SPI1_Init+0x84>)
 800169e:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016a6:	2200      	movs	r2, #0
 80016a8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80016aa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80016ac:	2102      	movs	r1, #2
 80016ae:	6119      	str	r1, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80016b0:	2101      	movs	r1, #1
 80016b2:	6159      	str	r1, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016b8:	6199      	str	r1, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016ba:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLED;
 80016bc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80016be:	629a      	str	r2, [r3, #40]	; 0x28
  
  freq = HAL_RCC_GetPCLK2Freq();
 80016c0:	f000 ff3a 	bl	8002538 <HAL_RCC_GetPCLK2Freq>
  freq_div = (freq / MAX_BAUDRATE);
 80016c4:	4b16      	ldr	r3, [pc, #88]	; (8001720 <MX_SPI1_Init+0x88>)
 80016c6:	fba3 3000 	umull	r3, r0, r3, r0
  
  if (freq_div < 2)
 80016ca:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
 80016ce:	d30f      	bcc.n	80016f0 <MX_SPI1_Init+0x58>
 80016d0:	0d43      	lsrs	r3, r0, #21
  {
    spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_2;
  }
  else
  {
    if (freq_div < 4)
 80016d2:	2b03      	cmp	r3, #3
 80016d4:	d90e      	bls.n	80016f4 <MX_SPI1_Init+0x5c>
    {
      spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_4;
    }
    else
    {
      if (freq_div < 8)
 80016d6:	2b07      	cmp	r3, #7
 80016d8:	d912      	bls.n	8001700 <MX_SPI1_Init+0x68>
      {
        spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_8;
      }
      else
      {
        if (freq_div < 16)
 80016da:	2b0f      	cmp	r3, #15
 80016dc:	d912      	bls.n	8001704 <MX_SPI1_Init+0x6c>
        {
          spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_16;
        }
        else
        {
          if (freq_div < 32)
 80016de:	2b1f      	cmp	r3, #31
 80016e0:	d912      	bls.n	8001708 <MX_SPI1_Init+0x70>
          {
            spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_32;
          }
          else
          {
            if (freq_div < 64)
 80016e2:	2b3f      	cmp	r3, #63	; 0x3f
 80016e4:	d912      	bls.n	800170c <MX_SPI1_Init+0x74>
            {
              spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_64;
            }
            else
            {
              if (freq_div < 128)
 80016e6:	2b7f      	cmp	r3, #127	; 0x7f
 80016e8:	d912      	bls.n	8001710 <MX_SPI1_Init+0x78>
              {
                spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_128;
              }
              else
              {
                if (freq_div < 256)
 80016ea:	2bff      	cmp	r3, #255	; 0xff
 80016ec:	d912      	bls.n	8001714 <MX_SPI1_Init+0x7c>
                  spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_256;
                }
                else
                {
                  /* the condition is not possible, you should reduce the CPU frequency */
                  while(1);
 80016ee:	e7fe      	b.n	80016ee <MX_SPI1_Init+0x56>
    spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_2;
 80016f0:	2300      	movs	r3, #0
 80016f2:	e000      	b.n	80016f6 <MX_SPI1_Init+0x5e>
      spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_4;
 80016f4:	2308      	movs	r3, #8
        }
      }
    }
  }
  
  hspi1.Init.BaudRatePrescaler = spi_baudrateprescaler;  // the baudrate will be lower than MAX_BAUDRATE (5 MBits/s)
 80016f6:	4808      	ldr	r0, [pc, #32]	; (8001718 <MX_SPI1_Init+0x80>)
 80016f8:	61c3      	str	r3, [r0, #28]
  HAL_SPI_Init(&hspi1);
 80016fa:	f000 ffa3 	bl	8002644 <HAL_SPI_Init>
}
 80016fe:	bd08      	pop	{r3, pc}
        spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_8;
 8001700:	2310      	movs	r3, #16
 8001702:	e7f8      	b.n	80016f6 <MX_SPI1_Init+0x5e>
          spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_16;
 8001704:	2318      	movs	r3, #24
 8001706:	e7f6      	b.n	80016f6 <MX_SPI1_Init+0x5e>
            spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_32;
 8001708:	2320      	movs	r3, #32
 800170a:	e7f4      	b.n	80016f6 <MX_SPI1_Init+0x5e>
              spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_64;
 800170c:	2328      	movs	r3, #40	; 0x28
 800170e:	e7f2      	b.n	80016f6 <MX_SPI1_Init+0x5e>
                spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_128;
 8001710:	2330      	movs	r3, #48	; 0x30
 8001712:	e7f0      	b.n	80016f6 <MX_SPI1_Init+0x5e>
                  spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_256;
 8001714:	2338      	movs	r3, #56	; 0x38
 8001716:	e7ee      	b.n	80016f6 <MX_SPI1_Init+0x5e>
 8001718:	200003d0 	.word	0x200003d0
 800171c:	40013000 	.word	0x40013000
 8001720:	6b5fca6b 	.word	0x6b5fca6b

08001724 <MX_USART2_Init>:
  *         - Stop Bit:   1
  *         - Parity:     None
  *         - Mode:       TX/RX
  */
void MX_USART2_Init(void)
{
 8001724:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 8001726:	4808      	ldr	r0, [pc, #32]	; (8001748 <MX_USART2_Init+0x24>)
 8001728:	4b08      	ldr	r3, [pc, #32]	; (800174c <MX_USART2_Init+0x28>)
 800172a:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 800172c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001730:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001732:	2300      	movs	r3, #0
 8001734:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001736:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001738:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800173a:	220c      	movs	r2, #12
 800173c:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800173e:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001740:	61c3      	str	r3, [r0, #28]
  HAL_UART_Init(&huart2);
 8001742:	f001 fb89 	bl	8002e58 <HAL_UART_Init>
}
 8001746:	bd08      	pop	{r3, pc}
 8001748:	200004cc 	.word	0x200004cc
 800174c:	40004400 	.word	0x40004400

08001750 <User_LED_Blinking>:
  uint8_t r;
  uint16_t half_period_ms;
  
  half_period_ms = period_ms >> 1;
  
  for (r=0; r<repetitions; r++)
 8001750:	b1a8      	cbz	r0, 800177e <User_LED_Blinking+0x2e>
{
 8001752:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001754:	084d      	lsrs	r5, r1, #1
 8001756:	4607      	mov	r7, r0
  for (r=0; r<repetitions; r++)
 8001758:	2400      	movs	r4, #0
  {
    /* Switch on the user LED */
    BSP_LED_On(LED2);
 800175a:	4626      	mov	r6, r4
 800175c:	4630      	mov	r0, r6
 800175e:	f7ff fcc5 	bl	80010ec <BSP_LED_On>
    /* ms delay */
    HAL_Delay(half_period_ms);
 8001762:	4628      	mov	r0, r5
 8001764:	f000 f880 	bl	8001868 <HAL_Delay>
    /* Switch off the user LED */
    BSP_LED_Off(LED2);
 8001768:	4630      	mov	r0, r6
 800176a:	f7ff fccb 	bl	8001104 <BSP_LED_Off>
    /* ms delay */
    HAL_Delay(half_period_ms);
 800176e:	4628      	mov	r0, r5
 8001770:	f000 f87a 	bl	8001868 <HAL_Delay>
  for (r=0; r<repetitions; r++)
 8001774:	3401      	adds	r4, #1
 8001776:	b2e4      	uxtb	r4, r4
 8001778:	42a7      	cmp	r7, r4
 800177a:	d1ef      	bne.n	800175c <User_LED_Blinking+0xc>
  }
}
 800177c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800177e:	4770      	bx	lr

08001780 <NUCLEO_Board_Init>:
{
 8001780:	b508      	push	{r3, lr}
  HAL_Init();
 8001782:	f000 f849 	bl	8001818 <HAL_Init>
  SystemClock_Config();
 8001786:	f7ff ff3f 	bl	8001608 <SystemClock_Config>
  MX_GPIO_Init();
 800178a:	f7ff ff7b 	bl	8001684 <MX_GPIO_Init>
  MX_SPI1_Init();
 800178e:	f7ff ff83 	bl	8001698 <MX_SPI1_Init>
  MX_USART2_Init();
 8001792:	f7ff ffc7 	bl	8001724 <MX_USART2_Init>
  User_LED_Blinking(3, 750);
 8001796:	f240 21ee 	movw	r1, #750	; 0x2ee
 800179a:	2003      	movs	r0, #3
 800179c:	f7ff ffd8 	bl	8001750 <User_LED_Blinking>
}
 80017a0:	bd08      	pop	{r3, pc}
	...

080017a4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017a4:	490f      	ldr	r1, [pc, #60]	; (80017e4 <SystemInit+0x40>)
 80017a6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80017aa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80017b2:	4b0d      	ldr	r3, [pc, #52]	; (80017e8 <SystemInit+0x44>)
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	f042 0201 	orr.w	r2, r2, #1
 80017ba:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80017bc:	2000      	movs	r0, #0
 80017be:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80017c6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80017ca:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80017cc:	4a07      	ldr	r2, [pc, #28]	; (80017ec <SystemInit+0x48>)
 80017ce:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80017d6:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80017d8:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80017da:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80017de:	608b      	str	r3, [r1, #8]
#endif
}
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	e000ed00 	.word	0xe000ed00
 80017e8:	40023800 	.word	0x40023800
 80017ec:	24003010 	.word	0x24003010

080017f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017f0:	b510      	push	{r4, lr}
 80017f2:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80017f4:	f000 fe70 	bl	80024d8 <HAL_RCC_GetHCLKFreq>
 80017f8:	4b06      	ldr	r3, [pc, #24]	; (8001814 <HAL_InitTick+0x24>)
 80017fa:	fba3 3000 	umull	r3, r0, r3, r0
 80017fe:	0980      	lsrs	r0, r0, #6
 8001800:	f000 f8d0 	bl	80019a4 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8001804:	2200      	movs	r2, #0
 8001806:	4621      	mov	r1, r4
 8001808:	f04f 30ff 	mov.w	r0, #4294967295
 800180c:	f000 f858 	bl	80018c0 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8001810:	2000      	movs	r0, #0
 8001812:	bd10      	pop	{r4, pc}
 8001814:	10624dd3 	.word	0x10624dd3

08001818 <HAL_Init>:
{
 8001818:	b508      	push	{r3, lr}
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800181a:	4b0b      	ldr	r3, [pc, #44]	; (8001848 <HAL_Init+0x30>)
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001822:	601a      	str	r2, [r3, #0]
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800182a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001832:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001834:	2003      	movs	r0, #3
 8001836:	f000 f825 	bl	8001884 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800183a:	2000      	movs	r0, #0
 800183c:	f7ff ffd8 	bl	80017f0 <HAL_InitTick>
  HAL_MspInit();
 8001840:	f002 f8d6 	bl	80039f0 <HAL_MspInit>
}
 8001844:	2000      	movs	r0, #0
 8001846:	bd08      	pop	{r3, pc}
 8001848:	40023c00 	.word	0x40023c00

0800184c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800184c:	4a02      	ldr	r2, [pc, #8]	; (8001858 <HAL_IncTick+0xc>)
 800184e:	6813      	ldr	r3, [r2, #0]
 8001850:	3301      	adds	r3, #1
 8001852:	6013      	str	r3, [r2, #0]
}
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	200004c4 	.word	0x200004c4

0800185c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800185c:	4b01      	ldr	r3, [pc, #4]	; (8001864 <HAL_GetTick+0x8>)
 800185e:	6818      	ldr	r0, [r3, #0]
}
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	200004c4 	.word	0x200004c4

08001868 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8001868:	b510      	push	{r4, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 800186e:	f7ff fff5 	bl	800185c <HAL_GetTick>
 8001872:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8001874:	f7ff fff2 	bl	800185c <HAL_GetTick>
 8001878:	9b01      	ldr	r3, [sp, #4]
 800187a:	1b00      	subs	r0, r0, r4
 800187c:	4298      	cmp	r0, r3
 800187e:	d3f9      	bcc.n	8001874 <HAL_Delay+0xc>
  {
  }
}
 8001880:	b002      	add	sp, #8
 8001882:	bd10      	pop	{r4, pc}

08001884 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001884:	b510      	push	{r4, lr}
 8001886:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001888:	1ec3      	subs	r3, r0, #3
 800188a:	2b04      	cmp	r3, #4
 800188c:	d80e      	bhi.n	80018ac <HAL_NVIC_SetPriorityGrouping+0x28>
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800188e:	490a      	ldr	r1, [pc, #40]	; (80018b8 <HAL_NVIC_SetPriorityGrouping+0x34>)
 8001890:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8)                       );              /* Insert write key and priorty group */
 8001892:	0223      	lsls	r3, r4, #8
 8001894:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
 8001898:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 800189c:	4014      	ands	r4, r2
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800189e:	4323      	orrs	r3, r4
  reg_value  =  (reg_value                                   |
 80018a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80018a8:	60cb      	str	r3, [r1, #12]
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80018aa:	bd10      	pop	{r4, pc}
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80018ac:	21a4      	movs	r1, #164	; 0xa4
 80018ae:	4803      	ldr	r0, [pc, #12]	; (80018bc <HAL_NVIC_SetPriorityGrouping+0x38>)
 80018b0:	f002 f898 	bl	80039e4 <assert_failed>
 80018b4:	e7eb      	b.n	800188e <HAL_NVIC_SetPriorityGrouping+0xa>
 80018b6:	bf00      	nop
 80018b8:	e000ed00 	.word	0xe000ed00
 80018bc:	0800420c 	.word	0x0800420c

080018c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018c0:	b570      	push	{r4, r5, r6, lr}
 80018c2:	4605      	mov	r5, r0
 80018c4:	460c      	mov	r4, r1
 80018c6:	4616      	mov	r6, r2
  uint32_t prioritygroup = 0x00;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80018c8:	2a0f      	cmp	r2, #15
 80018ca:	d826      	bhi.n	800191a <HAL_NVIC_SetPriority+0x5a>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80018cc:	2c0f      	cmp	r4, #15
 80018ce:	d829      	bhi.n	8001924 <HAL_NVIC_SetPriority+0x64>

    \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018d0:	4b1a      	ldr	r3, [pc, #104]	; (800193c <HAL_NVIC_SetPriority+0x7c>)
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018d8:	f1c3 0207 	rsb	r2, r3, #7
 80018dc:	2a04      	cmp	r2, #4
 80018de:	bf28      	it	cs
 80018e0:	2204      	movcs	r2, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018e2:	1d19      	adds	r1, r3, #4
 80018e4:	2906      	cmp	r1, #6
 80018e6:	bf8c      	ite	hi
 80018e8:	3b03      	subhi	r3, #3
 80018ea:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ec:	f04f 31ff 	mov.w	r1, #4294967295
 80018f0:	fa01 f202 	lsl.w	r2, r1, r2
 80018f4:	ea24 0402 	bic.w	r4, r4, r2
 80018f8:	409c      	lsls	r4, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018fa:	fa01 f303 	lsl.w	r3, r1, r3
 80018fe:	ea26 0603 	bic.w	r6, r6, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001902:	4334      	orrs	r4, r6
  if((int32_t)IRQn < 0) {
 8001904:	2d00      	cmp	r5, #0
 8001906:	db12      	blt.n	800192e <HAL_NVIC_SetPriority+0x6e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001908:	0124      	lsls	r4, r4, #4
 800190a:	b2e4      	uxtb	r4, r4
 800190c:	f105 4560 	add.w	r5, r5, #3758096384	; 0xe0000000
 8001910:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
 8001914:	f885 4300 	strb.w	r4, [r5, #768]	; 0x300
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001918:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800191a:	21bc      	movs	r1, #188	; 0xbc
 800191c:	4808      	ldr	r0, [pc, #32]	; (8001940 <HAL_NVIC_SetPriority+0x80>)
 800191e:	f002 f861 	bl	80039e4 <assert_failed>
 8001922:	e7d3      	b.n	80018cc <HAL_NVIC_SetPriority+0xc>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001924:	21bd      	movs	r1, #189	; 0xbd
 8001926:	4806      	ldr	r0, [pc, #24]	; (8001940 <HAL_NVIC_SetPriority+0x80>)
 8001928:	f002 f85c 	bl	80039e4 <assert_failed>
 800192c:	e7d0      	b.n	80018d0 <HAL_NVIC_SetPriority+0x10>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800192e:	f005 050f 	and.w	r5, r5, #15
 8001932:	0124      	lsls	r4, r4, #4
 8001934:	b2e4      	uxtb	r4, r4
 8001936:	4b03      	ldr	r3, [pc, #12]	; (8001944 <HAL_NVIC_SetPriority+0x84>)
 8001938:	555c      	strb	r4, [r3, r5]
 800193a:	e7ed      	b.n	8001918 <HAL_NVIC_SetPriority+0x58>
 800193c:	e000ed00 	.word	0xe000ed00
 8001940:	0800420c 	.word	0x0800420c
 8001944:	e000ed14 	.word	0xe000ed14

08001948 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001948:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800194a:	1e04      	subs	r4, r0, #0
 800194c:	db09      	blt.n	8001962 <HAL_NVIC_EnableIRQ+0x1a>
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800194e:	0962      	lsrs	r2, r4, #5
 8001950:	f004 041f 	and.w	r4, r4, #31
 8001954:	2001      	movs	r0, #1
 8001956:	fa00 f404 	lsl.w	r4, r0, r4
 800195a:	4b04      	ldr	r3, [pc, #16]	; (800196c <HAL_NVIC_EnableIRQ+0x24>)
 800195c:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001960:	bd10      	pop	{r4, pc}
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001962:	21d0      	movs	r1, #208	; 0xd0
 8001964:	4802      	ldr	r0, [pc, #8]	; (8001970 <HAL_NVIC_EnableIRQ+0x28>)
 8001966:	f002 f83d 	bl	80039e4 <assert_failed>
 800196a:	e7f0      	b.n	800194e <HAL_NVIC_EnableIRQ+0x6>
 800196c:	e000e100 	.word	0xe000e100
 8001970:	0800420c 	.word	0x0800420c

08001974 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001974:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001976:	1e04      	subs	r4, r0, #0
 8001978:	db0a      	blt.n	8001990 <HAL_NVIC_DisableIRQ+0x1c>
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800197a:	0963      	lsrs	r3, r4, #5
 800197c:	f004 041f 	and.w	r4, r4, #31
 8001980:	2001      	movs	r0, #1
 8001982:	fa00 f404 	lsl.w	r4, r0, r4
 8001986:	3320      	adds	r3, #32
 8001988:	4a04      	ldr	r2, [pc, #16]	; (800199c <HAL_NVIC_DisableIRQ+0x28>)
 800198a:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800198e:	bd10      	pop	{r4, pc}
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001990:	21e0      	movs	r1, #224	; 0xe0
 8001992:	4803      	ldr	r0, [pc, #12]	; (80019a0 <HAL_NVIC_DisableIRQ+0x2c>)
 8001994:	f002 f826 	bl	80039e4 <assert_failed>
 8001998:	e7ef      	b.n	800197a <HAL_NVIC_DisableIRQ+0x6>
 800199a:	bf00      	nop
 800199c:	e000e100 	.word	0xe000e100
 80019a0:	0800420c 	.word	0x0800420c

080019a4 <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 80019a4:	3801      	subs	r0, #1
 80019a6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80019aa:	d20b      	bcs.n	80019c4 <HAL_SYSTICK_Config+0x20>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ac:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80019b0:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b2:	4a05      	ldr	r2, [pc, #20]	; (80019c8 <HAL_SYSTICK_Config+0x24>)
 80019b4:	21f0      	movs	r1, #240	; 0xf0
 80019b6:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019ba:	2000      	movs	r0, #0
 80019bc:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019be:	2207      	movs	r2, #7
 80019c0:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019c2:	4770      	bx	lr
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 80019c4:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80019c6:	4770      	bx	lr
 80019c8:	e000ed00 	.word	0xe000ed00

080019cc <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80019cc:	4770      	bx	lr

080019ce <HAL_SYSTICK_IRQHandler>:
{
 80019ce:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80019d0:	f7ff fffc 	bl	80019cc <HAL_SYSTICK_Callback>
}
 80019d4:	bd08      	pop	{r3, pc}
	...

080019d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019dc:	b083      	sub	sp, #12
 80019de:	4607      	mov	r7, r0
 80019e0:	460e      	mov	r6, r1
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80019e2:	4b8d      	ldr	r3, [pc, #564]	; (8001c18 <HAL_GPIO_Init+0x240>)
 80019e4:	4298      	cmp	r0, r3
 80019e6:	d017      	beq.n	8001a18 <HAL_GPIO_Init+0x40>
 80019e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019ec:	4298      	cmp	r0, r3
 80019ee:	d013      	beq.n	8001a18 <HAL_GPIO_Init+0x40>
 80019f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019f4:	4298      	cmp	r0, r3
 80019f6:	d00f      	beq.n	8001a18 <HAL_GPIO_Init+0x40>
 80019f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019fc:	4298      	cmp	r0, r3
 80019fe:	d00b      	beq.n	8001a18 <HAL_GPIO_Init+0x40>
 8001a00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a04:	4298      	cmp	r0, r3
 8001a06:	d007      	beq.n	8001a18 <HAL_GPIO_Init+0x40>
 8001a08:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8001a0c:	4298      	cmp	r0, r3
 8001a0e:	d003      	beq.n	8001a18 <HAL_GPIO_Init+0x40>
 8001a10:	21c5      	movs	r1, #197	; 0xc5
 8001a12:	4882      	ldr	r0, [pc, #520]	; (8001c1c <HAL_GPIO_Init+0x244>)
 8001a14:	f001 ffe6 	bl	80039e4 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001a18:	8833      	ldrh	r3, [r6, #0]
 8001a1a:	b30b      	cbz	r3, 8001a60 <HAL_GPIO_Init+0x88>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001a1c:	6873      	ldr	r3, [r6, #4]
 8001a1e:	2b03      	cmp	r3, #3
 8001a20:	d917      	bls.n	8001a52 <HAL_GPIO_Init+0x7a>
 8001a22:	f1a3 0211 	sub.w	r2, r3, #17
 8001a26:	2a01      	cmp	r2, #1
 8001a28:	d913      	bls.n	8001a52 <HAL_GPIO_Init+0x7a>
 8001a2a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8001a2e:	497c      	ldr	r1, [pc, #496]	; (8001c20 <HAL_GPIO_Init+0x248>)
 8001a30:	428a      	cmp	r2, r1
 8001a32:	d00e      	beq.n	8001a52 <HAL_GPIO_Init+0x7a>
 8001a34:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 8001a38:	428b      	cmp	r3, r1
 8001a3a:	d00a      	beq.n	8001a52 <HAL_GPIO_Init+0x7a>
 8001a3c:	f5a1 2170 	sub.w	r1, r1, #983040	; 0xf0000
 8001a40:	428a      	cmp	r2, r1
 8001a42:	d006      	beq.n	8001a52 <HAL_GPIO_Init+0x7a>
 8001a44:	4a77      	ldr	r2, [pc, #476]	; (8001c24 <HAL_GPIO_Init+0x24c>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d003      	beq.n	8001a52 <HAL_GPIO_Init+0x7a>
 8001a4a:	21c7      	movs	r1, #199	; 0xc7
 8001a4c:	4873      	ldr	r0, [pc, #460]	; (8001c1c <HAL_GPIO_Init+0x244>)
 8001a4e:	f001 ffc9 	bl	80039e4 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001a52:	68b3      	ldr	r3, [r6, #8]
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d808      	bhi.n	8001a6a <HAL_GPIO_Init+0x92>
{
 8001a58:	2400      	movs	r4, #0
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001a5a:	f8df b1d4 	ldr.w	fp, [pc, #468]	; 8001c30 <HAL_GPIO_Init+0x258>
 8001a5e:	e05f      	b.n	8001b20 <HAL_GPIO_Init+0x148>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001a60:	21c6      	movs	r1, #198	; 0xc6
 8001a62:	486e      	ldr	r0, [pc, #440]	; (8001c1c <HAL_GPIO_Init+0x244>)
 8001a64:	f001 ffbe 	bl	80039e4 <assert_failed>
 8001a68:	e7d8      	b.n	8001a1c <HAL_GPIO_Init+0x44>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001a6a:	21c8      	movs	r1, #200	; 0xc8
 8001a6c:	486b      	ldr	r0, [pc, #428]	; (8001c1c <HAL_GPIO_Init+0x244>)
 8001a6e:	f001 ffb9 	bl	80039e4 <assert_failed>
 8001a72:	e7f1      	b.n	8001a58 <HAL_GPIO_Init+0x80>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8001a74:	6933      	ldr	r3, [r6, #16]
 8001a76:	2b0f      	cmp	r3, #15
 8001a78:	d816      	bhi.n	8001aa8 <HAL_GPIO_Init+0xd0>
 8001a7a:	f249 72f7 	movw	r2, #38903	; 0x97f7
 8001a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a82:	f013 0f01 	tst.w	r3, #1
 8001a86:	d00f      	beq.n	8001aa8 <HAL_GPIO_Init+0xd0>
        temp = GPIOx->AFR[position >> 3];
 8001a88:	08e2      	lsrs	r2, r4, #3
 8001a8a:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 8001a8e:	6a10      	ldr	r0, [r2, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001a90:	f004 0307 	and.w	r3, r4, #7
 8001a94:	0099      	lsls	r1, r3, #2
 8001a96:	230f      	movs	r3, #15
 8001a98:	408b      	lsls	r3, r1
 8001a9a:	ea20 0003 	bic.w	r0, r0, r3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001a9e:	6933      	ldr	r3, [r6, #16]
 8001aa0:	408b      	lsls	r3, r1
 8001aa2:	4303      	orrs	r3, r0
        GPIOx->AFR[position >> 3] = temp;
 8001aa4:	6213      	str	r3, [r2, #32]
 8001aa6:	e048      	b.n	8001b3a <HAL_GPIO_Init+0x162>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8001aa8:	21d9      	movs	r1, #217	; 0xd9
 8001aaa:	485c      	ldr	r0, [pc, #368]	; (8001c1c <HAL_GPIO_Init+0x244>)
 8001aac:	f001 ff9a 	bl	80039e4 <assert_failed>
 8001ab0:	e7ea      	b.n	8001a88 <HAL_GPIO_Init+0xb0>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001ab2:	21ec      	movs	r1, #236	; 0xec
 8001ab4:	4859      	ldr	r0, [pc, #356]	; (8001c1c <HAL_GPIO_Init+0x244>)
 8001ab6:	f001 ff95 	bl	80039e4 <assert_failed>
 8001aba:	e058      	b.n	8001b6e <HAL_GPIO_Init+0x196>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001abc:	2200      	movs	r2, #0
 8001abe:	408a      	lsls	r2, r1
 8001ac0:	4302      	orrs	r2, r0
        SYSCFG->EXTICR[position >> 2] = temp;
 8001ac2:	609a      	str	r2, [r3, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ac4:	4b58      	ldr	r3, [pc, #352]	; (8001c28 <HAL_GPIO_Init+0x250>)
 8001ac6:	681a      	ldr	r2, [r3, #0]
        temp &= ~((uint32_t)iocurrent);
 8001ac8:	ea6f 010a 	mvn.w	r1, sl
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001acc:	6873      	ldr	r3, [r6, #4]
 8001ace:	f413 3f80 	tst.w	r3, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001ad2:	bf0c      	ite	eq
 8001ad4:	400a      	andeq	r2, r1
        {
          temp |= iocurrent;
 8001ad6:	ea4a 0202 	orrne.w	r2, sl, r2
        }
        EXTI->IMR = temp;
 8001ada:	4b53      	ldr	r3, [pc, #332]	; (8001c28 <HAL_GPIO_Init+0x250>)
 8001adc:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001ade:	685a      	ldr	r2, [r3, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ae0:	6873      	ldr	r3, [r6, #4]
 8001ae2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001ae6:	bf0c      	ite	eq
 8001ae8:	400a      	andeq	r2, r1
        {
          temp |= iocurrent;
 8001aea:	ea4a 0202 	orrne.w	r2, sl, r2
        }
        EXTI->EMR = temp;
 8001aee:	4b4e      	ldr	r3, [pc, #312]	; (8001c28 <HAL_GPIO_Init+0x250>)
 8001af0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001af2:	689a      	ldr	r2, [r3, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001af4:	6873      	ldr	r3, [r6, #4]
 8001af6:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001afa:	bf0c      	ite	eq
 8001afc:	400a      	andeq	r2, r1
        {
          temp |= iocurrent;
 8001afe:	ea4a 0202 	orrne.w	r2, sl, r2
        }
        EXTI->RTSR = temp;
 8001b02:	4b49      	ldr	r3, [pc, #292]	; (8001c28 <HAL_GPIO_Init+0x250>)
 8001b04:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001b06:	68db      	ldr	r3, [r3, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b08:	6872      	ldr	r2, [r6, #4]
 8001b0a:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 8001b0e:	bf0c      	ite	eq
 8001b10:	400b      	andeq	r3, r1
        {
          temp |= iocurrent;
 8001b12:	ea4a 0303 	orrne.w	r3, sl, r3
        }
        EXTI->FTSR = temp;
 8001b16:	4a44      	ldr	r2, [pc, #272]	; (8001c28 <HAL_GPIO_Init+0x250>)
 8001b18:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001b1a:	3401      	adds	r4, #1
 8001b1c:	2c10      	cmp	r4, #16
 8001b1e:	d077      	beq.n	8001c10 <HAL_GPIO_Init+0x238>
    ioposition = ((uint32_t)0x01) << position;
 8001b20:	2501      	movs	r5, #1
 8001b22:	40a5      	lsls	r5, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b24:	6833      	ldr	r3, [r6, #0]
 8001b26:	ea05 0a03 	and.w	sl, r5, r3
    if(iocurrent == ioposition)
 8001b2a:	ea35 0303 	bics.w	r3, r5, r3
 8001b2e:	d1f4      	bne.n	8001b1a <HAL_GPIO_Init+0x142>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b30:	6873      	ldr	r3, [r6, #4]
 8001b32:	f023 0310 	bic.w	r3, r3, #16
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d09c      	beq.n	8001a74 <HAL_GPIO_Init+0x9c>
      temp = GPIOx->MODER;
 8001b3a:	683a      	ldr	r2, [r7, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001b3c:	ea4f 0944 	mov.w	r9, r4, lsl #1
 8001b40:	2303      	movs	r3, #3
 8001b42:	fa03 f309 	lsl.w	r3, r3, r9
 8001b46:	ea6f 0803 	mvn.w	r8, r3
 8001b4a:	ea22 0203 	bic.w	r2, r2, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b4e:	6873      	ldr	r3, [r6, #4]
 8001b50:	f003 0303 	and.w	r3, r3, #3
 8001b54:	fa03 f309 	lsl.w	r3, r3, r9
 8001b58:	4313      	orrs	r3, r2
      GPIOx->MODER = temp;
 8001b5a:	603b      	str	r3, [r7, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b5c:	6873      	ldr	r3, [r6, #4]
 8001b5e:	f023 0310 	bic.w	r3, r3, #16
 8001b62:	3b01      	subs	r3, #1
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d813      	bhi.n	8001b90 <HAL_GPIO_Init+0x1b8>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001b68:	68f3      	ldr	r3, [r6, #12]
 8001b6a:	2b03      	cmp	r3, #3
 8001b6c:	d8a1      	bhi.n	8001ab2 <HAL_GPIO_Init+0xda>
        temp = GPIOx->OSPEEDR; 
 8001b6e:	68ba      	ldr	r2, [r7, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001b70:	ea08 0202 	and.w	r2, r8, r2
        temp |= (GPIO_Init->Speed << (position * 2));
 8001b74:	68f3      	ldr	r3, [r6, #12]
 8001b76:	fa03 f309 	lsl.w	r3, r3, r9
 8001b7a:	4313      	orrs	r3, r2
        GPIOx->OSPEEDR = temp;
 8001b7c:	60bb      	str	r3, [r7, #8]
        temp = GPIOx->OTYPER;
 8001b7e:	687a      	ldr	r2, [r7, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b80:	ea22 0205 	bic.w	r2, r2, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001b84:	6873      	ldr	r3, [r6, #4]
 8001b86:	f3c3 1500 	ubfx	r5, r3, #4, #1
 8001b8a:	40a5      	lsls	r5, r4
 8001b8c:	4315      	orrs	r5, r2
        GPIOx->OTYPER = temp;
 8001b8e:	607d      	str	r5, [r7, #4]
      temp = GPIOx->PUPDR;
 8001b90:	68fb      	ldr	r3, [r7, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001b92:	ea08 0803 	and.w	r8, r8, r3
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001b96:	68b3      	ldr	r3, [r6, #8]
 8001b98:	fa03 f309 	lsl.w	r3, r3, r9
 8001b9c:	ea43 0308 	orr.w	r3, r3, r8
      GPIOx->PUPDR = temp;
 8001ba0:	60fb      	str	r3, [r7, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ba2:	6873      	ldr	r3, [r6, #4]
 8001ba4:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001ba8:	d0b7      	beq.n	8001b1a <HAL_GPIO_Init+0x142>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001baa:	4b20      	ldr	r3, [pc, #128]	; (8001c2c <HAL_GPIO_Init+0x254>)
 8001bac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001bae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001bb2:	645a      	str	r2, [r3, #68]	; 0x44
 8001bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bba:	9301      	str	r3, [sp, #4]
 8001bbc:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8001bbe:	f024 0303 	bic.w	r3, r4, #3
 8001bc2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001bc6:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8001bca:	6898      	ldr	r0, [r3, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001bcc:	f004 0203 	and.w	r2, r4, #3
 8001bd0:	0091      	lsls	r1, r2, #2
 8001bd2:	220f      	movs	r2, #15
 8001bd4:	408a      	lsls	r2, r1
 8001bd6:	ea20 0002 	bic.w	r0, r0, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001bda:	4a0f      	ldr	r2, [pc, #60]	; (8001c18 <HAL_GPIO_Init+0x240>)
 8001bdc:	4297      	cmp	r7, r2
 8001bde:	f43f af6d 	beq.w	8001abc <HAL_GPIO_Init+0xe4>
 8001be2:	455f      	cmp	r7, fp
 8001be4:	d00e      	beq.n	8001c04 <HAL_GPIO_Init+0x22c>
 8001be6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bea:	4297      	cmp	r7, r2
 8001bec:	d00c      	beq.n	8001c08 <HAL_GPIO_Init+0x230>
 8001bee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001bf2:	4297      	cmp	r7, r2
 8001bf4:	d00a      	beq.n	8001c0c <HAL_GPIO_Init+0x234>
 8001bf6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001bfa:	4297      	cmp	r7, r2
 8001bfc:	bf0c      	ite	eq
 8001bfe:	2204      	moveq	r2, #4
 8001c00:	2205      	movne	r2, #5
 8001c02:	e75c      	b.n	8001abe <HAL_GPIO_Init+0xe6>
 8001c04:	2201      	movs	r2, #1
 8001c06:	e75a      	b.n	8001abe <HAL_GPIO_Init+0xe6>
 8001c08:	2202      	movs	r2, #2
 8001c0a:	e758      	b.n	8001abe <HAL_GPIO_Init+0xe6>
 8001c0c:	2203      	movs	r2, #3
 8001c0e:	e756      	b.n	8001abe <HAL_GPIO_Init+0xe6>
      }
    }
  }
}
 8001c10:	b003      	add	sp, #12
 8001c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c16:	bf00      	nop
 8001c18:	40020000 	.word	0x40020000
 8001c1c:	08004298 	.word	0x08004298
 8001c20:	10110000 	.word	0x10110000
 8001c24:	10220000 	.word	0x10220000
 8001c28:	40013c00 	.word	0x40013c00
 8001c2c:	40023800 	.word	0x40023800
 8001c30:	40020400 	.word	0x40020400

08001c34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c34:	b570      	push	{r4, r5, r6, lr}
 8001c36:	4605      	mov	r5, r0
 8001c38:	4614      	mov	r4, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001c3a:	460e      	mov	r6, r1
 8001c3c:	b129      	cbz	r1, 8001c4a <HAL_GPIO_WritePin+0x16>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8001c3e:	2c01      	cmp	r4, #1
 8001c40:	d809      	bhi.n	8001c56 <HAL_GPIO_WritePin+0x22>

  if(PinState != GPIO_PIN_RESET)
 8001c42:	b96c      	cbnz	r4, 8001c60 <HAL_GPIO_WritePin+0x2c>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001c44:	0436      	lsls	r6, r6, #16
 8001c46:	61ae      	str	r6, [r5, #24]
  }
}
 8001c48:	e00b      	b.n	8001c62 <HAL_GPIO_WritePin+0x2e>
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001c4a:	f240 11b1 	movw	r1, #433	; 0x1b1
 8001c4e:	4805      	ldr	r0, [pc, #20]	; (8001c64 <HAL_GPIO_WritePin+0x30>)
 8001c50:	f001 fec8 	bl	80039e4 <assert_failed>
 8001c54:	e7f3      	b.n	8001c3e <HAL_GPIO_WritePin+0xa>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8001c56:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
 8001c5a:	4802      	ldr	r0, [pc, #8]	; (8001c64 <HAL_GPIO_WritePin+0x30>)
 8001c5c:	f001 fec2 	bl	80039e4 <assert_failed>
    GPIOx->BSRR = GPIO_Pin;
 8001c60:	61ae      	str	r6, [r5, #24]
}
 8001c62:	bd70      	pop	{r4, r5, r6, pc}
 8001c64:	08004298 	.word	0x08004298

08001c68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c68:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001c6a:	4b05      	ldr	r3, [pc, #20]	; (8001c80 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8001c6c:	695b      	ldr	r3, [r3, #20]
 8001c6e:	4203      	tst	r3, r0
 8001c70:	d100      	bne.n	8001c74 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8001c72:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c74:	4b02      	ldr	r3, [pc, #8]	; (8001c80 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8001c76:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c78:	f001 fc92 	bl	80035a0 <HAL_GPIO_EXTI_Callback>
}
 8001c7c:	e7f9      	b.n	8001c72 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8001c7e:	bf00      	nop
 8001c80:	40013c00 	.word	0x40013c00

08001c84 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c86:	b083      	sub	sp, #12
 8001c88:	4604      	mov	r4, r0
 uint32_t tickstart = 0;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8001c8a:	6803      	ldr	r3, [r0, #0]
 8001c8c:	2b0f      	cmp	r3, #15
 8001c8e:	d84f      	bhi.n	8001d30 <HAL_RCC_OscConfig+0xac>
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c90:	6823      	ldr	r3, [r4, #0]
 8001c92:	f013 0f01 	tst.w	r3, #1
 8001c96:	d01e      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8001c98:	6863      	ldr	r3, [r4, #4]
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_OscConfig+0x1e>
 8001c9e:	2b05      	cmp	r3, #5
 8001ca0:	d14c      	bne.n	8001d3c <HAL_RCC_OscConfig+0xb8>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001ca2:	4ba6      	ldr	r3, [pc, #664]	; (8001f3c <HAL_RCC_OscConfig+0x2b8>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f003 030c 	and.w	r3, r3, #12
 8001caa:	2b04      	cmp	r3, #4
 8001cac:	d00a      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cae:	4ba3      	ldr	r3, [pc, #652]	; (8001f3c <HAL_RCC_OscConfig+0x2b8>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001cb6:	2b08      	cmp	r3, #8
 8001cb8:	d146      	bne.n	8001d48 <HAL_RCC_OscConfig+0xc4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cba:	4ba0      	ldr	r3, [pc, #640]	; (8001f3c <HAL_RCC_OscConfig+0x2b8>)
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001cc2:	d041      	beq.n	8001d48 <HAL_RCC_OscConfig+0xc4>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cc4:	4b9d      	ldr	r3, [pc, #628]	; (8001f3c <HAL_RCC_OscConfig+0x2b8>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001ccc:	d003      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x52>
 8001cce:	6863      	ldr	r3, [r4, #4]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	f000 820d 	beq.w	80020f0 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cd6:	6823      	ldr	r3, [r4, #0]
 8001cd8:	f013 0f02 	tst.w	r3, #2
 8001cdc:	f000 8096 	beq.w	8001e0c <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8001ce0:	68e3      	ldr	r3, [r4, #12]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d86b      	bhi.n	8001dbe <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8001ce6:	6923      	ldr	r3, [r4, #16]
 8001ce8:	2b1f      	cmp	r3, #31
 8001cea:	d86e      	bhi.n	8001dca <HAL_RCC_OscConfig+0x146>
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001cec:	4b93      	ldr	r3, [pc, #588]	; (8001f3c <HAL_RCC_OscConfig+0x2b8>)
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	f013 0f0c 	tst.w	r3, #12
 8001cf4:	d074      	beq.n	8001de0 <HAL_RCC_OscConfig+0x15c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cf6:	4b91      	ldr	r3, [pc, #580]	; (8001f3c <HAL_RCC_OscConfig+0x2b8>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001cfe:	2b08      	cmp	r3, #8
 8001d00:	d069      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x152>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d02:	68e3      	ldr	r3, [r4, #12]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	f000 80ac 	beq.w	8001e62 <HAL_RCC_OscConfig+0x1de>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d0a:	4b8d      	ldr	r3, [pc, #564]	; (8001f40 <HAL_RCC_OscConfig+0x2bc>)
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d10:	f7ff fda4 	bl	800185c <HAL_GetTick>
 8001d14:	4605      	mov	r5, r0

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d16:	4e89      	ldr	r6, [pc, #548]	; (8001f3c <HAL_RCC_OscConfig+0x2b8>)
 8001d18:	6833      	ldr	r3, [r6, #0]
 8001d1a:	f013 0f02 	tst.w	r3, #2
 8001d1e:	f040 8092 	bne.w	8001e46 <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d22:	f7ff fd9b 	bl	800185c <HAL_GetTick>
 8001d26:	1b40      	subs	r0, r0, r5
 8001d28:	2864      	cmp	r0, #100	; 0x64
 8001d2a:	d9f5      	bls.n	8001d18 <HAL_RCC_OscConfig+0x94>
          {
            return HAL_TIMEOUT;
 8001d2c:	2003      	movs	r0, #3
 8001d2e:	e1e4      	b.n	80020fa <HAL_RCC_OscConfig+0x476>
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8001d30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d34:	4883      	ldr	r0, [pc, #524]	; (8001f44 <HAL_RCC_OscConfig+0x2c0>)
 8001d36:	f001 fe55 	bl	80039e4 <assert_failed>
 8001d3a:	e7a9      	b.n	8001c90 <HAL_RCC_OscConfig+0xc>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8001d3c:	f240 1105 	movw	r1, #261	; 0x105
 8001d40:	4880      	ldr	r0, [pc, #512]	; (8001f44 <HAL_RCC_OscConfig+0x2c0>)
 8001d42:	f001 fe4f 	bl	80039e4 <assert_failed>
 8001d46:	e7ac      	b.n	8001ca2 <HAL_RCC_OscConfig+0x1e>
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8001d48:	4b7c      	ldr	r3, [pc, #496]	; (8001f3c <HAL_RCC_OscConfig+0x2b8>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	709a      	strb	r2, [r3, #2]
      tickstart = HAL_GetTick();
 8001d4e:	f7ff fd85 	bl	800185c <HAL_GetTick>
 8001d52:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d54:	4e79      	ldr	r6, [pc, #484]	; (8001f3c <HAL_RCC_OscConfig+0x2b8>)
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d56:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d5a:	6833      	ldr	r3, [r6, #0]
 8001d5c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001d60:	d006      	beq.n	8001d70 <HAL_RCC_OscConfig+0xec>
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d62:	f7ff fd7b 	bl	800185c <HAL_GetTick>
 8001d66:	1b40      	subs	r0, r0, r5
 8001d68:	42b8      	cmp	r0, r7
 8001d6a:	d9f6      	bls.n	8001d5a <HAL_RCC_OscConfig+0xd6>
          return HAL_TIMEOUT;
 8001d6c:	2003      	movs	r0, #3
 8001d6e:	e1c4      	b.n	80020fa <HAL_RCC_OscConfig+0x476>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d70:	7922      	ldrb	r2, [r4, #4]
 8001d72:	4b72      	ldr	r3, [pc, #456]	; (8001f3c <HAL_RCC_OscConfig+0x2b8>)
 8001d74:	709a      	strb	r2, [r3, #2]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d76:	6863      	ldr	r3, [r4, #4]
 8001d78:	b183      	cbz	r3, 8001d9c <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 8001d7a:	f7ff fd6f 	bl	800185c <HAL_GetTick>
 8001d7e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d80:	4e6e      	ldr	r6, [pc, #440]	; (8001f3c <HAL_RCC_OscConfig+0x2b8>)
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d82:	f241 3788 	movw	r7, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d86:	6833      	ldr	r3, [r6, #0]
 8001d88:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001d8c:	d1a3      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x52>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d8e:	f7ff fd65 	bl	800185c <HAL_GetTick>
 8001d92:	1b40      	subs	r0, r0, r5
 8001d94:	42b8      	cmp	r0, r7
 8001d96:	d9f6      	bls.n	8001d86 <HAL_RCC_OscConfig+0x102>
            return HAL_TIMEOUT;
 8001d98:	2003      	movs	r0, #3
 8001d9a:	e1ae      	b.n	80020fa <HAL_RCC_OscConfig+0x476>
        tickstart = HAL_GetTick();
 8001d9c:	f7ff fd5e 	bl	800185c <HAL_GetTick>
 8001da0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001da2:	4e66      	ldr	r6, [pc, #408]	; (8001f3c <HAL_RCC_OscConfig+0x2b8>)
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001da4:	f241 3788 	movw	r7, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001da8:	6833      	ldr	r3, [r6, #0]
 8001daa:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001dae:	d092      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x52>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001db0:	f7ff fd54 	bl	800185c <HAL_GetTick>
 8001db4:	1b40      	subs	r0, r0, r5
 8001db6:	42b8      	cmp	r0, r7
 8001db8:	d9f6      	bls.n	8001da8 <HAL_RCC_OscConfig+0x124>
            return HAL_TIMEOUT;
 8001dba:	2003      	movs	r0, #3
 8001dbc:	e19d      	b.n	80020fa <HAL_RCC_OscConfig+0x476>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8001dbe:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8001dc2:	4860      	ldr	r0, [pc, #384]	; (8001f44 <HAL_RCC_OscConfig+0x2c0>)
 8001dc4:	f001 fe0e 	bl	80039e4 <assert_failed>
 8001dc8:	e78d      	b.n	8001ce6 <HAL_RCC_OscConfig+0x62>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8001dca:	f240 1147 	movw	r1, #327	; 0x147
 8001dce:	485d      	ldr	r0, [pc, #372]	; (8001f44 <HAL_RCC_OscConfig+0x2c0>)
 8001dd0:	f001 fe08 	bl	80039e4 <assert_failed>
 8001dd4:	e78a      	b.n	8001cec <HAL_RCC_OscConfig+0x68>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dd6:	4b59      	ldr	r3, [pc, #356]	; (8001f3c <HAL_RCC_OscConfig+0x2b8>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001dde:	d190      	bne.n	8001d02 <HAL_RCC_OscConfig+0x7e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001de0:	4b56      	ldr	r3, [pc, #344]	; (8001f3c <HAL_RCC_OscConfig+0x2b8>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f013 0f02 	tst.w	r3, #2
 8001de8:	d003      	beq.n	8001df2 <HAL_RCC_OscConfig+0x16e>
 8001dea:	68e3      	ldr	r3, [r4, #12]
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	f040 8181 	bne.w	80020f4 <HAL_RCC_OscConfig+0x470>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001df2:	4852      	ldr	r0, [pc, #328]	; (8001f3c <HAL_RCC_OscConfig+0x2b8>)
 8001df4:	6801      	ldr	r1, [r0, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df6:	23f8      	movs	r3, #248	; 0xf8
 8001df8:	fa93 f3a3 	rbit	r3, r3
 8001dfc:	fab3 f283 	clz	r2, r3
 8001e00:	6923      	ldr	r3, [r4, #16]
 8001e02:	4093      	lsls	r3, r2
 8001e04:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	6003      	str	r3, [r0, #0]
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e0c:	6823      	ldr	r3, [r4, #0]
 8001e0e:	f013 0f08 	tst.w	r3, #8
 8001e12:	d051      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x234>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8001e14:	6963      	ldr	r3, [r4, #20]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d835      	bhi.n	8001e86 <HAL_RCC_OscConfig+0x202>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e1a:	6963      	ldr	r3, [r4, #20]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d038      	beq.n	8001e92 <HAL_RCC_OscConfig+0x20e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e20:	4b47      	ldr	r3, [pc, #284]	; (8001f40 <HAL_RCC_OscConfig+0x2bc>)
 8001e22:	2201      	movs	r2, #1
 8001e24:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e28:	f7ff fd18 	bl	800185c <HAL_GetTick>
 8001e2c:	4605      	mov	r5, r0
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e2e:	4e43      	ldr	r6, [pc, #268]	; (8001f3c <HAL_RCC_OscConfig+0x2b8>)
 8001e30:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8001e32:	f013 0f02 	tst.w	r3, #2
 8001e36:	d13f      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x234>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e38:	f7ff fd10 	bl	800185c <HAL_GetTick>
 8001e3c:	1b40      	subs	r0, r0, r5
 8001e3e:	2864      	cmp	r0, #100	; 0x64
 8001e40:	d9f6      	bls.n	8001e30 <HAL_RCC_OscConfig+0x1ac>
        {
          return HAL_TIMEOUT;
 8001e42:	2003      	movs	r0, #3
 8001e44:	e159      	b.n	80020fa <HAL_RCC_OscConfig+0x476>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e46:	483d      	ldr	r0, [pc, #244]	; (8001f3c <HAL_RCC_OscConfig+0x2b8>)
 8001e48:	6801      	ldr	r1, [r0, #0]
 8001e4a:	23f8      	movs	r3, #248	; 0xf8
 8001e4c:	fa93 f3a3 	rbit	r3, r3
 8001e50:	fab3 f283 	clz	r2, r3
 8001e54:	6923      	ldr	r3, [r4, #16]
 8001e56:	4093      	lsls	r3, r2
 8001e58:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	6003      	str	r3, [r0, #0]
 8001e60:	e7d4      	b.n	8001e0c <HAL_RCC_OscConfig+0x188>
        __HAL_RCC_HSI_DISABLE();
 8001e62:	4b37      	ldr	r3, [pc, #220]	; (8001f40 <HAL_RCC_OscConfig+0x2bc>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001e68:	f7ff fcf8 	bl	800185c <HAL_GetTick>
 8001e6c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e6e:	4e33      	ldr	r6, [pc, #204]	; (8001f3c <HAL_RCC_OscConfig+0x2b8>)
 8001e70:	6833      	ldr	r3, [r6, #0]
 8001e72:	f013 0f02 	tst.w	r3, #2
 8001e76:	d0c9      	beq.n	8001e0c <HAL_RCC_OscConfig+0x188>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e78:	f7ff fcf0 	bl	800185c <HAL_GetTick>
 8001e7c:	1b40      	subs	r0, r0, r5
 8001e7e:	2864      	cmp	r0, #100	; 0x64
 8001e80:	d9f6      	bls.n	8001e70 <HAL_RCC_OscConfig+0x1ec>
            return HAL_TIMEOUT;
 8001e82:	2003      	movs	r0, #3
 8001e84:	e139      	b.n	80020fa <HAL_RCC_OscConfig+0x476>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8001e86:	f240 1187 	movw	r1, #391	; 0x187
 8001e8a:	482e      	ldr	r0, [pc, #184]	; (8001f44 <HAL_RCC_OscConfig+0x2c0>)
 8001e8c:	f001 fdaa 	bl	80039e4 <assert_failed>
 8001e90:	e7c3      	b.n	8001e1a <HAL_RCC_OscConfig+0x196>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e92:	4b2b      	ldr	r3, [pc, #172]	; (8001f40 <HAL_RCC_OscConfig+0x2bc>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e9a:	f7ff fcdf 	bl	800185c <HAL_GetTick>
 8001e9e:	4605      	mov	r5, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ea0:	4e26      	ldr	r6, [pc, #152]	; (8001f3c <HAL_RCC_OscConfig+0x2b8>)
 8001ea2:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8001ea4:	f013 0f02 	tst.w	r3, #2
 8001ea8:	d006      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x234>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eaa:	f7ff fcd7 	bl	800185c <HAL_GetTick>
 8001eae:	1b40      	subs	r0, r0, r5
 8001eb0:	2864      	cmp	r0, #100	; 0x64
 8001eb2:	d9f6      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8001eb4:	2003      	movs	r0, #3
 8001eb6:	e120      	b.n	80020fa <HAL_RCC_OscConfig+0x476>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eb8:	6823      	ldr	r3, [r4, #0]
 8001eba:	f013 0f04 	tst.w	r3, #4
 8001ebe:	d06d      	beq.n	8001f9c <HAL_RCC_OscConfig+0x318>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8001ec0:	68a3      	ldr	r3, [r4, #8]
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0x246>
 8001ec6:	2b05      	cmp	r3, #5
 8001ec8:	d11d      	bne.n	8001f06 <HAL_RCC_OscConfig+0x282>
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001eca:	4b1c      	ldr	r3, [pc, #112]	; (8001f3c <HAL_RCC_OscConfig+0x2b8>)
 8001ecc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ece:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001ed2:	641a      	str	r2, [r3, #64]	; 0x40
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eda:	9301      	str	r3, [sp, #4]
 8001edc:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001ede:	4a1a      	ldr	r2, [pc, #104]	; (8001f48 <HAL_RCC_OscConfig+0x2c4>)
 8001ee0:	6813      	ldr	r3, [r2, #0]
 8001ee2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ee6:	6013      	str	r3, [r2, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001ee8:	f7ff fcb8 	bl	800185c <HAL_GetTick>
 8001eec:	4605      	mov	r5, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001eee:	4e16      	ldr	r6, [pc, #88]	; (8001f48 <HAL_RCC_OscConfig+0x2c4>)
 8001ef0:	6833      	ldr	r3, [r6, #0]
 8001ef2:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001ef6:	d10c      	bne.n	8001f12 <HAL_RCC_OscConfig+0x28e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001ef8:	f7ff fcb0 	bl	800185c <HAL_GetTick>
 8001efc:	1b40      	subs	r0, r0, r5
 8001efe:	2864      	cmp	r0, #100	; 0x64
 8001f00:	d9f6      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_TIMEOUT;
 8001f02:	2003      	movs	r0, #3
 8001f04:	e0f9      	b.n	80020fa <HAL_RCC_OscConfig+0x476>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8001f06:	f240 11b1 	movw	r1, #433	; 0x1b1
 8001f0a:	480e      	ldr	r0, [pc, #56]	; (8001f44 <HAL_RCC_OscConfig+0x2c0>)
 8001f0c:	f001 fd6a 	bl	80039e4 <assert_failed>
 8001f10:	e7db      	b.n	8001eca <HAL_RCC_OscConfig+0x246>
      }      
    }
    
    /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8001f12:	4b0a      	ldr	r3, [pc, #40]	; (8001f3c <HAL_RCC_OscConfig+0x2b8>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f1a:	f7ff fc9f 	bl	800185c <HAL_GetTick>
 8001f1e:	4605      	mov	r5, r0
    
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f20:	4e06      	ldr	r6, [pc, #24]	; (8001f3c <HAL_RCC_OscConfig+0x2b8>)
    {
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f22:	f241 3788 	movw	r7, #5000	; 0x1388
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f26:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8001f28:	f013 0f02 	tst.w	r3, #2
 8001f2c:	d00e      	beq.n	8001f4c <HAL_RCC_OscConfig+0x2c8>
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f2e:	f7ff fc95 	bl	800185c <HAL_GetTick>
 8001f32:	1b40      	subs	r0, r0, r5
 8001f34:	42b8      	cmp	r0, r7
 8001f36:	d9f6      	bls.n	8001f26 <HAL_RCC_OscConfig+0x2a2>
      {
        return HAL_TIMEOUT;
 8001f38:	2003      	movs	r0, #3
 8001f3a:	e0de      	b.n	80020fa <HAL_RCC_OscConfig+0x476>
 8001f3c:	40023800 	.word	0x40023800
 8001f40:	42470000 	.word	0x42470000
 8001f44:	08004320 	.word	0x08004320
 8001f48:	40007000 	.word	0x40007000
      }    
    } 
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f4c:	7a22      	ldrb	r2, [r4, #8]
 8001f4e:	4b6d      	ldr	r3, [pc, #436]	; (8002104 <HAL_RCC_OscConfig+0x480>)
 8001f50:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f54:	68a3      	ldr	r3, [r4, #8]
 8001f56:	b183      	cbz	r3, 8001f7a <HAL_RCC_OscConfig+0x2f6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f58:	f7ff fc80 	bl	800185c <HAL_GetTick>
 8001f5c:	4605      	mov	r5, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f5e:	4e69      	ldr	r6, [pc, #420]	; (8002104 <HAL_RCC_OscConfig+0x480>)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f60:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f64:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8001f66:	f013 0f02 	tst.w	r3, #2
 8001f6a:	d117      	bne.n	8001f9c <HAL_RCC_OscConfig+0x318>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f6c:	f7ff fc76 	bl	800185c <HAL_GetTick>
 8001f70:	1b40      	subs	r0, r0, r5
 8001f72:	42b8      	cmp	r0, r7
 8001f74:	d9f6      	bls.n	8001f64 <HAL_RCC_OscConfig+0x2e0>
        {
          return HAL_TIMEOUT;
 8001f76:	2003      	movs	r0, #3
 8001f78:	e0bf      	b.n	80020fa <HAL_RCC_OscConfig+0x476>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f7a:	f7ff fc6f 	bl	800185c <HAL_GetTick>
 8001f7e:	4605      	mov	r5, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f80:	4e60      	ldr	r6, [pc, #384]	; (8002104 <HAL_RCC_OscConfig+0x480>)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f82:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f86:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8001f88:	f013 0f02 	tst.w	r3, #2
 8001f8c:	d006      	beq.n	8001f9c <HAL_RCC_OscConfig+0x318>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f8e:	f7ff fc65 	bl	800185c <HAL_GetTick>
 8001f92:	1b40      	subs	r0, r0, r5
 8001f94:	42b8      	cmp	r0, r7
 8001f96:	d9f6      	bls.n	8001f86 <HAL_RCC_OscConfig+0x302>
        {
          return HAL_TIMEOUT;
 8001f98:	2003      	movs	r0, #3
 8001f9a:	e0ae      	b.n	80020fa <HAL_RCC_OscConfig+0x476>
      }
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8001f9c:	69a3      	ldr	r3, [r4, #24]
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d83d      	bhi.n	800201e <HAL_RCC_OscConfig+0x39a>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fa2:	69a3      	ldr	r3, [r4, #24]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	f000 80a7 	beq.w	80020f8 <HAL_RCC_OscConfig+0x474>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001faa:	4a56      	ldr	r2, [pc, #344]	; (8002104 <HAL_RCC_OscConfig+0x480>)
 8001fac:	6892      	ldr	r2, [r2, #8]
 8001fae:	f002 020c 	and.w	r2, r2, #12
 8001fb2:	2a08      	cmp	r2, #8
 8001fb4:	f000 80a3 	beq.w	80020fe <HAL_RCC_OscConfig+0x47a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	f040 8085 	bne.w	80020c8 <HAL_RCC_OscConfig+0x444>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8001fbe:	69e3      	ldr	r3, [r4, #28]
 8001fc0:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 8001fc4:	d004      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x34c>
 8001fc6:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 8001fca:	484f      	ldr	r0, [pc, #316]	; (8002108 <HAL_RCC_OscConfig+0x484>)
 8001fcc:	f001 fd0a 	bl	80039e4 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8001fd0:	6a23      	ldr	r3, [r4, #32]
 8001fd2:	2b3f      	cmp	r3, #63	; 0x3f
 8001fd4:	d829      	bhi.n	800202a <HAL_RCC_OscConfig+0x3a6>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8001fd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001fd8:	3bc0      	subs	r3, #192	; 0xc0
 8001fda:	2bf0      	cmp	r3, #240	; 0xf0
 8001fdc:	d82b      	bhi.n	8002036 <HAL_RCC_OscConfig+0x3b2>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8001fde:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001fe0:	2b08      	cmp	r3, #8
 8001fe2:	d82e      	bhi.n	8002042 <HAL_RCC_OscConfig+0x3be>
 8001fe4:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8001fe8:	fa22 f303 	lsr.w	r3, r2, r3
 8001fec:	f013 0f01 	tst.w	r3, #1
 8001ff0:	d027      	beq.n	8002042 <HAL_RCC_OscConfig+0x3be>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8001ff2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001ff4:	3b04      	subs	r3, #4
 8001ff6:	2b0b      	cmp	r3, #11
 8001ff8:	d829      	bhi.n	800204e <HAL_RCC_OscConfig+0x3ca>
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ffa:	4b44      	ldr	r3, [pc, #272]	; (800210c <HAL_RCC_OscConfig+0x488>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	661a      	str	r2, [r3, #96]	; 0x60
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002000:	f7ff fc2c 	bl	800185c <HAL_GetTick>
 8002004:	4605      	mov	r5, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002006:	4e3f      	ldr	r6, [pc, #252]	; (8002104 <HAL_RCC_OscConfig+0x480>)
 8002008:	6833      	ldr	r3, [r6, #0]
 800200a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800200e:	d024      	beq.n	800205a <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002010:	f7ff fc24 	bl	800185c <HAL_GetTick>
 8002014:	1b40      	subs	r0, r0, r5
 8002016:	2864      	cmp	r0, #100	; 0x64
 8002018:	d9f6      	bls.n	8002008 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800201a:	2003      	movs	r0, #3
 800201c:	e06d      	b.n	80020fa <HAL_RCC_OscConfig+0x476>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800201e:	f240 11f5 	movw	r1, #501	; 0x1f5
 8002022:	4839      	ldr	r0, [pc, #228]	; (8002108 <HAL_RCC_OscConfig+0x484>)
 8002024:	f001 fcde 	bl	80039e4 <assert_failed>
 8002028:	e7bb      	b.n	8001fa2 <HAL_RCC_OscConfig+0x31e>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800202a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800202e:	4836      	ldr	r0, [pc, #216]	; (8002108 <HAL_RCC_OscConfig+0x484>)
 8002030:	f001 fcd8 	bl	80039e4 <assert_failed>
 8002034:	e7cf      	b.n	8001fd6 <HAL_RCC_OscConfig+0x352>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8002036:	f44f 7100 	mov.w	r1, #512	; 0x200
 800203a:	4833      	ldr	r0, [pc, #204]	; (8002108 <HAL_RCC_OscConfig+0x484>)
 800203c:	f001 fcd2 	bl	80039e4 <assert_failed>
 8002040:	e7cd      	b.n	8001fde <HAL_RCC_OscConfig+0x35a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8002042:	f240 2101 	movw	r1, #513	; 0x201
 8002046:	4830      	ldr	r0, [pc, #192]	; (8002108 <HAL_RCC_OscConfig+0x484>)
 8002048:	f001 fccc 	bl	80039e4 <assert_failed>
 800204c:	e7d1      	b.n	8001ff2 <HAL_RCC_OscConfig+0x36e>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800204e:	f240 2102 	movw	r1, #514	; 0x202
 8002052:	482d      	ldr	r0, [pc, #180]	; (8002108 <HAL_RCC_OscConfig+0x484>)
 8002054:	f001 fcc6 	bl	80039e4 <assert_failed>
 8002058:	e7cf      	b.n	8001ffa <HAL_RCC_OscConfig+0x376>
 800205a:	f647 75c0 	movw	r5, #32704	; 0x7fc0
 800205e:	fa95 f5a5 	rbit	r5, r5
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002062:	fab5 f585 	clz	r5, r5
 8002066:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800206a:	fa92 f2a2 	rbit	r2, r2
 800206e:	fab2 f082 	clz	r0, r2
 8002072:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8002076:	fa91 f1a1 	rbit	r1, r1
 800207a:	fab1 f181 	clz	r1, r1
 800207e:	69e3      	ldr	r3, [r4, #28]
 8002080:	6a22      	ldr	r2, [r4, #32]
 8002082:	4313      	orrs	r3, r2
 8002084:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002086:	40aa      	lsls	r2, r5
 8002088:	4313      	orrs	r3, r2
 800208a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800208c:	0852      	lsrs	r2, r2, #1
 800208e:	3a01      	subs	r2, #1
 8002090:	4082      	lsls	r2, r0
 8002092:	4313      	orrs	r3, r2
 8002094:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002096:	fa02 f101 	lsl.w	r1, r2, r1
 800209a:	430b      	orrs	r3, r1
 800209c:	4a19      	ldr	r2, [pc, #100]	; (8002104 <HAL_RCC_OscConfig+0x480>)
 800209e:	6053      	str	r3, [r2, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1) -1) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020a0:	4b1a      	ldr	r3, [pc, #104]	; (800210c <HAL_RCC_OscConfig+0x488>)
 80020a2:	2201      	movs	r2, #1
 80020a4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a6:	f7ff fbd9 	bl	800185c <HAL_GetTick>
 80020aa:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ac:	4d15      	ldr	r5, [pc, #84]	; (8002104 <HAL_RCC_OscConfig+0x480>)
 80020ae:	682b      	ldr	r3, [r5, #0]
 80020b0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80020b4:	d106      	bne.n	80020c4 <HAL_RCC_OscConfig+0x440>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020b6:	f7ff fbd1 	bl	800185c <HAL_GetTick>
 80020ba:	1b00      	subs	r0, r0, r4
 80020bc:	2864      	cmp	r0, #100	; 0x64
 80020be:	d9f6      	bls.n	80020ae <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80020c0:	2003      	movs	r0, #3
 80020c2:	e01a      	b.n	80020fa <HAL_RCC_OscConfig+0x476>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80020c4:	2000      	movs	r0, #0
 80020c6:	e018      	b.n	80020fa <HAL_RCC_OscConfig+0x476>
        __HAL_RCC_PLL_DISABLE();
 80020c8:	4b10      	ldr	r3, [pc, #64]	; (800210c <HAL_RCC_OscConfig+0x488>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80020ce:	f7ff fbc5 	bl	800185c <HAL_GetTick>
 80020d2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020d4:	4d0b      	ldr	r5, [pc, #44]	; (8002104 <HAL_RCC_OscConfig+0x480>)
 80020d6:	682b      	ldr	r3, [r5, #0]
 80020d8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80020dc:	d006      	beq.n	80020ec <HAL_RCC_OscConfig+0x468>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020de:	f7ff fbbd 	bl	800185c <HAL_GetTick>
 80020e2:	1b00      	subs	r0, r0, r4
 80020e4:	2864      	cmp	r0, #100	; 0x64
 80020e6:	d9f6      	bls.n	80020d6 <HAL_RCC_OscConfig+0x452>
            return HAL_TIMEOUT;
 80020e8:	2003      	movs	r0, #3
 80020ea:	e006      	b.n	80020fa <HAL_RCC_OscConfig+0x476>
  return HAL_OK;
 80020ec:	2000      	movs	r0, #0
 80020ee:	e004      	b.n	80020fa <HAL_RCC_OscConfig+0x476>
        return HAL_ERROR;
 80020f0:	2001      	movs	r0, #1
 80020f2:	e002      	b.n	80020fa <HAL_RCC_OscConfig+0x476>
        return HAL_ERROR;
 80020f4:	2001      	movs	r0, #1
 80020f6:	e000      	b.n	80020fa <HAL_RCC_OscConfig+0x476>
  return HAL_OK;
 80020f8:	2000      	movs	r0, #0
}
 80020fa:	b003      	add	sp, #12
 80020fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_ERROR;
 80020fe:	2001      	movs	r0, #1
 8002100:	e7fb      	b.n	80020fa <HAL_RCC_OscConfig+0x476>
 8002102:	bf00      	nop
 8002104:	40023800 	.word	0x40023800
 8002108:	08004320 	.word	0x08004320
 800210c:	42470000 	.word	0x42470000

08002110 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002114:	4604      	mov	r4, r0
 8002116:	460d      	mov	r5, r1
  uint32_t tickstart = 0;   
 
  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8002118:	6803      	ldr	r3, [r0, #0]
 800211a:	3b01      	subs	r3, #1
 800211c:	2b0e      	cmp	r3, #14
 800211e:	d861      	bhi.n	80021e4 <HAL_RCC_ClockConfig+0xd4>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8002120:	2d07      	cmp	r5, #7
 8002122:	d865      	bhi.n	80021f0 <HAL_RCC_ClockConfig+0xe0>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002124:	4ba0      	ldr	r3, [pc, #640]	; (80023a8 <HAL_RCC_ClockConfig+0x298>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 030f 	and.w	r3, r3, #15
 800212c:	42ab      	cmp	r3, r5
 800212e:	f080 80aa 	bcs.w	8002286 <HAL_RCC_ClockConfig+0x176>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002132:	b2ea      	uxtb	r2, r5
 8002134:	4b9c      	ldr	r3, [pc, #624]	; (80023a8 <HAL_RCC_ClockConfig+0x298>)
 8002136:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 030f 	and.w	r3, r3, #15
 800213e:	42ab      	cmp	r3, r5
 8002140:	f040 817f 	bne.w	8002442 <HAL_RCC_ClockConfig+0x332>
    {
      return HAL_ERROR;
    }

    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002144:	6823      	ldr	r3, [r4, #0]
 8002146:	f013 0f02 	tst.w	r3, #2
 800214a:	d018      	beq.n	800217e <HAL_RCC_ClockConfig+0x6e>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800214c:	68a3      	ldr	r3, [r4, #8]
 800214e:	f033 0280 	bics.w	r2, r3, #128	; 0x80
 8002152:	d00d      	beq.n	8002170 <HAL_RCC_ClockConfig+0x60>
 8002154:	f023 0220 	bic.w	r2, r3, #32
 8002158:	2a90      	cmp	r2, #144	; 0x90
 800215a:	d009      	beq.n	8002170 <HAL_RCC_ClockConfig+0x60>
 800215c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002160:	2aa0      	cmp	r2, #160	; 0xa0
 8002162:	d005      	beq.n	8002170 <HAL_RCC_ClockConfig+0x60>
 8002164:	f023 0210 	bic.w	r2, r3, #16
 8002168:	2ac0      	cmp	r2, #192	; 0xc0
 800216a:	d001      	beq.n	8002170 <HAL_RCC_ClockConfig+0x60>
 800216c:	2bf0      	cmp	r3, #240	; 0xf0
 800216e:	d145      	bne.n	80021fc <HAL_RCC_ClockConfig+0xec>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002170:	4a8e      	ldr	r2, [pc, #568]	; (80023ac <HAL_RCC_ClockConfig+0x29c>)
 8002172:	6893      	ldr	r3, [r2, #8]
 8002174:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002178:	68a1      	ldr	r1, [r4, #8]
 800217a:	430b      	orrs	r3, r1
 800217c:	6093      	str	r3, [r2, #8]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/ 
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800217e:	6823      	ldr	r3, [r4, #0]
 8002180:	f013 0f01 	tst.w	r3, #1
 8002184:	f000 811e 	beq.w	80023c4 <HAL_RCC_ClockConfig+0x2b4>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8002188:	6863      	ldr	r3, [r4, #4]
 800218a:	2b03      	cmp	r3, #3
 800218c:	d83c      	bhi.n	8002208 <HAL_RCC_ClockConfig+0xf8>
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800218e:	6862      	ldr	r2, [r4, #4]
 8002190:	2a01      	cmp	r2, #1
 8002192:	d03f      	beq.n	8002214 <HAL_RCC_ClockConfig+0x104>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8002194:	1e93      	subs	r3, r2, #2
 8002196:	2b01      	cmp	r3, #1
 8002198:	d943      	bls.n	8002222 <HAL_RCC_ClockConfig+0x112>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800219a:	4b84      	ldr	r3, [pc, #528]	; (80023ac <HAL_RCC_ClockConfig+0x29c>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f013 0f02 	tst.w	r3, #2
 80021a2:	f000 8150 	beq.w	8002446 <HAL_RCC_ClockConfig+0x336>
        {
          return HAL_ERROR;
        }
      }

      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021a6:	4981      	ldr	r1, [pc, #516]	; (80023ac <HAL_RCC_ClockConfig+0x29c>)
 80021a8:	688b      	ldr	r3, [r1, #8]
 80021aa:	f023 0303 	bic.w	r3, r3, #3
 80021ae:	4313      	orrs	r3, r2
 80021b0:	608b      	str	r3, [r1, #8]
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021b2:	f7ff fb53 	bl	800185c <HAL_GetTick>
 80021b6:	4605      	mov	r5, r0
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021b8:	6863      	ldr	r3, [r4, #4]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d038      	beq.n	8002230 <HAL_RCC_ClockConfig+0x120>
          {
            return HAL_TIMEOUT;
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d046      	beq.n	8002250 <HAL_RCC_ClockConfig+0x140>
          {
            return HAL_TIMEOUT;
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 80021c2:	2b03      	cmp	r3, #3
 80021c4:	d054      	beq.n	8002270 <HAL_RCC_ClockConfig+0x160>
          }
        }
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80021c6:	4e79      	ldr	r6, [pc, #484]	; (80023ac <HAL_RCC_ClockConfig+0x29c>)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021c8:	f241 3788 	movw	r7, #5000	; 0x1388
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80021cc:	68b3      	ldr	r3, [r6, #8]
 80021ce:	f013 0f0c 	tst.w	r3, #12
 80021d2:	f000 80f7 	beq.w	80023c4 <HAL_RCC_ClockConfig+0x2b4>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021d6:	f7ff fb41 	bl	800185c <HAL_GetTick>
 80021da:	1b43      	subs	r3, r0, r5
 80021dc:	42bb      	cmp	r3, r7
 80021de:	d9f5      	bls.n	80021cc <HAL_RCC_ClockConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80021e0:	2003      	movs	r0, #3
 80021e2:	e12c      	b.n	800243e <HAL_RCC_ClockConfig+0x32e>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80021e4:	f44f 7118 	mov.w	r1, #608	; 0x260
 80021e8:	4871      	ldr	r0, [pc, #452]	; (80023b0 <HAL_RCC_ClockConfig+0x2a0>)
 80021ea:	f001 fbfb 	bl	80039e4 <assert_failed>
 80021ee:	e797      	b.n	8002120 <HAL_RCC_ClockConfig+0x10>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80021f0:	f240 2161 	movw	r1, #609	; 0x261
 80021f4:	486e      	ldr	r0, [pc, #440]	; (80023b0 <HAL_RCC_ClockConfig+0x2a0>)
 80021f6:	f001 fbf5 	bl	80039e4 <assert_failed>
 80021fa:	e793      	b.n	8002124 <HAL_RCC_ClockConfig+0x14>
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80021fc:	f240 2177 	movw	r1, #631	; 0x277
 8002200:	486b      	ldr	r0, [pc, #428]	; (80023b0 <HAL_RCC_ClockConfig+0x2a0>)
 8002202:	f001 fbef 	bl	80039e4 <assert_failed>
 8002206:	e7b3      	b.n	8002170 <HAL_RCC_ClockConfig+0x60>
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8002208:	f240 217e 	movw	r1, #638	; 0x27e
 800220c:	4868      	ldr	r0, [pc, #416]	; (80023b0 <HAL_RCC_ClockConfig+0x2a0>)
 800220e:	f001 fbe9 	bl	80039e4 <assert_failed>
 8002212:	e7bc      	b.n	800218e <HAL_RCC_ClockConfig+0x7e>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002214:	4b65      	ldr	r3, [pc, #404]	; (80023ac <HAL_RCC_ClockConfig+0x29c>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800221c:	d1c3      	bne.n	80021a6 <HAL_RCC_ClockConfig+0x96>
          return HAL_ERROR;
 800221e:	2001      	movs	r0, #1
 8002220:	e10d      	b.n	800243e <HAL_RCC_ClockConfig+0x32e>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002222:	4b62      	ldr	r3, [pc, #392]	; (80023ac <HAL_RCC_ClockConfig+0x29c>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800222a:	d1bc      	bne.n	80021a6 <HAL_RCC_ClockConfig+0x96>
          return HAL_ERROR;
 800222c:	2001      	movs	r0, #1
 800222e:	e106      	b.n	800243e <HAL_RCC_ClockConfig+0x32e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002230:	4e5e      	ldr	r6, [pc, #376]	; (80023ac <HAL_RCC_ClockConfig+0x29c>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002232:	f241 3788 	movw	r7, #5000	; 0x1388
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002236:	68b3      	ldr	r3, [r6, #8]
 8002238:	f003 030c 	and.w	r3, r3, #12
 800223c:	2b04      	cmp	r3, #4
 800223e:	f000 80c1 	beq.w	80023c4 <HAL_RCC_ClockConfig+0x2b4>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002242:	f7ff fb0b 	bl	800185c <HAL_GetTick>
 8002246:	1b43      	subs	r3, r0, r5
 8002248:	42bb      	cmp	r3, r7
 800224a:	d9f4      	bls.n	8002236 <HAL_RCC_ClockConfig+0x126>
            return HAL_TIMEOUT;
 800224c:	2003      	movs	r0, #3
 800224e:	e0f6      	b.n	800243e <HAL_RCC_ClockConfig+0x32e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002250:	4e56      	ldr	r6, [pc, #344]	; (80023ac <HAL_RCC_ClockConfig+0x29c>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002252:	f241 3788 	movw	r7, #5000	; 0x1388
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002256:	68b3      	ldr	r3, [r6, #8]
 8002258:	f003 030c 	and.w	r3, r3, #12
 800225c:	2b08      	cmp	r3, #8
 800225e:	f000 80b1 	beq.w	80023c4 <HAL_RCC_ClockConfig+0x2b4>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002262:	f7ff fafb 	bl	800185c <HAL_GetTick>
 8002266:	1b40      	subs	r0, r0, r5
 8002268:	42b8      	cmp	r0, r7
 800226a:	d9f4      	bls.n	8002256 <HAL_RCC_ClockConfig+0x146>
            return HAL_TIMEOUT;
 800226c:	2003      	movs	r0, #3
 800226e:	e0e6      	b.n	800243e <HAL_RCC_ClockConfig+0x32e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8002270:	4e4e      	ldr	r6, [pc, #312]	; (80023ac <HAL_RCC_ClockConfig+0x29c>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002272:	f241 3488 	movw	r4, #5000	; 0x1388
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8002276:	68b3      	ldr	r3, [r6, #8]
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002278:	f7ff faf0 	bl	800185c <HAL_GetTick>
 800227c:	1b40      	subs	r0, r0, r5
 800227e:	42a0      	cmp	r0, r4
 8002280:	d9f9      	bls.n	8002276 <HAL_RCC_ClockConfig+0x166>
            return HAL_TIMEOUT;
 8002282:	2003      	movs	r0, #3
 8002284:	e0db      	b.n	800243e <HAL_RCC_ClockConfig+0x32e>
  }
  /* Decreasing the CPU frequency */
  else
  {
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002286:	6823      	ldr	r3, [r4, #0]
 8002288:	f013 0f02 	tst.w	r3, #2
 800228c:	d018      	beq.n	80022c0 <HAL_RCC_ClockConfig+0x1b0>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800228e:	68a3      	ldr	r3, [r4, #8]
 8002290:	f033 0280 	bics.w	r2, r3, #128	; 0x80
 8002294:	d00d      	beq.n	80022b2 <HAL_RCC_ClockConfig+0x1a2>
 8002296:	f023 0220 	bic.w	r2, r3, #32
 800229a:	2a90      	cmp	r2, #144	; 0x90
 800229c:	d009      	beq.n	80022b2 <HAL_RCC_ClockConfig+0x1a2>
 800229e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80022a2:	2aa0      	cmp	r2, #160	; 0xa0
 80022a4:	d005      	beq.n	80022b2 <HAL_RCC_ClockConfig+0x1a2>
 80022a6:	f023 0210 	bic.w	r2, r3, #16
 80022aa:	2ac0      	cmp	r2, #192	; 0xc0
 80022ac:	d001      	beq.n	80022b2 <HAL_RCC_ClockConfig+0x1a2>
 80022ae:	2bf0      	cmp	r3, #240	; 0xf0
 80022b0:	d137      	bne.n	8002322 <HAL_RCC_ClockConfig+0x212>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022b2:	4a3e      	ldr	r2, [pc, #248]	; (80023ac <HAL_RCC_ClockConfig+0x29c>)
 80022b4:	6893      	ldr	r3, [r2, #8]
 80022b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022ba:	68a1      	ldr	r1, [r4, #8]
 80022bc:	430b      	orrs	r3, r1
 80022be:	6093      	str	r3, [r2, #8]
    }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022c0:	6823      	ldr	r3, [r4, #0]
 80022c2:	f013 0f01 	tst.w	r3, #1
 80022c6:	d075      	beq.n	80023b4 <HAL_RCC_ClockConfig+0x2a4>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80022c8:	6863      	ldr	r3, [r4, #4]
 80022ca:	2b03      	cmp	r3, #3
 80022cc:	d82f      	bhi.n	800232e <HAL_RCC_ClockConfig+0x21e>
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022ce:	6862      	ldr	r2, [r4, #4]
 80022d0:	2a01      	cmp	r2, #1
 80022d2:	d032      	beq.n	800233a <HAL_RCC_ClockConfig+0x22a>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) || 
 80022d4:	1e93      	subs	r3, r2, #2
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d936      	bls.n	8002348 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022da:	4b34      	ldr	r3, [pc, #208]	; (80023ac <HAL_RCC_ClockConfig+0x29c>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f013 0f02 	tst.w	r3, #2
 80022e2:	f000 80b2 	beq.w	800244a <HAL_RCC_ClockConfig+0x33a>
        {
          return HAL_ERROR;
        }
      }
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022e6:	4931      	ldr	r1, [pc, #196]	; (80023ac <HAL_RCC_ClockConfig+0x29c>)
 80022e8:	688b      	ldr	r3, [r1, #8]
 80022ea:	f023 0303 	bic.w	r3, r3, #3
 80022ee:	4313      	orrs	r3, r2
 80022f0:	608b      	str	r3, [r1, #8]
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022f2:	f7ff fab3 	bl	800185c <HAL_GetTick>
 80022f6:	4606      	mov	r6, r0
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022f8:	6863      	ldr	r3, [r4, #4]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d02b      	beq.n	8002356 <HAL_RCC_ClockConfig+0x246>
          {
            return HAL_TIMEOUT;
          } 
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d038      	beq.n	8002374 <HAL_RCC_ClockConfig+0x264>
          {
            return HAL_TIMEOUT;
          } 
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8002302:	2b03      	cmp	r3, #3
 8002304:	d045      	beq.n	8002392 <HAL_RCC_ClockConfig+0x282>
          } 
        }
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002306:	4f29      	ldr	r7, [pc, #164]	; (80023ac <HAL_RCC_ClockConfig+0x29c>)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002308:	f241 3888 	movw	r8, #5000	; 0x1388
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	f013 0f0c 	tst.w	r3, #12
 8002312:	d04f      	beq.n	80023b4 <HAL_RCC_ClockConfig+0x2a4>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002314:	f7ff faa2 	bl	800185c <HAL_GetTick>
 8002318:	1b83      	subs	r3, r0, r6
 800231a:	4543      	cmp	r3, r8
 800231c:	d9f6      	bls.n	800230c <HAL_RCC_ClockConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800231e:	2003      	movs	r0, #3
 8002320:	e08d      	b.n	800243e <HAL_RCC_ClockConfig+0x32e>
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8002322:	f240 21d1 	movw	r1, #721	; 0x2d1
 8002326:	4822      	ldr	r0, [pc, #136]	; (80023b0 <HAL_RCC_ClockConfig+0x2a0>)
 8002328:	f001 fb5c 	bl	80039e4 <assert_failed>
 800232c:	e7c1      	b.n	80022b2 <HAL_RCC_ClockConfig+0x1a2>
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800232e:	f44f 7136 	mov.w	r1, #728	; 0x2d8
 8002332:	481f      	ldr	r0, [pc, #124]	; (80023b0 <HAL_RCC_ClockConfig+0x2a0>)
 8002334:	f001 fb56 	bl	80039e4 <assert_failed>
 8002338:	e7c9      	b.n	80022ce <HAL_RCC_ClockConfig+0x1be>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800233a:	4b1c      	ldr	r3, [pc, #112]	; (80023ac <HAL_RCC_ClockConfig+0x29c>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002342:	d1d0      	bne.n	80022e6 <HAL_RCC_ClockConfig+0x1d6>
          return HAL_ERROR;
 8002344:	2001      	movs	r0, #1
 8002346:	e07a      	b.n	800243e <HAL_RCC_ClockConfig+0x32e>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002348:	4b18      	ldr	r3, [pc, #96]	; (80023ac <HAL_RCC_ClockConfig+0x29c>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002350:	d1c9      	bne.n	80022e6 <HAL_RCC_ClockConfig+0x1d6>
          return HAL_ERROR;
 8002352:	2001      	movs	r0, #1
 8002354:	e073      	b.n	800243e <HAL_RCC_ClockConfig+0x32e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002356:	4f15      	ldr	r7, [pc, #84]	; (80023ac <HAL_RCC_ClockConfig+0x29c>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002358:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	f003 030c 	and.w	r3, r3, #12
 8002362:	2b04      	cmp	r3, #4
 8002364:	d026      	beq.n	80023b4 <HAL_RCC_ClockConfig+0x2a4>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002366:	f7ff fa79 	bl	800185c <HAL_GetTick>
 800236a:	1b83      	subs	r3, r0, r6
 800236c:	4543      	cmp	r3, r8
 800236e:	d9f5      	bls.n	800235c <HAL_RCC_ClockConfig+0x24c>
            return HAL_TIMEOUT;
 8002370:	2003      	movs	r0, #3
 8002372:	e064      	b.n	800243e <HAL_RCC_ClockConfig+0x32e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002374:	4f0d      	ldr	r7, [pc, #52]	; (80023ac <HAL_RCC_ClockConfig+0x29c>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002376:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	f003 030c 	and.w	r3, r3, #12
 8002380:	2b08      	cmp	r3, #8
 8002382:	d017      	beq.n	80023b4 <HAL_RCC_ClockConfig+0x2a4>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002384:	f7ff fa6a 	bl	800185c <HAL_GetTick>
 8002388:	1b80      	subs	r0, r0, r6
 800238a:	4540      	cmp	r0, r8
 800238c:	d9f5      	bls.n	800237a <HAL_RCC_ClockConfig+0x26a>
            return HAL_TIMEOUT;
 800238e:	2003      	movs	r0, #3
 8002390:	e055      	b.n	800243e <HAL_RCC_ClockConfig+0x32e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8002392:	4d06      	ldr	r5, [pc, #24]	; (80023ac <HAL_RCC_ClockConfig+0x29c>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002394:	f241 3488 	movw	r4, #5000	; 0x1388
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8002398:	68ab      	ldr	r3, [r5, #8]
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800239a:	f7ff fa5f 	bl	800185c <HAL_GetTick>
 800239e:	1b80      	subs	r0, r0, r6
 80023a0:	42a0      	cmp	r0, r4
 80023a2:	d9f9      	bls.n	8002398 <HAL_RCC_ClockConfig+0x288>
            return HAL_TIMEOUT;
 80023a4:	2003      	movs	r0, #3
 80023a6:	e04a      	b.n	800243e <HAL_RCC_ClockConfig+0x32e>
 80023a8:	40023c00 	.word	0x40023c00
 80023ac:	40023800 	.word	0x40023800
 80023b0:	08004320 	.word	0x08004320
        }
      }
    }
    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023b4:	b2ea      	uxtb	r2, r5
 80023b6:	4b27      	ldr	r3, [pc, #156]	; (8002454 <HAL_RCC_ClockConfig+0x344>)
 80023b8:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 030f 	and.w	r3, r3, #15
 80023c0:	42ab      	cmp	r3, r5
 80023c2:	d144      	bne.n	800244e <HAL_RCC_ClockConfig+0x33e>
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023c4:	6823      	ldr	r3, [r4, #0]
 80023c6:	f013 0f04 	tst.w	r3, #4
 80023ca:	d017      	beq.n	80023fc <HAL_RCC_ClockConfig+0x2ec>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80023cc:	68e3      	ldr	r3, [r4, #12]
 80023ce:	f433 5280 	bics.w	r2, r3, #4096	; 0x1000
 80023d2:	d00c      	beq.n	80023ee <HAL_RCC_ClockConfig+0x2de>
 80023d4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80023d8:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 80023dc:	d007      	beq.n	80023ee <HAL_RCC_ClockConfig+0x2de>
 80023de:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80023e2:	d004      	beq.n	80023ee <HAL_RCC_ClockConfig+0x2de>
 80023e4:	f240 3132 	movw	r1, #818	; 0x332
 80023e8:	481b      	ldr	r0, [pc, #108]	; (8002458 <HAL_RCC_ClockConfig+0x348>)
 80023ea:	f001 fafb 	bl	80039e4 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023ee:	4a1b      	ldr	r2, [pc, #108]	; (800245c <HAL_RCC_ClockConfig+0x34c>)
 80023f0:	6893      	ldr	r3, [r2, #8]
 80023f2:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80023f6:	68e1      	ldr	r1, [r4, #12]
 80023f8:	430b      	orrs	r3, r1
 80023fa:	6093      	str	r3, [r2, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023fc:	6823      	ldr	r3, [r4, #0]
 80023fe:	f013 0f08 	tst.w	r3, #8
 8002402:	d018      	beq.n	8002436 <HAL_RCC_ClockConfig+0x326>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8002404:	6923      	ldr	r3, [r4, #16]
 8002406:	f433 5280 	bics.w	r2, r3, #4096	; 0x1000
 800240a:	d00c      	beq.n	8002426 <HAL_RCC_ClockConfig+0x316>
 800240c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002410:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 8002414:	d007      	beq.n	8002426 <HAL_RCC_ClockConfig+0x316>
 8002416:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800241a:	d004      	beq.n	8002426 <HAL_RCC_ClockConfig+0x316>
 800241c:	f240 3139 	movw	r1, #825	; 0x339
 8002420:	480d      	ldr	r0, [pc, #52]	; (8002458 <HAL_RCC_ClockConfig+0x348>)
 8002422:	f001 fadf 	bl	80039e4 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002426:	4a0d      	ldr	r2, [pc, #52]	; (800245c <HAL_RCC_ClockConfig+0x34c>)
 8002428:	6893      	ldr	r3, [r2, #8]
 800242a:	6921      	ldr	r1, [r4, #16]
 800242c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002430:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002434:	6093      	str	r3, [r2, #8]
  }

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002436:	2000      	movs	r0, #0
 8002438:	f7ff f9da 	bl	80017f0 <HAL_InitTick>
  
  return HAL_OK;
 800243c:	2000      	movs	r0, #0
}
 800243e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_ERROR;
 8002442:	2001      	movs	r0, #1
 8002444:	e7fb      	b.n	800243e <HAL_RCC_ClockConfig+0x32e>
          return HAL_ERROR;
 8002446:	2001      	movs	r0, #1
 8002448:	e7f9      	b.n	800243e <HAL_RCC_ClockConfig+0x32e>
          return HAL_ERROR;
 800244a:	2001      	movs	r0, #1
 800244c:	e7f7      	b.n	800243e <HAL_RCC_ClockConfig+0x32e>
      return HAL_ERROR;
 800244e:	2001      	movs	r0, #1
 8002450:	e7f5      	b.n	800243e <HAL_RCC_ClockConfig+0x32e>
 8002452:	bf00      	nop
 8002454:	40023c00 	.word	0x40023c00
 8002458:	08004320 	.word	0x08004320
 800245c:	40023800 	.word	0x40023800

08002460 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002460:	4b1a      	ldr	r3, [pc, #104]	; (80024cc <HAL_RCC_GetSysClockFreq+0x6c>)
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f003 030c 	and.w	r3, r3, #12
 8002468:	2b04      	cmp	r3, #4
 800246a:	d02b      	beq.n	80024c4 <HAL_RCC_GetSysClockFreq+0x64>
 800246c:	2b08      	cmp	r3, #8
 800246e:	d12b      	bne.n	80024c8 <HAL_RCC_GetSysClockFreq+0x68>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002470:	4b16      	ldr	r3, [pc, #88]	; (80024cc <HAL_RCC_GetSysClockFreq+0x6c>)
 8002472:	685a      	ldr	r2, [r3, #4]
 8002474:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 800247e:	4b13      	ldr	r3, [pc, #76]	; (80024cc <HAL_RCC_GetSysClockFreq+0x6c>)
 8002480:	6858      	ldr	r0, [r3, #4]
 8002482:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8002486:	fa91 f3a1 	rbit	r3, r1
 800248a:	fab3 f383 	clz	r3, r3
 800248e:	ea00 0001 	and.w	r0, r0, r1
 8002492:	fa20 f003 	lsr.w	r0, r0, r3
 8002496:	bf14      	ite	ne
 8002498:	4b0d      	ldrne	r3, [pc, #52]	; (80024d0 <HAL_RCC_GetSysClockFreq+0x70>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 800249a:	4b0e      	ldreq	r3, [pc, #56]	; (80024d4 <HAL_RCC_GetSysClockFreq+0x74>)
 800249c:	fbb3 f2f2 	udiv	r2, r3, r2
 80024a0:	fb02 f000 	mul.w	r0, r2, r0
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 80024a4:	4b09      	ldr	r3, [pc, #36]	; (80024cc <HAL_RCC_GetSysClockFreq+0x6c>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80024ac:	fa92 f2a2 	rbit	r2, r2
 80024b0:	fab2 f282 	clz	r2, r2
 80024b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024b8:	40d3      	lsrs	r3, r2
 80024ba:	3301      	adds	r3, #1
 80024bc:	005b      	lsls	r3, r3, #1
      
      sysclockfreq = pllvco/pllp;
 80024be:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80024c2:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024c4:	4802      	ldr	r0, [pc, #8]	; (80024d0 <HAL_RCC_GetSysClockFreq+0x70>)
 80024c6:	4770      	bx	lr
      sysclockfreq = HSI_VALUE;
 80024c8:	4802      	ldr	r0, [pc, #8]	; (80024d4 <HAL_RCC_GetSysClockFreq+0x74>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80024ca:	4770      	bx	lr
 80024cc:	40023800 	.word	0x40023800
 80024d0:	007a1200 	.word	0x007a1200
 80024d4:	00f42400 	.word	0x00f42400

080024d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024d8:	b508      	push	{r3, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80024da:	f7ff ffc1 	bl	8002460 <HAL_RCC_GetSysClockFreq>
 80024de:	4b08      	ldr	r3, [pc, #32]	; (8002500 <HAL_RCC_GetHCLKFreq+0x28>)
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	22f0      	movs	r2, #240	; 0xf0
 80024e4:	fa92 f2a2 	rbit	r2, r2
 80024e8:	fab2 f282 	clz	r2, r2
 80024ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024f0:	40d3      	lsrs	r3, r2
 80024f2:	4a04      	ldr	r2, [pc, #16]	; (8002504 <HAL_RCC_GetHCLKFreq+0x2c>)
 80024f4:	5cd3      	ldrb	r3, [r2, r3]
 80024f6:	40d8      	lsrs	r0, r3
 80024f8:	4b03      	ldr	r3, [pc, #12]	; (8002508 <HAL_RCC_GetHCLKFreq+0x30>)
 80024fa:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 80024fc:	bd08      	pop	{r3, pc}
 80024fe:	bf00      	nop
 8002500:	40023800 	.word	0x40023800
 8002504:	08003f3c 	.word	0x08003f3c
 8002508:	20000364 	.word	0x20000364

0800250c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
 800250c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 800250e:	f7ff ffe3 	bl	80024d8 <HAL_RCC_GetHCLKFreq>
 8002512:	4b07      	ldr	r3, [pc, #28]	; (8002530 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 800251a:	fa92 f2a2 	rbit	r2, r2
 800251e:	fab2 f282 	clz	r2, r2
 8002522:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8002526:	40d3      	lsrs	r3, r2
 8002528:	4a02      	ldr	r2, [pc, #8]	; (8002534 <HAL_RCC_GetPCLK1Freq+0x28>)
 800252a:	5cd3      	ldrb	r3, [r2, r3]
}
 800252c:	40d8      	lsrs	r0, r3
 800252e:	bd08      	pop	{r3, pc}
 8002530:	40023800 	.word	0x40023800
 8002534:	08003f3c 	.word	0x08003f3c

08002538 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002538:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 800253a:	f7ff ffcd 	bl	80024d8 <HAL_RCC_GetHCLKFreq>
 800253e:	4b07      	ldr	r3, [pc, #28]	; (800255c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8002546:	fa92 f2a2 	rbit	r2, r2
 800254a:	fab2 f282 	clz	r2, r2
 800254e:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002552:	40d3      	lsrs	r3, r2
 8002554:	4a02      	ldr	r2, [pc, #8]	; (8002560 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002556:	5cd3      	ldrb	r3, [r2, r3]
} 
 8002558:	40d8      	lsrs	r0, r3
 800255a:	bd08      	pop	{r3, pc}
 800255c:	40023800 	.word	0x40023800
 8002560:	08003f3c 	.word	0x08003f3c

08002564 <SPI_WaitOnFlagUntilTimeout>:
  * @param  Status: Flag status to check: RESET or set
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status, uint32_t Timeout)  
{
 8002564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002568:	4606      	mov	r6, r0
 800256a:	460d      	mov	r5, r1
 800256c:	4690      	mov	r8, r2
 800256e:	461c      	mov	r4, r3
  uint32_t tickstart = 0;

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002570:	f7ff f974 	bl	800185c <HAL_GetTick>
 8002574:	4607      	mov	r7, r0

  /* Wait until flag is set */
  if(Status == RESET)
 8002576:	f1b8 0f00 	cmp.w	r8, #0
 800257a:	d02e      	beq.n	80025da <SPI_WaitOnFlagUntilTimeout+0x76>
      }
    }
  }
  else
  {
    while(__HAL_SPI_GET_FLAG(hspi, Flag) != RESET)
 800257c:	6832      	ldr	r2, [r6, #0]
 800257e:	6893      	ldr	r3, [r2, #8]
 8002580:	ea35 0303 	bics.w	r3, r5, r3
 8002584:	d15b      	bne.n	800263e <SPI_WaitOnFlagUntilTimeout+0xda>
    {
      if(Timeout != HAL_MAX_DELAY)
 8002586:	f1b4 3fff 	cmp.w	r4, #4294967295
 800258a:	d0f8      	beq.n	800257e <SPI_WaitOnFlagUntilTimeout+0x1a>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800258c:	b124      	cbz	r4, 8002598 <SPI_WaitOnFlagUntilTimeout+0x34>
 800258e:	f7ff f965 	bl	800185c <HAL_GetTick>
 8002592:	1bc0      	subs	r0, r0, r7
 8002594:	42a0      	cmp	r0, r4
 8002596:	d9f1      	bls.n	800257c <SPI_WaitOnFlagUntilTimeout+0x18>
          /* Disable the SPI and reset the CRC: the CRC value should be cleared
             on both master and slave sides in order to resynchronize the master
             and slave for their respective CRC calculation */

          /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
          __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002598:	6832      	ldr	r2, [r6, #0]
 800259a:	6853      	ldr	r3, [r2, #4]
 800259c:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80025a0:	6053      	str	r3, [r2, #4]

          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80025a2:	6832      	ldr	r2, [r6, #0]
 80025a4:	6813      	ldr	r3, [r2, #0]
 80025a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025aa:	6013      	str	r3, [r2, #0]

          /* Reset CRC Calculation */
          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80025ac:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80025ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025b2:	d039      	beq.n	8002628 <SPI_WaitOnFlagUntilTimeout+0xc4>
          {
            SPI_RESET_CRC(hspi);
          }

          hspi->State= HAL_SPI_STATE_READY;
 80025b4:	2301      	movs	r3, #1
 80025b6:	f886 3051 	strb.w	r3, [r6, #81]	; 0x51

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 80025ba:	2300      	movs	r3, #0
 80025bc:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50

          return HAL_TIMEOUT;
 80025c0:	2003      	movs	r0, #3
 80025c2:	e02f      	b.n	8002624 <SPI_WaitOnFlagUntilTimeout+0xc0>
            SPI_RESET_CRC(hspi);
 80025c4:	6832      	ldr	r2, [r6, #0]
 80025c6:	6813      	ldr	r3, [r2, #0]
 80025c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80025cc:	6013      	str	r3, [r2, #0]
 80025ce:	6832      	ldr	r2, [r6, #0]
 80025d0:	6813      	ldr	r3, [r2, #0]
 80025d2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80025d6:	6013      	str	r3, [r2, #0]
 80025d8:	e01b      	b.n	8002612 <SPI_WaitOnFlagUntilTimeout+0xae>
    while(__HAL_SPI_GET_FLAG(hspi, Flag) == RESET)
 80025da:	6831      	ldr	r1, [r6, #0]
 80025dc:	688b      	ldr	r3, [r1, #8]
 80025de:	ea35 0303 	bics.w	r3, r5, r3
 80025e2:	d01e      	beq.n	8002622 <SPI_WaitOnFlagUntilTimeout+0xbe>
      if(Timeout != HAL_MAX_DELAY)
 80025e4:	f1b4 3fff 	cmp.w	r4, #4294967295
 80025e8:	d0f8      	beq.n	80025dc <SPI_WaitOnFlagUntilTimeout+0x78>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 80025ea:	b124      	cbz	r4, 80025f6 <SPI_WaitOnFlagUntilTimeout+0x92>
 80025ec:	f7ff f936 	bl	800185c <HAL_GetTick>
 80025f0:	1bc0      	subs	r0, r0, r7
 80025f2:	42a0      	cmp	r0, r4
 80025f4:	d9f1      	bls.n	80025da <SPI_WaitOnFlagUntilTimeout+0x76>
          __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80025f6:	6832      	ldr	r2, [r6, #0]
 80025f8:	6853      	ldr	r3, [r2, #4]
 80025fa:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80025fe:	6053      	str	r3, [r2, #4]
          __HAL_SPI_DISABLE(hspi);
 8002600:	6832      	ldr	r2, [r6, #0]
 8002602:	6813      	ldr	r3, [r2, #0]
 8002604:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002608:	6013      	str	r3, [r2, #0]
          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800260a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800260c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002610:	d0d8      	beq.n	80025c4 <SPI_WaitOnFlagUntilTimeout+0x60>
          hspi->State= HAL_SPI_STATE_READY;
 8002612:	2301      	movs	r3, #1
 8002614:	f886 3051 	strb.w	r3, [r6, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8002618:	2300      	movs	r3, #0
 800261a:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
          return HAL_TIMEOUT;
 800261e:	2003      	movs	r0, #3
 8002620:	e000      	b.n	8002624 <SPI_WaitOnFlagUntilTimeout+0xc0>
        }
      }
    }
  }
  return HAL_OK;
 8002622:	4640      	mov	r0, r8
}
 8002624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            SPI_RESET_CRC(hspi);
 8002628:	6832      	ldr	r2, [r6, #0]
 800262a:	6813      	ldr	r3, [r2, #0]
 800262c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002630:	6013      	str	r3, [r2, #0]
 8002632:	6832      	ldr	r2, [r6, #0]
 8002634:	6813      	ldr	r3, [r2, #0]
 8002636:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800263a:	6013      	str	r3, [r2, #0]
 800263c:	e7ba      	b.n	80025b4 <SPI_WaitOnFlagUntilTimeout+0x50>
  return HAL_OK;
 800263e:	2000      	movs	r0, #0
 8002640:	e7f0      	b.n	8002624 <SPI_WaitOnFlagUntilTimeout+0xc0>
	...

08002644 <HAL_SPI_Init>:
  if(hspi == NULL)
 8002644:	2800      	cmp	r0, #0
 8002646:	f000 80aa 	beq.w	800279e <HAL_SPI_Init+0x15a>
{
 800264a:	b510      	push	{r4, lr}
 800264c:	4604      	mov	r4, r0
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800264e:	6843      	ldr	r3, [r0, #4]
 8002650:	b113      	cbz	r3, 8002658 <HAL_SPI_Init+0x14>
 8002652:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002656:	d17e      	bne.n	8002756 <HAL_SPI_Init+0x112>
  assert_param(IS_SPI_DIRECTION_MODE(hspi->Init.Direction));
 8002658:	68a3      	ldr	r3, [r4, #8]
 800265a:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 800265e:	d002      	beq.n	8002666 <HAL_SPI_Init+0x22>
 8002660:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002664:	d17c      	bne.n	8002760 <HAL_SPI_Init+0x11c>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8002666:	68e3      	ldr	r3, [r4, #12]
 8002668:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 800266c:	d17d      	bne.n	800276a <HAL_SPI_Init+0x126>
  assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800266e:	6923      	ldr	r3, [r4, #16]
 8002670:	f033 0302 	bics.w	r3, r3, #2
 8002674:	d003      	beq.n	800267e <HAL_SPI_Init+0x3a>
 8002676:	21bb      	movs	r1, #187	; 0xbb
 8002678:	484a      	ldr	r0, [pc, #296]	; (80027a4 <HAL_SPI_Init+0x160>)
 800267a:	f001 f9b3 	bl	80039e4 <assert_failed>
  assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800267e:	6963      	ldr	r3, [r4, #20]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d877      	bhi.n	8002774 <HAL_SPI_Init+0x130>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8002684:	69a3      	ldr	r3, [r4, #24]
 8002686:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 800268a:	d002      	beq.n	8002692 <HAL_SPI_Init+0x4e>
 800268c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002690:	d175      	bne.n	800277e <HAL_SPI_Init+0x13a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8002692:	69e3      	ldr	r3, [r4, #28]
 8002694:	f033 0308 	bics.w	r3, r3, #8
 8002698:	d009      	beq.n	80026ae <HAL_SPI_Init+0x6a>
 800269a:	2b10      	cmp	r3, #16
 800269c:	d007      	beq.n	80026ae <HAL_SPI_Init+0x6a>
 800269e:	2b20      	cmp	r3, #32
 80026a0:	d005      	beq.n	80026ae <HAL_SPI_Init+0x6a>
 80026a2:	2b30      	cmp	r3, #48	; 0x30
 80026a4:	d003      	beq.n	80026ae <HAL_SPI_Init+0x6a>
 80026a6:	21be      	movs	r1, #190	; 0xbe
 80026a8:	483e      	ldr	r0, [pc, #248]	; (80027a4 <HAL_SPI_Init+0x160>)
 80026aa:	f001 f99b 	bl	80039e4 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 80026ae:	6a23      	ldr	r3, [r4, #32]
 80026b0:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 80026b4:	d003      	beq.n	80026be <HAL_SPI_Init+0x7a>
 80026b6:	21bf      	movs	r1, #191	; 0xbf
 80026b8:	483a      	ldr	r0, [pc, #232]	; (80027a4 <HAL_SPI_Init+0x160>)
 80026ba:	f001 f993 	bl	80039e4 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 80026be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80026c0:	f033 0310 	bics.w	r3, r3, #16
 80026c4:	d003      	beq.n	80026ce <HAL_SPI_Init+0x8a>
 80026c6:	21c0      	movs	r1, #192	; 0xc0
 80026c8:	4836      	ldr	r0, [pc, #216]	; (80027a4 <HAL_SPI_Init+0x160>)
 80026ca:	f001 f98b 	bl	80039e4 <assert_failed>
  assert_param(IS_SPI_CRC_CALCULATION(hspi->Init.CRCCalculation));
 80026ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80026d0:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 80026d4:	d003      	beq.n	80026de <HAL_SPI_Init+0x9a>
 80026d6:	21c1      	movs	r1, #193	; 0xc1
 80026d8:	4832      	ldr	r0, [pc, #200]	; (80027a4 <HAL_SPI_Init+0x160>)
 80026da:	f001 f983 	bl	80039e4 <assert_failed>
  assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
 80026de:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80026e0:	3b01      	subs	r3, #1
 80026e2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d84e      	bhi.n	8002788 <HAL_SPI_Init+0x144>
  if(hspi->State == HAL_SPI_STATE_RESET)
 80026ea:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d04f      	beq.n	8002792 <HAL_SPI_Init+0x14e>
  hspi->State = HAL_SPI_STATE_BUSY;
 80026f2:	2302      	movs	r3, #2
 80026f4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 80026f8:	6822      	ldr	r2, [r4, #0]
 80026fa:	6813      	ldr	r3, [r2, #0]
 80026fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002700:	6013      	str	r3, [r2, #0]
  hspi->Instance->CR1 = (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002702:	6822      	ldr	r2, [r4, #0]
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 8002704:	6863      	ldr	r3, [r4, #4]
 8002706:	68a1      	ldr	r1, [r4, #8]
 8002708:	430b      	orrs	r3, r1
 800270a:	68e1      	ldr	r1, [r4, #12]
 800270c:	430b      	orrs	r3, r1
 800270e:	6921      	ldr	r1, [r4, #16]
 8002710:	430b      	orrs	r3, r1
 8002712:	6961      	ldr	r1, [r4, #20]
 8002714:	430b      	orrs	r3, r1
 8002716:	69e1      	ldr	r1, [r4, #28]
 8002718:	430b      	orrs	r3, r1
 800271a:	6a21      	ldr	r1, [r4, #32]
 800271c:	430b      	orrs	r3, r1
 800271e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002720:	430b      	orrs	r3, r1
                         hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
 8002722:	69a1      	ldr	r1, [r4, #24]
 8002724:	f401 7100 	and.w	r1, r1, #512	; 0x200
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 8002728:	430b      	orrs	r3, r1
  hspi->Instance->CR1 = (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800272a:	6013      	str	r3, [r2, #0]
  hspi->Instance->CR2 = (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode);
 800272c:	6822      	ldr	r2, [r4, #0]
 800272e:	8b63      	ldrh	r3, [r4, #26]
 8002730:	f003 0304 	and.w	r3, r3, #4
 8002734:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002736:	430b      	orrs	r3, r1
 8002738:	6053      	str	r3, [r2, #4]
  hspi->Instance->CRCPR = hspi->Init.CRCPolynomial;
 800273a:	6823      	ldr	r3, [r4, #0]
 800273c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800273e:	611a      	str	r2, [r3, #16]
  hspi->Instance->I2SCFGR &= (uint32_t)(~SPI_I2SCFGR_I2SMOD);
 8002740:	6822      	ldr	r2, [r4, #0]
 8002742:	69d3      	ldr	r3, [r2, #28]
 8002744:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002748:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800274a:	2000      	movs	r0, #0
 800274c:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800274e:	2301      	movs	r3, #1
 8002750:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8002754:	bd10      	pop	{r4, pc}
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8002756:	21b8      	movs	r1, #184	; 0xb8
 8002758:	4812      	ldr	r0, [pc, #72]	; (80027a4 <HAL_SPI_Init+0x160>)
 800275a:	f001 f943 	bl	80039e4 <assert_failed>
 800275e:	e77b      	b.n	8002658 <HAL_SPI_Init+0x14>
  assert_param(IS_SPI_DIRECTION_MODE(hspi->Init.Direction));
 8002760:	21b9      	movs	r1, #185	; 0xb9
 8002762:	4810      	ldr	r0, [pc, #64]	; (80027a4 <HAL_SPI_Init+0x160>)
 8002764:	f001 f93e 	bl	80039e4 <assert_failed>
 8002768:	e77d      	b.n	8002666 <HAL_SPI_Init+0x22>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800276a:	21ba      	movs	r1, #186	; 0xba
 800276c:	480d      	ldr	r0, [pc, #52]	; (80027a4 <HAL_SPI_Init+0x160>)
 800276e:	f001 f939 	bl	80039e4 <assert_failed>
 8002772:	e77c      	b.n	800266e <HAL_SPI_Init+0x2a>
  assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8002774:	21bc      	movs	r1, #188	; 0xbc
 8002776:	480b      	ldr	r0, [pc, #44]	; (80027a4 <HAL_SPI_Init+0x160>)
 8002778:	f001 f934 	bl	80039e4 <assert_failed>
 800277c:	e782      	b.n	8002684 <HAL_SPI_Init+0x40>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800277e:	21bd      	movs	r1, #189	; 0xbd
 8002780:	4808      	ldr	r0, [pc, #32]	; (80027a4 <HAL_SPI_Init+0x160>)
 8002782:	f001 f92f 	bl	80039e4 <assert_failed>
 8002786:	e784      	b.n	8002692 <HAL_SPI_Init+0x4e>
  assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
 8002788:	21c2      	movs	r1, #194	; 0xc2
 800278a:	4806      	ldr	r0, [pc, #24]	; (80027a4 <HAL_SPI_Init+0x160>)
 800278c:	f001 f92a 	bl	80039e4 <assert_failed>
 8002790:	e7ab      	b.n	80026ea <HAL_SPI_Init+0xa6>
    hspi->Lock = HAL_UNLOCKED;
 8002792:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8002796:	4620      	mov	r0, r4
 8002798:	f001 f936 	bl	8003a08 <HAL_SPI_MspInit>
 800279c:	e7a9      	b.n	80026f2 <HAL_SPI_Init+0xae>
    return HAL_ERROR;
 800279e:	2001      	movs	r0, #1
}
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	080043a8 	.word	0x080043a8

080027a8 <HAL_SPI_TransmitReceive>:
{
 80027a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027ac:	b082      	sub	sp, #8
 80027ae:	4604      	mov	r4, r0
 80027b0:	460f      	mov	r7, r1
 80027b2:	4690      	mov	r8, r2
 80027b4:	461d      	mov	r5, r3
 80027b6:	9e08      	ldr	r6, [sp, #32]
  tmpstate = hspi->State; 
 80027b8:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 80027bc:	b2db      	uxtb	r3, r3
  if((tmpstate == HAL_SPI_STATE_READY) || (tmpstate == HAL_SPI_STATE_BUSY_RX))
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d002      	beq.n	80027c8 <HAL_SPI_TransmitReceive+0x20>
 80027c2:	2b22      	cmp	r3, #34	; 0x22
 80027c4:	f040 818f 	bne.w	8002ae6 <HAL_SPI_TransmitReceive+0x33e>
    if((pTxData == NULL ) || (pRxData == NULL ) || (Size == 0))
 80027c8:	2f00      	cmp	r7, #0
 80027ca:	f000 8190 	beq.w	8002aee <HAL_SPI_TransmitReceive+0x346>
 80027ce:	f1b8 0f00 	cmp.w	r8, #0
 80027d2:	f000 8191 	beq.w	8002af8 <HAL_SPI_TransmitReceive+0x350>
 80027d6:	2d00      	cmp	r5, #0
 80027d8:	f000 8190 	beq.w	8002afc <HAL_SPI_TransmitReceive+0x354>
    assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 80027dc:	68a3      	ldr	r3, [r4, #8]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d145      	bne.n	800286e <HAL_SPI_TransmitReceive+0xc6>
    __HAL_LOCK(hspi);
 80027e2:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	f000 818a 	beq.w	8002b00 <HAL_SPI_TransmitReceive+0x358>
 80027ec:	2301      	movs	r3, #1
 80027ee:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    if(hspi->State == HAL_SPI_STATE_READY)
 80027f2:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	2b01      	cmp	r3, #1
      hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80027fa:	bf04      	itt	eq
 80027fc:	2332      	moveq	r3, #50	; 0x32
 80027fe:	f884 3051 	strbeq.w	r3, [r4, #81]	; 0x51
    hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002802:	2300      	movs	r3, #0
 8002804:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->pRxBuffPtr  = pRxData;
 8002806:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
    hspi->RxXferSize  = Size;
 800280a:	87a5      	strh	r5, [r4, #60]	; 0x3c
    hspi->RxXferCount = Size;  
 800280c:	87e5      	strh	r5, [r4, #62]	; 0x3e
    hspi->pTxBuffPtr  = pTxData;
 800280e:	6327      	str	r7, [r4, #48]	; 0x30
    hspi->TxXferSize  = Size; 
 8002810:	86a5      	strh	r5, [r4, #52]	; 0x34
    hspi->TxXferCount = Size;
 8002812:	86e5      	strh	r5, [r4, #54]	; 0x36
    hspi->RxISR = 0;
 8002814:	64a3      	str	r3, [r4, #72]	; 0x48
    hspi->TxISR = 0;
 8002816:	64e3      	str	r3, [r4, #76]	; 0x4c
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002818:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800281a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800281e:	d02c      	beq.n	800287a <HAL_SPI_TransmitReceive+0xd2>
    if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8002820:	6823      	ldr	r3, [r4, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002828:	d103      	bne.n	8002832 <HAL_SPI_TransmitReceive+0x8a>
      __HAL_SPI_ENABLE(hspi);
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002830:	601a      	str	r2, [r3, #0]
    if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002832:	68e3      	ldr	r3, [r4, #12]
 8002834:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002838:	d02a      	beq.n	8002890 <HAL_SPI_TransmitReceive+0xe8>
      if((hspi->Init.Mode == SPI_MODE_SLAVE) || ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->TxXferCount == 0x01)))
 800283a:	6863      	ldr	r3, [r4, #4]
 800283c:	b12b      	cbz	r3, 800284a <HAL_SPI_TransmitReceive+0xa2>
 800283e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002842:	d10b      	bne.n	800285c <HAL_SPI_TransmitReceive+0xb4>
 8002844:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002846:	2b01      	cmp	r3, #1
 8002848:	d108      	bne.n	800285c <HAL_SPI_TransmitReceive+0xb4>
        hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 800284a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800284c:	1c5a      	adds	r2, r3, #1
 800284e:	6322      	str	r2, [r4, #48]	; 0x30
 8002850:	6822      	ldr	r2, [r4, #0]
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 8002856:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002858:	3b01      	subs	r3, #1
 800285a:	86e3      	strh	r3, [r4, #54]	; 0x36
      if(hspi->TxXferCount == 0)
 800285c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800285e:	2b00      	cmp	r3, #0
 8002860:	f000 8098 	beq.w	8002994 <HAL_SPI_TransmitReceive+0x1ec>
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8002864:	2500      	movs	r5, #0
 8002866:	2702      	movs	r7, #2
            if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8002868:	f04f 0801 	mov.w	r8, #1
 800286c:	e0e9      	b.n	8002a42 <HAL_SPI_TransmitReceive+0x29a>
    assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 800286e:	f44f 7126 	mov.w	r1, #664	; 0x298
 8002872:	48a0      	ldr	r0, [pc, #640]	; (8002af4 <HAL_SPI_TransmitReceive+0x34c>)
 8002874:	f001 f8b6 	bl	80039e4 <assert_failed>
 8002878:	e7b3      	b.n	80027e2 <HAL_SPI_TransmitReceive+0x3a>
      SPI_RESET_CRC(hspi);
 800287a:	6822      	ldr	r2, [r4, #0]
 800287c:	6813      	ldr	r3, [r2, #0]
 800287e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002882:	6013      	str	r3, [r2, #0]
 8002884:	6822      	ldr	r2, [r4, #0]
 8002886:	6813      	ldr	r3, [r2, #0]
 8002888:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800288c:	6013      	str	r3, [r2, #0]
 800288e:	e7c7      	b.n	8002820 <HAL_SPI_TransmitReceive+0x78>
      if((hspi->Init.Mode == SPI_MODE_SLAVE) || ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->TxXferCount == 0x01)))
 8002890:	6863      	ldr	r3, [r4, #4]
 8002892:	b12b      	cbz	r3, 80028a0 <HAL_SPI_TransmitReceive+0xf8>
 8002894:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002898:	d10c      	bne.n	80028b4 <HAL_SPI_TransmitReceive+0x10c>
 800289a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800289c:	2b01      	cmp	r3, #1
 800289e:	d109      	bne.n	80028b4 <HAL_SPI_TransmitReceive+0x10c>
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 80028a0:	6823      	ldr	r3, [r4, #0]
 80028a2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80028a4:	8812      	ldrh	r2, [r2, #0]
 80028a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr+=2;
 80028a8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80028aa:	3302      	adds	r3, #2
 80028ac:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80028ae:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80028b0:	3b01      	subs	r3, #1
 80028b2:	86e3      	strh	r3, [r4, #54]	; 0x36
      if(hspi->TxXferCount == 0)
 80028b4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80028b6:	b123      	cbz	r3, 80028c2 <HAL_SPI_TransmitReceive+0x11a>
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80028b8:	2500      	movs	r5, #0
 80028ba:	2702      	movs	r7, #2
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 80028bc:	f04f 0801 	mov.w	r8, #1
 80028c0:	e032      	b.n	8002928 <HAL_SPI_TransmitReceive+0x180>
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80028c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80028c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028c8:	d013      	beq.n	80028f2 <HAL_SPI_TransmitReceive+0x14a>
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 80028ca:	4633      	mov	r3, r6
 80028cc:	2200      	movs	r2, #0
 80028ce:	2101      	movs	r1, #1
 80028d0:	4620      	mov	r0, r4
 80028d2:	f7ff fe47 	bl	8002564 <SPI_WaitOnFlagUntilTimeout>
 80028d6:	2800      	cmp	r0, #0
 80028d8:	f040 8114 	bne.w	8002b04 <HAL_SPI_TransmitReceive+0x35c>
        *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80028dc:	6823      	ldr	r3, [r4, #0]
 80028de:	68da      	ldr	r2, [r3, #12]
 80028e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80028e2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr+=2;
 80028e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80028e6:	3302      	adds	r3, #2
 80028e8:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80028ea:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80028ec:	3b01      	subs	r3, #1
 80028ee:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80028f0:	e064      	b.n	80029bc <HAL_SPI_TransmitReceive+0x214>
          hspi->Instance->CR1 |= SPI_CR1_CRCNEXT;
 80028f2:	6822      	ldr	r2, [r4, #0]
 80028f4:	6813      	ldr	r3, [r2, #0]
 80028f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80028fa:	6013      	str	r3, [r2, #0]
 80028fc:	e7e5      	b.n	80028ca <HAL_SPI_TransmitReceive+0x122>
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 80028fe:	4633      	mov	r3, r6
 8002900:	462a      	mov	r2, r5
 8002902:	4641      	mov	r1, r8
 8002904:	4620      	mov	r0, r4
 8002906:	f7ff fe2d 	bl	8002564 <SPI_WaitOnFlagUntilTimeout>
 800290a:	2800      	cmp	r0, #0
 800290c:	f040 80fe 	bne.w	8002b0c <HAL_SPI_TransmitReceive+0x364>
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002910:	6823      	ldr	r3, [r4, #0]
 8002912:	68da      	ldr	r2, [r3, #12]
 8002914:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002916:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr+=2;
 8002918:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800291a:	3302      	adds	r3, #2
 800291c:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->RxXferCount--;
 800291e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002920:	3b01      	subs	r3, #1
 8002922:	87e3      	strh	r3, [r4, #62]	; 0x3e
        while(hspi->TxXferCount > 0)
 8002924:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002926:	b1fb      	cbz	r3, 8002968 <HAL_SPI_TransmitReceive+0x1c0>
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8002928:	4633      	mov	r3, r6
 800292a:	462a      	mov	r2, r5
 800292c:	4639      	mov	r1, r7
 800292e:	4620      	mov	r0, r4
 8002930:	f7ff fe18 	bl	8002564 <SPI_WaitOnFlagUntilTimeout>
 8002934:	2800      	cmp	r0, #0
 8002936:	f040 80e7 	bne.w	8002b08 <HAL_SPI_TransmitReceive+0x360>
          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 800293a:	6823      	ldr	r3, [r4, #0]
 800293c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800293e:	8812      	ldrh	r2, [r2, #0]
 8002940:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr+=2;
 8002942:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002944:	3302      	adds	r3, #2
 8002946:	6323      	str	r3, [r4, #48]	; 0x30
          hspi->TxXferCount--;
 8002948:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800294a:	3b01      	subs	r3, #1
 800294c:	b29b      	uxth	r3, r3
 800294e:	86e3      	strh	r3, [r4, #54]	; 0x36
          if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8002950:	2b00      	cmp	r3, #0
 8002952:	d1d4      	bne.n	80028fe <HAL_SPI_TransmitReceive+0x156>
 8002954:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002956:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800295a:	d1d0      	bne.n	80028fe <HAL_SPI_TransmitReceive+0x156>
            hspi->Instance->CR1 |= SPI_CR1_CRCNEXT;
 800295c:	6822      	ldr	r2, [r4, #0]
 800295e:	6813      	ldr	r3, [r2, #0]
 8002960:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002964:	6013      	str	r3, [r2, #0]
 8002966:	e7ca      	b.n	80028fe <HAL_SPI_TransmitReceive+0x156>
        if(hspi->Init.Mode == SPI_MODE_SLAVE)
 8002968:	6863      	ldr	r3, [r4, #4]
 800296a:	bb3b      	cbnz	r3, 80029bc <HAL_SPI_TransmitReceive+0x214>
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 800296c:	4633      	mov	r3, r6
 800296e:	2200      	movs	r2, #0
 8002970:	2101      	movs	r1, #1
 8002972:	4620      	mov	r0, r4
 8002974:	f7ff fdf6 	bl	8002564 <SPI_WaitOnFlagUntilTimeout>
 8002978:	2800      	cmp	r0, #0
 800297a:	f040 80c9 	bne.w	8002b10 <HAL_SPI_TransmitReceive+0x368>
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800297e:	6823      	ldr	r3, [r4, #0]
 8002980:	68da      	ldr	r2, [r3, #12]
 8002982:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002984:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr+=2;
 8002986:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002988:	3302      	adds	r3, #2
 800298a:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->RxXferCount--;
 800298c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800298e:	3b01      	subs	r3, #1
 8002990:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8002992:	e013      	b.n	80029bc <HAL_SPI_TransmitReceive+0x214>
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002994:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002996:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800299a:	d039      	beq.n	8002a10 <HAL_SPI_TransmitReceive+0x268>
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 800299c:	4633      	mov	r3, r6
 800299e:	2200      	movs	r2, #0
 80029a0:	2101      	movs	r1, #1
 80029a2:	4620      	mov	r0, r4
 80029a4:	f7ff fdde 	bl	8002564 <SPI_WaitOnFlagUntilTimeout>
 80029a8:	2800      	cmp	r0, #0
 80029aa:	f040 80b3 	bne.w	8002b14 <HAL_SPI_TransmitReceive+0x36c>
        (*hspi->pRxBuffPtr) = hspi->Instance->DR;
 80029ae:	6823      	ldr	r3, [r4, #0]
 80029b0:	68da      	ldr	r2, [r3, #12]
 80029b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80029b4:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 80029b6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80029b8:	3b01      	subs	r3, #1
 80029ba:	87e3      	strh	r3, [r4, #62]	; 0x3e
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80029bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80029be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029c2:	d071      	beq.n	8002aa8 <HAL_SPI_TransmitReceive+0x300>
    if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_BSY, SET, Timeout) != HAL_OK)
 80029c4:	4633      	mov	r3, r6
 80029c6:	2201      	movs	r2, #1
 80029c8:	2180      	movs	r1, #128	; 0x80
 80029ca:	4620      	mov	r0, r4
 80029cc:	f7ff fdca 	bl	8002564 <SPI_WaitOnFlagUntilTimeout>
 80029d0:	2800      	cmp	r0, #0
 80029d2:	d17e      	bne.n	8002ad2 <HAL_SPI_TransmitReceive+0x32a>
    hspi->State = HAL_SPI_STATE_READY;
 80029d4:	2301      	movs	r3, #1
 80029d6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    tmp = __HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR);
 80029da:	6823      	ldr	r3, [r4, #0]
 80029dc:	6899      	ldr	r1, [r3, #8]
    if((hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) && (tmp != RESET))
 80029de:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80029e0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80029e4:	d17b      	bne.n	8002ade <HAL_SPI_TransmitReceive+0x336>
 80029e6:	f011 0f10 	tst.w	r1, #16
 80029ea:	d078      	beq.n	8002ade <HAL_SPI_TransmitReceive+0x336>
      hspi->ErrorCode |= HAL_SPI_ERROR_CRC;
 80029ec:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80029ee:	f042 0202 	orr.w	r2, r2, #2
 80029f2:	6562      	str	r2, [r4, #84]	; 0x54
        SPI_RESET_CRC(hspi);
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029fa:	601a      	str	r2, [r3, #0]
 80029fc:	6822      	ldr	r2, [r4, #0]
 80029fe:	6813      	ldr	r3, [r2, #0]
 8002a00:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002a04:	6013      	str	r3, [r2, #0]
      __HAL_UNLOCK(hspi);
 8002a06:	2300      	movs	r3, #0
 8002a08:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      return HAL_ERROR; 
 8002a0c:	2001      	movs	r0, #1
 8002a0e:	e06b      	b.n	8002ae8 <HAL_SPI_TransmitReceive+0x340>
          hspi->Instance->CR1 |= SPI_CR1_CRCNEXT;
 8002a10:	6822      	ldr	r2, [r4, #0]
 8002a12:	6813      	ldr	r3, [r2, #0]
 8002a14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a18:	6013      	str	r3, [r2, #0]
 8002a1a:	e7bf      	b.n	800299c <HAL_SPI_TransmitReceive+0x1f4>
            if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8002a1c:	4633      	mov	r3, r6
 8002a1e:	462a      	mov	r2, r5
 8002a20:	4641      	mov	r1, r8
 8002a22:	4620      	mov	r0, r4
 8002a24:	f7ff fd9e 	bl	8002564 <SPI_WaitOnFlagUntilTimeout>
 8002a28:	2800      	cmp	r0, #0
 8002a2a:	d177      	bne.n	8002b1c <HAL_SPI_TransmitReceive+0x374>
            (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 8002a2c:	6823      	ldr	r3, [r4, #0]
 8002a2e:	68da      	ldr	r2, [r3, #12]
 8002a30:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002a32:	1c59      	adds	r1, r3, #1
 8002a34:	63a1      	str	r1, [r4, #56]	; 0x38
 8002a36:	701a      	strb	r2, [r3, #0]
            hspi->RxXferCount--;
 8002a38:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        while(hspi->TxXferCount > 0)
 8002a3e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002a40:	b1eb      	cbz	r3, 8002a7e <HAL_SPI_TransmitReceive+0x2d6>
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8002a42:	4633      	mov	r3, r6
 8002a44:	462a      	mov	r2, r5
 8002a46:	4639      	mov	r1, r7
 8002a48:	4620      	mov	r0, r4
 8002a4a:	f7ff fd8b 	bl	8002564 <SPI_WaitOnFlagUntilTimeout>
 8002a4e:	2800      	cmp	r0, #0
 8002a50:	d162      	bne.n	8002b18 <HAL_SPI_TransmitReceive+0x370>
          hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 8002a52:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002a54:	1c5a      	adds	r2, r3, #1
 8002a56:	6322      	str	r2, [r4, #48]	; 0x30
 8002a58:	6822      	ldr	r2, [r4, #0]
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	60d3      	str	r3, [r2, #12]
          hspi->TxXferCount--;
 8002a5e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002a60:	3b01      	subs	r3, #1
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	86e3      	strh	r3, [r4, #54]	; 0x36
          if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1d8      	bne.n	8002a1c <HAL_SPI_TransmitReceive+0x274>
 8002a6a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002a6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a70:	d1d4      	bne.n	8002a1c <HAL_SPI_TransmitReceive+0x274>
            hspi->Instance->CR1 |= SPI_CR1_CRCNEXT;
 8002a72:	6822      	ldr	r2, [r4, #0]
 8002a74:	6813      	ldr	r3, [r2, #0]
 8002a76:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a7a:	6013      	str	r3, [r2, #0]
 8002a7c:	e7ce      	b.n	8002a1c <HAL_SPI_TransmitReceive+0x274>
        if(hspi->Init.Mode == SPI_MODE_SLAVE)
 8002a7e:	6863      	ldr	r3, [r4, #4]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d19b      	bne.n	80029bc <HAL_SPI_TransmitReceive+0x214>
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8002a84:	4633      	mov	r3, r6
 8002a86:	2200      	movs	r2, #0
 8002a88:	2101      	movs	r1, #1
 8002a8a:	4620      	mov	r0, r4
 8002a8c:	f7ff fd6a 	bl	8002564 <SPI_WaitOnFlagUntilTimeout>
 8002a90:	2800      	cmp	r0, #0
 8002a92:	d145      	bne.n	8002b20 <HAL_SPI_TransmitReceive+0x378>
          (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 8002a94:	6823      	ldr	r3, [r4, #0]
 8002a96:	68da      	ldr	r2, [r3, #12]
 8002a98:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002a9a:	1c59      	adds	r1, r3, #1
 8002a9c:	63a1      	str	r1, [r4, #56]	; 0x38
 8002a9e:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 8002aa0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8002aa6:	e789      	b.n	80029bc <HAL_SPI_TransmitReceive+0x214>
      if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8002aa8:	4633      	mov	r3, r6
 8002aaa:	2200      	movs	r2, #0
 8002aac:	2101      	movs	r1, #1
 8002aae:	4620      	mov	r0, r4
 8002ab0:	f7ff fd58 	bl	8002564 <SPI_WaitOnFlagUntilTimeout>
 8002ab4:	b938      	cbnz	r0, 8002ac6 <HAL_SPI_TransmitReceive+0x31e>
      tmpreg = hspi->Instance->DR;
 8002ab6:	6823      	ldr	r3, [r4, #0]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	f8ad 3006 	strh.w	r3, [sp, #6]
      UNUSED(tmpreg);
 8002ac0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8002ac4:	e77e      	b.n	80029c4 <HAL_SPI_TransmitReceive+0x21c>
        hspi->ErrorCode |= HAL_SPI_ERROR_CRC;
 8002ac6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002ac8:	f043 0302 	orr.w	r3, r3, #2
 8002acc:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8002ace:	2003      	movs	r0, #3
 8002ad0:	e00a      	b.n	8002ae8 <HAL_SPI_TransmitReceive+0x340>
      hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
 8002ad2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002ad4:	f043 0320 	orr.w	r3, r3, #32
 8002ad8:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8002ada:	2003      	movs	r0, #3
 8002adc:	e004      	b.n	8002ae8 <HAL_SPI_TransmitReceive+0x340>
    __HAL_UNLOCK(hspi);
 8002ade:	2300      	movs	r3, #0
 8002ae0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    return HAL_OK;
 8002ae4:	e000      	b.n	8002ae8 <HAL_SPI_TransmitReceive+0x340>
    return HAL_BUSY;
 8002ae6:	2002      	movs	r0, #2
}
 8002ae8:	b002      	add	sp, #8
 8002aea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8002aee:	2001      	movs	r0, #1
 8002af0:	e7fa      	b.n	8002ae8 <HAL_SPI_TransmitReceive+0x340>
 8002af2:	bf00      	nop
 8002af4:	080043a8 	.word	0x080043a8
 8002af8:	2001      	movs	r0, #1
 8002afa:	e7f5      	b.n	8002ae8 <HAL_SPI_TransmitReceive+0x340>
 8002afc:	2001      	movs	r0, #1
 8002afe:	e7f3      	b.n	8002ae8 <HAL_SPI_TransmitReceive+0x340>
    __HAL_LOCK(hspi);
 8002b00:	2002      	movs	r0, #2
 8002b02:	e7f1      	b.n	8002ae8 <HAL_SPI_TransmitReceive+0x340>
          return HAL_TIMEOUT;
 8002b04:	2003      	movs	r0, #3
 8002b06:	e7ef      	b.n	8002ae8 <HAL_SPI_TransmitReceive+0x340>
            return HAL_TIMEOUT;
 8002b08:	2003      	movs	r0, #3
 8002b0a:	e7ed      	b.n	8002ae8 <HAL_SPI_TransmitReceive+0x340>
            return HAL_TIMEOUT;
 8002b0c:	2003      	movs	r0, #3
 8002b0e:	e7eb      	b.n	8002ae8 <HAL_SPI_TransmitReceive+0x340>
            return HAL_TIMEOUT;
 8002b10:	2003      	movs	r0, #3
 8002b12:	e7e9      	b.n	8002ae8 <HAL_SPI_TransmitReceive+0x340>
          return HAL_TIMEOUT;
 8002b14:	2003      	movs	r0, #3
 8002b16:	e7e7      	b.n	8002ae8 <HAL_SPI_TransmitReceive+0x340>
            return HAL_TIMEOUT;
 8002b18:	2003      	movs	r0, #3
 8002b1a:	e7e5      	b.n	8002ae8 <HAL_SPI_TransmitReceive+0x340>
              return HAL_TIMEOUT;
 8002b1c:	2003      	movs	r0, #3
 8002b1e:	e7e3      	b.n	8002ae8 <HAL_SPI_TransmitReceive+0x340>
            return HAL_TIMEOUT;
 8002b20:	2003      	movs	r0, #3
 8002b22:	e7e1      	b.n	8002ae8 <HAL_SPI_TransmitReceive+0x340>

08002b24 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b26:	4604      	mov	r4, r0
  uint32_t tmpreg = 0x00;
  
  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));  
 8002b28:	6842      	ldr	r2, [r0, #4]
 8002b2a:	4b94      	ldr	r3, [pc, #592]	; (8002d7c <UART_SetConfig+0x258>)
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d878      	bhi.n	8002c22 <UART_SetConfig+0xfe>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8002b30:	68e3      	ldr	r3, [r4, #12]
 8002b32:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 8002b36:	d004      	beq.n	8002b42 <UART_SetConfig+0x1e>
 8002b38:	f240 7137 	movw	r1, #1847	; 0x737
 8002b3c:	4890      	ldr	r0, [pc, #576]	; (8002d80 <UART_SetConfig+0x25c>)
 8002b3e:	f000 ff51 	bl	80039e4 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8002b42:	6923      	ldr	r3, [r4, #16]
 8002b44:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 8002b48:	d002      	beq.n	8002b50 <UART_SetConfig+0x2c>
 8002b4a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002b4e:	d16e      	bne.n	8002c2e <UART_SetConfig+0x10a>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8002b50:	6963      	ldr	r3, [r4, #20]
 8002b52:	f64f 72f3 	movw	r2, #65523	; 0xfff3
 8002b56:	4213      	tst	r3, r2
 8002b58:	d100      	bne.n	8002b5c <UART_SetConfig+0x38>
 8002b5a:	b923      	cbnz	r3, 8002b66 <UART_SetConfig+0x42>
 8002b5c:	f240 7139 	movw	r1, #1849	; 0x739
 8002b60:	4887      	ldr	r0, [pc, #540]	; (8002d80 <UART_SetConfig+0x25c>)
 8002b62:	f000 ff3f 	bl	80039e4 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8002b66:	6822      	ldr	r2, [r4, #0]
 8002b68:	6913      	ldr	r3, [r2, #16]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8002b6a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8002b6e:	68e1      	ldr	r1, [r4, #12]
 8002b70:	430b      	orrs	r3, r1
  
  /* Write to USART CR2 */
  huart->Instance->CR2 = (uint32_t)tmpreg;
 8002b72:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8002b74:	6821      	ldr	r1, [r4, #0]
 8002b76:	68ca      	ldr	r2, [r1, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8002b78:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
 8002b7c:	f022 020c 	bic.w	r2, r2, #12
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b80:	68a3      	ldr	r3, [r4, #8]
 8002b82:	6920      	ldr	r0, [r4, #16]
 8002b84:	4303      	orrs	r3, r0
 8002b86:	6960      	ldr	r0, [r4, #20]
 8002b88:	4303      	orrs	r3, r0
 8002b8a:	69e0      	ldr	r0, [r4, #28]
 8002b8c:	4303      	orrs	r3, r0
 8002b8e:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  huart->Instance->CR1 = (uint32_t)tmpreg;
 8002b90:	60cb      	str	r3, [r1, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8002b92:	6822      	ldr	r2, [r4, #0]
 8002b94:	6953      	ldr	r3, [r2, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8002b96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8002b9a:	69a1      	ldr	r1, [r4, #24]
 8002b9c:	430b      	orrs	r3, r1
  
  /* Write to USART CR3 */
  huart->Instance->CR3 = (uint32_t)tmpreg;
 8002b9e:	6153      	str	r3, [r2, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ba0:	69e3      	ldr	r3, [r4, #28]
 8002ba2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ba6:	d048      	beq.n	8002c3a <UART_SetConfig+0x116>
    }
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ba8:	6823      	ldr	r3, [r4, #0]
 8002baa:	4a76      	ldr	r2, [pc, #472]	; (8002d84 <UART_SetConfig+0x260>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	f000 80b2 	beq.w	8002d16 <UART_SetConfig+0x1f2>
 8002bb2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	f000 80ad 	beq.w	8002d16 <UART_SetConfig+0x1f2>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002bbc:	f7ff fca6 	bl	800250c <HAL_RCC_GetPCLK1Freq>
 8002bc0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002bc4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002bc8:	6863      	ldr	r3, [r4, #4]
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bd0:	4f6d      	ldr	r7, [pc, #436]	; (8002d88 <UART_SetConfig+0x264>)
 8002bd2:	fba7 2303 	umull	r2, r3, r7, r3
 8002bd6:	095b      	lsrs	r3, r3, #5
 8002bd8:	011e      	lsls	r6, r3, #4
 8002bda:	f7ff fc97 	bl	800250c <HAL_RCC_GetPCLK1Freq>
 8002bde:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002be2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002be6:	6865      	ldr	r5, [r4, #4]
 8002be8:	00ad      	lsls	r5, r5, #2
 8002bea:	fbb0 f5f5 	udiv	r5, r0, r5
 8002bee:	f7ff fc8d 	bl	800250c <HAL_RCC_GetPCLK1Freq>
 8002bf2:	6822      	ldr	r2, [r4, #0]
 8002bf4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002bf8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002bfc:	6863      	ldr	r3, [r4, #4]
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c04:	fba7 1303 	umull	r1, r3, r7, r3
 8002c08:	095b      	lsrs	r3, r3, #5
 8002c0a:	2164      	movs	r1, #100	; 0x64
 8002c0c:	fb01 5313 	mls	r3, r1, r3, r5
 8002c10:	011b      	lsls	r3, r3, #4
 8002c12:	3332      	adds	r3, #50	; 0x32
 8002c14:	fba7 1303 	umull	r1, r3, r7, r3
 8002c18:	f3c3 1343 	ubfx	r3, r3, #5, #4
 8002c1c:	4333      	orrs	r3, r6
 8002c1e:	6093      	str	r3, [r2, #8]
    }
  }
}
 8002c20:	e0ab      	b.n	8002d7a <UART_SetConfig+0x256>
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));  
 8002c22:	f240 7136 	movw	r1, #1846	; 0x736
 8002c26:	4856      	ldr	r0, [pc, #344]	; (8002d80 <UART_SetConfig+0x25c>)
 8002c28:	f000 fedc 	bl	80039e4 <assert_failed>
 8002c2c:	e780      	b.n	8002b30 <UART_SetConfig+0xc>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8002c2e:	f44f 61e7 	mov.w	r1, #1848	; 0x738
 8002c32:	4853      	ldr	r0, [pc, #332]	; (8002d80 <UART_SetConfig+0x25c>)
 8002c34:	f000 fed6 	bl	80039e4 <assert_failed>
 8002c38:	e78a      	b.n	8002b50 <UART_SetConfig+0x2c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c3a:	6823      	ldr	r3, [r4, #0]
 8002c3c:	4a51      	ldr	r2, [pc, #324]	; (8002d84 <UART_SetConfig+0x260>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d036      	beq.n	8002cb0 <UART_SetConfig+0x18c>
 8002c42:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d032      	beq.n	8002cb0 <UART_SetConfig+0x18c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002c4a:	f7ff fc5f 	bl	800250c <HAL_RCC_GetPCLK1Freq>
 8002c4e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002c52:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002c56:	6863      	ldr	r3, [r4, #4]
 8002c58:	005b      	lsls	r3, r3, #1
 8002c5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c5e:	4f4a      	ldr	r7, [pc, #296]	; (8002d88 <UART_SetConfig+0x264>)
 8002c60:	fba7 2303 	umull	r2, r3, r7, r3
 8002c64:	095b      	lsrs	r3, r3, #5
 8002c66:	011e      	lsls	r6, r3, #4
 8002c68:	f7ff fc50 	bl	800250c <HAL_RCC_GetPCLK1Freq>
 8002c6c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002c70:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002c74:	6865      	ldr	r5, [r4, #4]
 8002c76:	006d      	lsls	r5, r5, #1
 8002c78:	fbb0 f5f5 	udiv	r5, r0, r5
 8002c7c:	f7ff fc46 	bl	800250c <HAL_RCC_GetPCLK1Freq>
 8002c80:	6822      	ldr	r2, [r4, #0]
 8002c82:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002c86:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002c8a:	6863      	ldr	r3, [r4, #4]
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c92:	fba7 1303 	umull	r1, r3, r7, r3
 8002c96:	095b      	lsrs	r3, r3, #5
 8002c98:	2164      	movs	r1, #100	; 0x64
 8002c9a:	fb01 5313 	mls	r3, r1, r3, r5
 8002c9e:	011b      	lsls	r3, r3, #4
 8002ca0:	3332      	adds	r3, #50	; 0x32
 8002ca2:	fba7 1303 	umull	r1, r3, r7, r3
 8002ca6:	f3c3 1343 	ubfx	r3, r3, #5, #4
 8002caa:	4333      	orrs	r3, r6
 8002cac:	6093      	str	r3, [r2, #8]
 8002cae:	e064      	b.n	8002d7a <UART_SetConfig+0x256>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002cb0:	f7ff fc42 	bl	8002538 <HAL_RCC_GetPCLK2Freq>
 8002cb4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002cb8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002cbc:	6863      	ldr	r3, [r4, #4]
 8002cbe:	005b      	lsls	r3, r3, #1
 8002cc0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cc4:	4f30      	ldr	r7, [pc, #192]	; (8002d88 <UART_SetConfig+0x264>)
 8002cc6:	fba7 2303 	umull	r2, r3, r7, r3
 8002cca:	095b      	lsrs	r3, r3, #5
 8002ccc:	011e      	lsls	r6, r3, #4
 8002cce:	f7ff fc33 	bl	8002538 <HAL_RCC_GetPCLK2Freq>
 8002cd2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002cd6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002cda:	6865      	ldr	r5, [r4, #4]
 8002cdc:	006d      	lsls	r5, r5, #1
 8002cde:	fbb0 f5f5 	udiv	r5, r0, r5
 8002ce2:	f7ff fc29 	bl	8002538 <HAL_RCC_GetPCLK2Freq>
 8002ce6:	6822      	ldr	r2, [r4, #0]
 8002ce8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002cec:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002cf0:	6863      	ldr	r3, [r4, #4]
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cf8:	fba7 1303 	umull	r1, r3, r7, r3
 8002cfc:	095b      	lsrs	r3, r3, #5
 8002cfe:	2164      	movs	r1, #100	; 0x64
 8002d00:	fb01 5313 	mls	r3, r1, r3, r5
 8002d04:	011b      	lsls	r3, r3, #4
 8002d06:	3332      	adds	r3, #50	; 0x32
 8002d08:	fba7 1303 	umull	r1, r3, r7, r3
 8002d0c:	f3c3 1343 	ubfx	r3, r3, #5, #4
 8002d10:	4333      	orrs	r3, r6
 8002d12:	6093      	str	r3, [r2, #8]
 8002d14:	e031      	b.n	8002d7a <UART_SetConfig+0x256>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002d16:	f7ff fc0f 	bl	8002538 <HAL_RCC_GetPCLK2Freq>
 8002d1a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002d1e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002d22:	6863      	ldr	r3, [r4, #4]
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d2a:	4f17      	ldr	r7, [pc, #92]	; (8002d88 <UART_SetConfig+0x264>)
 8002d2c:	fba7 2303 	umull	r2, r3, r7, r3
 8002d30:	095b      	lsrs	r3, r3, #5
 8002d32:	011e      	lsls	r6, r3, #4
 8002d34:	f7ff fc00 	bl	8002538 <HAL_RCC_GetPCLK2Freq>
 8002d38:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002d3c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002d40:	6865      	ldr	r5, [r4, #4]
 8002d42:	00ad      	lsls	r5, r5, #2
 8002d44:	fbb0 f5f5 	udiv	r5, r0, r5
 8002d48:	f7ff fbf6 	bl	8002538 <HAL_RCC_GetPCLK2Freq>
 8002d4c:	6822      	ldr	r2, [r4, #0]
 8002d4e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002d52:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002d56:	6863      	ldr	r3, [r4, #4]
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d5e:	fba7 1303 	umull	r1, r3, r7, r3
 8002d62:	095b      	lsrs	r3, r3, #5
 8002d64:	2164      	movs	r1, #100	; 0x64
 8002d66:	fb01 5313 	mls	r3, r1, r3, r5
 8002d6a:	011b      	lsls	r3, r3, #4
 8002d6c:	3332      	adds	r3, #50	; 0x32
 8002d6e:	fba7 1303 	umull	r1, r3, r7, r3
 8002d72:	f3c3 1343 	ubfx	r3, r3, #5, #4
 8002d76:	4333      	orrs	r3, r6
 8002d78:	6093      	str	r3, [r2, #8]
}
 8002d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d7c:	00a037a0 	.word	0x00a037a0
 8002d80:	08004430 	.word	0x08004430
 8002d84:	40011000 	.word	0x40011000
 8002d88:	51eb851f 	.word	0x51eb851f

08002d8c <UART_WaitOnFlagUntilTimeout>:
{
 8002d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d90:	4606      	mov	r6, r0
 8002d92:	460d      	mov	r5, r1
 8002d94:	4690      	mov	r8, r2
 8002d96:	461c      	mov	r4, r3
  tickstart = HAL_GetTick();
 8002d98:	f7fe fd60 	bl	800185c <HAL_GetTick>
 8002d9c:	4607      	mov	r7, r0
  if(Status == RESET)
 8002d9e:	f1b8 0f00 	cmp.w	r8, #0
 8002da2:	d029      	beq.n	8002df8 <UART_WaitOnFlagUntilTimeout+0x6c>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 8002da4:	6832      	ldr	r2, [r6, #0]
 8002da6:	6813      	ldr	r3, [r2, #0]
 8002da8:	ea35 0303 	bics.w	r3, r5, r3
 8002dac:	d151      	bne.n	8002e52 <UART_WaitOnFlagUntilTimeout+0xc6>
      if(Timeout != HAL_MAX_DELAY)
 8002dae:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002db2:	d0f8      	beq.n	8002da6 <UART_WaitOnFlagUntilTimeout+0x1a>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8002db4:	b124      	cbz	r4, 8002dc0 <UART_WaitOnFlagUntilTimeout+0x34>
 8002db6:	f7fe fd51 	bl	800185c <HAL_GetTick>
 8002dba:	1bc0      	subs	r0, r0, r7
 8002dbc:	42a0      	cmp	r0, r4
 8002dbe:	d9f1      	bls.n	8002da4 <UART_WaitOnFlagUntilTimeout+0x18>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002dc0:	6832      	ldr	r2, [r6, #0]
 8002dc2:	68d3      	ldr	r3, [r2, #12]
 8002dc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dc8:	60d3      	str	r3, [r2, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002dca:	6832      	ldr	r2, [r6, #0]
 8002dcc:	68d3      	ldr	r3, [r2, #12]
 8002dce:	f023 0320 	bic.w	r3, r3, #32
 8002dd2:	60d3      	str	r3, [r2, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002dd4:	6832      	ldr	r2, [r6, #0]
 8002dd6:	68d3      	ldr	r3, [r2, #12]
 8002dd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ddc:	60d3      	str	r3, [r2, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002dde:	6832      	ldr	r2, [r6, #0]
 8002de0:	6953      	ldr	r3, [r2, #20]
 8002de2:	f023 0301 	bic.w	r3, r3, #1
 8002de6:	6153      	str	r3, [r2, #20]
          huart->State= HAL_UART_STATE_READY;
 8002de8:	2301      	movs	r3, #1
 8002dea:	f886 3039 	strb.w	r3, [r6, #57]	; 0x39
          __HAL_UNLOCK(huart);
 8002dee:	2300      	movs	r3, #0
 8002df0:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38
          return HAL_TIMEOUT;
 8002df4:	2003      	movs	r0, #3
 8002df6:	e02a      	b.n	8002e4e <UART_WaitOnFlagUntilTimeout+0xc2>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8002df8:	6831      	ldr	r1, [r6, #0]
 8002dfa:	680b      	ldr	r3, [r1, #0]
 8002dfc:	ea35 0303 	bics.w	r3, r5, r3
 8002e00:	d024      	beq.n	8002e4c <UART_WaitOnFlagUntilTimeout+0xc0>
      if(Timeout != HAL_MAX_DELAY)
 8002e02:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002e06:	d0f8      	beq.n	8002dfa <UART_WaitOnFlagUntilTimeout+0x6e>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8002e08:	b124      	cbz	r4, 8002e14 <UART_WaitOnFlagUntilTimeout+0x88>
 8002e0a:	f7fe fd27 	bl	800185c <HAL_GetTick>
 8002e0e:	1bc0      	subs	r0, r0, r7
 8002e10:	42a0      	cmp	r0, r4
 8002e12:	d9f1      	bls.n	8002df8 <UART_WaitOnFlagUntilTimeout+0x6c>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002e14:	6832      	ldr	r2, [r6, #0]
 8002e16:	68d3      	ldr	r3, [r2, #12]
 8002e18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e1c:	60d3      	str	r3, [r2, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002e1e:	6832      	ldr	r2, [r6, #0]
 8002e20:	68d3      	ldr	r3, [r2, #12]
 8002e22:	f023 0320 	bic.w	r3, r3, #32
 8002e26:	60d3      	str	r3, [r2, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002e28:	6832      	ldr	r2, [r6, #0]
 8002e2a:	68d3      	ldr	r3, [r2, #12]
 8002e2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e30:	60d3      	str	r3, [r2, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002e32:	6832      	ldr	r2, [r6, #0]
 8002e34:	6953      	ldr	r3, [r2, #20]
 8002e36:	f023 0301 	bic.w	r3, r3, #1
 8002e3a:	6153      	str	r3, [r2, #20]
          huart->State= HAL_UART_STATE_READY;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	f886 3039 	strb.w	r3, [r6, #57]	; 0x39
          __HAL_UNLOCK(huart);
 8002e42:	2300      	movs	r3, #0
 8002e44:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38
          return HAL_TIMEOUT;
 8002e48:	2003      	movs	r0, #3
 8002e4a:	e000      	b.n	8002e4e <UART_WaitOnFlagUntilTimeout+0xc2>
  return HAL_OK;
 8002e4c:	4640      	mov	r0, r8
}
 8002e4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 8002e52:	2000      	movs	r0, #0
 8002e54:	e7fb      	b.n	8002e4e <UART_WaitOnFlagUntilTimeout+0xc2>
	...

08002e58 <HAL_UART_Init>:
  if(huart == NULL)
 8002e58:	2800      	cmp	r0, #0
 8002e5a:	d072      	beq.n	8002f42 <HAL_UART_Init+0xea>
{
 8002e5c:	b510      	push	{r4, lr}
 8002e5e:	4604      	mov	r4, r0
  if(huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8002e60:	6983      	ldr	r3, [r0, #24]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d055      	beq.n	8002f12 <HAL_UART_Init+0xba>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8002e66:	6802      	ldr	r2, [r0, #0]
 8002e68:	4937      	ldr	r1, [pc, #220]	; (8002f48 <HAL_UART_Init+0xf0>)
 8002e6a:	428a      	cmp	r2, r1
 8002e6c:	d044      	beq.n	8002ef8 <HAL_UART_Init+0xa0>
 8002e6e:	f5a1 414c 	sub.w	r1, r1, #52224	; 0xcc00
 8002e72:	428a      	cmp	r2, r1
 8002e74:	d040      	beq.n	8002ef8 <HAL_UART_Init+0xa0>
 8002e76:	f501 4150 	add.w	r1, r1, #53248	; 0xd000
 8002e7a:	428a      	cmp	r2, r1
 8002e7c:	d03c      	beq.n	8002ef8 <HAL_UART_Init+0xa0>
 8002e7e:	21fc      	movs	r1, #252	; 0xfc
 8002e80:	4832      	ldr	r0, [pc, #200]	; (8002f4c <HAL_UART_Init+0xf4>)
 8002e82:	f000 fdaf 	bl	80039e4 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8002e86:	69a3      	ldr	r3, [r4, #24]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d135      	bne.n	8002ef8 <HAL_UART_Init+0xa0>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8002e8c:	68a3      	ldr	r3, [r4, #8]
 8002e8e:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 8002e92:	d004      	beq.n	8002e9e <HAL_UART_Init+0x46>
 8002e94:	f240 1103 	movw	r1, #259	; 0x103
 8002e98:	482c      	ldr	r0, [pc, #176]	; (8002f4c <HAL_UART_Init+0xf4>)
 8002e9a:	f000 fda3 	bl	80039e4 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8002e9e:	69e3      	ldr	r3, [r4, #28]
 8002ea0:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 8002ea4:	d004      	beq.n	8002eb0 <HAL_UART_Init+0x58>
 8002ea6:	f44f 7182 	mov.w	r1, #260	; 0x104
 8002eaa:	4828      	ldr	r0, [pc, #160]	; (8002f4c <HAL_UART_Init+0xf4>)
 8002eac:	f000 fd9a 	bl	80039e4 <assert_failed>
  if(huart->State == HAL_UART_STATE_RESET)
 8002eb0:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d03e      	beq.n	8002f36 <HAL_UART_Init+0xde>
  huart->State = HAL_UART_STATE_BUSY;
 8002eb8:	2302      	movs	r3, #2
 8002eba:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002ebe:	6822      	ldr	r2, [r4, #0]
 8002ec0:	68d3      	ldr	r3, [r2, #12]
 8002ec2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ec6:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002ec8:	4620      	mov	r0, r4
 8002eca:	f7ff fe2b 	bl	8002b24 <UART_SetConfig>
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8002ece:	6822      	ldr	r2, [r4, #0]
 8002ed0:	6913      	ldr	r3, [r2, #16]
 8002ed2:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002ed6:	6113      	str	r3, [r2, #16]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8002ed8:	6822      	ldr	r2, [r4, #0]
 8002eda:	6953      	ldr	r3, [r2, #20]
 8002edc:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002ee0:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8002ee2:	6822      	ldr	r2, [r4, #0]
 8002ee4:	68d3      	ldr	r3, [r2, #12]
 8002ee6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002eea:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eec:	2000      	movs	r0, #0
 8002eee:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->State= HAL_UART_STATE_READY;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 8002ef6:	bd10      	pop	{r4, pc}
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8002ef8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002efc:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8002f00:	d0c4      	beq.n	8002e8c <HAL_UART_Init+0x34>
 8002f02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f06:	d0c1      	beq.n	8002e8c <HAL_UART_Init+0x34>
 8002f08:	21fd      	movs	r1, #253	; 0xfd
 8002f0a:	4810      	ldr	r0, [pc, #64]	; (8002f4c <HAL_UART_Init+0xf4>)
 8002f0c:	f000 fd6a 	bl	80039e4 <assert_failed>
 8002f10:	e7bc      	b.n	8002e8c <HAL_UART_Init+0x34>
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8002f12:	6803      	ldr	r3, [r0, #0]
 8002f14:	4a0c      	ldr	r2, [pc, #48]	; (8002f48 <HAL_UART_Init+0xf0>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d0b8      	beq.n	8002e8c <HAL_UART_Init+0x34>
 8002f1a:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d0b4      	beq.n	8002e8c <HAL_UART_Init+0x34>
 8002f22:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d0b0      	beq.n	8002e8c <HAL_UART_Init+0x34>
 8002f2a:	f240 1101 	movw	r1, #257	; 0x101
 8002f2e:	4807      	ldr	r0, [pc, #28]	; (8002f4c <HAL_UART_Init+0xf4>)
 8002f30:	f000 fd58 	bl	80039e4 <assert_failed>
 8002f34:	e7aa      	b.n	8002e8c <HAL_UART_Init+0x34>
    huart->Lock = HAL_UNLOCKED;
 8002f36:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002f3a:	4620      	mov	r0, r4
 8002f3c:	f000 fdd2 	bl	8003ae4 <HAL_UART_MspInit>
 8002f40:	e7ba      	b.n	8002eb8 <HAL_UART_Init+0x60>
    return HAL_ERROR;
 8002f42:	2001      	movs	r0, #1
}
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	40011000 	.word	0x40011000
 8002f4c:	08004430 	.word	0x08004430

08002f50 <HAL_UART_Transmit>:
{
 8002f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f54:	4604      	mov	r4, r0
 8002f56:	4688      	mov	r8, r1
 8002f58:	461d      	mov	r5, r3
  tmp1 = huart->State;
 8002f5a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002f5e:	b2db      	uxtb	r3, r3
  if((tmp1 == HAL_UART_STATE_READY) || (tmp1 == HAL_UART_STATE_BUSY_RX))
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d001      	beq.n	8002f68 <HAL_UART_Transmit+0x18>
 8002f64:	2b22      	cmp	r3, #34	; 0x22
 8002f66:	d15b      	bne.n	8003020 <HAL_UART_Transmit+0xd0>
    if((pData == NULL ) || (Size == 0)) 
 8002f68:	f1b8 0f00 	cmp.w	r8, #0
 8002f6c:	d05b      	beq.n	8003026 <HAL_UART_Transmit+0xd6>
 8002f6e:	2a00      	cmp	r2, #0
 8002f70:	d05b      	beq.n	800302a <HAL_UART_Transmit+0xda>
    __HAL_LOCK(huart);
 8002f72:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d059      	beq.n	800302e <HAL_UART_Transmit+0xde>
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f80:	2300      	movs	r3, #0
 8002f82:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 8002f84:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b22      	cmp	r3, #34	; 0x22
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8002f8c:	bf0c      	ite	eq
 8002f8e:	2332      	moveq	r3, #50	; 0x32
      huart->State = HAL_UART_STATE_BUSY_TX;
 8002f90:	2312      	movne	r3, #18
 8002f92:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    huart->TxXferSize = Size;
 8002f96:	84a2      	strh	r2, [r4, #36]	; 0x24
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8002f98:	2700      	movs	r7, #0
 8002f9a:	2680      	movs	r6, #128	; 0x80
 8002f9c:	e01d      	b.n	8002fda <HAL_UART_Transmit+0x8a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8002f9e:	462b      	mov	r3, r5
 8002fa0:	463a      	mov	r2, r7
 8002fa2:	4631      	mov	r1, r6
 8002fa4:	4620      	mov	r0, r4
 8002fa6:	f7ff fef1 	bl	8002d8c <UART_WaitOnFlagUntilTimeout>
 8002faa:	2800      	cmp	r0, #0
 8002fac:	d141      	bne.n	8003032 <HAL_UART_Transmit+0xe2>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002fae:	6822      	ldr	r2, [r4, #0]
 8002fb0:	f8b8 3000 	ldrh.w	r3, [r8]
 8002fb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fb8:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8002fba:	6923      	ldr	r3, [r4, #16]
 8002fbc:	b913      	cbnz	r3, 8002fc4 <HAL_UART_Transmit+0x74>
          pData +=2;
 8002fbe:	f108 0802 	add.w	r8, r8, #2
 8002fc2:	e008      	b.n	8002fd6 <HAL_UART_Transmit+0x86>
          pData +=1;
 8002fc4:	f108 0801 	add.w	r8, r8, #1
 8002fc8:	e005      	b.n	8002fd6 <HAL_UART_Transmit+0x86>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002fca:	4641      	mov	r1, r8
 8002fcc:	6823      	ldr	r3, [r4, #0]
 8002fce:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002fd2:	605a      	str	r2, [r3, #4]
 8002fd4:	4688      	mov	r8, r1
    while(huart->TxXferCount > 0)
 8002fd6:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8002fd8:	b17a      	cbz	r2, 8002ffa <HAL_UART_Transmit+0xaa>
      huart->TxXferCount--;
 8002fda:	3a01      	subs	r2, #1
 8002fdc:	84e2      	strh	r2, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002fde:	68a2      	ldr	r2, [r4, #8]
 8002fe0:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002fe4:	d0db      	beq.n	8002f9e <HAL_UART_Transmit+0x4e>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8002fe6:	462b      	mov	r3, r5
 8002fe8:	463a      	mov	r2, r7
 8002fea:	4631      	mov	r1, r6
 8002fec:	4620      	mov	r0, r4
 8002fee:	f7ff fecd 	bl	8002d8c <UART_WaitOnFlagUntilTimeout>
 8002ff2:	2800      	cmp	r0, #0
 8002ff4:	d0e9      	beq.n	8002fca <HAL_UART_Transmit+0x7a>
          return HAL_TIMEOUT;
 8002ff6:	2003      	movs	r0, #3
 8002ff8:	e013      	b.n	8003022 <HAL_UART_Transmit+0xd2>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 8002ffa:	462b      	mov	r3, r5
 8002ffc:	2140      	movs	r1, #64	; 0x40
 8002ffe:	4620      	mov	r0, r4
 8003000:	f7ff fec4 	bl	8002d8c <UART_WaitOnFlagUntilTimeout>
 8003004:	b9b8      	cbnz	r0, 8003036 <HAL_UART_Transmit+0xe6>
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8003006:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 800300a:	b2db      	uxtb	r3, r3
 800300c:	2b32      	cmp	r3, #50	; 0x32
      huart->State = HAL_UART_STATE_BUSY_RX;
 800300e:	bf0c      	ite	eq
 8003010:	2322      	moveq	r3, #34	; 0x22
      huart->State = HAL_UART_STATE_READY;
 8003012:	2301      	movne	r3, #1
 8003014:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8003018:	2300      	movs	r3, #0
 800301a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    return HAL_OK;
 800301e:	e000      	b.n	8003022 <HAL_UART_Transmit+0xd2>
    return HAL_BUSY;   
 8003020:	2002      	movs	r0, #2
}
 8003022:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8003026:	2001      	movs	r0, #1
 8003028:	e7fb      	b.n	8003022 <HAL_UART_Transmit+0xd2>
 800302a:	2001      	movs	r0, #1
 800302c:	e7f9      	b.n	8003022 <HAL_UART_Transmit+0xd2>
    __HAL_LOCK(huart);
 800302e:	2002      	movs	r0, #2
 8003030:	e7f7      	b.n	8003022 <HAL_UART_Transmit+0xd2>
          return HAL_TIMEOUT;
 8003032:	2003      	movs	r0, #3
 8003034:	e7f5      	b.n	8003022 <HAL_UART_Transmit+0xd2>
      return HAL_TIMEOUT;
 8003036:	2003      	movs	r0, #3
 8003038:	e7f3      	b.n	8003022 <HAL_UART_Transmit+0xd2>

0800303a <HAL_UART_TxCpltCallback>:
}
 800303a:	4770      	bx	lr

0800303c <HAL_UART_RxCpltCallback>:
}
 800303c:	4770      	bx	lr

0800303e <HAL_UART_ErrorCallback>:
}
 800303e:	4770      	bx	lr

08003040 <HAL_UART_IRQHandler>:
{
 8003040:	b510      	push	{r4, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	4604      	mov	r4, r0
  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
 8003046:	6803      	ldr	r3, [r0, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE);  
 800304a:	68d9      	ldr	r1, [r3, #12]
  if((tmp1 != RESET) && (tmp2 != RESET))
 800304c:	f012 0f01 	tst.w	r2, #1
 8003050:	d00b      	beq.n	800306a <HAL_UART_IRQHandler+0x2a>
 8003052:	f411 7f80 	tst.w	r1, #256	; 0x100
 8003056:	d008      	beq.n	800306a <HAL_UART_IRQHandler+0x2a>
    __HAL_UART_CLEAR_PEFLAG(huart);
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	9200      	str	r2, [sp, #0]
 800305c:	685a      	ldr	r2, [r3, #4]
 800305e:	9200      	str	r2, [sp, #0]
 8003060:	9a00      	ldr	r2, [sp, #0]
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003062:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8003064:	f042 0201 	orr.w	r2, r2, #1
 8003068:	63c2      	str	r2, [r0, #60]	; 0x3c
  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_FE);
 800306a:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 800306c:	6959      	ldr	r1, [r3, #20]
  if((tmp1 != RESET) && (tmp2 != RESET))
 800306e:	f012 0f02 	tst.w	r2, #2
 8003072:	d00b      	beq.n	800308c <HAL_UART_IRQHandler+0x4c>
 8003074:	f011 0f01 	tst.w	r1, #1
 8003078:	d008      	beq.n	800308c <HAL_UART_IRQHandler+0x4c>
    __HAL_UART_CLEAR_FEFLAG(huart);
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	9201      	str	r2, [sp, #4]
 800307e:	685a      	ldr	r2, [r3, #4]
 8003080:	9201      	str	r2, [sp, #4]
 8003082:	9a01      	ldr	r2, [sp, #4]
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003084:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003086:	f042 0204 	orr.w	r2, r2, #4
 800308a:	63e2      	str	r2, [r4, #60]	; 0x3c
  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_NE);
 800308c:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 800308e:	6959      	ldr	r1, [r3, #20]
  if((tmp1 != RESET) && (tmp2 != RESET))
 8003090:	f012 0f04 	tst.w	r2, #4
 8003094:	d00b      	beq.n	80030ae <HAL_UART_IRQHandler+0x6e>
 8003096:	f011 0f01 	tst.w	r1, #1
 800309a:	d008      	beq.n	80030ae <HAL_UART_IRQHandler+0x6e>
    __HAL_UART_CLEAR_NEFLAG(huart);
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	9202      	str	r2, [sp, #8]
 80030a0:	685a      	ldr	r2, [r3, #4]
 80030a2:	9202      	str	r2, [sp, #8]
 80030a4:	9a02      	ldr	r2, [sp, #8]
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 80030a6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80030a8:	f042 0202 	orr.w	r2, r2, #2
 80030ac:	63e2      	str	r2, [r4, #60]	; 0x3c
  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_ORE);
 80030ae:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 80030b0:	6959      	ldr	r1, [r3, #20]
  if((tmp1 != RESET) && (tmp2 != RESET))
 80030b2:	f012 0f08 	tst.w	r2, #8
 80030b6:	d00b      	beq.n	80030d0 <HAL_UART_IRQHandler+0x90>
 80030b8:	f011 0f01 	tst.w	r1, #1
 80030bc:	d008      	beq.n	80030d0 <HAL_UART_IRQHandler+0x90>
    __HAL_UART_CLEAR_OREFLAG(huart);
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	9203      	str	r2, [sp, #12]
 80030c2:	685a      	ldr	r2, [r3, #4]
 80030c4:	9203      	str	r2, [sp, #12]
 80030c6:	9a03      	ldr	r2, [sp, #12]
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80030c8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80030ca:	f042 0208 	orr.w	r2, r2, #8
 80030ce:	63e2      	str	r2, [r4, #60]	; 0x3c
  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE);
 80030d0:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE);
 80030d2:	68d9      	ldr	r1, [r3, #12]
  if((tmp1 != RESET) && (tmp2 != RESET))
 80030d4:	f012 0f20 	tst.w	r2, #32
 80030d8:	d002      	beq.n	80030e0 <HAL_UART_IRQHandler+0xa0>
 80030da:	f011 0f20 	tst.w	r1, #32
 80030de:	d118      	bne.n	8003112 <HAL_UART_IRQHandler+0xd2>
  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_TXE);
 80030e0:	6823      	ldr	r3, [r4, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE);
 80030e4:	68d9      	ldr	r1, [r3, #12]
  if((tmp1 != RESET) && (tmp2 != RESET))
 80030e6:	f012 0f80 	tst.w	r2, #128	; 0x80
 80030ea:	d002      	beq.n	80030f2 <HAL_UART_IRQHandler+0xb2>
 80030ec:	f011 0f80 	tst.w	r1, #128	; 0x80
 80030f0:	d160      	bne.n	80031b4 <HAL_UART_IRQHandler+0x174>
  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_TC);
 80030f2:	6823      	ldr	r3, [r4, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC);
 80030f6:	68d9      	ldr	r1, [r3, #12]
  if((tmp1 != RESET) && (tmp2 != RESET))
 80030f8:	f012 0f40 	tst.w	r2, #64	; 0x40
 80030fc:	d003      	beq.n	8003106 <HAL_UART_IRQHandler+0xc6>
 80030fe:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003102:	f040 8086 	bne.w	8003212 <HAL_UART_IRQHandler+0x1d2>
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003106:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003108:	2b00      	cmp	r3, #0
 800310a:	f040 80a0 	bne.w	800324e <HAL_UART_IRQHandler+0x20e>
}
 800310e:	b004      	add	sp, #16
 8003110:	bd10      	pop	{r4, pc}
  tmp1 = huart->State; 
 8003112:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
  if((tmp1 == HAL_UART_STATE_BUSY_RX) || (tmp1 == HAL_UART_STATE_BUSY_TX_RX))
 8003116:	f002 02ef 	and.w	r2, r2, #239	; 0xef
 800311a:	2a22      	cmp	r2, #34	; 0x22
 800311c:	d1e0      	bne.n	80030e0 <HAL_UART_IRQHandler+0xa0>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800311e:	68a2      	ldr	r2, [r4, #8]
 8003120:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8003124:	d028      	beq.n	8003178 <HAL_UART_IRQHandler+0x138>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8003126:	6922      	ldr	r2, [r4, #16]
 8003128:	2a00      	cmp	r2, #0
 800312a:	d137      	bne.n	800319c <HAL_UART_IRQHandler+0x15c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800312c:	685a      	ldr	r2, [r3, #4]
 800312e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003130:	1c59      	adds	r1, r3, #1
 8003132:	62a1      	str	r1, [r4, #40]	; 0x28
 8003134:	701a      	strb	r2, [r3, #0]
    if(--huart->RxXferCount == 0)
 8003136:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8003138:	3b01      	subs	r3, #1
 800313a:	b29b      	uxth	r3, r3
 800313c:	85e3      	strh	r3, [r4, #46]	; 0x2e
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1ce      	bne.n	80030e0 <HAL_UART_IRQHandler+0xa0>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003142:	6822      	ldr	r2, [r4, #0]
 8003144:	68d3      	ldr	r3, [r2, #12]
 8003146:	f023 0320 	bic.w	r3, r3, #32
 800314a:	60d3      	str	r3, [r2, #12]
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 800314c:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8003150:	b2db      	uxtb	r3, r3
 8003152:	2b32      	cmp	r3, #50	; 0x32
 8003154:	d02a      	beq.n	80031ac <HAL_UART_IRQHandler+0x16c>
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003156:	6822      	ldr	r2, [r4, #0]
 8003158:	68d3      	ldr	r3, [r2, #12]
 800315a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800315e:	60d3      	str	r3, [r2, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003160:	6822      	ldr	r2, [r4, #0]
 8003162:	6953      	ldr	r3, [r2, #20]
 8003164:	f023 0301 	bic.w	r3, r3, #1
 8003168:	6153      	str	r3, [r2, #20]
        huart->State = HAL_UART_STATE_READY;
 800316a:	2301      	movs	r3, #1
 800316c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      HAL_UART_RxCpltCallback(huart);
 8003170:	4620      	mov	r0, r4
 8003172:	f7ff ff63 	bl	800303c <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8003176:	e7b3      	b.n	80030e0 <HAL_UART_IRQHandler+0xa0>
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8003178:	6aa1      	ldr	r1, [r4, #40]	; 0x28
      if(huart->Init.Parity == UART_PARITY_NONE)
 800317a:	6922      	ldr	r2, [r4, #16]
 800317c:	b93a      	cbnz	r2, 800318e <HAL_UART_IRQHandler+0x14e>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003184:	800b      	strh	r3, [r1, #0]
        huart->pRxBuffPtr += 2;
 8003186:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003188:	3302      	adds	r3, #2
 800318a:	62a3      	str	r3, [r4, #40]	; 0x28
 800318c:	e7d3      	b.n	8003136 <HAL_UART_IRQHandler+0xf6>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	b2db      	uxtb	r3, r3
 8003192:	800b      	strh	r3, [r1, #0]
        huart->pRxBuffPtr += 1;
 8003194:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003196:	3301      	adds	r3, #1
 8003198:	62a3      	str	r3, [r4, #40]	; 0x28
 800319a:	e7cc      	b.n	8003136 <HAL_UART_IRQHandler+0xf6>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80031a0:	1c51      	adds	r1, r2, #1
 80031a2:	62a1      	str	r1, [r4, #40]	; 0x28
 80031a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031a8:	7013      	strb	r3, [r2, #0]
 80031aa:	e7c4      	b.n	8003136 <HAL_UART_IRQHandler+0xf6>
        huart->State = HAL_UART_STATE_BUSY_TX;
 80031ac:	2312      	movs	r3, #18
 80031ae:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 80031b2:	e7dd      	b.n	8003170 <HAL_UART_IRQHandler+0x130>
  tmp1 = huart->State;
 80031b4:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
  if((tmp1 == HAL_UART_STATE_BUSY_TX) || (tmp1 == HAL_UART_STATE_BUSY_TX_RX))
 80031b8:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80031bc:	2a12      	cmp	r2, #18
 80031be:	d198      	bne.n	80030f2 <HAL_UART_IRQHandler+0xb2>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80031c0:	68a2      	ldr	r2, [r4, #8]
 80031c2:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80031c6:	d015      	beq.n	80031f4 <HAL_UART_IRQHandler+0x1b4>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80031c8:	6a22      	ldr	r2, [r4, #32]
 80031ca:	1c51      	adds	r1, r2, #1
 80031cc:	6221      	str	r1, [r4, #32]
 80031ce:	7812      	ldrb	r2, [r2, #0]
 80031d0:	605a      	str	r2, [r3, #4]
    if(--huart->TxXferCount == 0)
 80031d2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80031d4:	3b01      	subs	r3, #1
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	84e3      	strh	r3, [r4, #38]	; 0x26
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d189      	bne.n	80030f2 <HAL_UART_IRQHandler+0xb2>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80031de:	6822      	ldr	r2, [r4, #0]
 80031e0:	68d3      	ldr	r3, [r2, #12]
 80031e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031e6:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80031e8:	6822      	ldr	r2, [r4, #0]
 80031ea:	68d3      	ldr	r3, [r2, #12]
 80031ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031f0:	60d3      	str	r3, [r2, #12]
 80031f2:	e77e      	b.n	80030f2 <HAL_UART_IRQHandler+0xb2>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80031f4:	6a22      	ldr	r2, [r4, #32]
 80031f6:	8812      	ldrh	r2, [r2, #0]
 80031f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031fc:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80031fe:	6923      	ldr	r3, [r4, #16]
 8003200:	b91b      	cbnz	r3, 800320a <HAL_UART_IRQHandler+0x1ca>
        huart->pTxBuffPtr += 2;
 8003202:	6a23      	ldr	r3, [r4, #32]
 8003204:	3302      	adds	r3, #2
 8003206:	6223      	str	r3, [r4, #32]
 8003208:	e7e3      	b.n	80031d2 <HAL_UART_IRQHandler+0x192>
        huart->pTxBuffPtr += 1;
 800320a:	6a23      	ldr	r3, [r4, #32]
 800320c:	3301      	adds	r3, #1
 800320e:	6223      	str	r3, [r4, #32]
 8003210:	e7df      	b.n	80031d2 <HAL_UART_IRQHandler+0x192>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003212:	68da      	ldr	r2, [r3, #12]
 8003214:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003218:	60da      	str	r2, [r3, #12]
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 800321a:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 800321e:	b2db      	uxtb	r3, r3
 8003220:	2b32      	cmp	r3, #50	; 0x32
 8003222:	d010      	beq.n	8003246 <HAL_UART_IRQHandler+0x206>
    __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003224:	6822      	ldr	r2, [r4, #0]
 8003226:	68d3      	ldr	r3, [r2, #12]
 8003228:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800322c:	60d3      	str	r3, [r2, #12]
    __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800322e:	6822      	ldr	r2, [r4, #0]
 8003230:	6953      	ldr	r3, [r2, #20]
 8003232:	f023 0301 	bic.w	r3, r3, #1
 8003236:	6153      	str	r3, [r2, #20]
    huart->State = HAL_UART_STATE_READY;
 8003238:	2301      	movs	r3, #1
 800323a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 800323e:	4620      	mov	r0, r4
 8003240:	f7ff fefb 	bl	800303a <HAL_UART_TxCpltCallback>
  return HAL_OK;
 8003244:	e75f      	b.n	8003106 <HAL_UART_IRQHandler+0xc6>
    huart->State = HAL_UART_STATE_BUSY_RX;
 8003246:	2322      	movs	r3, #34	; 0x22
 8003248:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 800324c:	e7f7      	b.n	800323e <HAL_UART_IRQHandler+0x1fe>
    huart->State = HAL_UART_STATE_READY;
 800324e:	2301      	movs	r3, #1
 8003250:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    HAL_UART_ErrorCallback(huart);
 8003254:	4620      	mov	r0, r4
 8003256:	f7ff fef2 	bl	800303e <HAL_UART_ErrorCallback>
}
 800325a:	e758      	b.n	800310e <HAL_UART_IRQHandler+0xce>

0800325c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800325c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003294 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003260:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003262:	e003      	b.n	800326c <LoopCopyDataInit>

08003264 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003264:	4b0c      	ldr	r3, [pc, #48]	; (8003298 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003266:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003268:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800326a:	3104      	adds	r1, #4

0800326c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800326c:	480b      	ldr	r0, [pc, #44]	; (800329c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800326e:	4b0c      	ldr	r3, [pc, #48]	; (80032a0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003270:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003272:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003274:	d3f6      	bcc.n	8003264 <CopyDataInit>
  ldr  r2, =_sbss
 8003276:	4a0b      	ldr	r2, [pc, #44]	; (80032a4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003278:	e002      	b.n	8003280 <LoopFillZerobss>

0800327a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800327a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800327c:	f842 3b04 	str.w	r3, [r2], #4

08003280 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003280:	4b09      	ldr	r3, [pc, #36]	; (80032a8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003282:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003284:	d3f9      	bcc.n	800327a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003286:	f7fe fa8d 	bl	80017a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800328a:	f000 fc97 	bl	8003bbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800328e:	f000 fb9d 	bl	80039cc <main>
  bx  lr    
 8003292:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003294:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8003298:	08004938 	.word	0x08004938
  ldr  r0, =_sdata
 800329c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80032a0:	20000368 	.word	0x20000368
  ldr  r2, =_sbss
 80032a4:	20000368 	.word	0x20000368
  ldr  r3, = _ebss
 80032a8:	200005dc 	.word	0x200005dc

080032ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032ac:	e7fe      	b.n	80032ac <ADC_IRQHandler>
	...

080032b0 <MicrosteppingMotor_Example_01>:
  *			at the same time.
  */

StepperMotorBoardHandle_t *StepperMotorBoardHandle;
void MicrosteppingMotor_Example_01(void)
{
 80032b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032b4:	b083      	sub	sp, #12
  
  //StepperMotorBoardHandle_t *StepperMotorBoardHandle;
  MotorParameterData_t *MotorParameterDataGlobal, *MotorParameterDataSingle;
  
  #ifdef NUCLEO_USE_USART
  USART_Transmit(&huart2, (uint8_t *)"Initial values for registers:\r\n");
 80032b6:	4cb6      	ldr	r4, [pc, #728]	; (8003590 <MicrosteppingMotor_Example_01+0x2e0>)
 80032b8:	49b6      	ldr	r1, [pc, #728]	; (8003594 <MicrosteppingMotor_Example_01+0x2e4>)
 80032ba:	4620      	mov	r0, r4
 80032bc:	f000 fa0e 	bl	80036dc <USART_Transmit>
  USART_PrintAllRegisterValues();
 80032c0:	f000 fb2e 	bl	8003920 <USART_PrintAllRegisterValues>
  #endif

  /* Setup each X-NUCLEO-IHM02A1 Expansion Board ******************************/
  
  /* Get the parameters for the motor connected with the 1st stepper motor driver of the 1st stepper motor expansion board */
  MotorParameterDataGlobal = GetMotorParameterInitData();
 80032c4:	f000 fb90 	bl	80039e8 <GetMotorParameterInitData>
 80032c8:	4605      	mov	r5, r0
 80032ca:	9000      	str	r0, [sp, #0]
  
  for (id = 0; id < EXPBRD_MOUNTED_NR; id++)
  {
    StepperMotorBoardHandle = BSP_GetExpansionBoardHandle(EXPBRD_ID(id));
 80032cc:	2000      	movs	r0, #0
 80032ce:	f7fe f93c 	bl	800154a <EXPBRD_ID>
 80032d2:	f7fe f95d 	bl	8001590 <BSP_GetExpansionBoardHandle>
 80032d6:	4ab0      	ldr	r2, [pc, #704]	; (8003598 <MicrosteppingMotor_Example_01+0x2e8>)
 80032d8:	6010      	str	r0, [r2, #0]
    MotorParameterDataSingle = MotorParameterDataGlobal+(id*L6470DAISYCHAINSIZE);
    StepperMotorBoardHandle->Config(MotorParameterDataSingle);
 80032da:	6843      	ldr	r3, [r0, #4]
 80032dc:	4628      	mov	r0, r5
 80032de:	4798      	blx	r3
  }
  
  #ifdef NUCLEO_USE_USART
  USART_Transmit(&huart2, (uint8_t *)"Custom values for registers:\r\n");
 80032e0:	49ae      	ldr	r1, [pc, #696]	; (800359c <MicrosteppingMotor_Example_01+0x2ec>)
 80032e2:	4620      	mov	r0, r4
 80032e4:	f000 f9fa 	bl	80036dc <USART_Transmit>
  USART_PrintAllRegisterValues();
 80032e8:	f000 fb1a 	bl	8003920 <USART_PrintAllRegisterValues>
  #endif
  
  /****************************************************************************/
  
  MovementPerRevolution = MPR_1;
  for (board = EXPBRD_ID(0); board <= EXPBRD_ID(EXPBRD_MOUNTED_NR-1); board++)
 80032ec:	2000      	movs	r0, #0
 80032ee:	f7fe f92c 	bl	800154a <EXPBRD_ID>
 80032f2:	4606      	mov	r6, r0
  {
    StepperMotorBoardHandle = BSP_GetExpansionBoardHandle(board);
 80032f4:	4fa8      	ldr	r7, [pc, #672]	; (8003598 <MicrosteppingMotor_Example_01+0x2e8>)
  for (board = EXPBRD_ID(0); board <= EXPBRD_ID(EXPBRD_MOUNTED_NR-1); board++)
 80032f6:	e044      	b.n	8003382 <MicrosteppingMotor_Example_01+0xd2>
  * @note   There is not OVF control.
  */
uint32_t usrPow(uint8_t base, uint8_t exponent)
{
  uint8_t i;
  uint32_t power = 1;
 80032f8:	2201      	movs	r2, #1
 80032fa:	e01d      	b.n	8003338 <MicrosteppingMotor_Example_01+0x88>
    for (device = L6470_ID(0); device <= L6470_ID(L6470DAISYCHAINSIZE-1); device++)
 80032fc:	3401      	adds	r4, #1
 80032fe:	b2e4      	uxtb	r4, r4
 8003300:	4628      	mov	r0, r5
 8003302:	f7fd fadd 	bl	80008c0 <L6470_ID>
 8003306:	42a0      	cmp	r0, r4
 8003308:	d339      	bcc.n	800337e <MicrosteppingMotor_Example_01+0xce>
      MotorParameterDataSingle = MotorParameterDataGlobal+((board*L6470DAISYCHAINSIZE)+device);
 800330a:	9b01      	ldr	r3, [sp, #4]
 800330c:	18e3      	adds	r3, r4, r3
 800330e:	2258      	movs	r2, #88	; 0x58
 8003310:	9900      	ldr	r1, [sp, #0]
 8003312:	fb02 1303 	mla	r3, r2, r3, r1
      Step = ((uint32_t)MotorParameterDataSingle->fullstepsperrevolution * usrPow(2, MotorParameterDataSingle->step_sel)) / MovementPerRevolution;
 8003316:	edd3 7a01 	vldr	s15, [r3, #4]
 800331a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800331e:	ee17 9a90 	vmov	r9, s15
 8003322:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
  
  for (i=0; i<exponent; i++)
 8003326:	2800      	cmp	r0, #0
 8003328:	d0e6      	beq.n	80032f8 <MicrosteppingMotor_Example_01+0x48>
 800332a:	2300      	movs	r3, #0
  uint32_t power = 1;
 800332c:	2201      	movs	r2, #1
    power *= base;
 800332e:	0052      	lsls	r2, r2, #1
  for (i=0; i<exponent; i++)
 8003330:	3301      	adds	r3, #1
 8003332:	b2d9      	uxtb	r1, r3
 8003334:	4281      	cmp	r1, r0
 8003336:	d3fa      	bcc.n	800332e <MicrosteppingMotor_Example_01+0x7e>
      Step = ((uint32_t)MotorParameterDataSingle->fullstepsperrevolution * usrPow(2, MotorParameterDataSingle->step_sel)) / MovementPerRevolution;
 8003338:	fb02 f209 	mul.w	r2, r2, r9
 800333c:	ea4f 0992 	mov.w	r9, r2, lsr #2
 8003340:	f04f 0804 	mov.w	r8, #4
        HAL_Delay(DELAY_1);
 8003344:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
        StepperMotorBoardHandle->Command->Move(board, device, L6470_DIR_FWD_ID, Step);
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f8d3 a010 	ldr.w	sl, [r3, #16]
 8003350:	464b      	mov	r3, r9
 8003352:	462a      	mov	r2, r5
 8003354:	4621      	mov	r1, r4
 8003356:	4630      	mov	r0, r6
 8003358:	47d0      	blx	sl
        while(StepperMotorBoardHandle->Command->CheckStatusRegisterFlag(board, device, BUSY_ID) == 0);
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003360:	462a      	mov	r2, r5
 8003362:	4621      	mov	r1, r4
 8003364:	4630      	mov	r0, r6
 8003366:	4798      	blx	r3
 8003368:	2800      	cmp	r0, #0
 800336a:	d0f6      	beq.n	800335a <MicrosteppingMotor_Example_01+0xaa>
        HAL_Delay(DELAY_1);
 800336c:	4658      	mov	r0, fp
 800336e:	f7fe fa7b 	bl	8001868 <HAL_Delay>
      for (i=0; i<MovementPerRevolution; i++)
 8003372:	f108 38ff 	add.w	r8, r8, #4294967295
 8003376:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
 800337a:	d1e5      	bne.n	8003348 <MicrosteppingMotor_Example_01+0x98>
 800337c:	e7be      	b.n	80032fc <MicrosteppingMotor_Example_01+0x4c>
  for (board = EXPBRD_ID(0); board <= EXPBRD_ID(EXPBRD_MOUNTED_NR-1); board++)
 800337e:	3601      	adds	r6, #1
 8003380:	b2f6      	uxtb	r6, r6
 8003382:	2000      	movs	r0, #0
 8003384:	f7fe f8e1 	bl	800154a <EXPBRD_ID>
 8003388:	42b0      	cmp	r0, r6
 800338a:	d30b      	bcc.n	80033a4 <MicrosteppingMotor_Example_01+0xf4>
    StepperMotorBoardHandle = BSP_GetExpansionBoardHandle(board);
 800338c:	4630      	mov	r0, r6
 800338e:	f7fe f8ff 	bl	8001590 <BSP_GetExpansionBoardHandle>
 8003392:	6038      	str	r0, [r7, #0]
    for (device = L6470_ID(0); device <= L6470_ID(L6470DAISYCHAINSIZE-1); device++)
 8003394:	2000      	movs	r0, #0
 8003396:	f7fd fa93 	bl	80008c0 <L6470_ID>
 800339a:	4604      	mov	r4, r0
      MotorParameterDataSingle = MotorParameterDataGlobal+((board*L6470DAISYCHAINSIZE)+device);
 800339c:	0073      	lsls	r3, r6, #1
 800339e:	9301      	str	r3, [sp, #4]
    for (device = L6470_ID(0); device <= L6470_ID(L6470DAISYCHAINSIZE-1); device++)
 80033a0:	2501      	movs	r5, #1
 80033a2:	e7ad      	b.n	8003300 <MicrosteppingMotor_Example_01+0x50>
  HAL_Delay(DELAY_2);
 80033a4:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80033a8:	f7fe fa5e 	bl	8001868 <HAL_Delay>
  for (board = EXPBRD_ID(0); board <= EXPBRD_ID(EXPBRD_MOUNTED_NR-1); board++)
 80033ac:	2000      	movs	r0, #0
 80033ae:	f7fe f8cc 	bl	800154a <EXPBRD_ID>
 80033b2:	4681      	mov	r9, r0
 80033b4:	f04f 0a00 	mov.w	sl, #0
      StepperMotorBoardHandle->StepperMotorDriverHandle[device]->Command->PrepareRun(device, L6470_DIR_FWD_ID, Speed);
 80033b8:	4e77      	ldr	r6, [pc, #476]	; (8003598 <MicrosteppingMotor_Example_01+0x2e8>)
 80033ba:	f8dd b000 	ldr.w	fp, [sp]
  for (board = EXPBRD_ID(0); board <= EXPBRD_ID(EXPBRD_MOUNTED_NR-1); board++)
 80033be:	e020      	b.n	8003402 <MicrosteppingMotor_Example_01+0x152>
      MotorParameterDataSingle = MotorParameterDataGlobal+((board*L6470DAISYCHAINSIZE)+device);
 80033c0:	eb08 0304 	add.w	r3, r8, r4
      Speed = Step_s_2_Speed(MotorParameterDataSingle->speed);
 80033c4:	fb07 b303 	mla	r3, r7, r3, fp
 80033c8:	ed93 0a04 	vldr	s0, [r3, #16]
 80033cc:	f7fd f92c 	bl	8000628 <Step_s_2_Speed>
 80033d0:	4602      	mov	r2, r0
      StepperMotorBoardHandle->StepperMotorDriverHandle[device]->Command->PrepareRun(device, L6470_DIR_FWD_ID, Speed);
 80033d2:	6833      	ldr	r3, [r6, #0]
 80033d4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033de:	4629      	mov	r1, r5
 80033e0:	4620      	mov	r0, r4
 80033e2:	4798      	blx	r3
    for (device = L6470_ID(0); device <= L6470_ID(L6470DAISYCHAINSIZE-1); device++)
 80033e4:	3401      	adds	r4, #1
 80033e6:	b2e4      	uxtb	r4, r4
 80033e8:	4628      	mov	r0, r5
 80033ea:	f7fd fa69 	bl	80008c0 <L6470_ID>
 80033ee:	42a0      	cmp	r0, r4
 80033f0:	d2e6      	bcs.n	80033c0 <MicrosteppingMotor_Example_01+0x110>
    StepperMotorBoardHandle->Command->PerformPreparedApplicationCommand();
 80033f2:	6833      	ldr	r3, [r6, #0]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033f8:	4798      	blx	r3
  for (board = EXPBRD_ID(0); board <= EXPBRD_ID(EXPBRD_MOUNTED_NR-1); board++)
 80033fa:	f109 0901 	add.w	r9, r9, #1
 80033fe:	fa5f f989 	uxtb.w	r9, r9
 8003402:	4650      	mov	r0, sl
 8003404:	f7fe f8a1 	bl	800154a <EXPBRD_ID>
 8003408:	4548      	cmp	r0, r9
 800340a:	d308      	bcc.n	800341e <MicrosteppingMotor_Example_01+0x16e>
    for (device = L6470_ID(0); device <= L6470_ID(L6470DAISYCHAINSIZE-1); device++)
 800340c:	4650      	mov	r0, sl
 800340e:	f7fd fa57 	bl	80008c0 <L6470_ID>
 8003412:	4604      	mov	r4, r0
      MotorParameterDataSingle = MotorParameterDataGlobal+((board*L6470DAISYCHAINSIZE)+device);
 8003414:	ea4f 0849 	mov.w	r8, r9, lsl #1
    for (device = L6470_ID(0); device <= L6470_ID(L6470DAISYCHAINSIZE-1); device++)
 8003418:	2501      	movs	r5, #1
      Speed = Step_s_2_Speed(MotorParameterDataSingle->speed);
 800341a:	2758      	movs	r7, #88	; 0x58
    for (device = L6470_ID(0); device <= L6470_ID(L6470DAISYCHAINSIZE-1); device++)
 800341c:	e7e4      	b.n	80033e8 <MicrosteppingMotor_Example_01+0x138>
  HAL_Delay(DELAY_3);
 800341e:	f242 7010 	movw	r0, #10000	; 0x2710
 8003422:	f7fe fa21 	bl	8001868 <HAL_Delay>
  for (board = EXPBRD_ID(0); board <= EXPBRD_ID(EXPBRD_MOUNTED_NR-1); board++)
 8003426:	2000      	movs	r0, #0
 8003428:	f7fe f88f 	bl	800154a <EXPBRD_ID>
 800342c:	4607      	mov	r7, r0
 800342e:	f04f 0800 	mov.w	r8, #0
      StepperMotorBoardHandle->StepperMotorDriverHandle[device]->Command->PrepareHardStop(device);
 8003432:	4e59      	ldr	r6, [pc, #356]	; (8003598 <MicrosteppingMotor_Example_01+0x2e8>)
  for (board = EXPBRD_ID(0); board <= EXPBRD_ID(EXPBRD_MOUNTED_NR-1); board++)
 8003434:	e015      	b.n	8003462 <MicrosteppingMotor_Example_01+0x1b2>
      StepperMotorBoardHandle->StepperMotorDriverHandle[device]->Command->PrepareHardStop(device);
 8003436:	6833      	ldr	r3, [r6, #0]
 8003438:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003444:	4620      	mov	r0, r4
 8003446:	4798      	blx	r3
    for (device = L6470_ID(0); device <= L6470_ID(L6470DAISYCHAINSIZE-1); device++)
 8003448:	3401      	adds	r4, #1
 800344a:	b2e4      	uxtb	r4, r4
 800344c:	4628      	mov	r0, r5
 800344e:	f7fd fa37 	bl	80008c0 <L6470_ID>
 8003452:	42a0      	cmp	r0, r4
 8003454:	d2ef      	bcs.n	8003436 <MicrosteppingMotor_Example_01+0x186>
    StepperMotorBoardHandle->Command->PerformPreparedApplicationCommand();
 8003456:	6833      	ldr	r3, [r6, #0]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800345c:	4798      	blx	r3
  for (board = EXPBRD_ID(0); board <= EXPBRD_ID(EXPBRD_MOUNTED_NR-1); board++)
 800345e:	3701      	adds	r7, #1
 8003460:	b2ff      	uxtb	r7, r7
 8003462:	4640      	mov	r0, r8
 8003464:	f7fe f871 	bl	800154a <EXPBRD_ID>
 8003468:	42b8      	cmp	r0, r7
 800346a:	d305      	bcc.n	8003478 <MicrosteppingMotor_Example_01+0x1c8>
    for (device = L6470_ID(0); device <= L6470_ID(L6470DAISYCHAINSIZE-1); device++)
 800346c:	4640      	mov	r0, r8
 800346e:	f7fd fa27 	bl	80008c0 <L6470_ID>
 8003472:	4604      	mov	r4, r0
 8003474:	2501      	movs	r5, #1
 8003476:	e7e9      	b.n	800344c <MicrosteppingMotor_Example_01+0x19c>
  for (board = EXPBRD_ID(0); board <= EXPBRD_ID(EXPBRD_MOUNTED_NR-1); board++)
 8003478:	2000      	movs	r0, #0
 800347a:	f7fe f866 	bl	800154a <EXPBRD_ID>
 800347e:	4606      	mov	r6, r0
    StepperMotorBoardHandle = BSP_GetExpansionBoardHandle(board);
 8003480:	4f45      	ldr	r7, [pc, #276]	; (8003598 <MicrosteppingMotor_Example_01+0x2e8>)
  for (board = EXPBRD_ID(0); board <= EXPBRD_ID(EXPBRD_MOUNTED_NR-1); board++)
 8003482:	e044      	b.n	800350e <MicrosteppingMotor_Example_01+0x25e>
  uint32_t power = 1;
 8003484:	2201      	movs	r2, #1
 8003486:	e01d      	b.n	80034c4 <MicrosteppingMotor_Example_01+0x214>
    for (device = L6470_ID(0); device <= L6470_ID(L6470DAISYCHAINSIZE-1); device++)
 8003488:	3401      	adds	r4, #1
 800348a:	b2e4      	uxtb	r4, r4
 800348c:	4628      	mov	r0, r5
 800348e:	f7fd fa17 	bl	80008c0 <L6470_ID>
 8003492:	42a0      	cmp	r0, r4
 8003494:	d339      	bcc.n	800350a <MicrosteppingMotor_Example_01+0x25a>
      MotorParameterDataSingle = MotorParameterDataGlobal+((board*L6470DAISYCHAINSIZE)+device);
 8003496:	9b01      	ldr	r3, [sp, #4]
 8003498:	18e3      	adds	r3, r4, r3
 800349a:	2258      	movs	r2, #88	; 0x58
 800349c:	9900      	ldr	r1, [sp, #0]
 800349e:	fb02 1303 	mla	r3, r2, r3, r1
      Step = ((uint32_t)MotorParameterDataSingle->fullstepsperrevolution * usrPow(2, MotorParameterDataSingle->step_sel)) / MovementPerRevolution;
 80034a2:	edd3 7a01 	vldr	s15, [r3, #4]
 80034a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034aa:	ee17 aa90 	vmov	sl, s15
 80034ae:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
  for (i=0; i<exponent; i++)
 80034b2:	2800      	cmp	r0, #0
 80034b4:	d0e6      	beq.n	8003484 <MicrosteppingMotor_Example_01+0x1d4>
 80034b6:	2300      	movs	r3, #0
  uint32_t power = 1;
 80034b8:	2201      	movs	r2, #1
    power *= base;
 80034ba:	0052      	lsls	r2, r2, #1
  for (i=0; i<exponent; i++)
 80034bc:	3301      	adds	r3, #1
 80034be:	b2d9      	uxtb	r1, r3
 80034c0:	4288      	cmp	r0, r1
 80034c2:	d8fa      	bhi.n	80034ba <MicrosteppingMotor_Example_01+0x20a>
      Step = ((uint32_t)MotorParameterDataSingle->fullstepsperrevolution * usrPow(2, MotorParameterDataSingle->step_sel)) / MovementPerRevolution;
 80034c4:	fb02 f20a 	mul.w	r2, r2, sl
 80034c8:	ea4f 0ad2 	mov.w	sl, r2, lsr #3
 80034cc:	f04f 0808 	mov.w	r8, #8
        HAL_Delay(DELAY_1);
 80034d0:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
        StepperMotorBoardHandle->Command->Move(board, device, L6470_DIR_FWD_ID, Step);
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f8d3 9010 	ldr.w	r9, [r3, #16]
 80034dc:	4653      	mov	r3, sl
 80034de:	462a      	mov	r2, r5
 80034e0:	4621      	mov	r1, r4
 80034e2:	4630      	mov	r0, r6
 80034e4:	47c8      	blx	r9
        while(StepperMotorBoardHandle->Command->CheckStatusRegisterFlag(board, device, BUSY_ID) == 0);
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034ec:	462a      	mov	r2, r5
 80034ee:	4621      	mov	r1, r4
 80034f0:	4630      	mov	r0, r6
 80034f2:	4798      	blx	r3
 80034f4:	2800      	cmp	r0, #0
 80034f6:	d0f6      	beq.n	80034e6 <MicrosteppingMotor_Example_01+0x236>
        HAL_Delay(DELAY_1);
 80034f8:	4658      	mov	r0, fp
 80034fa:	f7fe f9b5 	bl	8001868 <HAL_Delay>
      for (i=0; i<MovementPerRevolution; i++)
 80034fe:	f108 38ff 	add.w	r8, r8, #4294967295
 8003502:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
 8003506:	d1e5      	bne.n	80034d4 <MicrosteppingMotor_Example_01+0x224>
 8003508:	e7be      	b.n	8003488 <MicrosteppingMotor_Example_01+0x1d8>
  for (board = EXPBRD_ID(0); board <= EXPBRD_ID(EXPBRD_MOUNTED_NR-1); board++)
 800350a:	3601      	adds	r6, #1
 800350c:	b2f6      	uxtb	r6, r6
 800350e:	2000      	movs	r0, #0
 8003510:	f7fe f81b 	bl	800154a <EXPBRD_ID>
 8003514:	42b0      	cmp	r0, r6
 8003516:	d30b      	bcc.n	8003530 <MicrosteppingMotor_Example_01+0x280>
    StepperMotorBoardHandle = BSP_GetExpansionBoardHandle(board);
 8003518:	4630      	mov	r0, r6
 800351a:	f7fe f839 	bl	8001590 <BSP_GetExpansionBoardHandle>
 800351e:	6038      	str	r0, [r7, #0]
    for (device = L6470_ID(0); device <= L6470_ID(L6470DAISYCHAINSIZE-1); device++)
 8003520:	2000      	movs	r0, #0
 8003522:	f7fd f9cd 	bl	80008c0 <L6470_ID>
 8003526:	4604      	mov	r4, r0
      MotorParameterDataSingle = MotorParameterDataGlobal+((board*L6470DAISYCHAINSIZE)+device);
 8003528:	0073      	lsls	r3, r6, #1
 800352a:	9301      	str	r3, [sp, #4]
    for (device = L6470_ID(0); device <= L6470_ID(L6470DAISYCHAINSIZE-1); device++)
 800352c:	2501      	movs	r5, #1
 800352e:	e7ad      	b.n	800348c <MicrosteppingMotor_Example_01+0x1dc>
  for (board = EXPBRD_ID(0); board <= EXPBRD_ID(EXPBRD_MOUNTED_NR-1); board++)
 8003530:	2000      	movs	r0, #0
 8003532:	f7fe f80a 	bl	800154a <EXPBRD_ID>
 8003536:	4607      	mov	r7, r0
 8003538:	f04f 0800 	mov.w	r8, #0
      StepperMotorBoardHandle->StepperMotorDriverHandle[device]->Command->PrepareHardHiZ(device);
 800353c:	4e16      	ldr	r6, [pc, #88]	; (8003598 <MicrosteppingMotor_Example_01+0x2e8>)
  for (board = EXPBRD_ID(0); board <= EXPBRD_ID(EXPBRD_MOUNTED_NR-1); board++)
 800353e:	e015      	b.n	800356c <MicrosteppingMotor_Example_01+0x2bc>
      StepperMotorBoardHandle->StepperMotorDriverHandle[device]->Command->PrepareHardHiZ(device);
 8003540:	6833      	ldr	r3, [r6, #0]
 8003542:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800354e:	4620      	mov	r0, r4
 8003550:	4798      	blx	r3
    for (device = L6470_ID(0); device <= L6470_ID(L6470DAISYCHAINSIZE-1); device++)
 8003552:	3401      	adds	r4, #1
 8003554:	b2e4      	uxtb	r4, r4
 8003556:	4628      	mov	r0, r5
 8003558:	f7fd f9b2 	bl	80008c0 <L6470_ID>
 800355c:	42a0      	cmp	r0, r4
 800355e:	d2ef      	bcs.n	8003540 <MicrosteppingMotor_Example_01+0x290>
    StepperMotorBoardHandle->Command->PerformPreparedApplicationCommand();
 8003560:	6833      	ldr	r3, [r6, #0]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003566:	4798      	blx	r3
  for (board = EXPBRD_ID(0); board <= EXPBRD_ID(EXPBRD_MOUNTED_NR-1); board++)
 8003568:	3701      	adds	r7, #1
 800356a:	b2ff      	uxtb	r7, r7
 800356c:	4640      	mov	r0, r8
 800356e:	f7fd ffec 	bl	800154a <EXPBRD_ID>
 8003572:	42b8      	cmp	r0, r7
 8003574:	d305      	bcc.n	8003582 <MicrosteppingMotor_Example_01+0x2d2>
    for (device = L6470_ID(0); device <= L6470_ID(L6470DAISYCHAINSIZE-1); device++)
 8003576:	4640      	mov	r0, r8
 8003578:	f7fd f9a2 	bl	80008c0 <L6470_ID>
 800357c:	4604      	mov	r4, r0
 800357e:	2501      	movs	r5, #1
 8003580:	e7e9      	b.n	8003556 <MicrosteppingMotor_Example_01+0x2a6>
    BSP_LED_On(LED2);
 8003582:	2000      	movs	r0, #0
 8003584:	f7fd fdb2 	bl	80010ec <BSP_LED_On>
}
 8003588:	b003      	add	sp, #12
 800358a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800358e:	bf00      	nop
 8003590:	200004cc 	.word	0x200004cc
 8003594:	080044b8 	.word	0x080044b8
 8003598:	200004c8 	.word	0x200004c8
 800359c:	080044d8 	.word	0x080044d8

080035a0 <HAL_GPIO_EXTI_Callback>:
  * @retval None
  */

// PA10, PB3, PB5, PA8
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80035a0:	b538      	push	{r3, r4, r5, lr}
  switch (GPIO_Pin)
 80035a2:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80035a6:	d05a      	beq.n	800365e <HAL_GPIO_EXTI_Callback+0xbe>
 80035a8:	d82e      	bhi.n	8003608 <HAL_GPIO_EXTI_Callback+0x68>
 80035aa:	2802      	cmp	r0, #2
 80035ac:	d054      	beq.n	8003658 <HAL_GPIO_EXTI_Callback+0xb8>
 80035ae:	2840      	cmp	r0, #64	; 0x40
 80035b0:	d125      	bne.n	80035fe <HAL_GPIO_EXTI_Callback+0x5e>
    break;
  case L6470_nFLAG_GPIO_PIN:
    BSP_L6470_FlagEventManager();
    break;
  case GPIO_PIN_6:
	  USART_Transmit(&huart2, (uint8_t* )"PA6 Limit Reached\n");
 80035b2:	4943      	ldr	r1, [pc, #268]	; (80036c0 <HAL_GPIO_EXTI_Callback+0x120>)
 80035b4:	4843      	ldr	r0, [pc, #268]	; (80036c4 <HAL_GPIO_EXTI_Callback+0x124>)
 80035b6:	f000 f891 	bl	80036dc <USART_Transmit>
      StepperMotorBoardHandle->StepperMotorDriverHandle[L6470_ID(0)]->Command->PrepareHardStop(L6470_ID(0));
 80035ba:	4c43      	ldr	r4, [pc, #268]	; (80036c8 <HAL_GPIO_EXTI_Callback+0x128>)
 80035bc:	6825      	ldr	r5, [r4, #0]
 80035be:	2000      	movs	r0, #0
 80035c0:	f7fd f97e 	bl	80008c0 <L6470_ID>
 80035c4:	eb05 0580 	add.w	r5, r5, r0, lsl #2
 80035c8:	68eb      	ldr	r3, [r5, #12]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f8d3 5080 	ldr.w	r5, [r3, #128]	; 0x80
 80035d0:	2000      	movs	r0, #0
 80035d2:	f7fd f975 	bl	80008c0 <L6470_ID>
 80035d6:	47a8      	blx	r5
      StepperMotorBoardHandle->StepperMotorDriverHandle[L6470_ID(1)]->Command->PrepareHardStop(L6470_ID(1));
 80035d8:	6825      	ldr	r5, [r4, #0]
 80035da:	2001      	movs	r0, #1
 80035dc:	f7fd f970 	bl	80008c0 <L6470_ID>
 80035e0:	eb05 0580 	add.w	r5, r5, r0, lsl #2
 80035e4:	68eb      	ldr	r3, [r5, #12]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	f8d3 5080 	ldr.w	r5, [r3, #128]	; 0x80
 80035ec:	2001      	movs	r0, #1
 80035ee:	f7fd f967 	bl	80008c0 <L6470_ID>
 80035f2:	47a8      	blx	r5
      StepperMotorBoardHandle->Command->PerformPreparedApplicationCommand();
 80035f4:	6823      	ldr	r3, [r4, #0]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035fa:	4798      	blx	r3
	  // PB3
	 break;
 80035fc:	e010      	b.n	8003620 <HAL_GPIO_EXTI_Callback+0x80>
  switch (GPIO_Pin)
 80035fe:	2801      	cmp	r0, #1
 8003600:	d10e      	bne.n	8003620 <HAL_GPIO_EXTI_Callback+0x80>
    BSP_L6470_BusySynchEventManager();
 8003602:	f7fd ffb4 	bl	800156e <BSP_L6470_BusySynchEventManager>
    break;
 8003606:	e00b      	b.n	8003620 <HAL_GPIO_EXTI_Callback+0x80>
  switch (GPIO_Pin)
 8003608:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800360c:	d03f      	beq.n	800368e <HAL_GPIO_EXTI_Callback+0xee>
 800360e:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8003612:	d106      	bne.n	8003622 <HAL_GPIO_EXTI_Callback+0x82>
	 USART_Transmit(&huart2, (uint8_t* )"EMERGENCY STOP TRIGGERED\n");
 8003614:	492d      	ldr	r1, [pc, #180]	; (80036cc <HAL_GPIO_EXTI_Callback+0x12c>)
 8003616:	482b      	ldr	r0, [pc, #172]	; (80036c4 <HAL_GPIO_EXTI_Callback+0x124>)
 8003618:	f000 f860 	bl	80036dc <USART_Transmit>
    BSP_EmergencyStop();
 800361c:	f7fd ffac 	bl	8001578 <BSP_EmergencyStop>
      StepperMotorBoardHandle->StepperMotorDriverHandle[L6470_ID(0)]->Command->PrepareHardStop(L6470_ID(0));
      StepperMotorBoardHandle->Command->PerformPreparedApplicationCommand();
	  // PA10
	 break;
  }
}
 8003620:	bd38      	pop	{r3, r4, r5, pc}
  switch (GPIO_Pin)
 8003622:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003626:	d1fb      	bne.n	8003620 <HAL_GPIO_EXTI_Callback+0x80>
	  USART_Transmit(&huart2, (uint8_t* )"PA9 Limit Reached\n");
 8003628:	4929      	ldr	r1, [pc, #164]	; (80036d0 <HAL_GPIO_EXTI_Callback+0x130>)
 800362a:	4826      	ldr	r0, [pc, #152]	; (80036c4 <HAL_GPIO_EXTI_Callback+0x124>)
 800362c:	f000 f856 	bl	80036dc <USART_Transmit>
      StepperMotorBoardHandle->StepperMotorDriverHandle[L6470_ID(0)]->Command->PrepareHardStop(L6470_ID(0));
 8003630:	4d25      	ldr	r5, [pc, #148]	; (80036c8 <HAL_GPIO_EXTI_Callback+0x128>)
 8003632:	682c      	ldr	r4, [r5, #0]
 8003634:	2000      	movs	r0, #0
 8003636:	f7fd f943 	bl	80008c0 <L6470_ID>
 800363a:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 800363e:	68e3      	ldr	r3, [r4, #12]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8003646:	2000      	movs	r0, #0
 8003648:	f7fd f93a 	bl	80008c0 <L6470_ID>
 800364c:	47a0      	blx	r4
      StepperMotorBoardHandle->Command->PerformPreparedApplicationCommand();
 800364e:	682b      	ldr	r3, [r5, #0]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003654:	4798      	blx	r3
	 break;
 8003656:	e7e3      	b.n	8003620 <HAL_GPIO_EXTI_Callback+0x80>
    BSP_L6470_FlagEventManager();
 8003658:	f7fd ff8b 	bl	8001572 <BSP_L6470_FlagEventManager>
    break;
 800365c:	e7e0      	b.n	8003620 <HAL_GPIO_EXTI_Callback+0x80>
	  USART_Transmit(&huart2, (uint8_t* )"PA8 Limit Reached\n");
 800365e:	491d      	ldr	r1, [pc, #116]	; (80036d4 <HAL_GPIO_EXTI_Callback+0x134>)
 8003660:	4818      	ldr	r0, [pc, #96]	; (80036c4 <HAL_GPIO_EXTI_Callback+0x124>)
 8003662:	f000 f83b 	bl	80036dc <USART_Transmit>
      StepperMotorBoardHandle->StepperMotorDriverHandle[L6470_ID(0)]->Command->PrepareHardStop(L6470_ID(0));
 8003666:	4d18      	ldr	r5, [pc, #96]	; (80036c8 <HAL_GPIO_EXTI_Callback+0x128>)
 8003668:	682c      	ldr	r4, [r5, #0]
 800366a:	2000      	movs	r0, #0
 800366c:	f7fd f928 	bl	80008c0 <L6470_ID>
 8003670:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8003674:	68e3      	ldr	r3, [r4, #12]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800367c:	2000      	movs	r0, #0
 800367e:	f7fd f91f 	bl	80008c0 <L6470_ID>
 8003682:	47a0      	blx	r4
      StepperMotorBoardHandle->Command->PerformPreparedApplicationCommand();
 8003684:	682b      	ldr	r3, [r5, #0]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800368a:	4798      	blx	r3
	 break;
 800368c:	e7c8      	b.n	8003620 <HAL_GPIO_EXTI_Callback+0x80>
	  USART_Transmit(&huart2, (uint8_t* )"PA10 Limit Reached\n");
 800368e:	4912      	ldr	r1, [pc, #72]	; (80036d8 <HAL_GPIO_EXTI_Callback+0x138>)
 8003690:	480c      	ldr	r0, [pc, #48]	; (80036c4 <HAL_GPIO_EXTI_Callback+0x124>)
 8003692:	f000 f823 	bl	80036dc <USART_Transmit>
      StepperMotorBoardHandle->StepperMotorDriverHandle[L6470_ID(0)]->Command->PrepareHardStop(L6470_ID(0));
 8003696:	4d0c      	ldr	r5, [pc, #48]	; (80036c8 <HAL_GPIO_EXTI_Callback+0x128>)
 8003698:	682c      	ldr	r4, [r5, #0]
 800369a:	2000      	movs	r0, #0
 800369c:	f7fd f910 	bl	80008c0 <L6470_ID>
 80036a0:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 80036a4:	68e3      	ldr	r3, [r4, #12]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 80036ac:	2000      	movs	r0, #0
 80036ae:	f7fd f907 	bl	80008c0 <L6470_ID>
 80036b2:	47a0      	blx	r4
      StepperMotorBoardHandle->Command->PerformPreparedApplicationCommand();
 80036b4:	682b      	ldr	r3, [r5, #0]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ba:	4798      	blx	r3
}
 80036bc:	e7b0      	b.n	8003620 <HAL_GPIO_EXTI_Callback+0x80>
 80036be:	bf00      	nop
 80036c0:	08004514 	.word	0x08004514
 80036c4:	200004cc 	.word	0x200004cc
 80036c8:	200004c8 	.word	0x200004c8
 80036cc:	080044f8 	.word	0x080044f8
 80036d0:	0800453c 	.word	0x0800453c
 80036d4:	08004528 	.word	0x08004528
 80036d8:	08004550 	.word	0x08004550

080036dc <USART_Transmit>:
 * @param  huart       pointer to a UART_HandleTypeDef structure that contains
 *                     the configuration information for the specified UART module.
 * @param  TextString  The text string to be sent.
 * @note It use the HAL_UART_Transmit function.
 */
void USART_Transmit(UART_HandleTypeDef* huart, uint8_t* TextString) {
 80036dc:	b510      	push	{r4, lr}
	uint8_t TextStringLength;

	/* Calculate the length of the text string to be sent */
	TextStringLength = 0;
	while (TextString[TextStringLength++] != '\0')
 80036de:	2300      	movs	r3, #0
 80036e0:	b2da      	uxtb	r2, r3
 80036e2:	5c8c      	ldrb	r4, [r1, r2]
 80036e4:	3301      	adds	r3, #1
 80036e6:	2c00      	cmp	r4, #0
 80036e8:	d1fa      	bne.n	80036e0 <USART_Transmit+0x4>
		;
	TextStringLength--;

	/* Use the HAL function to send the text string via USART */
	HAL_UART_Transmit(huart, TextString, TextStringLength, 10);
 80036ea:	230a      	movs	r3, #10
 80036ec:	f7ff fc30 	bl	8002f50 <HAL_UART_Transmit>
}
 80036f0:	bd10      	pop	{r4, pc}
	...

080036f4 <USART_TxWelcomeMessage>:
void USART_TxWelcomeMessage(void) {
 80036f4:	b510      	push	{r4, lr}
	USART_Transmit(&huart2, (uint8_t* )"\r\n");
 80036f6:	4c13      	ldr	r4, [pc, #76]	; (8003744 <USART_TxWelcomeMessage+0x50>)
 80036f8:	4913      	ldr	r1, [pc, #76]	; (8003748 <USART_TxWelcomeMessage+0x54>)
 80036fa:	4620      	mov	r0, r4
 80036fc:	f7ff ffee 	bl	80036dc <USART_Transmit>
	USART_Transmit(&huart2, (uint8_t* )" X-NUCLEO-IHM02A1\r\n");
 8003700:	4912      	ldr	r1, [pc, #72]	; (800374c <USART_TxWelcomeMessage+0x58>)
 8003702:	4620      	mov	r0, r4
 8003704:	f7ff ffea 	bl	80036dc <USART_Transmit>
	USART_Transmit(&huart2, (uint8_t* )" -------------------------------------------\r\n");
 8003708:	4911      	ldr	r1, [pc, #68]	; (8003750 <USART_TxWelcomeMessage+0x5c>)
 800370a:	4620      	mov	r0, r4
 800370c:	f7ff ffe6 	bl	80036dc <USART_Transmit>
	USART_Transmit(&huart2, (uint8_t* )" Dual L6470 Expansion Board for STM32 NUCLEO\r\n");
 8003710:	4910      	ldr	r1, [pc, #64]	; (8003754 <USART_TxWelcomeMessage+0x60>)
 8003712:	4620      	mov	r0, r4
 8003714:	f7ff ffe2 	bl	80036dc <USART_Transmit>
	USART_Transmit(&huart2, (uint8_t* )" Stacked on ");
 8003718:	490f      	ldr	r1, [pc, #60]	; (8003758 <USART_TxWelcomeMessage+0x64>)
 800371a:	4620      	mov	r0, r4
 800371c:	f7ff ffde 	bl	80036dc <USART_Transmit>
	USART_Transmit(&huart2, NUCLEO_BOARD_NAME);
 8003720:	490e      	ldr	r1, [pc, #56]	; (800375c <USART_TxWelcomeMessage+0x68>)
 8003722:	4620      	mov	r0, r4
 8003724:	f7ff ffda 	bl	80036dc <USART_Transmit>
	USART_Transmit(&huart2, (uint8_t* )" \r\n");
 8003728:	490d      	ldr	r1, [pc, #52]	; (8003760 <USART_TxWelcomeMessage+0x6c>)
 800372a:	4620      	mov	r0, r4
 800372c:	f7ff ffd6 	bl	80036dc <USART_Transmit>
	USART_Transmit(&huart2, (uint8_t* )" X-CUBE-SPN2 v1.1.1\r\n");
 8003730:	490c      	ldr	r1, [pc, #48]	; (8003764 <USART_TxWelcomeMessage+0x70>)
 8003732:	4620      	mov	r0, r4
 8003734:	f7ff ffd2 	bl	80036dc <USART_Transmit>
	USART_Transmit(&huart2, (uint8_t* )" STMicroelectronics, 2015\r\n\r\n");
 8003738:	490b      	ldr	r1, [pc, #44]	; (8003768 <USART_TxWelcomeMessage+0x74>)
 800373a:	4620      	mov	r0, r4
 800373c:	f7ff ffce 	bl	80036dc <USART_Transmit>
}
 8003740:	bd10      	pop	{r4, pc}
 8003742:	bf00      	nop
 8003744:	200004cc 	.word	0x200004cc
 8003748:	08004638 	.word	0x08004638
 800374c:	080047a4 	.word	0x080047a4
 8003750:	080047b8 	.word	0x080047b8
 8003754:	080047e8 	.word	0x080047e8
 8003758:	08004818 	.word	0x08004818
 800375c:	08004828 	.word	0x08004828
 8003760:	08004838 	.word	0x08004838
 8003764:	0800483c 	.word	0x0800483c
 8003768:	08004854 	.word	0x08004854

0800376c <USART_ITCharManager>:
 * @brief  Handle text character just received.
 * @param  huart pointer to a UART_HandleTypeDef structure that contains
 *               the configuration information for the specified UART module.
 * @note To use inside USART2_IRQHandler function.
 */
void USART_ITCharManager(UART_HandleTypeDef* huart) {
 800376c:	b510      	push	{r4, lr}
 800376e:	4604      	mov	r4, r0
	uint8_t UART_Receive_IT_Char;

	UART_Receive_IT_Char = (uint8_t) (huart->Instance->USART_DATA_REGISTER);
 8003770:	6803      	ldr	r3, [r0, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
	/* Checks the buffer full or retur carriage  */
	if ((huart->RxXferCount == 1) || (UART_Receive_IT_Char == '\r')) {
 8003774:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
 8003776:	2a01      	cmp	r2, #1
 8003778:	d003      	beq.n	8003782 <USART_ITCharManager+0x16>
 800377a:	b2db      	uxtb	r3, r3
 800377c:	2b0d      	cmp	r3, #13
 800377e:	d000      	beq.n	8003782 <USART_ITCharManager+0x16>
			__HAL_UART_DISABLE_IT(huart, UART_IT_ERR);

			huart->State = HAL_UART_STATE_READY;
		}
	}
}
 8003780:	bd10      	pop	{r4, pc}
		huart->RxXferCount += 1;
 8003782:	3201      	adds	r2, #1
 8003784:	85e2      	strh	r2, [r4, #46]	; 0x2e
		huart->pRxBuffPtr -= 1;
 8003786:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003788:	1e5a      	subs	r2, r3, #1
 800378a:	62a2      	str	r2, [r4, #40]	; 0x28
		*(huart->pRxBuffPtr) = '\0';
 800378c:	2200      	movs	r2, #0
 800378e:	f803 2c01 	strb.w	r2, [r3, #-1]
		USART_Transmit(huart, (uint8_t *)"\r\n");
 8003792:	4912      	ldr	r1, [pc, #72]	; (80037dc <USART_ITCharManager+0x70>)
 8003794:	4620      	mov	r0, r4
 8003796:	f7ff ffa1 	bl	80036dc <USART_Transmit>
		while (HAL_IS_BIT_SET(huart->Instance->USART_STATUS_REGISTER,
 800379a:	6822      	ldr	r2, [r4, #0]
 800379c:	6813      	ldr	r3, [r2, #0]
 800379e:	f013 0f20 	tst.w	r3, #32
 80037a2:	d1fb      	bne.n	800379c <USART_ITCharManager+0x30>
		__HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80037a4:	68d3      	ldr	r3, [r2, #12]
 80037a6:	f023 0320 	bic.w	r3, r3, #32
 80037aa:	60d3      	str	r3, [r2, #12]
		if (huart->State == HAL_UART_STATE_BUSY_TX_RX) {
 80037ac:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b32      	cmp	r3, #50	; 0x32
 80037b4:	d00d      	beq.n	80037d2 <USART_ITCharManager+0x66>
			__HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80037b6:	6822      	ldr	r2, [r4, #0]
 80037b8:	68d3      	ldr	r3, [r2, #12]
 80037ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037be:	60d3      	str	r3, [r2, #12]
			__HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80037c0:	6822      	ldr	r2, [r4, #0]
 80037c2:	6953      	ldr	r3, [r2, #20]
 80037c4:	f023 0301 	bic.w	r3, r3, #1
 80037c8:	6153      	str	r3, [r2, #20]
			huart->State = HAL_UART_STATE_READY;
 80037ca:	2301      	movs	r3, #1
 80037cc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 80037d0:	e7d6      	b.n	8003780 <USART_ITCharManager+0x14>
			huart->State = HAL_UART_STATE_BUSY_TX;
 80037d2:	2312      	movs	r3, #18
 80037d4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 80037d8:	e7d2      	b.n	8003780 <USART_ITCharManager+0x14>
 80037da:	bf00      	nop
 80037dc:	08004638 	.word	0x08004638

080037e0 <num2hex>:
 * @param  num         The integer number to convert.
 * @param  HexFormat   The output format about hexadecimal number.
 *
 * @retval uint8_t*    The address of the string text for the converted hexadecimal number.
 */
uint8_t* num2hex(uint32_t num, eHexFormat HexFormat) {
 80037e0:	b510      	push	{r4, lr}
	static uint8_t HexValue[8 + 1];
	uint8_t i;
	uint8_t dummy;
	uint8_t HexDigits = 0;

	switch (HexFormat) {
 80037e2:	2903      	cmp	r1, #3
 80037e4:	d82c      	bhi.n	8003840 <num2hex+0x60>
 80037e6:	e8df f001 	tbb	[pc, r1]
 80037ea:	022e      	.short	0x022e
 80037ec:	2831      	.short	0x2831
 80037ee:	f04f 0c02 	mov.w	ip, #2
	case DOUBLEWORD_F:
		HexDigits = 8;
		break;
	}

	for (i = 0; i < HexDigits; i++) {
 80037f2:	f10c 32ff 	add.w	r2, ip, #4294967295
 80037f6:	0092      	lsls	r2, r2, #2
 80037f8:	4c16      	ldr	r4, [pc, #88]	; (8003854 <num2hex+0x74>)
uint8_t* num2hex(uint32_t num, eHexFormat HexFormat) {
 80037fa:	2100      	movs	r1, #0
		HexValue[i] = '\0';
		dummy = (num & (0x0F << (((HexDigits - 1) - i) * 4)))
 80037fc:	f04f 0e0f 	mov.w	lr, #15
 8003800:	fa0e f302 	lsl.w	r3, lr, r2
 8003804:	4003      	ands	r3, r0
				>> (((HexDigits - 1) - i) * 4);
 8003806:	40d3      	lsrs	r3, r2
		dummy = (num & (0x0F << (((HexDigits - 1) - i) * 4)))
 8003808:	b2db      	uxtb	r3, r3
		if (dummy < 0x0A) {
 800380a:	2b09      	cmp	r3, #9
			HexValue[i] = dummy + '0';
 800380c:	bf94      	ite	ls
 800380e:	3330      	addls	r3, #48	; 0x30
		} else {
			HexValue[i] = (dummy - 0x0A) + 'A';
 8003810:	3337      	addhi	r3, #55	; 0x37
 8003812:	b2db      	uxtb	r3, r3
 8003814:	f804 3f01 	strb.w	r3, [r4, #1]!
	for (i = 0; i < HexDigits; i++) {
 8003818:	3101      	adds	r1, #1
 800381a:	3a04      	subs	r2, #4
 800381c:	b2cb      	uxtb	r3, r1
 800381e:	459c      	cmp	ip, r3
 8003820:	d8ee      	bhi.n	8003800 <num2hex+0x20>
 8003822:	f1bc 0f00 	cmp.w	ip, #0
 8003826:	bf08      	it	eq
 8003828:	f04f 0c01 	moveq.w	ip, #1
		}
	}
	HexValue[i] = '\0';
 800382c:	480a      	ldr	r0, [pc, #40]	; (8003858 <num2hex+0x78>)
 800382e:	4484      	add	ip, r0
 8003830:	2300      	movs	r3, #0
 8003832:	f88c 305c 	strb.w	r3, [ip, #92]	; 0x5c

	return HexValue;
 8003836:	305c      	adds	r0, #92	; 0x5c
}
 8003838:	bd10      	pop	{r4, pc}
		HexDigits = 8;
 800383a:	f04f 0c08 	mov.w	ip, #8
		break;
 800383e:	e7d8      	b.n	80037f2 <num2hex+0x12>
	switch (HexFormat) {
 8003840:	f04f 0c00 	mov.w	ip, #0
 8003844:	e7f2      	b.n	800382c <num2hex+0x4c>
		HexDigits = 1;
 8003846:	f04f 0c01 	mov.w	ip, #1
 800384a:	e7d2      	b.n	80037f2 <num2hex+0x12>
		HexDigits = 4;
 800384c:	f04f 0c04 	mov.w	ip, #4
 8003850:	e7cf      	b.n	80037f2 <num2hex+0x12>
 8003852:	bf00      	nop
 8003854:	20000527 	.word	0x20000527
 8003858:	200004cc 	.word	0x200004cc

0800385c <USART_PrintRegisterValues>:
void USART_PrintRegisterValues(uint8_t ExpBrd, uint8_t L6470_Id) {
 800385c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003860:	4604      	mov	r4, r0
 8003862:	4688      	mov	r8, r1
	if (BSP_Select(ExpBrd)) {
 8003864:	f7fd fc9c 	bl	80011a0 <BSP_Select>
 8003868:	b908      	cbnz	r0, 800386e <USART_PrintRegisterValues+0x12>
}
 800386a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		USART_Transmit(&huart2, (uint8_t* )"\r\n");
 800386e:	4d26      	ldr	r5, [pc, #152]	; (8003908 <USART_PrintRegisterValues+0xac>)
 8003870:	4926      	ldr	r1, [pc, #152]	; (800390c <USART_PrintRegisterValues+0xb0>)
 8003872:	4628      	mov	r0, r5
 8003874:	f7ff ff32 	bl	80036dc <USART_Transmit>
		USART_Transmit(&huart2, (uint8_t* )"Values of the registers of L6470_#");
 8003878:	4925      	ldr	r1, [pc, #148]	; (8003910 <USART_PrintRegisterValues+0xb4>)
 800387a:	4628      	mov	r0, r5
 800387c:	f7ff ff2e 	bl	80036dc <USART_Transmit>
		USART_Transmit(&huart2, num2hex(L6470_Id, HALFBYTE_F));
 8003880:	2100      	movs	r1, #0
 8003882:	4640      	mov	r0, r8
 8003884:	f7ff ffac 	bl	80037e0 <num2hex>
 8003888:	4601      	mov	r1, r0
 800388a:	4628      	mov	r0, r5
 800388c:	f7ff ff26 	bl	80036dc <USART_Transmit>
		USART_Transmit(&huart2, (uint8_t* )" of ExpBrd_#");
 8003890:	4920      	ldr	r1, [pc, #128]	; (8003914 <USART_PrintRegisterValues+0xb8>)
 8003892:	4628      	mov	r0, r5
 8003894:	f7ff ff22 	bl	80036dc <USART_Transmit>
		USART_Transmit(&huart2, num2hex(ExpBrd, HALFBYTE_F));
 8003898:	2100      	movs	r1, #0
 800389a:	4620      	mov	r0, r4
 800389c:	f7ff ffa0 	bl	80037e0 <num2hex>
 80038a0:	4601      	mov	r1, r0
 80038a2:	4628      	mov	r0, r5
 80038a4:	f7ff ff1a 	bl	80036dc <USART_Transmit>
		USART_Transmit(&huart2, (uint8_t* )"\r\n\r\n");
 80038a8:	491b      	ldr	r1, [pc, #108]	; (8003918 <USART_PrintRegisterValues+0xbc>)
 80038aa:	4628      	mov	r0, r5
 80038ac:	f7ff ff16 	bl	80036dc <USART_Transmit>
 80038b0:	2500      	movs	r5, #0
			USART_Transmit(&huart2, L6470_GetRegisterName((eL6470_RegId_t) r));
 80038b2:	4c15      	ldr	r4, [pc, #84]	; (8003908 <USART_PrintRegisterValues+0xac>)
			USART_Transmit(&huart2, (uint8_t* )": ");
 80038b4:	f8df a064 	ldr.w	sl, [pc, #100]	; 800391c <USART_PrintRegisterValues+0xc0>
			USART_Transmit(&huart2, (uint8_t* )"\r\n");
 80038b8:	f8df 9050 	ldr.w	r9, [pc, #80]	; 800390c <USART_PrintRegisterValues+0xb0>
 80038bc:	b2ef      	uxtb	r7, r5
			value = L6470_GetParam(L6470_Id, (eL6470_RegId_t) r);
 80038be:	4639      	mov	r1, r7
 80038c0:	4640      	mov	r0, r8
 80038c2:	f7fd fa11 	bl	8000ce8 <L6470_GetParam>
 80038c6:	4606      	mov	r6, r0
			USART_Transmit(&huart2, L6470_GetRegisterName((eL6470_RegId_t) r));
 80038c8:	4638      	mov	r0, r7
 80038ca:	f7fd facd 	bl	8000e68 <L6470_GetRegisterName>
 80038ce:	4601      	mov	r1, r0
 80038d0:	4620      	mov	r0, r4
 80038d2:	f7ff ff03 	bl	80036dc <USART_Transmit>
			USART_Transmit(&huart2, (uint8_t* )": ");
 80038d6:	4651      	mov	r1, sl
 80038d8:	4620      	mov	r0, r4
 80038da:	f7ff feff 	bl	80036dc <USART_Transmit>
			USART_Transmit(&huart2, num2hex(value, DOUBLEWORD_F));
 80038de:	2103      	movs	r1, #3
 80038e0:	4630      	mov	r0, r6
 80038e2:	f7ff ff7d 	bl	80037e0 <num2hex>
 80038e6:	4601      	mov	r1, r0
 80038e8:	4620      	mov	r0, r4
 80038ea:	f7ff fef7 	bl	80036dc <USART_Transmit>
			USART_Transmit(&huart2, (uint8_t* )"\r\n");
 80038ee:	4649      	mov	r1, r9
 80038f0:	4620      	mov	r0, r4
 80038f2:	f7ff fef3 	bl	80036dc <USART_Transmit>
		for (r = 0; r < L6470REGIDSIZE; r++) {
 80038f6:	3501      	adds	r5, #1
 80038f8:	2d19      	cmp	r5, #25
 80038fa:	d1df      	bne.n	80038bc <USART_PrintRegisterValues+0x60>
		USART_Transmit(&huart2, (uint8_t* )"\r\n");
 80038fc:	4903      	ldr	r1, [pc, #12]	; (800390c <USART_PrintRegisterValues+0xb0>)
 80038fe:	4802      	ldr	r0, [pc, #8]	; (8003908 <USART_PrintRegisterValues+0xac>)
 8003900:	f7ff feec 	bl	80036dc <USART_Transmit>
}
 8003904:	e7b1      	b.n	800386a <USART_PrintRegisterValues+0xe>
 8003906:	bf00      	nop
 8003908:	200004cc 	.word	0x200004cc
 800390c:	08004638 	.word	0x08004638
 8003910:	080048f8 	.word	0x080048f8
 8003914:	0800491c 	.word	0x0800491c
 8003918:	0800479c 	.word	0x0800479c
 800391c:	0800492c 	.word	0x0800492c

08003920 <USART_PrintAllRegisterValues>:
void USART_PrintAllRegisterValues(void) {
 8003920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (ExpBrd = EXPBRD_ID(0); ExpBrd <= EXPBRD_ID(EXPBRD_MOUNTED_NR - 1);
 8003922:	2000      	movs	r0, #0
 8003924:	f7fd fe11 	bl	800154a <EXPBRD_ID>
 8003928:	4605      	mov	r5, r0
 800392a:	2700      	movs	r7, #0
				L6470_Id <= L6470_ID(L6470DAISYCHAINSIZE - 1); L6470_Id++) {
 800392c:	2601      	movs	r6, #1
	for (ExpBrd = EXPBRD_ID(0); ExpBrd <= EXPBRD_ID(EXPBRD_MOUNTED_NR - 1);
 800392e:	e00c      	b.n	800394a <USART_PrintAllRegisterValues+0x2a>
			USART_PrintRegisterValues(ExpBrd, L6470_Id);
 8003930:	4621      	mov	r1, r4
 8003932:	4628      	mov	r0, r5
 8003934:	f7ff ff92 	bl	800385c <USART_PrintRegisterValues>
				L6470_Id <= L6470_ID(L6470DAISYCHAINSIZE - 1); L6470_Id++) {
 8003938:	3401      	adds	r4, #1
 800393a:	b2e4      	uxtb	r4, r4
 800393c:	4630      	mov	r0, r6
 800393e:	f7fc ffbf 	bl	80008c0 <L6470_ID>
		for (L6470_Id = L6470_ID(0);
 8003942:	42a0      	cmp	r0, r4
 8003944:	d2f4      	bcs.n	8003930 <USART_PrintAllRegisterValues+0x10>
			ExpBrd++) {
 8003946:	3501      	adds	r5, #1
 8003948:	b2ed      	uxtb	r5, r5
	for (ExpBrd = EXPBRD_ID(0); ExpBrd <= EXPBRD_ID(EXPBRD_MOUNTED_NR - 1);
 800394a:	4638      	mov	r0, r7
 800394c:	f7fd fdfd 	bl	800154a <EXPBRD_ID>
 8003950:	42a8      	cmp	r0, r5
 8003952:	d304      	bcc.n	800395e <USART_PrintAllRegisterValues+0x3e>
		for (L6470_Id = L6470_ID(0);
 8003954:	4638      	mov	r0, r7
 8003956:	f7fc ffb3 	bl	80008c0 <L6470_ID>
 800395a:	4604      	mov	r4, r0
 800395c:	e7ee      	b.n	800393c <USART_PrintAllRegisterValues+0x1c>
}
 800395e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003960 <limitSwitch_Init>:
/**
  * @brief The FW main module
  */

void limitSwitch_Init()
{
 8003960:	b570      	push	{r4, r5, r6, lr}
 8003962:	b094      	sub	sp, #80	; 0x50
	  GPIO_InitTypeDef PA6_init, PA8_init, PA9_init, PA10_init;

	  // PA6
	  PA6_init.Pin = GPIO_PIN_6;
 8003964:	2340      	movs	r3, #64	; 0x40
 8003966:	930f      	str	r3, [sp, #60]	; 0x3c
	  PA6_init.Mode = GPIO_MODE_IT_FALLING;
 8003968:	4e16      	ldr	r6, [pc, #88]	; (80039c4 <limitSwitch_Init+0x64>)
 800396a:	9610      	str	r6, [sp, #64]	; 0x40
	  PA6_init.Pull = GPIO_NOPULL;
 800396c:	2400      	movs	r4, #0
 800396e:	9411      	str	r4, [sp, #68]	; 0x44
	  HAL_GPIO_Init(GPIOA, &PA6_init);
 8003970:	4d15      	ldr	r5, [pc, #84]	; (80039c8 <limitSwitch_Init+0x68>)
 8003972:	a90f      	add	r1, sp, #60	; 0x3c
 8003974:	4628      	mov	r0, r5
 8003976:	f7fe f82f 	bl	80019d8 <HAL_GPIO_Init>

	  // PA8
	  PA8_init.Pin = GPIO_PIN_8;
 800397a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800397e:	930a      	str	r3, [sp, #40]	; 0x28
	  PA8_init.Mode = GPIO_MODE_IT_FALLING;
 8003980:	960b      	str	r6, [sp, #44]	; 0x2c
	  PA8_init.Pull = GPIO_NOPULL;
 8003982:	940c      	str	r4, [sp, #48]	; 0x30
	  HAL_GPIO_Init(GPIOA, &PA8_init);
 8003984:	a90a      	add	r1, sp, #40	; 0x28
 8003986:	4628      	mov	r0, r5
 8003988:	f7fe f826 	bl	80019d8 <HAL_GPIO_Init>

	  // PA9
	  PA9_init.Pin = GPIO_PIN_9;
 800398c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003990:	9305      	str	r3, [sp, #20]
	  PA9_init.Mode = GPIO_MODE_IT_FALLING;
 8003992:	9606      	str	r6, [sp, #24]
	  PA9_init.Pull = GPIO_NOPULL;
 8003994:	9407      	str	r4, [sp, #28]
	  HAL_GPIO_Init(GPIOA, &PA9_init);
 8003996:	a905      	add	r1, sp, #20
 8003998:	4628      	mov	r0, r5
 800399a:	f7fe f81d 	bl	80019d8 <HAL_GPIO_Init>

	  // PA10
	  PA10_init.Pin = GPIO_PIN_10;
 800399e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039a2:	9300      	str	r3, [sp, #0]
	  PA10_init.Mode = GPIO_MODE_IT_FALLING;
 80039a4:	9601      	str	r6, [sp, #4]
	  PA10_init.Pull = GPIO_NOPULL;
 80039a6:	9402      	str	r4, [sp, #8]
	  HAL_GPIO_Init(GPIOA, &PA10_init);
 80039a8:	4669      	mov	r1, sp
 80039aa:	4628      	mov	r0, r5
 80039ac:	f7fe f814 	bl	80019d8 <HAL_GPIO_Init>

	  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0x01, 0x00);
 80039b0:	4622      	mov	r2, r4
 80039b2:	2101      	movs	r1, #1
 80039b4:	2017      	movs	r0, #23
 80039b6:	f7fd ff83 	bl	80018c0 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80039ba:	2017      	movs	r0, #23
 80039bc:	f7fd ffc4 	bl	8001948 <HAL_NVIC_EnableIRQ>
}
 80039c0:	b014      	add	sp, #80	; 0x50
 80039c2:	bd70      	pop	{r4, r5, r6, pc}
 80039c4:	10210000 	.word	0x10210000
 80039c8:	40020000 	.word	0x40020000

080039cc <main>:

int main(void)
{
 80039cc:	b508      	push	{r3, lr}
  /* NUCLEO board initialization */
  NUCLEO_Board_Init();
 80039ce:	f7fd fed7 	bl	8001780 <NUCLEO_Board_Init>
  
  /* X-NUCLEO-IHM02A1 initialization */
  BSP_Init();
 80039d2:	f7fd fdc0 	bl	8001556 <BSP_Init>
  
  /* Setup interrupt GPIO pins */
  limitSwitch_Init();
 80039d6:	f7ff ffc3 	bl	8003960 <limitSwitch_Init>

#ifdef NUCLEO_USE_USART
  /* Transmit the initial message to the PC via UART */
  USART_TxWelcomeMessage();
 80039da:	f7ff fe8b 	bl	80036f4 <USART_TxWelcomeMessage>
#endif
  
#if defined (MICROSTEPPING_MOTOR_EXAMPLE)
  /* Perform a batch commands for X-NUCLEO-IHM02A1 */
  MicrosteppingMotor_Example_01();
 80039de:	f7ff fc67 	bl	80032b0 <MicrosteppingMotor_Example_01>
  
  /* Infinite loop */
  while (1);
 80039e2:	e7fe      	b.n	80039e2 <main+0x16>

080039e4 <assert_failed>:
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
    ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */

}
 80039e4:	4770      	bx	lr
	...

080039e8 <GetMotorParameterInitData>:
  * @retval MotorParameterData_t*   The pointer to the data structure of parameters.
  */
MotorParameterData_t *GetMotorParameterInitData(void)
{
  return (MotorParameterData_t*)(MotorParameterInitData);
}
 80039e8:	4800      	ldr	r0, [pc, #0]	; (80039ec <GetMotorParameterInitData+0x4>)
 80039ea:	4770      	bx	lr
 80039ec:	08003f4c 	.word	0x08003f4c

080039f0 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80039f0:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80039f2:	2007      	movs	r0, #7
 80039f4:	f7fd ff46 	bl	8001884 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80039f8:	2200      	movs	r2, #0
 80039fa:	4611      	mov	r1, r2
 80039fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003a00:	f7fd ff5e 	bl	80018c0 <HAL_NVIC_SetPriority>
}
 8003a04:	bd08      	pop	{r3, pc}
	...

08003a08 <HAL_SPI_MspInit>:
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_0);
  }
}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003a08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a0a:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 8003a0c:	6803      	ldr	r3, [r0, #0]
 8003a0e:	4a30      	ldr	r2, [pc, #192]	; (8003ad0 <HAL_SPI_MspInit+0xc8>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d004      	beq.n	8003a1e <HAL_SPI_MspInit+0x16>
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
#elif defined (USE_PA5_AS_SCK)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
#endif
  }
  else if(hspi->Instance==SPI2)
 8003a14:	4a2f      	ldr	r2, [pc, #188]	; (8003ad4 <HAL_SPI_MspInit+0xcc>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d036      	beq.n	8003a88 <HAL_SPI_MspInit+0x80>
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
  }
}
 8003a1a:	b00b      	add	sp, #44	; 0x2c
 8003a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __GPIOA_CLK_ENABLE();
 8003a1e:	4b2e      	ldr	r3, [pc, #184]	; (8003ad8 <HAL_SPI_MspInit+0xd0>)
 8003a20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a22:	f042 0201 	orr.w	r2, r2, #1
 8003a26:	631a      	str	r2, [r3, #48]	; 0x30
 8003a28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a2a:	f002 0201 	and.w	r2, r2, #1
 8003a2e:	9200      	str	r2, [sp, #0]
 8003a30:	9a00      	ldr	r2, [sp, #0]
    __GPIOB_CLK_ENABLE();
 8003a32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a34:	f042 0202 	orr.w	r2, r2, #2
 8003a38:	631a      	str	r2, [r3, #48]	; 0x30
 8003a3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a3c:	f002 0202 	and.w	r2, r2, #2
 8003a40:	9201      	str	r2, [sp, #4]
 8003a42:	9a01      	ldr	r2, [sp, #4]
    __SPI1_CLK_ENABLE();
 8003a44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a46:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003a4a:	645a      	str	r2, [r3, #68]	; 0x44
 8003a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a52:	9302      	str	r3, [sp, #8]
 8003a54:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003a56:	23c0      	movs	r3, #192	; 0xc0
 8003a58:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a5a:	2702      	movs	r7, #2
 8003a5c:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a5e:	2600      	movs	r6, #0
 8003a60:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8003a62:	2503      	movs	r5, #3
 8003a64:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003a66:	2405      	movs	r4, #5
 8003a68:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a6a:	a905      	add	r1, sp, #20
 8003a6c:	481b      	ldr	r0, [pc, #108]	; (8003adc <HAL_SPI_MspInit+0xd4>)
 8003a6e:	f7fd ffb3 	bl	80019d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003a72:	2308      	movs	r3, #8
 8003a74:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a76:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a78:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8003a7a:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003a7c:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a7e:	a905      	add	r1, sp, #20
 8003a80:	4817      	ldr	r0, [pc, #92]	; (8003ae0 <HAL_SPI_MspInit+0xd8>)
 8003a82:	f7fd ffa9 	bl	80019d8 <HAL_GPIO_Init>
 8003a86:	e7c8      	b.n	8003a1a <HAL_SPI_MspInit+0x12>
    __GPIOB_CLK_ENABLE();
 8003a88:	4b13      	ldr	r3, [pc, #76]	; (8003ad8 <HAL_SPI_MspInit+0xd0>)
 8003a8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a8c:	f042 0202 	orr.w	r2, r2, #2
 8003a90:	631a      	str	r2, [r3, #48]	; 0x30
 8003a92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a94:	f002 0202 	and.w	r2, r2, #2
 8003a98:	9203      	str	r2, [sp, #12]
 8003a9a:	9a03      	ldr	r2, [sp, #12]
    __SPI2_CLK_ENABLE();
 8003a9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003aa2:	641a      	str	r2, [r3, #64]	; 0x40
 8003aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003aaa:	9304      	str	r3, [sp, #16]
 8003aac:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003aae:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003ab2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ab4:	2302      	movs	r3, #2
 8003ab6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8003abc:	2303      	movs	r3, #3
 8003abe:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003ac0:	2305      	movs	r3, #5
 8003ac2:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ac4:	a905      	add	r1, sp, #20
 8003ac6:	4806      	ldr	r0, [pc, #24]	; (8003ae0 <HAL_SPI_MspInit+0xd8>)
 8003ac8:	f7fd ff86 	bl	80019d8 <HAL_GPIO_Init>
}
 8003acc:	e7a5      	b.n	8003a1a <HAL_SPI_MspInit+0x12>
 8003ace:	bf00      	nop
 8003ad0:	40013000 	.word	0x40013000
 8003ad4:	40003800 	.word	0x40003800
 8003ad8:	40023800 	.word	0x40023800
 8003adc:	40020000 	.word	0x40020000
 8003ae0:	40020400 	.word	0x40020400

08003ae4 <HAL_UART_MspInit>:
}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 8003ae4:	6802      	ldr	r2, [r0, #0]
 8003ae6:	4b19      	ldr	r3, [pc, #100]	; (8003b4c <HAL_UART_MspInit+0x68>)
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d000      	beq.n	8003aee <HAL_UART_MspInit+0xa>
 8003aec:	4770      	bx	lr
{
 8003aee:	b510      	push	{r4, lr}
 8003af0:	b088      	sub	sp, #32
  {
    /* GPIO clocks enable */
    __GPIOA_CLK_ENABLE();
 8003af2:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8003af6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003af8:	f042 0201 	orr.w	r2, r2, #1
 8003afc:	631a      	str	r2, [r3, #48]	; 0x30
 8003afe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b00:	f002 0201 	and.w	r2, r2, #1
 8003b04:	9201      	str	r2, [sp, #4]
 8003b06:	9a01      	ldr	r2, [sp, #4]
    
    /* Peripheral clock enable */
    __USART2_CLK_ENABLE();
 8003b08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b0a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003b0e:	641a      	str	r2, [r3, #64]	; 0x40
 8003b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b16:	9302      	str	r3, [sp, #8]
 8003b18:	9b02      	ldr	r3, [sp, #8]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003b1a:	230c      	movs	r3, #12
 8003b1c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b1e:	2302      	movs	r3, #2
 8003b20:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b22:	2400      	movs	r4, #0
 8003b24:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8003b26:	2303      	movs	r3, #3
 8003b28:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003b2a:	2307      	movs	r3, #7
 8003b2c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b2e:	a903      	add	r1, sp, #12
 8003b30:	4807      	ldr	r0, [pc, #28]	; (8003b50 <HAL_UART_MspInit+0x6c>)
 8003b32:	f7fd ff51 	bl	80019d8 <HAL_GPIO_Init>

  /* System interrupt init*/
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003b36:	4622      	mov	r2, r4
 8003b38:	4621      	mov	r1, r4
 8003b3a:	2026      	movs	r0, #38	; 0x26
 8003b3c:	f7fd fec0 	bl	80018c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003b40:	2026      	movs	r0, #38	; 0x26
 8003b42:	f7fd ff01 	bl	8001948 <HAL_NVIC_EnableIRQ>
  }
}
 8003b46:	b008      	add	sp, #32
 8003b48:	bd10      	pop	{r4, pc}
 8003b4a:	bf00      	nop
 8003b4c:	40004400 	.word	0x40004400
 8003b50:	40020000 	.word	0x40020000

08003b54 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003b54:	b508      	push	{r3, lr}
  HAL_IncTick();
 8003b56:	f7fd fe79 	bl	800184c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8003b5a:	f7fd ff38 	bl	80019ce <HAL_SYSTICK_IRQHandler>
}
 8003b5e:	bd08      	pop	{r3, pc}

08003b60 <EXTI1_IRQHandler>:

/**
* @brief This function handles EXTI Line1 interrupt.
*/
void EXTI1_IRQHandler(void)
{
 8003b60:	b508      	push	{r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003b62:	2002      	movs	r0, #2
 8003b64:	f7fe f880 	bl	8001c68 <HAL_GPIO_EXTI_IRQHandler>
}
 8003b68:	bd08      	pop	{r3, pc}

08003b6a <EXTI0_IRQHandler>:

/**
* @brief This function handles EXTI Line0 interrupt.
*/
void EXTI0_IRQHandler(void)
{
 8003b6a:	b508      	push	{r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003b6c:	2001      	movs	r0, #1
 8003b6e:	f7fe f87b 	bl	8001c68 <HAL_GPIO_EXTI_IRQHandler>
}
 8003b72:	bd08      	pop	{r3, pc}

08003b74 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt.
*/
void USART2_IRQHandler(void)
{
 8003b74:	b510      	push	{r4, lr}
  HAL_UART_IRQHandler(&huart2);
 8003b76:	4c04      	ldr	r4, [pc, #16]	; (8003b88 <USART2_IRQHandler+0x14>)
 8003b78:	4620      	mov	r0, r4
 8003b7a:	f7ff fa61 	bl	8003040 <HAL_UART_IRQHandler>
  USART_ITCharManager(&huart2);
 8003b7e:	4620      	mov	r0, r4
 8003b80:	f7ff fdf4 	bl	800376c <USART_ITCharManager>
}
 8003b84:	bd10      	pop	{r4, pc}
 8003b86:	bf00      	nop
 8003b88:	200004cc 	.word	0x200004cc

08003b8c <EXTI15_10_IRQHandler>:

/**
* @brief This function handles EXTI Line[15:10] interrupts.
*/
void EXTI15_10_IRQHandler(void)
{
 8003b8c:	b508      	push	{r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);	// emergency stop
 8003b8e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003b92:	f7fe f869 	bl	8001c68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);	// Axis 1 - End 1 PA10
 8003b96:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003b9a:	f7fe f865 	bl	8001c68 <HAL_GPIO_EXTI_IRQHandler>
}
 8003b9e:	bd08      	pop	{r3, pc}

08003ba0 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8003ba0:	b508      	push	{r3, lr}
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);	// Axis 2 - End 1 PA6
 8003ba2:	2040      	movs	r0, #64	; 0x40
 8003ba4:	f7fe f860 	bl	8001c68 <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);	// Axis 2 - End 2 PA8
 8003ba8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003bac:	f7fe f85c 	bl	8001c68 <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);	// Axis 2 - End 1 PA9
 8003bb0:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003bb4:	f7fe f858 	bl	8001c68 <HAL_GPIO_EXTI_IRQHandler>
}
 8003bb8:	bd08      	pop	{r3, pc}
	...

08003bbc <__libc_init_array>:
 8003bbc:	b570      	push	{r4, r5, r6, lr}
 8003bbe:	4d0d      	ldr	r5, [pc, #52]	; (8003bf4 <__libc_init_array+0x38>)
 8003bc0:	4c0d      	ldr	r4, [pc, #52]	; (8003bf8 <__libc_init_array+0x3c>)
 8003bc2:	1b64      	subs	r4, r4, r5
 8003bc4:	10a4      	asrs	r4, r4, #2
 8003bc6:	2600      	movs	r6, #0
 8003bc8:	42a6      	cmp	r6, r4
 8003bca:	d109      	bne.n	8003be0 <__libc_init_array+0x24>
 8003bcc:	4d0b      	ldr	r5, [pc, #44]	; (8003bfc <__libc_init_array+0x40>)
 8003bce:	4c0c      	ldr	r4, [pc, #48]	; (8003c00 <__libc_init_array+0x44>)
 8003bd0:	f000 f818 	bl	8003c04 <_init>
 8003bd4:	1b64      	subs	r4, r4, r5
 8003bd6:	10a4      	asrs	r4, r4, #2
 8003bd8:	2600      	movs	r6, #0
 8003bda:	42a6      	cmp	r6, r4
 8003bdc:	d105      	bne.n	8003bea <__libc_init_array+0x2e>
 8003bde:	bd70      	pop	{r4, r5, r6, pc}
 8003be0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003be4:	4798      	blx	r3
 8003be6:	3601      	adds	r6, #1
 8003be8:	e7ee      	b.n	8003bc8 <__libc_init_array+0xc>
 8003bea:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bee:	4798      	blx	r3
 8003bf0:	3601      	adds	r6, #1
 8003bf2:	e7f2      	b.n	8003bda <__libc_init_array+0x1e>
 8003bf4:	08004930 	.word	0x08004930
 8003bf8:	08004930 	.word	0x08004930
 8003bfc:	08004930 	.word	0x08004930
 8003c00:	08004934 	.word	0x08004934

08003c04 <_init>:
 8003c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c06:	bf00      	nop
 8003c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c0a:	bc08      	pop	{r3}
 8003c0c:	469e      	mov	lr, r3
 8003c0e:	4770      	bx	lr

08003c10 <_fini>:
 8003c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c12:	bf00      	nop
 8003c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c16:	bc08      	pop	{r3}
 8003c18:	469e      	mov	lr, r3
 8003c1a:	4770      	bx	lr
